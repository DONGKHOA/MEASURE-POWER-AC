
MEASURE_POWER_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08008110  08008110  00009110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008680  08008680  0000a298  2**0
                  CONTENTS
  4 .ARM          00000008  08008680  08008680  00009680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008688  08008688  0000a298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008688  08008688  00009688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800868c  0800868c  0000968c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000298  20000000  08008690  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000298  08008928  0000a298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ec  08008928  0000a8ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbc8  00000000  00000000  0000a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003192  00000000  00000000  00015e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00019020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bd  00000000  00000000  00019da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c69  00000000  00000000  0001a765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d145  00000000  00000000  000313ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ef39  00000000  00000000  0003e513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad44c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  000ad490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b1c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	080080f4 	.word	0x080080f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	080080f4 	.word	0x080080f4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2uiz>:
 80010e4:	0042      	lsls	r2, r0, #1
 80010e6:	d20e      	bcs.n	8001106 <__aeabi_f2uiz+0x22>
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30b      	bcc.n	8001106 <__aeabi_f2uiz+0x22>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d409      	bmi.n	800110c <__aeabi_f2uiz+0x28>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	fa23 f002 	lsr.w	r0, r3, r2
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2uiz+0x32>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d102      	bne.n	800111c <__aeabi_f2uiz+0x38>
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	4770      	bx	lr
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  char          *pcChar;
  uint_fast8_t   ui8Argc;
  bool           bFindArg = true;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]

  /**
   * Initialize the argument counter, and point to the beginning of the
   * command line string.
   */
  ui8Argc = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  pcChar  = pcCmdLine;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	617b      	str	r3, [r7, #20]

  /**
   * Advance through the command line until a zero character is found.
   */
  while (*pcChar)
 8001138:	e01f      	b.n	800117a <CmdLineProcess+0x56>
  {
    /**
     * If there is a space, then replace it with a zero, and set the flag
     * to search for the next argument.
     */
    if (*pcChar == ' ')
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d105      	bne.n	800114e <CmdLineProcess+0x2a>
    {
      *pcChar  = 0;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
      bFindArg = true;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e012      	b.n	8001174 <CmdLineProcess+0x50>
    {
      /**
       * If bFindArg is set, then that means we are looking for the start
       * of the next argument.
       */
      if (bFindArg)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00f      	beq.n	8001174 <CmdLineProcess+0x50>
        /**
         * As long as the maximum number of arguments has not been
         * reached, then save the pointer to the start of this new arg
         * in the argv array, and increment the count of args, argc.
         */
        if (ui8Argc < CMDLINE_MAX_ARGS)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	2b07      	cmp	r3, #7
 8001158:	d80a      	bhi.n	8001170 <CmdLineProcess+0x4c>
        {
          g_ppcArgv[ui8Argc] = pcChar;
 800115a:	491d      	ldr	r1, [pc, #116]	@ (80011d0 <CmdLineProcess+0xac>)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          ui8Argc++;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	3301      	adds	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
          bFindArg = false;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <CmdLineProcess+0x50>
         * The maximum number of arguments has been reached so return
         * the error.
         */
        else
        {
          return (CMDLINE_TOO_MANY_ARGS);
 8001170:	2302      	movs	r3, #2
 8001172:	e028      	b.n	80011c6 <CmdLineProcess+0xa2>
      }
    }
    /**
     * Advance to the next character in the command line.
     */
    pcChar++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (*pcChar)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1db      	bne.n	800113a <CmdLineProcess+0x16>
  }

  /**
   * If one or more arguments was found, then process the command.
   */
  if (ui8Argc)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01d      	beq.n	80011c4 <CmdLineProcess+0xa0>
  {
    /**
     * Start at the beginning of the command table, to look for a matching
     * command.
     */
    psCmdEntry = &g_psCmdTable[0];
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <CmdLineProcess+0xb0>)
 800118a:	60bb      	str	r3, [r7, #8]

    /**
     * Search through the command table until a null command string is
     * found, which marks the end of the table.
     */
    while (psCmdEntry->pcCmd)
 800118c:	e016      	b.n	80011bc <CmdLineProcess+0x98>
      /**
       * If this command entry command string matches argv[0], then call
       * the function for this command, passing the command line
       * arguments.
       */
      if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <CmdLineProcess+0xac>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7fe ffd9 	bl	8000150 <strcmp>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d108      	bne.n	80011b6 <CmdLineProcess+0x92>
      {
        return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4909      	ldr	r1, [pc, #36]	@ (80011d0 <CmdLineProcess+0xac>)
 80011ac:	4610      	mov	r0, r2
 80011ae:	4798      	blx	r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	e007      	b.n	80011c6 <CmdLineProcess+0xa2>
      }
      /**
       * Not found, so advance to the next entry.
       */
      psCmdEntry++;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	330c      	adds	r3, #12
 80011ba:	60bb      	str	r3, [r7, #8]
    while (psCmdEntry->pcCmd)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e4      	bne.n	800118e <CmdLineProcess+0x6a>

  /**
   * Fall through to here means that no matching command was found, so return
   * an error.
   */
  return (CMDLINE_BAD_CMD);
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002b4 	.word	0x200002b4
 80011d4:	20000028 	.word	0x20000028

080011d8 <APP_COMMAND_Init>:
 * The function `APP_COMMAND_Init` initializes UART configuration and sends a
 * string message for LLC control firmware.
 */
void
APP_COMMAND_Init (void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uart_cfg_cml = (uart_cfg_t *)&s_data_system.s_uart_cmd;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011de:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <APP_COMMAND_Init+0x34>)
 80011e0:	601a      	str	r2, [r3, #0]
  BSP_UART_Config(uart_cfg_cml, USART3, USART3_IRQn);
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2227      	movs	r2, #39	@ 0x27
 80011e8:	4909      	ldr	r1, [pc, #36]	@ (8001210 <APP_COMMAND_Init+0x38>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 ff6d 	bl	80030ca <BSP_UART_Config>
  BSP_UART_SendString(uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4907      	ldr	r1, [pc, #28]	@ (8001214 <APP_COMMAND_Init+0x3c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ffd1 	bl	800319e <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <APP_COMMAND_Init+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200003d8 	.word	0x200003d8
 800120c:	200005bc 	.word	0x200005bc
 8001210:	40004800 	.word	0x40004800
 8001214:	08008254 	.word	0x08008254
 8001218:	200003d7 	.word	0x200003d7

0800121c <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 8001220:	4902      	ldr	r1, [pc, #8]	@ (800122c <APP_COMMAND_CreateTask+0x10>)
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <APP_COMMAND_CreateTask+0x14>)
 8001224:	f003 ffec 	bl	8005200 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000001c 	.word	0x2000001c
 8001230:	20000018 	.word	0x20000018

08001234 <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(uart_cfg_cml, "\nAvailable commands\r\n");
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4918      	ldr	r1, [pc, #96]	@ (80012a4 <APP_COMMAND_Help+0x70>)
 8001244:	4618      	mov	r0, r3
 8001246:	f001 ffaa 	bl	800319e <BSP_UART_SendString>
  BSP_UART_SendString(uart_cfg_cml, "------------------\r\n");
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4916      	ldr	r1, [pc, #88]	@ (80012a8 <APP_COMMAND_Help+0x74>)
 8001250:	4618      	mov	r0, r3
 8001252:	f001 ffa4 	bl	800319e <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <APP_COMMAND_Help+0x78>)
 8001258:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 800125a:	e018      	b.n	800128e <APP_COMMAND_Help+0x5a>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcCmd);
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f001 ff99 	bl	800319e <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcHelp);
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f001 ff91 	bl	800319e <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, "\r\n");
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	490b      	ldr	r1, [pc, #44]	@ (80012b0 <APP_COMMAND_Help+0x7c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f001 ff8b 	bl	800319e <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	330c      	adds	r3, #12
 800128c:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e2      	bne.n	800125c <APP_COMMAND_Help+0x28>
  }

  return (CMDLINE_OK);
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200003d8 	.word	0x200003d8
 80012a4:	08008270 	.word	0x08008270
 80012a8:	08008288 	.word	0x08008288
 80012ac:	20000028 	.word	0x20000028
 80012b0:	080082a0 	.word	0x080082a0

080012b4 <APP_COMMAND_ReadVoltage>:

int
APP_COMMAND_ReadVoltage (int argc, char *argv[])
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dc01      	bgt.n	80012c8 <APP_COMMAND_ReadVoltage+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e01a      	b.n	80012fe <APP_COMMAND_ReadVoltage+0x4a>
  }
  if (argc > 1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	dd01      	ble.n	80012d2 <APP_COMMAND_ReadVoltage+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80012ce:	2302      	movs	r3, #2
 80012d0:	e015      	b.n	80012fe <APP_COMMAND_ReadVoltage+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "Voltage: %.2f\n\r", s_data_system.f_voltage);
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <APP_COMMAND_ReadVoltage+0x54>)
 80012d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8af 	bl	800043c <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	f107 0008 	add.w	r0, r7, #8
 80012e6:	4909      	ldr	r1, [pc, #36]	@ (800130c <APP_COMMAND_ReadVoltage+0x58>)
 80012e8:	f004 fdce 	bl	8005e88 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <APP_COMMAND_ReadVoltage+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f107 0208 	add.w	r2, r7, #8
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 ff51 	bl	800319e <BSP_UART_SendString>

  return (CMDLINE_OK);
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3728      	adds	r7, #40	@ 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200003ec 	.word	0x200003ec
 800130c:	080082a4 	.word	0x080082a4
 8001310:	200003d8 	.word	0x200003d8

08001314 <APP_COMMAND_ReadCurrent>:

int
APP_COMMAND_ReadCurrent (int argc, char *argv[])
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dc01      	bgt.n	8001328 <APP_COMMAND_ReadCurrent+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001324:	2303      	movs	r3, #3
 8001326:	e01a      	b.n	800135e <APP_COMMAND_ReadCurrent+0x4a>
  }
  if (argc > 1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b01      	cmp	r3, #1
 800132c:	dd01      	ble.n	8001332 <APP_COMMAND_ReadCurrent+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800132e:	2302      	movs	r3, #2
 8001330:	e015      	b.n	800135e <APP_COMMAND_ReadCurrent+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "Current: %.2f\n\r", s_data_system.f_current);
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <APP_COMMAND_ReadCurrent+0x54>)
 8001334:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f87f 	bl	800043c <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	f107 0008 	add.w	r0, r7, #8
 8001346:	4909      	ldr	r1, [pc, #36]	@ (800136c <APP_COMMAND_ReadCurrent+0x58>)
 8001348:	f004 fd9e 	bl	8005e88 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <APP_COMMAND_ReadCurrent+0x5c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f107 0208 	add.w	r2, r7, #8
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f001 ff21 	bl	800319e <BSP_UART_SendString>

  return (CMDLINE_OK);
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	@ 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200003ec 	.word	0x200003ec
 800136c:	080082b4 	.word	0x080082b4
 8001370:	200003d8 	.word	0x200003d8

08001374 <APP_COMMAND_ReadPF>:

int
APP_COMMAND_ReadPF (int argc, char *argv[])
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dc01      	bgt.n	8001388 <APP_COMMAND_ReadPF+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001384:	2303      	movs	r3, #3
 8001386:	e01a      	b.n	80013be <APP_COMMAND_ReadPF+0x4a>
  }
  if (argc > 1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	dd01      	ble.n	8001392 <APP_COMMAND_ReadPF+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800138e:	2302      	movs	r3, #2
 8001390:	e015      	b.n	80013be <APP_COMMAND_ReadPF+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "POWER FACTOR: %.2f\n\r", s_data_system.f_delta_T_PF);
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <APP_COMMAND_ReadPF+0x54>)
 8001394:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f84f 	bl	800043c <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	f107 0008 	add.w	r0, r7, #8
 80013a6:	4909      	ldr	r1, [pc, #36]	@ (80013cc <APP_COMMAND_ReadPF+0x58>)
 80013a8:	f004 fd6e 	bl	8005e88 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <APP_COMMAND_ReadPF+0x5c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f107 0208 	add.w	r2, r7, #8
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 fef1 	bl	800319e <BSP_UART_SendString>

  return (CMDLINE_OK);
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200003ec 	.word	0x200003ec
 80013cc:	080082c4 	.word	0x080082c4
 80013d0:	200003d8 	.word	0x200003d8

080013d4 <APP_COMMAND_TaskUpdate>:
 * processes commands based on the received data, and sends responses back
 * through UART.
 */
static void
APP_COMMAND_TaskUpdate (void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80013da:	e067      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
  {
    rxData = BSP_UART_ReadChar(uart_cfg_cml);
 80013dc:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fef3 	bl	80031cc <BSP_UART_ReadChar>
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(uart_cfg_cml, rxData);
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fe9d 	bl	8003132 <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b0d      	cmp	r3, #13
 80013fc:	d002      	beq.n	8001404 <APP_COMMAND_TaskUpdate+0x30>
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d136      	bne.n	8001472 <APP_COMMAND_TaskUpdate+0x9e>
    {
      if (s_commandBufferIndex > 0)
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02b      	beq.n	8001464 <APP_COMMAND_TaskUpdate+0x90>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <APP_COMMAND_TaskUpdate+0xfc>)
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]
        s_commandBufferIndex++;
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001422:	701a      	strb	r2, [r3, #0]
        retVal               = CmdLineProcess(s_commandBuffer);
 8001424:	482a      	ldr	r0, [pc, #168]	@ (80014d0 <APP_COMMAND_TaskUpdate+0xfc>)
 8001426:	f7ff fe7d 	bl	8001124 <CmdLineProcess>
 800142a:	4603      	mov	r3, r0
 800142c:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

        // Send status command in terminal.
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4926      	ldr	r1, [pc, #152]	@ (80014d4 <APP_COMMAND_TaskUpdate+0x100>)
 800143a:	4618      	mov	r0, r3
 800143c:	f001 feaf 	bl	800319e <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, ErrorCode[retVal]);
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001448:	4923      	ldr	r1, [pc, #140]	@ (80014d8 <APP_COMMAND_TaskUpdate+0x104>)
 800144a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f001 fea4 	bl	800319e <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, "> ");
 8001456:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4920      	ldr	r1, [pc, #128]	@ (80014dc <APP_COMMAND_TaskUpdate+0x108>)
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fe9e 	bl	800319e <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001462:	e023      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      }
      else
      {
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	491a      	ldr	r1, [pc, #104]	@ (80014d4 <APP_COMMAND_TaskUpdate+0x100>)
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fe97 	bl	800319e <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001470:	e01c      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      }
    }
    else if ((rxData == 8)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d002      	beq.n	800147e <APP_COMMAND_TaskUpdate+0xaa>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b7f      	cmp	r3, #127	@ 0x7f
 800147c:	d10a      	bne.n	8001494 <APP_COMMAND_TaskUpdate+0xc0>
    {
      if (s_commandBufferIndex > 0)
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d012      	beq.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      {
        s_commandBufferIndex--;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3b01      	subs	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001490:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 8001492:	e00b      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 8001494:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4a0d      	ldr	r2, [pc, #52]	@ (80014d0 <APP_COMMAND_TaskUpdate+0xfc>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 80014aa:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fe2c 	bl	800310e <BSP_UART_IsAvailableDataReceive>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d18f      	bne.n	80013dc <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200003d8 	.word	0x200003d8
 80014cc:	200003d7 	.word	0x200003d7
 80014d0:	200002d8 	.word	0x200002d8
 80014d4:	080082dc 	.word	0x080082dc
 80014d8:	20000000 	.word	0x20000000
 80014dc:	080082e4 	.word	0x080082e4

080014e0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	bf0c      	ite	eq
 80014f6:	2301      	moveq	r3, #1
 80014f8:	2300      	movne	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40010400 	.word	0x40010400

0800150c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001514:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6153      	str	r3, [r2, #20]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 0201 	bic.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <LL_TIM_IsEnabledCounter+0x18>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_TIM_IsEnabledCounter+0x1a>
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <APP_CALCULATOR_PF_CreateTask>:
 * The function APP_CALCULATOR_PF_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_CALCULATOR_PF_CreateTask (void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 80015bc:	4902      	ldr	r1, [pc, #8]	@ (80015c8 <APP_CALCULATOR_PF_CreateTask+0x10>)
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <APP_CALCULATOR_PF_CreateTask+0x14>)
 80015c0:	f003 fe1e 	bl	8005200 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000005c 	.word	0x2000005c
 80015cc:	20000058 	.word	0x20000058

080015d0 <APP_CALCULATOR_PF_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_CALCULATOR_PF_Init (void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_calculator_pf.p_PF_buffer     = &s_data_system.s_PF_buffer;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <APP_CALCULATOR_PF_Init+0x34>)
 80015d8:	605a      	str	r2, [r3, #4]
  s_calculator_pf.p_PF_buffer_irq = &s_data_system.s_PF_buffer_irq;
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <APP_CALCULATOR_PF_Init+0x38>)
 80015de:	601a      	str	r2, [r3, #0]
  s_calculator_pf.p_delta_T       = &s_data_system.f_delta_T_PF;
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <APP_CALCULATOR_PF_Init+0x3c>)
 80015e4:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer);
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fd52 	bl	8005094 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fd4d 	bl	8005094 <RING_BUFFER_Init>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200003dc 	.word	0x200003dc
 8001604:	20000438 	.word	0x20000438
 8001608:	200003ec 	.word	0x200003ec
 800160c:	20000664 	.word	0x20000664

08001610 <APP_CALCULATOR_PF_EXTI_IRQHandler>:
 * The function `APP_CALCULATOR_PF_EXTI_IRQHandler` handles EXTI interrupts for
 * lines 5 and 6, updating a buffer with timer values.
 */
void
APP_CALCULATOR_PF_EXTI_IRQHandler (void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001614:	2020      	movs	r0, #32
 8001616:	f7ff ff63 	bl	80014e0 <LL_EXTI_IsActiveFlag_0_31>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03a      	beq.n	8001696 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x86>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001620:	2020      	movs	r0, #32
 8001622:	f7ff ff73 	bl	800150c <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 8001626:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800162a:	f7ff ff9b 	bl	8001564 <LL_TIM_IsEnabledCounter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d027      	beq.n	8001684 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x74>
    {
      LL_TIM_DisableCounter(TIM2);
 8001634:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001638:	f7ff ff85 	bl	8001546 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)(LL_TIM_GetCounter(TIM2) >> 8);
 800163c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001640:	f7ff ffaf 	bl	80015a2 <LL_TIM_GetCounter>
 8001644:	4603      	mov	r3, r0
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 800164c:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)LL_TIM_GetCounter(TIM2);
 800164e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001652:	f7ff ffa6 	bl	80015a2 <LL_TIM_GetCounter>
 8001656:	4603      	mov	r3, r0
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 800165c:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001660:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 8001662:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001664:	7a12      	ldrb	r2, [r2, #8]
 8001666:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fd56 	bl	800511c <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001670:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001672:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 8001674:	4a2b      	ldr	r2, [pc, #172]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001676:	7a52      	ldrb	r2, [r2, #9]
 8001678:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f003 fd4d 	bl	800511c <RING_BUFFER_Push_Data>
 8001682:	e008      	b.n	8001696 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x86>
    }
    else
    {
      START_COUNTER(TIM2)
 8001684:	2100      	movs	r1, #0
 8001686:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800168a:	f7ff ff7d 	bl	8001588 <LL_TIM_SetCounter>
 800168e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001692:	f7ff ff49 	bl	8001528 <LL_TIM_EnableCounter>
    }
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001696:	2040      	movs	r0, #64	@ 0x40
 8001698:	f7ff ff22 	bl	80014e0 <LL_EXTI_IsActiveFlag_0_31>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03d      	beq.n	800171e <APP_CALCULATOR_PF_EXTI_IRQHandler+0x10e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80016a2:	2040      	movs	r0, #64	@ 0x40
 80016a4:	f7ff ff32 	bl	800150c <LL_EXTI_ClearFlag_0_31>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80016a8:	2020      	movs	r0, #32
 80016aa:	f7ff ff2f 	bl	800150c <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 80016ae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016b2:	f7ff ff57 	bl	8001564 <LL_TIM_IsEnabledCounter>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d027      	beq.n	800170c <APP_CALCULATOR_PF_EXTI_IRQHandler+0xfc>
    {
      LL_TIM_DisableCounter(TIM2);
 80016bc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016c0:	f7ff ff41 	bl	8001546 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)(LL_TIM_GetCounter(TIM2) >> 8);
 80016c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016c8:	f7ff ff6b 	bl	80015a2 <LL_TIM_GetCounter>
 80016cc:	4603      	mov	r3, r0
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016d4:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)LL_TIM_GetCounter(TIM2);
 80016d6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016da:	f7ff ff62 	bl	80015a2 <LL_TIM_GetCounter>
 80016de:	4603      	mov	r3, r0
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016e4:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016e8:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016ec:	7a12      	ldrb	r2, [r2, #8]
 80016ee:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fd12 	bl	800511c <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016fa:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 80016fc:	4a09      	ldr	r2, [pc, #36]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016fe:	7a52      	ldrb	r2, [r2, #9]
 8001700:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fd09 	bl	800511c <RING_BUFFER_Push_Data>
    else
    {
      START_COUNTER(TIM2)
    }
  }
}
 800170a:	e008      	b.n	800171e <APP_CALCULATOR_PF_EXTI_IRQHandler+0x10e>
      START_COUNTER(TIM2)
 800170c:	2100      	movs	r1, #0
 800170e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001712:	f7ff ff39 	bl	8001588 <LL_TIM_SetCounter>
 8001716:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800171a:	f7ff ff05 	bl	8001528 <LL_TIM_EnableCounter>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200003dc 	.word	0x200003dc

08001728 <APP_CALCULATOR_PF_TaskUpdate>:
 * APP_CALCULATOR_PF_TaskUpdate will return without performing any further
 * operations.
 */
static void
APP_CALCULATOR_PF_TaskUpdate (void)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq))
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fcd2 	bl	80050dc <RING_BUFFER_Is_Empty>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d155      	bne.n	80017ea <APP_CALCULATOR_PF_TaskUpdate+0xc2>
  uint16_t  u16_value_temp;
  uint8_t   u8_value[2];

  // u8_value[0] 8 bit high of delta_T
  u8_value[0]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 800173e:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fd0f 	bl	8005166 <RING_BUFFER_Pull_Data>
 8001748:	4603      	mov	r3, r0
 800174a:	713b      	strb	r3, [r7, #4]

  // u8_value[1] 8 bit low of delta_T
  u8_value[1]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 800174c:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fd08 	bl	8005166 <RING_BUFFER_Pull_Data>
 8001756:	4603      	mov	r3, r0
 8001758:	717b      	strb	r3, [r7, #5]

  u16_value_temp = (uint16_t)((u8_value[0] << 8) | (u8_value[1]));
 800175a:	793b      	ldrb	r3, [r7, #4]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	797b      	ldrb	r3, [r7, #5]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21b      	sxth	r3, r3
 8001768:	81fb      	strh	r3, [r7, #14]

  *s_calculator_pf.p_delta_T = (float)u16_value_temp / FREQUENCY_TIMER;
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fa9b 	bl	8000ca8 <__aeabi_ui2f>
 8001772:	4603      	mov	r3, r0
 8001774:	4a1f      	ldr	r2, [pc, #124]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001776:	68d4      	ldr	r4, [r2, #12]
 8001778:	491f      	ldr	r1, [pc, #124]	@ (80017f8 <APP_CALCULATOR_PF_TaskUpdate+0xd0>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fba0 	bl	8000ec0 <__aeabi_fdiv>
 8001780:	4603      	mov	r3, r0
 8001782:	6023      	str	r3, [r4, #0]

  // Transmission Data to app_data_transmission
  p_value_temp = (uint32_t *)s_calculator_pf.p_delta_T;
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0e1b      	lsrs	r3, r3, #24
 8001790:	b2db      	uxtb	r3, r3
 8001792:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	b2db      	uxtb	r3, r3
 800179c:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017b0:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017b2:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 80017b4:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 fcaf 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017c0:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 80017c2:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fca8 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017cc:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017ce:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 80017d0:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fca1 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017dc:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 80017de:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fc9a 	bl	800511c <RING_BUFFER_Push_Data>
 80017e8:	e000      	b.n	80017ec <APP_CALCULATOR_PF_TaskUpdate+0xc4>
    return;
 80017ea:	bf00      	nop
}
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200003dc 	.word	0x200003dc
 80017f8:	42600000 	.word	0x42600000

080017fc <APP_DATA_TRANS_REC_CreateTask>:
 * The function APP_DATA_TRANS_REC_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_DATA_TRANS_REC_CreateTask (void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001800:	4902      	ldr	r1, [pc, #8]	@ (800180c <APP_DATA_TRANS_REC_CreateTask+0x10>)
 8001802:	4803      	ldr	r0, [pc, #12]	@ (8001810 <APP_DATA_TRANS_REC_CreateTask+0x14>)
 8001804:	f003 fcfc 	bl	8005200 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000006c 	.word	0x2000006c
 8001810:	20000068 	.word	0x20000068

08001814 <APP_DATA_TRANS_REC_Init>:

void
APP_DATA_TRANS_REC_Init (void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_data_trans_rec.p_PF_buffer           = &s_data_system.s_PF_buffer;
 8001818:	4b18      	ldr	r3, [pc, #96]	@ (800187c <APP_DATA_TRANS_REC_Init+0x68>)
 800181a:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <APP_DATA_TRANS_REC_Init+0x6c>)
 800181c:	601a      	str	r2, [r3, #0]
  s_data_trans_rec.p_vol_cur_buffer      = &s_data_system.s_vol_cur_buffer;
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <APP_DATA_TRANS_REC_Init+0x68>)
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <APP_DATA_TRANS_REC_Init+0x70>)
 8001822:	605a      	str	r2, [r3, #4]
  s_data_trans_rec.p_uart_data_trans_rec = &s_data_system.s_uart_data_trans_rec;
 8001824:	4b15      	ldr	r3, [pc, #84]	@ (800187c <APP_DATA_TRANS_REC_Init+0x68>)
 8001826:	4a18      	ldr	r2, [pc, #96]	@ (8001888 <APP_DATA_TRANS_REC_Init+0x74>)
 8001828:	609a      	str	r2, [r3, #8]

  // Reset data filed of variable s_data_trans_rec
  s_data_trans_rec.flag_update_PF      = FLAG_NOT_UPDATED;
 800182a:	4a14      	ldr	r2, [pc, #80]	@ (800187c <APP_DATA_TRANS_REC_Init+0x68>)
 800182c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001830:	f36f 1304 	bfc	r3, #4, #1
 8001834:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  s_data_trans_rec.flag_update_vol_cur = FLAG_NOT_UPDATED;
 8001838:	4a10      	ldr	r2, [pc, #64]	@ (800187c <APP_DATA_TRANS_REC_Init+0x68>)
 800183a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800183e:	f36f 1345 	bfc	r3, #5, #1
 8001842:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  s_data_trans_rec.u8_index_data_rec   = 0;
 8001846:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <APP_DATA_TRANS_REC_Init+0x68>)
 8001848:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800184c:	f36f 0303 	bfc	r3, #0, #4
 8001850:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  memset((uint8_t *)s_data_trans_rec.u8_data_transmission,
 8001854:	2210      	movs	r2, #16
 8001856:	2100      	movs	r1, #0
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <APP_DATA_TRANS_REC_Init+0x78>)
 800185a:	f004 fb78 	bl	8005f4e <memset>
         0,
         sizeof(s_data_trans_rec.u8_data_transmission));
  memset((uint8_t *)s_data_trans_rec.u8_data_rec,
 800185e:	2210      	movs	r2, #16
 8001860:	2100      	movs	r1, #0
 8001862:	480b      	ldr	r0, [pc, #44]	@ (8001890 <APP_DATA_TRANS_REC_Init+0x7c>)
 8001864:	f004 fb73 	bl	8005f4e <memset>
         0,
         sizeof(s_data_trans_rec.u8_data_rec));

  // Config UART
  BSP_UART_Config((uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec,
 8001868:	4b04      	ldr	r3, [pc, #16]	@ (800187c <APP_DATA_TRANS_REC_Init+0x68>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2225      	movs	r2, #37	@ 0x25
 800186e:	4909      	ldr	r1, [pc, #36]	@ (8001894 <APP_DATA_TRANS_REC_Init+0x80>)
 8001870:	4618      	mov	r0, r3
 8001872:	f001 fc2a 	bl	80030ca <BSP_UART_Config>
                  USART1,
                  USART1_IRQn);
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000670 	.word	0x20000670
 8001880:	20000438 	.word	0x20000438
 8001884:	200004d0 	.word	0x200004d0
 8001888:	2000051c 	.word	0x2000051c
 800188c:	2000067c 	.word	0x2000067c
 8001890:	2000068c 	.word	0x2000068c
 8001894:	40013800 	.word	0x40013800

08001898 <APP_DATA_TRANS_REC_TaskUpdate>:
 * 2. Receives data from UART, processes the received packet, and updates the
 * system's power value.
 */
static void
APP_DATA_TRANS_REC_TaskUpdate (void)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
   * @details
   * - Check if the voltage and current buffer is not empty.
   * - Read 4 bytes of voltage data and append '\r'.
   * - Read 4 bytes of current data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer))
 800189e:	4b8b      	ldr	r3, [pc, #556]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 fc1a 	bl	80050dc <RING_BUFFER_Is_Empty>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f083 0301 	eor.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d054      	beq.n	800195e <APP_DATA_TRANS_REC_TaskUpdate+0xc6>
  {
    // Read voltage
    s_data_trans_rec.u8_data_transmission[0] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80018b4:	4b85      	ldr	r3, [pc, #532]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018b6:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[0] = RING_BUFFER_Pull_Data(
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 fc54 	bl	8005166 <RING_BUFFER_Pull_Data>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b82      	ldr	r3, [pc, #520]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018c4:	731a      	strb	r2, [r3, #12]
    s_data_trans_rec.u8_data_transmission[1] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80018c6:	4b81      	ldr	r3, [pc, #516]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018c8:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[1] = RING_BUFFER_Pull_Data(
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 fc4b 	bl	8005166 <RING_BUFFER_Pull_Data>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b7d      	ldr	r3, [pc, #500]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018d6:	735a      	strb	r2, [r3, #13]
    s_data_trans_rec.u8_data_transmission[2] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80018d8:	4b7c      	ldr	r3, [pc, #496]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018da:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[2] = RING_BUFFER_Pull_Data(
 80018dc:	4618      	mov	r0, r3
 80018de:	f003 fc42 	bl	8005166 <RING_BUFFER_Pull_Data>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b79      	ldr	r3, [pc, #484]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018e8:	739a      	strb	r2, [r3, #14]
    s_data_trans_rec.u8_data_transmission[3] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80018ea:	4b78      	ldr	r3, [pc, #480]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018ec:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[3] = RING_BUFFER_Pull_Data(
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 fc39 	bl	8005166 <RING_BUFFER_Pull_Data>
 80018f4:	4603      	mov	r3, r0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4b74      	ldr	r3, [pc, #464]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018fa:	73da      	strb	r2, [r3, #15]
    s_data_trans_rec.u8_data_transmission[4] = '\r';
 80018fc:	4b73      	ldr	r3, [pc, #460]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018fe:	220d      	movs	r2, #13
 8001900:	741a      	strb	r2, [r3, #16]

    // Read current
    s_data_trans_rec.u8_data_transmission[5] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001902:	4b72      	ldr	r3, [pc, #456]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001904:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[5] = RING_BUFFER_Pull_Data(
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fc2d 	bl	8005166 <RING_BUFFER_Pull_Data>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	4b6e      	ldr	r3, [pc, #440]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001912:	745a      	strb	r2, [r3, #17]
    s_data_trans_rec.u8_data_transmission[6] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001914:	4b6d      	ldr	r3, [pc, #436]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001916:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[6] = RING_BUFFER_Pull_Data(
 8001918:	4618      	mov	r0, r3
 800191a:	f003 fc24 	bl	8005166 <RING_BUFFER_Pull_Data>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	4b6a      	ldr	r3, [pc, #424]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001924:	749a      	strb	r2, [r3, #18]
    s_data_trans_rec.u8_data_transmission[7] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001926:	4b69      	ldr	r3, [pc, #420]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001928:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[7] = RING_BUFFER_Pull_Data(
 800192a:	4618      	mov	r0, r3
 800192c:	f003 fc1b 	bl	8005166 <RING_BUFFER_Pull_Data>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	4b65      	ldr	r3, [pc, #404]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001936:	74da      	strb	r2, [r3, #19]
    s_data_trans_rec.u8_data_transmission[8] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001938:	4b64      	ldr	r3, [pc, #400]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800193a:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[8] = RING_BUFFER_Pull_Data(
 800193c:	4618      	mov	r0, r3
 800193e:	f003 fc12 	bl	8005166 <RING_BUFFER_Pull_Data>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b61      	ldr	r3, [pc, #388]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001948:	751a      	strb	r2, [r3, #20]
    s_data_trans_rec.u8_data_transmission[9] = '\r';
 800194a:	4b60      	ldr	r3, [pc, #384]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800194c:	220d      	movs	r2, #13
 800194e:	755a      	strb	r2, [r3, #21]
    s_data_trans_rec.flag_update_vol_cur     = FLAG_UPDATED;
 8001950:	4a5e      	ldr	r2, [pc, #376]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001952:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  /**
   * @details
   * - Check if the power factor (PF) buffer is not empty.
   * - Read 4 bytes of PF data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans_rec.p_PF_buffer))
 800195e:	4b5b      	ldr	r3, [pc, #364]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fbba 	bl	80050dc <RING_BUFFER_Is_Empty>
 8001968:	4603      	mov	r3, r0
 800196a:	f083 0301 	eor.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02d      	beq.n	80019d0 <APP_DATA_TRANS_REC_TaskUpdate+0x138>
  {
    // Read PF
    s_data_trans_rec.u8_data_transmission[10] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001974:	4b55      	ldr	r3, [pc, #340]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001976:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[10] = RING_BUFFER_Pull_Data(
 8001978:	4618      	mov	r0, r3
 800197a:	f003 fbf4 	bl	8005166 <RING_BUFFER_Pull_Data>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b52      	ldr	r3, [pc, #328]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001984:	759a      	strb	r2, [r3, #22]
    s_data_trans_rec.u8_data_transmission[11] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001986:	4b51      	ldr	r3, [pc, #324]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001988:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[11] = RING_BUFFER_Pull_Data(
 800198a:	4618      	mov	r0, r3
 800198c:	f003 fbeb 	bl	8005166 <RING_BUFFER_Pull_Data>
 8001990:	4603      	mov	r3, r0
 8001992:	461a      	mov	r2, r3
 8001994:	4b4d      	ldr	r3, [pc, #308]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001996:	75da      	strb	r2, [r3, #23]
    s_data_trans_rec.u8_data_transmission[12] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001998:	4b4c      	ldr	r3, [pc, #304]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800199a:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[12] = RING_BUFFER_Pull_Data(
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fbe2 	bl	8005166 <RING_BUFFER_Pull_Data>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b49      	ldr	r3, [pc, #292]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019a8:	761a      	strb	r2, [r3, #24]
    s_data_trans_rec.u8_data_transmission[13] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80019aa:	4b48      	ldr	r3, [pc, #288]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019ac:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[13] = RING_BUFFER_Pull_Data(
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 fbd9 	bl	8005166 <RING_BUFFER_Pull_Data>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461a      	mov	r2, r3
 80019b8:	4b44      	ldr	r3, [pc, #272]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019ba:	765a      	strb	r2, [r3, #25]
    s_data_trans_rec.u8_data_transmission[14] = '\r';
 80019bc:	4b43      	ldr	r3, [pc, #268]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019be:	220d      	movs	r2, #13
 80019c0:	769a      	strb	r2, [r3, #26]
    s_data_trans_rec.flag_update_PF           = FLAG_UPDATED;
 80019c2:	4a42      	ldr	r2, [pc, #264]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019c4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80019c8:	f043 0310 	orr.w	r3, r3, #16
 80019cc:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
   * @details
   * - If both voltage/current and PF data have been updated,
   *   transmit the combined data packet via UART.
   * - Reset the update flags after transmission.
   */
  if ((s_data_trans_rec.flag_update_PF == FLAG_UPDATED)
 80019d0:	4b3e      	ldr	r3, [pc, #248]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019d6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d11b      	bne.n	8001a18 <APP_DATA_TRANS_REC_TaskUpdate+0x180>
      && (s_data_trans_rec.flag_update_vol_cur == FLAG_UPDATED))
 80019e0:	4b3a      	ldr	r3, [pc, #232]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80019e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d113      	bne.n	8001a18 <APP_DATA_TRANS_REC_TaskUpdate+0x180>
  {
    BSP_UART_SendString((uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec,
 80019f0:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4936      	ldr	r1, [pc, #216]	@ (8001ad0 <APP_DATA_TRANS_REC_TaskUpdate+0x238>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 fbd1 	bl	800319e <BSP_UART_SendString>
                        (char *)s_data_trans_rec.u8_data_transmission);
    s_data_trans_rec.flag_update_PF      = FLAG_NOT_UPDATED;
 80019fc:	4a33      	ldr	r2, [pc, #204]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80019fe:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001a02:	f36f 1304 	bfc	r3, #4, #1
 8001a06:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
    s_data_trans_rec.flag_update_vol_cur = FLAG_NOT_UPDATED;
 8001a0a:	4a30      	ldr	r2, [pc, #192]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a0c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001a10:	f36f 1345 	bfc	r3, #5, #1
 8001a14:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
   * - Store received data in a buffer.
   * - If a complete data packet (terminated by '\r') is received,
   *   process the packet and update the power value in the system structure.
   */
  if (BSP_UART_IsAvailableDataReceive(
          (uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec))
 8001a18:	4b2c      	ldr	r3, [pc, #176]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
  if (BSP_UART_IsAvailableDataReceive(
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f001 fb76 	bl	800310e <BSP_UART_IsAvailableDataReceive>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d04c      	beq.n	8001ac2 <APP_DATA_TRANS_REC_TaskUpdate+0x22a>
  {
    s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec]
        = BSP_UART_ReadChar(
            (uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec);
 8001a28:	4b28      	ldr	r3, [pc, #160]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a2a:	689a      	ldr	r2, [r3, #8]
    s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec]
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	461c      	mov	r4, r3
        = BSP_UART_ReadChar(
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f001 fbc6 	bl	80031cc <BSP_UART_ReadChar>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b21      	ldr	r3, [pc, #132]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a46:	4423      	add	r3, r4
 8001a48:	771a      	strb	r2, [r3, #28]

    s_data_trans_rec.u8_index_data_rec++;
 8001a4a:	4b20      	ldr	r3, [pc, #128]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	b2d9      	uxtb	r1, r3
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a60:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001a64:	f361 0303 	bfi	r3, r1, #0, #4
 8001a68:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

    if (s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec - 1]
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a72:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a7c:	4413      	add	r3, r2
 8001a7e:	7f1b      	ldrb	r3, [r3, #28]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b0d      	cmp	r3, #13
 8001a84:	d11d      	bne.n	8001ac2 <APP_DATA_TRANS_REC_TaskUpdate+0x22a>
        == '\r')
    {
      // Convert the received 4 bytes to a float power value
      uint32_t *p_val;
      p_val  = (uint32_t *)&s_data_system.f_power;
 8001a86:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <APP_DATA_TRANS_REC_TaskUpdate+0x23c>)
 8001a88:	607b      	str	r3, [r7, #4]
      *p_val = (uint32_t)((s_data_trans_rec.u8_data_rec[0] << 24)
 8001a8a:	4b10      	ldr	r3, [pc, #64]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a8c:	7f1b      	ldrb	r3, [r3, #28]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	061a      	lsls	r2, r3, #24
                          | (s_data_trans_rec.u8_data_rec[1] << 16)
 8001a92:	4b0e      	ldr	r3, [pc, #56]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a94:	7f5b      	ldrb	r3, [r3, #29]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	431a      	orrs	r2, r3
                          | (s_data_trans_rec.u8_data_rec[2] << 8)
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001a9e:	7f9b      	ldrb	r3, [r3, #30]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	021b      	lsls	r3, r3, #8
 8001aa4:	4313      	orrs	r3, r2
                          | (s_data_trans_rec.u8_data_rec[3] << 0));
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001aa8:	7fd2      	ldrb	r2, [r2, #31]
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	4313      	orrs	r3, r2
      *p_val = (uint32_t)((s_data_trans_rec.u8_data_rec[0] << 24)
 8001aae:	461a      	mov	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	601a      	str	r2, [r3, #0]
      s_data_trans_rec.u8_index_data_rec = 0; // Reset index after processing
 8001ab4:	4a05      	ldr	r2, [pc, #20]	@ (8001acc <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001ab6:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001aba:	f36f 0303 	bfc	r3, #0, #4
 8001abe:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
    }
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd90      	pop	{r4, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000670 	.word	0x20000670
 8001ad0:	2000067c 	.word	0x2000067c
 8001ad4:	20000668 	.word	0x20000668

08001ad8 <BSP_GPIO_SetState>:
   * should be set to a low state (`GPIO_LOW`) or a high state (`GPIO_HIGH`).
   */
  static inline void BSP_GPIO_SetState (GPIO_TypeDef *gpio_port,
                                        uint32_t      gpio_pin,
                                        gpio_state_t  state)
  {
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	71fb      	strb	r3, [r7, #7]
    if (state == GPIO_LOW)
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <BSP_GPIO_SetState+0x1c>
    {
      gpio_port->BSRR = gpio_pin;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	611a      	str	r2, [r3, #16]
    }
    else
    {
      gpio_port->BSRR = gpio_pin << 16;
    }
  }
 8001af2:	e003      	b.n	8001afc <BSP_GPIO_SetState+0x24>
      gpio_port->BSRR = gpio_pin << 16;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	041a      	lsls	r2, r3, #16
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  }
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
	...

08001b08 <APP_LED_7_SEG_Init>:
 * The function initializes the LED 7-segment display by assigning port and pin
 * values and linking a pointer to a system power variable.
 */
void
APP_LED_7_SEG_Init (void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_LED_7SEG.p_power = &s_data_system.f_power;
 8001b0c:	4b32      	ldr	r3, [pc, #200]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b0e:	4a33      	ldr	r2, [pc, #204]	@ (8001bdc <APP_LED_7_SEG_Init+0xd4>)
 8001b10:	669a      	str	r2, [r3, #104]	@ 0x68

  // Reset data filed of s_LED_7SEG
  s_LED_7SEG.p_port_led[0] = PORT_LED_A;
 8001b12:	4b31      	ldr	r3, [pc, #196]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b14:	4a32      	ldr	r2, [pc, #200]	@ (8001be0 <APP_LED_7_SEG_Init+0xd8>)
 8001b16:	635a      	str	r2, [r3, #52]	@ 0x34
  s_LED_7SEG.p_port_led[1] = PORT_LED_B;
 8001b18:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b1a:	4a31      	ldr	r2, [pc, #196]	@ (8001be0 <APP_LED_7_SEG_Init+0xd8>)
 8001b1c:	639a      	str	r2, [r3, #56]	@ 0x38
  s_LED_7SEG.p_port_led[2] = PORT_LED_C;
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b20:	4a2f      	ldr	r2, [pc, #188]	@ (8001be0 <APP_LED_7_SEG_Init+0xd8>)
 8001b22:	63da      	str	r2, [r3, #60]	@ 0x3c
  s_LED_7SEG.p_port_led[3] = PORT_LED_D;
 8001b24:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b26:	4a2e      	ldr	r2, [pc, #184]	@ (8001be0 <APP_LED_7_SEG_Init+0xd8>)
 8001b28:	641a      	str	r2, [r3, #64]	@ 0x40
  s_LED_7SEG.p_port_led[4] = PORT_LED_E;
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001be0 <APP_LED_7_SEG_Init+0xd8>)
 8001b2e:	645a      	str	r2, [r3, #68]	@ 0x44
  s_LED_7SEG.p_port_led[5] = PORT_LED_F;
 8001b30:	4b29      	ldr	r3, [pc, #164]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b32:	4a2b      	ldr	r2, [pc, #172]	@ (8001be0 <APP_LED_7_SEG_Init+0xd8>)
 8001b34:	649a      	str	r2, [r3, #72]	@ 0x48
  s_LED_7SEG.p_port_led[6] = PORT_LED_G;
 8001b36:	4b28      	ldr	r3, [pc, #160]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b38:	4a2a      	ldr	r2, [pc, #168]	@ (8001be4 <APP_LED_7_SEG_Init+0xdc>)
 8001b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  s_LED_7SEG.p_port_led[7] = PORT_LED_DP;
 8001b3c:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b3e:	4a28      	ldr	r2, [pc, #160]	@ (8001be0 <APP_LED_7_SEG_Init+0xd8>)
 8001b40:	651a      	str	r2, [r3, #80]	@ 0x50

  s_LED_7SEG.u32_pin_led[0] = PIN_LED_A;
 8001b42:	4b25      	ldr	r3, [pc, #148]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b44:	4a28      	ldr	r2, [pc, #160]	@ (8001be8 <APP_LED_7_SEG_Init+0xe0>)
 8001b46:	601a      	str	r2, [r3, #0]
  s_LED_7SEG.u32_pin_led[1] = PIN_LED_B;
 8001b48:	4b23      	ldr	r3, [pc, #140]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b4a:	f240 1201 	movw	r2, #257	@ 0x101
 8001b4e:	605a      	str	r2, [r3, #4]
  s_LED_7SEG.u32_pin_led[2] = PIN_LED_C;
 8001b50:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b52:	4a26      	ldr	r2, [pc, #152]	@ (8001bec <APP_LED_7_SEG_Init+0xe4>)
 8001b54:	609a      	str	r2, [r3, #8]
  s_LED_7SEG.u32_pin_led[3] = PIN_LED_D;
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b58:	f240 2202 	movw	r2, #514	@ 0x202
 8001b5c:	60da      	str	r2, [r3, #12]
  s_LED_7SEG.u32_pin_led[4] = PIN_LED_E;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b60:	f240 4204 	movw	r2, #1028	@ 0x404
 8001b64:	611a      	str	r2, [r3, #16]
  s_LED_7SEG.u32_pin_led[5] = PIN_LED_F;
 8001b66:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b68:	4a21      	ldr	r2, [pc, #132]	@ (8001bf0 <APP_LED_7_SEG_Init+0xe8>)
 8001b6a:	615a      	str	r2, [r3, #20]
  s_LED_7SEG.u32_pin_led[6] = PIN_LED_G;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b6e:	4a21      	ldr	r2, [pc, #132]	@ (8001bf4 <APP_LED_7_SEG_Init+0xec>)
 8001b70:	619a      	str	r2, [r3, #24]
  s_LED_7SEG.u32_pin_led[7] = PIN_LED_DP;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b74:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <APP_LED_7_SEG_Init+0xf0>)
 8001b76:	61da      	str	r2, [r3, #28]

  s_LED_7SEG.p_port_control[0] = PORT_CONTROL_0;
 8001b78:	4b17      	ldr	r3, [pc, #92]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8001be4 <APP_LED_7_SEG_Init+0xdc>)
 8001b7c:	655a      	str	r2, [r3, #84]	@ 0x54
  s_LED_7SEG.p_port_control[1] = PORT_CONTROL_1;
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b80:	4a18      	ldr	r2, [pc, #96]	@ (8001be4 <APP_LED_7_SEG_Init+0xdc>)
 8001b82:	659a      	str	r2, [r3, #88]	@ 0x58
  s_LED_7SEG.p_port_control[2] = PORT_CONTROL_2;
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <APP_LED_7_SEG_Init+0xdc>)
 8001b88:	65da      	str	r2, [r3, #92]	@ 0x5c
  s_LED_7SEG.p_port_control[3] = PORT_CONTROL_3;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b8c:	4a15      	ldr	r2, [pc, #84]	@ (8001be4 <APP_LED_7_SEG_Init+0xdc>)
 8001b8e:	661a      	str	r2, [r3, #96]	@ 0x60
  s_LED_7SEG.p_port_control[4] = PORT_CONTROL_4;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b92:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <APP_LED_7_SEG_Init+0xdc>)
 8001b94:	665a      	str	r2, [r3, #100]	@ 0x64

  s_LED_7SEG.u32_pin_control[0] = PIN_CONTROL_0;
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001b98:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001b9c:	621a      	str	r2, [r3, #32]
  s_LED_7SEG.u32_pin_control[1] = PIN_CONTROL_1;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001ba0:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24
  s_LED_7SEG.u32_pin_control[2] = PIN_CONTROL_2;
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001ba8:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001bac:	629a      	str	r2, [r3, #40]	@ 0x28
  s_LED_7SEG.u32_pin_control[3] = PIN_CONTROL_3;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001bb0:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  s_LED_7SEG.u32_pin_control[4] = PIN_CONTROL_4;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001bb8:	f640 0208 	movw	r2, #2056	@ 0x808
 8001bbc:	631a      	str	r2, [r3, #48]	@ 0x30

  s_LED_7SEG.u8_position_led = 0;
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  *s_LED_7SEG.p_power = 0;
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <APP_LED_7_SEG_Init+0xd0>)
 8001bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	200006a0 	.word	0x200006a0
 8001bdc:	20000668 	.word	0x20000668
 8001be0:	40010c00 	.word	0x40010c00
 8001be4:	40010800 	.word	0x40010800
 8001be8:	04400040 	.word	0x04400040
 8001bec:	04200020 	.word	0x04200020
 8001bf0:	04800080 	.word	0x04800080
 8001bf4:	04010001 	.word	0x04010001
 8001bf8:	04100010 	.word	0x04100010

08001bfc <APP_LED_7_SEG_CreateTask>:
 * The function `APP_LED_7_SEG_CreateTask` creates a task using the
 * `SCH_TASK_CreateTask` function.
 */
void
APP_LED_7_SEG_CreateTask (void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001c00:	4902      	ldr	r1, [pc, #8]	@ (8001c0c <APP_LED_7_SEG_CreateTask+0x10>)
 8001c02:	4803      	ldr	r0, [pc, #12]	@ (8001c10 <APP_LED_7_SEG_CreateTask+0x14>)
 8001c04:	f003 fafc 	bl	8005200 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000088 	.word	0x20000088
 8001c10:	20000084 	.word	0x20000084

08001c14 <APP_LED_7SEG_TaskUpdate>:
 *  PRIVATE FUNCTION
 *****************************************************************************/

static void
APP_LED_7SEG_TaskUpdate (void)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
  if (s_LED_7SEG.u8_position_led >= NUMBER_OF_LED)
 8001c1a:	4ba3      	ldr	r3, [pc, #652]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c1c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d903      	bls.n	8001c2e <APP_LED_7SEG_TaskUpdate+0x1a>
  {
    s_LED_7SEG.u8_position_led = 0;
 8001c26:	4ba0      	ldr	r3, [pc, #640]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  }

  if (*s_LED_7SEG.p_power >= 1000)
 8001c2e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	499d      	ldr	r1, [pc, #628]	@ (8001eac <APP_LED_7SEG_TaskUpdate+0x298>)
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fa40 	bl	80010bc <__aeabi_fcmpge>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d06f      	beq.n	8001d22 <APP_LED_7SEG_TaskUpdate+0x10e>
  {
    uint16_t u16_integer = (uint16_t)(*s_LED_7SEG.p_power);
 8001c42:	4b99      	ldr	r3, [pc, #612]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fa4b 	bl	80010e4 <__aeabi_f2uiz>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	80fb      	strh	r3, [r7, #6]
    uint8_t  u8_decimal  = (uint8_t)((*s_LED_7SEG.p_power - u16_integer) * 100);
 8001c52:	4b95      	ldr	r3, [pc, #596]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c56:	681c      	ldr	r4, [r3, #0]
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f828 	bl	8000cb0 <__aeabi_i2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4619      	mov	r1, r3
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7fe ff6d 	bl	8000b44 <__aeabi_fsub>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4990      	ldr	r1, [pc, #576]	@ (8001eb0 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f872 	bl	8000d58 <__aeabi_fmul>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fa34 	bl	80010e4 <__aeabi_f2uiz>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	717b      	strb	r3, [r7, #5]
    uint8_t  u8_number   = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]

    if (s_LED_7SEG.u8_position_led < 1)
 8001c84:	4b88      	ldr	r3, [pc, #544]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c86:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d117      	bne.n	8001cc0 <APP_LED_7SEG_TaskUpdate+0xac>
    {
      u8_number
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001c90:	797c      	ldrb	r4, [r7, #5]
 8001c92:	4b85      	ldr	r3, [pc, #532]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c94:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f000 fa2f 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001ca8:	4b82      	ldr	r3, [pc, #520]	@ (8001eb4 <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001caa:	fba3 2301 	umull	r2, r3, r3, r1
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	1aca      	subs	r2, r1, r3
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001cba:	4613      	mov	r3, r2
 8001cbc:	75fb      	strb	r3, [r7, #23]
 8001cbe:	e018      	b.n	8001cf2 <APP_LED_7SEG_TaskUpdate+0xde>
    }
    else
    {
      u8_number = (u16_integer
                   / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 1))
 8001cc0:	88fc      	ldrh	r4, [r7, #6]
 8001cc2:	4b79      	ldr	r3, [pc, #484]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cc4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	4619      	mov	r1, r3
 8001cd0:	200a      	movs	r0, #10
 8001cd2:	f000 fa15 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	fbb4 f1f3 	udiv	r1, r4, r3
                  % 10;
 8001cdc:	4b75      	ldr	r3, [pc, #468]	@ (8001eb4 <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001cde:	fba3 2301 	umull	r2, r3, r3, r1
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	1aca      	subs	r2, r1, r3
      u8_number = (u16_integer
 8001cee:	4613      	mov	r3, r2
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 f999 	bl	800202c <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 1)
 8001cfa:	4b6b      	ldr	r3, [pc, #428]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cfc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	f040 817a 	bne.w	8001ffc <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001d08:	4b67      	ldr	r3, [pc, #412]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d0a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001d0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d0e:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	4a69      	ldr	r2, [pc, #420]	@ (8001eb8 <APP_LED_7SEG_TaskUpdate+0x2a4>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001d16:	09db      	lsrs	r3, r3, #7
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f7ff fedc 	bl	8001ad8 <BSP_GPIO_SetState>
 8001d20:	e16c      	b.n	8001ffc <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else if (*s_LED_7SEG.p_power >= 100)
 8001d22:	4b61      	ldr	r3, [pc, #388]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4961      	ldr	r1, [pc, #388]	@ (8001eb0 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f9c6 	bl	80010bc <__aeabi_fcmpge>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d06f      	beq.n	8001e16 <APP_LED_7SEG_TaskUpdate+0x202>
  {
    uint16_t u16_integer = (uint16_t)(*s_LED_7SEG.p_power);
 8001d36:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f9d1 	bl	80010e4 <__aeabi_f2uiz>
 8001d42:	4603      	mov	r3, r0
 8001d44:	817b      	strh	r3, [r7, #10]
    uint8_t  u8_decimal  = (uint8_t)((*s_LED_7SEG.p_power - u16_integer) * 100);
 8001d46:	4b58      	ldr	r3, [pc, #352]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d4a:	681c      	ldr	r4, [r3, #0]
 8001d4c:	897b      	ldrh	r3, [r7, #10]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffae 	bl	8000cb0 <__aeabi_i2f>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4620      	mov	r0, r4
 8001d5a:	f7fe fef3 	bl	8000b44 <__aeabi_fsub>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	4953      	ldr	r1, [pc, #332]	@ (8001eb0 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fff8 	bl	8000d58 <__aeabi_fmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f9ba 	bl	80010e4 <__aeabi_f2uiz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	727b      	strb	r3, [r7, #9]
    uint8_t  u8_number   = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	75bb      	strb	r3, [r7, #22]

    if (s_LED_7SEG.u8_position_led < 2)
 8001d78:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d7a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d817      	bhi.n	8001db4 <APP_LED_7SEG_TaskUpdate+0x1a0>
    {
      u8_number
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001d84:	7a7c      	ldrb	r4, [r7, #9]
 8001d86:	4b48      	ldr	r3, [pc, #288]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d88:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	4619      	mov	r1, r3
 8001d90:	200a      	movs	r0, #10
 8001d92:	f000 f9b5 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001d96:	4603      	mov	r3, r0
 8001d98:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001d9c:	4b45      	ldr	r3, [pc, #276]	@ (8001eb4 <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8001da2:	08da      	lsrs	r2, r3, #3
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	1aca      	subs	r2, r1, r3
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001dae:	4613      	mov	r3, r2
 8001db0:	75bb      	strb	r3, [r7, #22]
 8001db2:	e018      	b.n	8001de6 <APP_LED_7SEG_TaskUpdate+0x1d2>
    }
    else
    {
      u8_number = (u16_integer
                   / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001db4:	897c      	ldrh	r4, [r7, #10]
 8001db6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001db8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	3b02      	subs	r3, #2
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f000 f99b 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	fbb4 f1f3 	udiv	r1, r4, r3
                  % 10;
 8001dd0:	4b38      	ldr	r3, [pc, #224]	@ (8001eb4 <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	1aca      	subs	r2, r1, r3
      u8_number = (u16_integer
 8001de2:	4613      	mov	r3, r2
 8001de4:	75bb      	strb	r3, [r7, #22]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001de6:	7dbb      	ldrb	r3, [r7, #22]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f91f 	bl	800202c <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 2)
 8001dee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001df0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	f040 8100 	bne.w	8001ffc <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001dfe:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001e00:	4b29      	ldr	r3, [pc, #164]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001e02:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001e04:	7dbb      	ldrb	r3, [r7, #22]
 8001e06:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb8 <APP_LED_7SEG_TaskUpdate+0x2a4>)
 8001e08:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001e0a:	09db      	lsrs	r3, r3, #7
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f7ff fe62 	bl	8001ad8 <BSP_GPIO_SetState>
 8001e14:	e0f2      	b.n	8001ffc <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else if (*s_LED_7SEG.p_power >= 10)
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4927      	ldr	r1, [pc, #156]	@ (8001ebc <APP_LED_7SEG_TaskUpdate+0x2a8>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f94c 	bl	80010bc <__aeabi_fcmpge>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d07a      	beq.n	8001f20 <APP_LED_7SEG_TaskUpdate+0x30c>
  {
    uint8_t  u8_integer  = (uint8_t)(*s_LED_7SEG.p_power);
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f957 	bl	80010e4 <__aeabi_f2uiz>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]
    uint16_t u16_decimal = (uint16_t)((*s_LED_7SEG.p_power - u8_integer) * 100);
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e3e:	681c      	ldr	r4, [r3, #0]
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe ff34 	bl	8000cb0 <__aeabi_i2f>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	f7fe fe79 	bl	8000b44 <__aeabi_fsub>
 8001e52:	4603      	mov	r3, r0
 8001e54:	4916      	ldr	r1, [pc, #88]	@ (8001eb0 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff7e 	bl	8000d58 <__aeabi_fmul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f940 	bl	80010e4 <__aeabi_f2uiz>
 8001e64:	4603      	mov	r3, r0
 8001e66:	81bb      	strh	r3, [r7, #12]
    uint8_t  u8_number   = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	757b      	strb	r3, [r7, #21]

    if (s_LED_7SEG.u8_position_led < 3)
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001e6e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d823      	bhi.n	8001ec0 <APP_LED_7SEG_TaskUpdate+0x2ac>
    {
      u8_number
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001e78:	89bc      	ldrh	r4, [r7, #12]
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001e7c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4619      	mov	r1, r3
 8001e84:	200a      	movs	r0, #10
 8001e86:	f000 f93b 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001e92:	fba3 2301 	umull	r2, r3, r3, r1
 8001e96:	08da      	lsrs	r2, r3, #3
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	1aca      	subs	r2, r1, r3
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	757b      	strb	r3, [r7, #21]
 8001ea6:	e024      	b.n	8001ef2 <APP_LED_7SEG_TaskUpdate+0x2de>
 8001ea8:	200006a0 	.word	0x200006a0
 8001eac:	447a0000 	.word	0x447a0000
 8001eb0:	42c80000 	.word	0x42c80000
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	20000078 	.word	0x20000078
 8001ebc:	41200000 	.word	0x41200000
    }
    else
    {
      u8_number
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001ec0:	7bfc      	ldrb	r4, [r7, #15]
 8001ec2:	4b56      	ldr	r3, [pc, #344]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001ec4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	3b02      	subs	r3, #2
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	4619      	mov	r1, r3
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f000 f915 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001edc:	4b50      	ldr	r3, [pc, #320]	@ (8002020 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001ede:	fba3 2301 	umull	r2, r3, r3, r1
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	1aca      	subs	r2, r1, r3
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001eee:	4613      	mov	r3, r2
 8001ef0:	757b      	strb	r3, [r7, #21]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001ef2:	7d7b      	ldrb	r3, [r7, #21]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f899 	bl	800202c <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 3)
 8001efa:	4b48      	ldr	r3, [pc, #288]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001efc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d17a      	bne.n	8001ffc <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001f06:	4b45      	ldr	r3, [pc, #276]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f08:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001f0a:	4b44      	ldr	r3, [pc, #272]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f0c:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001f0e:	7d7b      	ldrb	r3, [r7, #21]
 8001f10:	4a44      	ldr	r2, [pc, #272]	@ (8002024 <APP_LED_7SEG_TaskUpdate+0x410>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001f14:	09db      	lsrs	r3, r3, #7
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	f7ff fddd 	bl	8001ad8 <BSP_GPIO_SetState>
 8001f1e:	e06d      	b.n	8001ffc <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else
  {
    uint8_t  u8_integer  = (uint8_t)(*s_LED_7SEG.p_power);
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff f8dc 	bl	80010e4 <__aeabi_f2uiz>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	74fb      	strb	r3, [r7, #19]
    uint16_t u16_decimal = (uint16_t)((*s_LED_7SEG.p_power - u8_integer) * 100);
 8001f30:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f34:	681c      	ldr	r4, [r3, #0]
 8001f36:	7cfb      	ldrb	r3, [r7, #19]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe feb9 	bl	8000cb0 <__aeabi_i2f>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4619      	mov	r1, r3
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7fe fdfe 	bl	8000b44 <__aeabi_fsub>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4937      	ldr	r1, [pc, #220]	@ (8002028 <APP_LED_7SEG_TaskUpdate+0x414>)
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe ff03 	bl	8000d58 <__aeabi_fmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f8c5 	bl	80010e4 <__aeabi_f2uiz>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	823b      	strh	r3, [r7, #16]
    uint8_t  u8_number   = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	753b      	strb	r3, [r7, #20]

    if (s_LED_7SEG.u8_position_led < 4)
 8001f62:	4b2e      	ldr	r3, [pc, #184]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f64:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d817      	bhi.n	8001f9e <APP_LED_7SEG_TaskUpdate+0x38a>
    {
      u8_number
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001f6e:	8a3c      	ldrh	r4, [r7, #16]
 8001f70:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f72:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	4619      	mov	r1, r3
 8001f7a:	200a      	movs	r0, #10
 8001f7c:	f000 f8c0 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001f80:	4603      	mov	r3, r0
 8001f82:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001f86:	4b26      	ldr	r3, [pc, #152]	@ (8002020 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001f88:	fba3 2301 	umull	r2, r3, r3, r1
 8001f8c:	08da      	lsrs	r2, r3, #3
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	1aca      	subs	r2, r1, r3
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001f98:	4613      	mov	r3, r2
 8001f9a:	753b      	strb	r3, [r7, #20]
 8001f9c:	e018      	b.n	8001fd0 <APP_LED_7SEG_TaskUpdate+0x3bc>
    }
    else
    {
      u8_number
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001f9e:	7cfc      	ldrb	r4, [r7, #19]
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001fa2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	3b02      	subs	r3, #2
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4619      	mov	r1, r3
 8001fae:	200a      	movs	r0, #10
 8001fb0:	f000 f8a6 	bl	8002100 <APP_LED_7_SEG_Pow>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001fba:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001fbc:	fba3 2301 	umull	r2, r3, r3, r1
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	1aca      	subs	r2, r1, r3
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001fcc:	4613      	mov	r3, r2
 8001fce:	753b      	strb	r3, [r7, #20]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001fd0:	7d3b      	ldrb	r3, [r7, #20]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f82a 	bl	800202c <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 4)
 8001fd8:	4b10      	ldr	r3, [pc, #64]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001fda:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d10b      	bne.n	8001ffc <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001fe6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8001fea:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001fec:	7d3b      	ldrb	r3, [r7, #20]
 8001fee:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <APP_LED_7SEG_TaskUpdate+0x410>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001ff2:	09db      	lsrs	r3, r3, #7
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	f7ff fd6e 	bl	8001ad8 <BSP_GPIO_SetState>
    }
  }
  
  APP_LED_7SEG_ScanLed();
 8001ffc:	f000 f846 	bl	800208c <APP_LED_7SEG_ScanLed>
  s_LED_7SEG.u8_position_led++;
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 8002002:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8002006:	b2db      	uxtb	r3, r3
 8002008:	3301      	adds	r3, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <APP_LED_7SEG_TaskUpdate+0x408>)
 800200e:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	200006a0 	.word	0x200006a0
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	20000078 	.word	0x20000078
 8002028:	42c80000 	.word	0x42c80000

0800202c <APP_LED_7SEG_DisplayLed>:

static void
APP_LED_7SEG_DisplayLed (uint8_t u8_number)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e01a      	b.n	8002072 <APP_LED_7SEG_DisplayLed+0x46>
  {
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[i],
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	4a11      	ldr	r2, [pc, #68]	@ (8002084 <APP_LED_7SEG_DisplayLed+0x58>)
 8002040:	330c      	adds	r3, #12
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	6858      	ldr	r0, [r3, #4]
 8002048:	7bfb      	ldrb	r3, [r7, #15]
                      s_LED_7SEG.u32_pin_led[i],
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <APP_LED_7SEG_DisplayLed+0x58>)
 800204c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                      (u8_data_mask_led[u8_number] >> i) & 0x01);
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4a0d      	ldr	r2, [pc, #52]	@ (8002088 <APP_LED_7SEG_DisplayLed+0x5c>)
 8002054:	5cd3      	ldrb	r3, [r2, r3]
 8002056:	461a      	mov	r2, r3
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	fa42 f303 	asr.w	r3, r2, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[i],
 8002066:	461a      	mov	r2, r3
 8002068:	f7ff fd36 	bl	8001ad8 <BSP_GPIO_SetState>
  for (uint8_t i = 0; i < 8; i++)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	3301      	adds	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b07      	cmp	r3, #7
 8002076:	d9e1      	bls.n	800203c <APP_LED_7SEG_DisplayLed+0x10>
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	200006a0 	.word	0x200006a0
 8002088:	20000078 	.word	0x20000078

0800208c <APP_LED_7SEG_ScanLed>:

static void
APP_LED_7SEG_ScanLed (void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < NUMBER_OF_LED; i++)
 8002092:	2300      	movs	r3, #0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	e028      	b.n	80020ea <APP_LED_7SEG_ScanLed+0x5e>
  {
    if (s_LED_7SEG.u8_position_led == i)
 8002098:	4b18      	ldr	r3, [pc, #96]	@ (80020fc <APP_LED_7SEG_ScanLed+0x70>)
 800209a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	79fa      	ldrb	r2, [r7, #7]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d10f      	bne.n	80020c6 <APP_LED_7SEG_ScanLed+0x3a>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <APP_LED_7SEG_ScanLed+0x70>)
 80020aa:	3314      	adds	r3, #20
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	6858      	ldr	r0, [r3, #4]
 80020b2:	79fb      	ldrb	r3, [r7, #7]
                        s_LED_7SEG.u32_pin_control[i],
 80020b4:	4a11      	ldr	r2, [pc, #68]	@ (80020fc <APP_LED_7SEG_ScanLed+0x70>)
 80020b6:	3308      	adds	r3, #8
 80020b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 80020bc:	2201      	movs	r2, #1
 80020be:	4619      	mov	r1, r3
 80020c0:	f7ff fd0a 	bl	8001ad8 <BSP_GPIO_SetState>
                        1);
      continue;
 80020c4:	e00e      	b.n	80020e4 <APP_LED_7SEG_ScanLed+0x58>
    }
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <APP_LED_7SEG_ScanLed+0x70>)
 80020ca:	3314      	adds	r3, #20
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	6858      	ldr	r0, [r3, #4]
 80020d2:	79fb      	ldrb	r3, [r7, #7]
                      s_LED_7SEG.u32_pin_control[i],
 80020d4:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <APP_LED_7SEG_ScanLed+0x70>)
 80020d6:	3308      	adds	r3, #8
 80020d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 80020dc:	2200      	movs	r2, #0
 80020de:	4619      	mov	r1, r3
 80020e0:	f7ff fcfa 	bl	8001ad8 <BSP_GPIO_SetState>
  for (uint8_t i = 0; i < NUMBER_OF_LED; i++)
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	3301      	adds	r3, #1
 80020e8:	71fb      	strb	r3, [r7, #7]
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d9d3      	bls.n	8002098 <APP_LED_7SEG_ScanLed+0xc>
                      0);
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200006a0 	.word	0x200006a0

08002100 <APP_LED_7_SEG_Pow>:

static uint32_t
APP_LED_7_SEG_Pow (uint8_t u8_x, uint8_t u8_y)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	460a      	mov	r2, r1
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	4613      	mov	r3, r2
 800210e:	71bb      	strb	r3, [r7, #6]
  uint32_t u32_ret = 1;
 8002110:	2301      	movs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 1; i <= u8_y; i++)
 8002114:	2301      	movs	r3, #1
 8002116:	72fb      	strb	r3, [r7, #11]
 8002118:	e007      	b.n	800212a <APP_LED_7_SEG_Pow+0x2a>
  {
    u32_ret *= u8_x;
 800211a:	79fa      	ldrb	r2, [r7, #7]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 1; i <= u8_y; i++)
 8002124:	7afb      	ldrb	r3, [r7, #11]
 8002126:	3301      	adds	r3, #1
 8002128:	72fb      	strb	r3, [r7, #11]
 800212a:	7afa      	ldrb	r2, [r7, #11]
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	429a      	cmp	r2, r3
 8002130:	d9f3      	bls.n	800211a <APP_LED_7_SEG_Pow+0x1a>
  }
  return u32_ret;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr
	...

08002140 <ACS712_VoltageConverterCurrent>:
   *   PUBLIC FUNCTIONS
   **********************/

// Unit Voltage mV
  static inline float ACS712_VoltageConverterCurrent(float f_mVoltage)
  {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
#if  ACS712_0_30A
	  return (f_mVoltage - 30) / 66.0;
 8002148:	4906      	ldr	r1, [pc, #24]	@ (8002164 <ACS712_VoltageConverterCurrent+0x24>)
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fcfa 	bl	8000b44 <__aeabi_fsub>
 8002150:	4603      	mov	r3, r0
 8002152:	4905      	ldr	r1, [pc, #20]	@ (8002168 <ACS712_VoltageConverterCurrent+0x28>)
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe feb3 	bl	8000ec0 <__aeabi_fdiv>
 800215a:	4603      	mov	r3, r0
	  return f_mVoltage / 100.0;
#endif
#if  ACS712_0_5A
	  return f_mVoltage / 185.0;
#endif
  }
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	41f00000 	.word	0x41f00000
 8002168:	42840000 	.word	0x42840000

0800216c <APP_READ_DATA_CreateTask>:
 * The function APP_READ_DATA_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_READ_DATA_CreateTask (void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8002170:	4902      	ldr	r1, [pc, #8]	@ (800217c <APP_READ_DATA_CreateTask+0x10>)
 8002172:	4803      	ldr	r0, [pc, #12]	@ (8002180 <APP_READ_DATA_CreateTask+0x14>)
 8002174:	f003 f844 	bl	8005200 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8002178:	bf00      	nop
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000098 	.word	0x20000098
 8002180:	20000094 	.word	0x20000094

08002184 <APP_READ_DATA_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_READ_DATA_Init (void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_read_data.p_vol_cur_buffer     = &s_data_system.s_vol_cur_buffer;
 8002188:	4b0b      	ldr	r3, [pc, #44]	@ (80021b8 <APP_READ_DATA_Init+0x34>)
 800218a:	4a0c      	ldr	r2, [pc, #48]	@ (80021bc <APP_READ_DATA_Init+0x38>)
 800218c:	605a      	str	r2, [r3, #4]
  s_read_data.p_vol_cur_buffer_irq = &s_data_system.s_vol_cur_buffer_irq;
 800218e:	4b0a      	ldr	r3, [pc, #40]	@ (80021b8 <APP_READ_DATA_Init+0x34>)
 8002190:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <APP_READ_DATA_Init+0x3c>)
 8002192:	601a      	str	r2, [r3, #0]
  s_read_data.p_voltage            = &s_data_system.f_voltage;
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <APP_READ_DATA_Init+0x34>)
 8002196:	4a0b      	ldr	r2, [pc, #44]	@ (80021c4 <APP_READ_DATA_Init+0x40>)
 8002198:	609a      	str	r2, [r3, #8]
  s_read_data.p_current            = &s_data_system.f_current;
 800219a:	4b07      	ldr	r3, [pc, #28]	@ (80021b8 <APP_READ_DATA_Init+0x34>)
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <APP_READ_DATA_Init+0x44>)
 800219e:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer);
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <APP_READ_DATA_Init+0x34>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 ff75 	bl	8005094 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80021aa:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <APP_READ_DATA_Init+0x34>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 ff70 	bl	8005094 <RING_BUFFER_Init>
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000710 	.word	0x20000710
 80021bc:	200004d0 	.word	0x200004d0
 80021c0:	20000484 	.word	0x20000484
 80021c4:	2000065c 	.word	0x2000065c
 80021c8:	20000660 	.word	0x20000660

080021cc <APP_READ_DATA_HandleDMA_IRQ>:

void
APP_READ_DATA_HandleDMA_IRQ (flagIRQ_dma_t status)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if (status == FLAG_TRANSFER_COMPLETE)
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d143      	bne.n	8002264 <APP_READ_DATA_HandleDMA_IRQ+0x98>
  {
    s_read_data.value_temp_irq[0]
        = (uint8_t)(s_data_system.u16_adc_value[0] >> 8);
 80021dc:	4b23      	ldr	r3, [pc, #140]	@ (800226c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80021de:	f8b3 3280 	ldrh.w	r3, [r3, #640]	@ 0x280
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4b21      	ldr	r3, [pc, #132]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 80021ec:	741a      	strb	r2, [r3, #16]
    s_read_data.value_temp_irq[1] = (uint8_t)(s_data_system.u16_adc_value[0]);
 80021ee:	4b1f      	ldr	r3, [pc, #124]	@ (800226c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80021f0:	f8b3 3280 	ldrh.w	r3, [r3, #640]	@ 0x280
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 80021fa:	745a      	strb	r2, [r3, #17]

    s_read_data.value_temp_irq[2]
        = (uint8_t)(s_data_system.u16_adc_value[1] >> 8);
 80021fc:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80021fe:	f8b3 3282 	ldrh.w	r3, [r3, #642]	@ 0x282
 8002202:	b29b      	uxth	r3, r3
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	b29b      	uxth	r3, r3
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800220c:	749a      	strb	r2, [r3, #18]
    s_read_data.value_temp_irq[3] = (uint8_t)(s_data_system.u16_adc_value[0]);
 800220e:	4b17      	ldr	r3, [pc, #92]	@ (800226c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 8002210:	f8b3 3280 	ldrh.w	r3, [r3, #640]	@ 0x280
 8002214:	b29b      	uxth	r3, r3
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800221a:	74da      	strb	r2, [r3, #19]

    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800221c:	4b14      	ldr	r3, [pc, #80]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800221e:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[0]);
 8002220:	4a13      	ldr	r2, [pc, #76]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002222:	7c12      	ldrb	r2, [r2, #16]
 8002224:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f002 ff77 	bl	800511c <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002230:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[1]);
 8002232:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002234:	7c52      	ldrb	r2, [r2, #17]
 8002236:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 ff6e 	bl	800511c <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002242:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[2]);
 8002244:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002246:	7c92      	ldrb	r2, [r2, #18]
 8002248:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 ff65 	bl	800511c <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002252:	4b07      	ldr	r3, [pc, #28]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002254:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[3]);
 8002256:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002258:	7cd2      	ldrb	r2, [r2, #19]
 800225a:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800225c:	4611      	mov	r1, r2
 800225e:	4618      	mov	r0, r3
 8002260:	f002 ff5c 	bl	800511c <RING_BUFFER_Push_Data>
  }
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	200003ec 	.word	0x200003ec
 8002270:	20000710 	.word	0x20000710

08002274 <APP_READ_DATA_TaskUpdate>:
 * @return If the ring buffer is empty, the function `APP_READ_DATA_TaskUpdate`
 * will return without performing any further operations.
 */
static void
APP_READ_DATA_TaskUpdate (void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq))
 800227a:	4b59      	ldr	r3, [pc, #356]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f002 ff2c 	bl	80050dc <RING_BUFFER_Is_Empty>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 80a5 	bne.w	80023d6 <APP_READ_DATA_TaskUpdate+0x162>
  uint16_t  u16_value_temp;
  uint8_t   u8_value[4];

  // u8_value[0] 8 bit high of adc-channel 1
  u8_value[0] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 800228c:	4b54      	ldr	r3, [pc, #336]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 800228e:	681b      	ldr	r3, [r3, #0]
  u8_value[0] = RING_BUFFER_Pull_Data(
 8002290:	4618      	mov	r0, r3
 8002292:	f002 ff68 	bl	8005166 <RING_BUFFER_Pull_Data>
 8002296:	4603      	mov	r3, r0
 8002298:	713b      	strb	r3, [r7, #4]

  // u8_value[1] 8 bit low of adc-channel 1
  u8_value[1] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 800229a:	4b51      	ldr	r3, [pc, #324]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 800229c:	681b      	ldr	r3, [r3, #0]
  u8_value[1] = RING_BUFFER_Pull_Data(
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 ff61 	bl	8005166 <RING_BUFFER_Pull_Data>
 80022a4:	4603      	mov	r3, r0
 80022a6:	717b      	strb	r3, [r7, #5]

  // u8_value[2] 8 bit high of adc-channel 2
  u8_value[2] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80022a8:	4b4d      	ldr	r3, [pc, #308]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
  u8_value[2] = RING_BUFFER_Pull_Data(
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 ff5a 	bl	8005166 <RING_BUFFER_Pull_Data>
 80022b2:	4603      	mov	r3, r0
 80022b4:	71bb      	strb	r3, [r7, #6]

  // u8_value[3] 8 bit low of adc-channel 2
  u8_value[3] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80022b6:	4b4a      	ldr	r3, [pc, #296]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
  u8_value[3] = RING_BUFFER_Pull_Data(
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 ff53 	bl	8005166 <RING_BUFFER_Pull_Data>
 80022c0:	4603      	mov	r3, r0
 80022c2:	71fb      	strb	r3, [r7, #7]

  u16_value_temp = (uint16_t)((u8_value[0] << 8) | (u8_value[1]));
 80022c4:	793b      	ldrb	r3, [r7, #4]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	b21a      	sxth	r2, r3
 80022ca:	797b      	ldrb	r3, [r7, #5]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	4313      	orrs	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	81fb      	strh	r3, [r7, #14]
  APP_READ_DATA_ConvertVoltage(u16_value_temp);
 80022d4:	89fb      	ldrh	r3, [r7, #14]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 f884 	bl	80023e4 <APP_READ_DATA_ConvertVoltage>

  u16_value_temp = (uint16_t)((u8_value[2] << 8) | (u8_value[3]));
 80022dc:	79bb      	ldrb	r3, [r7, #6]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	b21a      	sxth	r2, r3
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b21b      	sxth	r3, r3
 80022ea:	81fb      	strh	r3, [r7, #14]
  APP_READ_DATA_ConvertCurrent(u16_value_temp);
 80022ec:	89fb      	ldrh	r3, [r7, #14]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f8b6 	bl	8002460 <APP_READ_DATA_ConvertCurrent>

  // Transmission Data to app_data_transmission
  p_value_temp = (uint32_t *)s_read_data.p_voltage;
 80022f4:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e1b      	lsrs	r3, r3, #24
 8002300:	b2db      	uxtb	r3, r3
 8002302:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0c1b      	lsrs	r3, r3, #16
 800230a:	b2db      	uxtb	r3, r3
 800230c:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b2db      	uxtb	r3, r3
 8002316:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002320:	4b2f      	ldr	r3, [pc, #188]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002322:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 8002324:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fef7 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800232e:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002330:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 8002332:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002334:	4611      	mov	r1, r2
 8002336:	4618      	mov	r0, r3
 8002338:	f002 fef0 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800233c:	4b28      	ldr	r3, [pc, #160]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 800233e:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 8002340:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f002 fee9 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800234a:	4b25      	ldr	r3, [pc, #148]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 800234c:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 800234e:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f002 fee2 	bl	800511c <RING_BUFFER_Push_Data>

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer, '\r');
 8002358:	4b21      	ldr	r3, [pc, #132]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	210d      	movs	r1, #13
 800235e:	4618      	mov	r0, r3
 8002360:	f002 fedc 	bl	800511c <RING_BUFFER_Push_Data>

  p_value_temp = (uint32_t *)s_read_data.p_current;
 8002364:	4b1e      	ldr	r3, [pc, #120]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0e1b      	lsrs	r3, r3, #24
 8002370:	b2db      	uxtb	r3, r3
 8002372:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	b2db      	uxtb	r3, r3
 800237c:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b2db      	uxtb	r3, r3
 8002386:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002392:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 8002394:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f002 febf 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 80023a0:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 80023a2:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f002 feb8 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80023ac:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 80023b0:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f002 feb1 	bl	800511c <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80023ba:	4b09      	ldr	r3, [pc, #36]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 80023be:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f002 feaa 	bl	800511c <RING_BUFFER_Push_Data>

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer, '\r');
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <APP_READ_DATA_TaskUpdate+0x16c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	210d      	movs	r1, #13
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fea4 	bl	800511c <RING_BUFFER_Push_Data>
 80023d4:	e000      	b.n	80023d8 <APP_READ_DATA_TaskUpdate+0x164>
    return;
 80023d6:	bf00      	nop
}
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000710 	.word	0x20000710

080023e4 <APP_READ_DATA_ConvertVoltage>:
 * @param u16_adc_value_voltage The parameter `u16_adc_value_voltage` is a
 * 16-bit unsigned integer representing the ADC value of the voltage being read.
 */
static void
APP_READ_DATA_ConvertVoltage (uint16_t u16_adc_value_voltage)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80023f4:	fb02 f303 	mul.w	r3, r2, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <APP_READ_DATA_ConvertVoltage+0x6c>)
 80023fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002400:	1ad2      	subs	r2, r2, r3
 8002402:	0852      	lsrs	r2, r2, #1
 8002404:	4413      	add	r3, r2
 8002406:	0adb      	lsrs	r3, r3, #11
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe fc4d 	bl	8000ca8 <__aeabi_ui2f>
 800240e:	4603      	mov	r3, r0
 8002410:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_voltage, LL_ADC_RESOLUTION_12B);

  *s_read_data.p_voltage = f_mVolt * 11.0 / 100.0;
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7fe f812 	bl	800043c <__aeabi_f2d>
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <APP_READ_DATA_ConvertVoltage+0x70>)
 800241e:	f7fe f865 	bl	80004ec <__aeabi_dmul>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4610      	mov	r0, r2
 8002428:	4619      	mov	r1, r3
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <APP_READ_DATA_ConvertVoltage+0x74>)
 8002430:	f7fe f986 	bl	8000740 <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4908      	ldr	r1, [pc, #32]	@ (800245c <APP_READ_DATA_ConvertVoltage+0x78>)
 800243a:	688c      	ldr	r4, [r1, #8]
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	f7fe fb2c 	bl	8000a9c <__aeabi_d2f>
 8002444:	4603      	mov	r3, r0
 8002446:	6023      	str	r3, [r4, #0]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	bd90      	pop	{r4, r7, pc}
 8002450:	00100101 	.word	0x00100101
 8002454:	40260000 	.word	0x40260000
 8002458:	40590000 	.word	0x40590000
 800245c:	20000710 	.word	0x20000710

08002460 <APP_READ_DATA_ConvertCurrent>:

static void
APP_READ_DATA_ConvertCurrent (uint16_t u16_adc_value_current)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4b0b      	ldr	r3, [pc, #44]	@ (80024a4 <APP_READ_DATA_ConvertCurrent+0x44>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	1ad2      	subs	r2, r2, r3
 800247e:	0852      	lsrs	r2, r2, #1
 8002480:	4413      	add	r3, r2
 8002482:	0adb      	lsrs	r3, r3, #11
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fc0f 	bl	8000ca8 <__aeabi_ui2f>
 800248a:	4603      	mov	r3, r0
 800248c:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_current, LL_ADC_RESOLUTION_12B);

  *s_read_data.p_current = ACS712_VoltageConverterCurrent(f_mVolt);
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <APP_READ_DATA_ConvertCurrent+0x48>)
 8002490:	68dc      	ldr	r4, [r3, #12]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f7ff fe54 	bl	8002140 <ACS712_VoltageConverterCurrent>
 8002498:	4603      	mov	r3, r0
 800249a:	6023      	str	r3, [r4, #0]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd90      	pop	{r4, r7, pc}
 80024a4:	00100101 	.word	0x00100101
 80024a8:	20000710 	.word	0x20000710

080024ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	615a      	str	r2, [r3, #20]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <BSP_GPIO_Toggle>:

  static inline void BSP_GPIO_Toggle (GPIO_TypeDef *gpio_port,
                                      uint32_t      gpio_pin)
  {
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
    uint32_t odr     = gpio_port->ODR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60fb      	str	r3, [r7, #12]
    uint32_t pinmask = ((gpio_pin >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b29b      	uxth	r3, r3
 80024e0:	60bb      	str	r3, [r7, #8]
    gpio_port->BSRR  = ((odr & pinmask) << 16u) | (~odr & pinmask);
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	4013      	ands	r3, r2
 80024e8:	041a      	lsls	r2, r3, #16
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	43d9      	mvns	r1, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	400b      	ands	r3, r1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	611a      	str	r2, [r3, #16]
  }
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
	...

08002504 <APP_STATUS_LED_Init>:
 * The function initializes status LEDs by resetting GPIO pins, linking a
 * pointer to a variable, and resetting fields in a structure.
 */
void
APP_STATUS_LED_Init (void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  // Reset GPIO
  LL_GPIO_ResetOutputPin(PORT_LED_STATUS, PIN_LED_STATUS);
 8002508:	f241 0110 	movw	r1, #4112	@ 0x1010
 800250c:	4807      	ldr	r0, [pc, #28]	@ (800252c <APP_STATUS_LED_Init+0x28>)
 800250e:	f7ff ffcd 	bl	80024ac <LL_GPIO_ResetOutputPin>

  // Reset field of s_status_led
  s_status_led.u8_flag_enable_timer_100ms = 0;
 8002512:	4a07      	ldr	r2, [pc, #28]	@ (8002530 <APP_STATUS_LED_Init+0x2c>)
 8002514:	7813      	ldrb	r3, [r2, #0]
 8002516:	f36f 0300 	bfc	r3, #0, #1
 800251a:	7013      	strb	r3, [r2, #0]
  s_status_led.u8_flag_enable_timer_500ms = 0;
 800251c:	4a04      	ldr	r2, [pc, #16]	@ (8002530 <APP_STATUS_LED_Init+0x2c>)
 800251e:	7813      	ldrb	r3, [r2, #0]
 8002520:	f36f 0341 	bfc	r3, #1, #1
 8002524:	7013      	strb	r3, [r2, #0]
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40010c00 	.word	0x40010c00
 8002530:	20000724 	.word	0x20000724

08002534 <APP_STATUS_LED_CreateTimer>:
 * The function `APP_STATUS_LED_CreateTimer` creates timers for status LED
 * handling.
 */
void
APP_STATUS_LED_CreateTimer (void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[0].timerHandle,
 8002538:	4904      	ldr	r1, [pc, #16]	@ (800254c <APP_STATUS_LED_CreateTimer+0x18>)
 800253a:	4805      	ldr	r0, [pc, #20]	@ (8002550 <APP_STATUS_LED_CreateTimer+0x1c>)
 800253c:	f002 fe9e 	bl	800527c <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[0].timerProperty);
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[1].timerHandle,
 8002540:	4904      	ldr	r1, [pc, #16]	@ (8002554 <APP_STATUS_LED_CreateTimer+0x20>)
 8002542:	4805      	ldr	r0, [pc, #20]	@ (8002558 <APP_STATUS_LED_CreateTimer+0x24>)
 8002544:	f002 fe9a 	bl	800527c <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[1].timerProperty);
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200000b8 	.word	0x200000b8
 8002550:	200000b4 	.word	0x200000b4
 8002554:	200000c4 	.word	0x200000c4
 8002558:	200000c0 	.word	0x200000c0

0800255c <APP_STATUS_LED_CreateTask>:
/**
 * The function APP_STATUS_LED_CreateTask creates a task for the status LED.
 */
void
APP_STATUS_LED_CreateTask (void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_StatusLedTaskContext.taskHandle,
 8002560:	4902      	ldr	r1, [pc, #8]	@ (800256c <APP_STATUS_LED_CreateTask+0x10>)
 8002562:	4803      	ldr	r0, [pc, #12]	@ (8002570 <APP_STATUS_LED_CreateTask+0x14>)
 8002564:	f002 fe4c 	bl	8005200 <SCH_TASK_CreateTask>
                      &s_StatusLedTaskContext.taskProperty);
}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	200000a8 	.word	0x200000a8
 8002570:	200000a4 	.word	0x200000a4
 8002574:	00000000 	.word	0x00000000

08002578 <APP_STATUS_LED_TaskUpdate>:
 *  PRIVATE FUNCTION
 *****************************************************************************/

static void
APP_STATUS_LED_TaskUpdate (void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  if (s_data_system.f_current < THRESHOLD_CURRENT)
 800257c:	4b14      	ldr	r3, [pc, #80]	@ (80025d0 <APP_STATUS_LED_TaskUpdate+0x58>)
 800257e:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ff5a 	bl	800043c <__aeabi_f2d>
 8002588:	a30f      	add	r3, pc, #60	@ (adr r3, 80025c8 <APP_STATUS_LED_TaskUpdate+0x50>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe fa1f 	bl	80009d0 <__aeabi_dcmplt>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <APP_STATUS_LED_TaskUpdate+0x36>
  {
    SCH_TIM_StopTimer(s_StatusLedTimerContext[0].timerHandle);
 8002598:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f002 fed1 	bl	8005344 <SCH_TIM_StopTimer>
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[1].timerHandle);
 80025a2:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 80025a4:	7b1b      	ldrb	r3, [r3, #12]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 fea6 	bl	80052f8 <SCH_TIM_RestartTimer>
  else
  {
    SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
  }
}
 80025ac:	e009      	b.n	80025c2 <APP_STATUS_LED_TaskUpdate+0x4a>
    SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
 80025ae:	4b09      	ldr	r3, [pc, #36]	@ (80025d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 80025b0:	7b1b      	ldrb	r3, [r3, #12]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 fec6 	bl	8005344 <SCH_TIM_StopTimer>
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 fe9b 	bl	80052f8 <SCH_TIM_RestartTimer>
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	9999999a 	.word	0x9999999a
 80025cc:	3fb99999 	.word	0x3fb99999
 80025d0:	200003ec 	.word	0x200003ec
 80025d4:	200000b4 	.word	0x200000b4

080025d8 <APP_STATUS_LED_100MS_TimerUpdate>:

static void
APP_STATUS_LED_100MS_TimerUpdate (void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  BSP_GPIO_Toggle(PORT_LED_STATUS, PIN_LED_STATUS);
 80025dc:	f241 0110 	movw	r1, #4112	@ 0x1010
 80025e0:	4802      	ldr	r0, [pc, #8]	@ (80025ec <APP_STATUS_LED_100MS_TimerUpdate+0x14>)
 80025e2:	f7ff ff72 	bl	80024ca <BSP_GPIO_Toggle>
}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40010c00 	.word	0x40010c00

080025f0 <APP_STATUS_LED_500MS_TimerUpdate>:

static void
APP_STATUS_LED_500MS_TimerUpdate (void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  BSP_GPIO_Toggle(PORT_LED_STATUS, PIN_LED_STATUS);
 80025f4:	f241 0110 	movw	r1, #4112	@ 0x1010
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <APP_STATUS_LED_500MS_TimerUpdate+0x14>)
 80025fa:	f7ff ff66 	bl	80024ca <BSP_GPIO_Toggle>
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40010c00 	.word	0x40010c00

08002608 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d103      	bne.n	8002624 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	334c      	adds	r3, #76	@ 0x4c
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e001      	b.n	8002628 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <LL_ADC_DMA_GetRegAddr+0x2c>)
 8002626:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 8002628:	68fb      	ldr	r3, [r7, #12]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr
 8002634:	4001244c 	.word	0x4001244c

08002638 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL) == (LL_ADC_REG_TRIG_SOFTWARE));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002648:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800264c:	bf0c      	ite	eq
 800264e:	2301      	moveq	r3, #1
 8002650:	2300      	movne	r3, #0
 8002652:	b2db      	uxtb	r3, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	609a      	str	r2, [r3, #8]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_Disable>:
  * @rmtoll CR2      ADON           LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 0201 	bic.w	r2, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	609a      	str	r2, [r3, #8]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	bf0c      	ite	eq
 80026d2:	2301      	moveq	r3, #1
 80026d4:	2300      	movne	r3, #0
 80026d6:	b2db      	uxtb	r3, r3
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f043 0204 	orr.w	r2, r3, #4
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	609a      	str	r2, [r3, #8]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	bc80      	pop	{r7}
 800271c:	4770      	bx	lr

0800271e <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f06f 0202 	mvn.w	r2, #2
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <BSP_ADC_ConversionStop_Disable>:
 *   INLINE PRIVATE FUNCTION
 *****************************************************************************/

static inline void
BSP_ADC_ConversionStop_Disable (ADC_TypeDef *p_ADC)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  // Disable the ADC peripheral
  LL_ADC_Disable(p_ADC);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ff9d 	bl	80026a0 <LL_ADC_Disable>

  // Wait for ADC effectively disabled
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <BSP_ADC_ConversionStop_Disable+0x38>)
 8002768:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800276c:	601a      	str	r2, [r3, #0]
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 800276e:	e003      	b.n	8002778 <BSP_ADC_ConversionStop_Disable+0x20>
  {
    if (u32_adc_timeout == 0)
 8002770:	4b07      	ldr	r3, [pc, #28]	@ (8002790 <BSP_ADC_ConversionStop_Disable+0x38>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <BSP_ADC_ConversionStop_Disable+0x2e>
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ffa0 	bl	80026be <LL_ADC_IsEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f5      	bne.n	8002770 <BSP_ADC_ConversionStop_Disable+0x18>
 8002784:	e000      	b.n	8002788 <BSP_ADC_ConversionStop_Disable+0x30>
    {
      return;
 8002786:	bf00      	nop
    }
  }
}
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000728 	.word	0x20000728

08002794 <BSP_ADC_Enable>:

static inline void
BSP_ADC_Enable (ADC_TypeDef *p_ADC)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if (LL_ADC_IsEnabled(p_ADC) == RESET)
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff8e 	bl	80026be <LL_ADC_IsEnabled>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d113      	bne.n	80027d0 <BSP_ADC_Enable+0x3c>
  {
    LL_ADC_Enable(p_ADC);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff ff6a 	bl	8002682 <LL_ADC_Enable>
    // Wait for ADC effectively enabled
    u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <BSP_ADC_Enable+0x44>)
 80027b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80027b4:	601a      	str	r2, [r3, #0]
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 80027b6:	e003      	b.n	80027c0 <BSP_ADC_Enable+0x2c>
    {
      if (u32_adc_timeout == 0)
 80027b8:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <BSP_ADC_Enable+0x44>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <BSP_ADC_Enable+0x3a>
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff7c 	bl	80026be <LL_ADC_IsEnabled>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f5      	beq.n	80027b8 <BSP_ADC_Enable+0x24>
 80027cc:	e000      	b.n	80027d0 <BSP_ADC_Enable+0x3c>
      {
        return;
 80027ce:	bf00      	nop
      }
    }
  }
}
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000728 	.word	0x20000728

080027dc <BSP_ADC_Start_Calibration>:
 *   PUBLIC FUNCTION
 *****************************************************************************/

void
BSP_ADC_Start_Calibration (ADC_TypeDef *p_ADC)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  // 1. Disable ADC peripheral
  BSP_ADC_ConversionStop_Disable(p_ADC);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ffb7 	bl	8002758 <BSP_ADC_ConversionStop_Disable>

  // 2. Calibration prerequisite delay before starting the calibration.
  // - ADC must be enabled for at least two ADC clock cycles
  BSP_ADC_Enable(p_ADC);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ffd2 	bl	8002794 <BSP_ADC_Enable>

  // Hardware prerequisite: delay before starting the calibration.
  //  - Computation of CPU clock cycles corresponding to ADC clock cycles.
  //  - Wait for the expected ADC clock cycles delay
  LL_mDelay(10);
 80027f0:	200a      	movs	r0, #10
 80027f2:	f002 fc1d 	bl	8005030 <LL_mDelay>

  // 3. Resets ADC calibration registers
  p_ADC->CR2 |= ADC_CR2_RSTCAL;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f043 0208 	orr.w	r2, r3, #8
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	609a      	str	r2, [r3, #8]

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002802:	4b14      	ldr	r3, [pc, #80]	@ (8002854 <BSP_ADC_Start_Calibration+0x78>)
 8002804:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002808:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 800280a:	e003      	b.n	8002814 <BSP_ADC_Start_Calibration+0x38>
  {
    if (u32_adc_timeout == 0)
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <BSP_ADC_Start_Calibration+0x78>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d018      	beq.n	8002846 <BSP_ADC_Start_Calibration+0x6a>
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f5      	bne.n	800280c <BSP_ADC_Start_Calibration+0x30>
      return;
    }
  }

  // 4. Start ADC calibration
  LL_ADC_StartCalibration(p_ADC);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff5e 	bl	80026e2 <LL_ADC_StartCalibration>

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002826:	4b0b      	ldr	r3, [pc, #44]	@ (8002854 <BSP_ADC_Start_Calibration+0x78>)
 8002828:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800282c:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 800282e:	e003      	b.n	8002838 <BSP_ADC_Start_Calibration+0x5c>
  {
    if (u32_adc_timeout == 0)
 8002830:	4b08      	ldr	r3, [pc, #32]	@ (8002854 <BSP_ADC_Start_Calibration+0x78>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <BSP_ADC_Start_Calibration+0x6e>
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f5      	bne.n	8002830 <BSP_ADC_Start_Calibration+0x54>
 8002844:	e002      	b.n	800284c <BSP_ADC_Start_Calibration+0x70>
      return;
 8002846:	bf00      	nop
 8002848:	e000      	b.n	800284c <BSP_ADC_Start_Calibration+0x70>
    {
      return;
 800284a:	bf00      	nop
    }
  }
}
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000728 	.word	0x20000728

08002858 <BSP_ADC_Start_DMA>:

// Using with >= 2 Channel in ADC
void
BSP_ADC_Start_DMA (ADC_TypeDef *p_ADC, uint16_t *pData, uint32_t Length)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  // Enable the ADC peripheral
  BSP_ADC_Enable(p_ADC);
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff ff95 	bl	8002794 <BSP_ADC_Enable>

  // Clear previous flags (EOC)
  LL_ADC_ClearFlag_EOS(p_ADC);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff ff67 	bl	800273e <LL_ADC_ClearFlag_EOS>

  LL_ADC_REG_SetDMATransfer(p_ADC, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8002870:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7ff fef2 	bl	800265e <LL_ADC_REG_SetDMATransfer>

  BSP_DMA_Start_IT(DMA1,
 800287a:	2100      	movs	r1, #0
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff fec3 	bl	8002608 <LL_ADC_DMA_GetRegAddr>
 8002882:	4601      	mov	r1, r0
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4613      	mov	r3, r2
 800288c:	460a      	mov	r2, r1
 800288e:	2101      	movs	r1, #1
 8002890:	480a      	ldr	r0, [pc, #40]	@ (80028bc <BSP_ADC_Start_DMA+0x64>)
 8002892:	f000 f9c5 	bl	8002c20 <BSP_DMA_Start_IT>
                   LL_ADC_DMA_GetRegAddr(p_ADC, LL_ADC_DMA_REG_REGULAR_DATA),
                   (uint32_t)pData,
                   Length);

  // Start ADC conversion
  if (LL_ADC_REG_IsTriggerSourceSWStart(p_ADC))
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fece 	bl	8002638 <LL_ADC_REG_IsTriggerSourceSWStart>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <BSP_ADC_Start_DMA+0x52>
  {
    // If software start is selected
    LL_ADC_REG_StartConversionSWStart(p_ADC);
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7ff ff2c 	bl	8002700 <LL_ADC_REG_StartConversionSWStart>
  else
  {
    // If external trigger is selected
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
  }
}
 80028a8:	e004      	b.n	80028b4 <BSP_ADC_Start_DMA+0x5c>
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
 80028aa:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff ff35 	bl	800271e <LL_ADC_REG_StartConversionExtTrig>
}
 80028b4:	bf00      	nop
 80028b6:	3710      	adds	r7, #16
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40020000 	.word	0x40020000

080028c0 <BSP_ADC_TimeOut>:

void
BSP_ADC_TimeOut (void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  if (u32_adc_timeout != 0)
 80028c4:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <BSP_ADC_TimeOut+0x20>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d004      	beq.n	80028d6 <BSP_ADC_TimeOut+0x16>
  {
    u32_adc_timeout--;
 80028cc:	4b04      	ldr	r3, [pc, #16]	@ (80028e0 <BSP_ADC_TimeOut+0x20>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	4a03      	ldr	r2, [pc, #12]	@ (80028e0 <BSP_ADC_TimeOut+0x20>)
 80028d4:	6013      	str	r3, [r2, #0]
  }
}
 80028d6:	bf00      	nop
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000728 	.word	0x20000728

080028e4 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	4a0a      	ldr	r2, [pc, #40]	@ (800291c <LL_DMA_EnableChannel+0x38>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4413      	add	r3, r2
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	3a01      	subs	r2, #1
 8002902:	4906      	ldr	r1, [pc, #24]	@ (800291c <LL_DMA_EnableChannel+0x38>)
 8002904:	5c8a      	ldrb	r2, [r1, r2]
 8002906:	4611      	mov	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	440a      	add	r2, r1
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6013      	str	r3, [r2, #0]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	080082e8 	.word	0x080082e8

08002920 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	4a0a      	ldr	r2, [pc, #40]	@ (8002958 <LL_DMA_DisableChannel+0x38>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	3a01      	subs	r2, #1
 800293e:	4906      	ldr	r1, [pc, #24]	@ (8002958 <LL_DMA_DisableChannel+0x38>)
 8002940:	5c8a      	ldrb	r2, [r1, r2]
 8002942:	4611      	mov	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	440a      	add	r2, r1
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6013      	str	r3, [r2, #0]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	080082e8 	.word	0x080082e8

0800295c <LL_DMA_GetMode>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  */
__STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	4a06      	ldr	r2, [pc, #24]	@ (8002984 <LL_DMA_GetMode+0x28>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	461a      	mov	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0320 	and.w	r3, r3, #32
                   DMA_CCR_CIRC));
}
 800297a:	4618      	mov	r0, r3
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	080082e8 	.word	0x080082e8

08002988 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3b01      	subs	r3, #1
 8002998:	4a0b      	ldr	r2, [pc, #44]	@ (80029c8 <LL_DMA_SetDataLength+0x40>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	461a      	mov	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	3a01      	subs	r2, #1
 80029ac:	4906      	ldr	r1, [pc, #24]	@ (80029c8 <LL_DMA_SetDataLength+0x40>)
 80029ae:	5c8a      	ldrb	r2, [r1, r2]
 80029b0:	4611      	mov	r1, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	440a      	add	r2, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	080082e8 	.word	0x080082e8

080029cc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d114      	bne.n	8002a0a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	4a15      	ldr	r2, [pc, #84]	@ (8002a3c <LL_DMA_ConfigAddresses+0x70>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	461a      	mov	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	4a10      	ldr	r2, [pc, #64]	@ (8002a3c <LL_DMA_ConfigAddresses+0x70>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	461a      	mov	r2, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8002a08:	e013      	b.n	8002a32 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002a3c <LL_DMA_ConfigAddresses+0x70>)
 8002a10:	5cd3      	ldrb	r3, [r2, r3]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3b01      	subs	r3, #1
 8002a22:	4a06      	ldr	r2, [pc, #24]	@ (8002a3c <LL_DMA_ConfigAddresses+0x70>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	60d3      	str	r3, [r2, #12]
}
 8002a32:	bf00      	nop
 8002a34:	3714      	adds	r7, #20
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	080082e8 	.word	0x080082e8

08002a40 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr

08002a64 <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bc80      	pop	{r7}
 8002aaa:	4770      	bx	lr

08002aac <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	605a      	str	r2, [r3, #4]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	605a      	str	r2, [r3, #4]
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	605a      	str	r2, [r3, #4]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr

08002af4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	3b01      	subs	r3, #1
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <LL_DMA_EnableIT_TC+0x38>)
 8002b04:	5cd3      	ldrb	r3, [r2, r3]
 8002b06:	461a      	mov	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	3a01      	subs	r2, #1
 8002b12:	4906      	ldr	r1, [pc, #24]	@ (8002b2c <LL_DMA_EnableIT_TC+0x38>)
 8002b14:	5c8a      	ldrb	r2, [r1, r2]
 8002b16:	4611      	mov	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	440a      	add	r2, r1
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6013      	str	r3, [r2, #0]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr
 8002b2c:	080082e8 	.word	0x080082e8

08002b30 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <LL_DMA_EnableIT_TE+0x38>)
 8002b40:	5cd3      	ldrb	r3, [r2, r3]
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	3a01      	subs	r2, #1
 8002b4e:	4906      	ldr	r1, [pc, #24]	@ (8002b68 <LL_DMA_EnableIT_TE+0x38>)
 8002b50:	5c8a      	ldrb	r2, [r1, r2]
 8002b52:	4611      	mov	r1, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	440a      	add	r2, r1
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6013      	str	r3, [r2, #0]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	080082e8 	.word	0x080082e8

08002b6c <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba4 <LL_DMA_DisableIT_TC+0x38>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4413      	add	r3, r2
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	4906      	ldr	r1, [pc, #24]	@ (8002ba4 <LL_DMA_DisableIT_TC+0x38>)
 8002b8c:	5c8a      	ldrb	r2, [r1, r2]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	440a      	add	r2, r1
 8002b94:	f023 0302 	bic.w	r3, r3, #2
 8002b98:	6013      	str	r3, [r2, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr
 8002ba4:	080082e8 	.word	0x080082e8

08002ba8 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002be0 <LL_DMA_DisableIT_HT+0x38>)
 8002bb8:	5cd3      	ldrb	r3, [r2, r3]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	3a01      	subs	r2, #1
 8002bc6:	4906      	ldr	r1, [pc, #24]	@ (8002be0 <LL_DMA_DisableIT_HT+0x38>)
 8002bc8:	5c8a      	ldrb	r2, [r1, r2]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	440a      	add	r2, r1
 8002bd0:	f023 0304 	bic.w	r3, r3, #4
 8002bd4:	6013      	str	r3, [r2, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	080082e8 	.word	0x080082e8

08002be4 <LL_DMA_DisableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c1c <LL_DMA_DisableIT_TE+0x38>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	3a01      	subs	r2, #1
 8002c02:	4906      	ldr	r1, [pc, #24]	@ (8002c1c <LL_DMA_DisableIT_TE+0x38>)
 8002c04:	5c8a      	ldrb	r2, [r1, r2]
 8002c06:	4611      	mov	r1, r2
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	f023 0308 	bic.w	r3, r3, #8
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	080082e8 	.word	0x080082e8

08002c20 <BSP_DMA_Start_IT>:
BSP_DMA_Start_IT (DMA_TypeDef *p_DMA,
                  uint32_t     Channel,
                  uint32_t     SrcAddress,
                  uint32_t     DstAddress,
                  uint32_t     DataLength)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
  LL_DMA_DisableChannel(p_DMA, Channel);
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff fe75 	bl	8002920 <LL_DMA_DisableChannel>

  LL_DMA_ConfigAddresses(p_DMA,
 8002c36:	2300      	movs	r3, #0
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	68b9      	ldr	r1, [r7, #8]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f7ff fec3 	bl	80029cc <LL_DMA_ConfigAddresses>
                         Channel,
                         SrcAddress,
                         (uint32_t)DstAddress,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  LL_DMA_SetDataLength(p_DMA, Channel, DataLength);
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff fe9c 	bl	8002988 <LL_DMA_SetDataLength>

//  LL_DMA_EnableIT_HT(p_DMA, Channel);
  LL_DMA_EnableIT_TC(p_DMA, Channel);
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ff4e 	bl	8002af4 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(p_DMA, Channel);
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f7ff ff68 	bl	8002b30 <LL_DMA_EnableIT_TE>

  LL_DMA_EnableChannel(p_DMA, Channel);
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7ff fe3e 	bl	80028e4 <LL_DMA_EnableChannel>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <BSP_DMA_IRQ_Channel1_Handler>:
 * `DMA_TypeDef`, which is likely a data structure representing a Direct Memory
 * Access (DMA) controller in a micro-controller or embedded system.
 */
flagIRQ_dma_t
BSP_DMA_IRQ_Channel1_Handler (DMA_TypeDef *p_DMA)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Half Transfer Complete Interrupt management ******************************/
  if (LL_DMA_IsActiveFlag_HT1(p_DMA))
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fef3 	bl	8002a64 <LL_DMA_IsActiveFlag_HT1>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00f      	beq.n	8002ca4 <BSP_DMA_IRQ_Channel1_Handler+0x34>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002c84:	2101      	movs	r1, #1
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fe68 	bl	800295c <LL_DMA_GetMode>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <BSP_DMA_IRQ_Channel1_Handler+0x2a>
    {
      LL_DMA_DisableIT_HT(p_DMA, LL_DMA_CHANNEL_1);
 8002c92:	2101      	movs	r1, #1
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ff87 	bl	8002ba8 <LL_DMA_DisableIT_HT>
    }
    LL_DMA_ClearFlag_HT1(p_DMA);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ff12 	bl	8002ac4 <LL_DMA_ClearFlag_HT1>
    return FLAG_HALF_TRANSFER_COMPLETE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e02c      	b.n	8002cfe <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if (LL_DMA_IsActiveFlag_TC1(p_DMA))
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fecb 	bl	8002a40 <LL_DMA_IsActiveFlag_TC1>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00f      	beq.n	8002cd0 <BSP_DMA_IRQ_Channel1_Handler+0x60>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff fe52 	bl	800295c <LL_DMA_GetMode>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d103      	bne.n	8002cc6 <BSP_DMA_IRQ_Channel1_Handler+0x56>
    {
      LL_DMA_DisableIT_TC(p_DMA, LL_DMA_CHANNEL_1);
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff53 	bl	8002b6c <LL_DMA_DisableIT_TC>
    }
    LL_DMA_ClearFlag_TC1(p_DMA);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fef0 	bl	8002aac <LL_DMA_ClearFlag_TC1>
    return FLAG_TRANSFER_COMPLETE;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e016      	b.n	8002cfe <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Error Interrupt management **************************************/
  else if (LL_DMA_IsActiveFlag_TE1(p_DMA))
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fed9 	bl	8002a88 <LL_DMA_IsActiveFlag_TE1>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00f      	beq.n	8002cfc <BSP_DMA_IRQ_Channel1_Handler+0x8c>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002cdc:	2101      	movs	r1, #1
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fe3c 	bl	800295c <LL_DMA_GetMode>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d103      	bne.n	8002cf2 <BSP_DMA_IRQ_Channel1_Handler+0x82>
    {
      LL_DMA_DisableIT_TE(p_DMA, LL_DMA_CHANNEL_1);
 8002cea:	2101      	movs	r1, #1
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff79 	bl	8002be4 <LL_DMA_DisableIT_TE>
    }
    LL_DMA_ClearFlag_TE1(p_DMA);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fef2 	bl	8002adc <LL_DMA_ClearFlag_TE1>
    return FLAG_TRANSFER_ERROR;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  return FLAG_NONE;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	6039      	str	r1, [r7, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	db0a      	blt.n	8002d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <__NVIC_SetPriority+0x4c>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	0112      	lsls	r2, r2, #4
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d30:	e00a      	b.n	8002d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <__NVIC_SetPriority+0x50>)
 8002d38:	79fb      	ldrb	r3, [r7, #7]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	3b04      	subs	r3, #4
 8002d40:	0112      	lsls	r2, r2, #4
 8002d42:	b2d2      	uxtb	r2, r2
 8002d44:	440b      	add	r3, r1
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000e100 	.word	0xe000e100
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d6c:	d301      	bcc.n	8002d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00f      	b.n	8002d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <SysTick_Config+0x40>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f7ff ffc2 	bl	8002d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d84:	4b05      	ldr	r3, [pc, #20]	@ (8002d9c <SysTick_Config+0x40>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d8a:	4b04      	ldr	r3, [pc, #16]	@ (8002d9c <SysTick_Config+0x40>)
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000e010 	.word	0xe000e010

08002da0 <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0

  SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk);
 8002da4:	4b04      	ldr	r3, [pc, #16]	@ (8002db8 <BSP_SYSTICK_TimerStart+0x18>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a03      	ldr	r2, [pc, #12]	@ (8002db8 <BSP_SYSTICK_TimerStart+0x18>)
 8002daa:	f043 0303 	orr.w	r3, r3, #3
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	e000e010 	.word	0xe000e010

08002dbc <BSP_SYSTICK_TimerInit>:
 * This function configures the SysTick timer to generate interrupts at a rate
 * of 1 millisecond, based on the system core clock.
 */
void
BSP_SYSTICK_TimerInit (void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  SysTick_Config(SystemCoreClock / 1000);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <BSP_SYSTICK_TimerInit+0x1c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a05      	ldr	r2, [pc, #20]	@ (8002ddc <BSP_SYSTICK_TimerInit+0x20>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ffc5 	bl	8002d5c <SysTick_Config>
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200000cc 	.word	0x200000cc
 8002ddc:	10624dd3 	.word	0x10624dd3

08002de0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr

08002e04 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bc80      	pop	{r7}
 8002e26:	4770      	bx	lr

08002e28 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e80:	2b80      	cmp	r3, #128	@ 0x80
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b085      	sub	sp, #20
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr

08002ed8 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002eee:	68fb      	ldr	r3, [r7, #12]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b089      	sub	sp, #36	@ 0x24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	330c      	adds	r3, #12
 8002f06:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	e853 3f00 	ldrex	r3, [r3]
 8002f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f043 0320 	orr.w	r3, r3, #32
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	61ba      	str	r2, [r7, #24]
 8002f20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6979      	ldr	r1, [r7, #20]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e7      	bne.n	8002f02 <LL_USART_EnableIT_RXNE+0x8>
}
 8002f32:	bf00      	nop
 8002f34:	bf00      	nop
 8002f36:	3724      	adds	r7, #36	@ 0x24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b089      	sub	sp, #36	@ 0x24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	330c      	adds	r3, #12
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	61ba      	str	r2, [r7, #24]
 8002f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e7      	bne.n	8002f46 <LL_USART_EnableIT_TXE+0x8>
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	3724      	adds	r7, #36	@ 0x24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b089      	sub	sp, #36	@ 0x24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3314      	adds	r3, #20
 8002f8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	e853 3f00 	ldrex	r3, [r3]
 8002f96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	61ba      	str	r2, [r7, #24]
 8002fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6979      	ldr	r1, [r7, #20]
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e7      	bne.n	8002f8a <LL_USART_EnableIT_ERROR+0x8>
}
 8002fba:	bf00      	nop
 8002fbc:	bf00      	nop
 8002fbe:	3724      	adds	r7, #36	@ 0x24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr

08002fc6 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b089      	sub	sp, #36	@ 0x24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	f023 0320 	bic.w	r3, r3, #32
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	61ba      	str	r2, [r7, #24]
 8002fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6979      	ldr	r1, [r7, #20]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e7      	bne.n	8002fce <LL_USART_DisableIT_RXNE+0x8>
}
 8002ffe:	bf00      	nop
 8003000:	bf00      	nop
 8003002:	3724      	adds	r7, #36	@ 0x24
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800300a:	b480      	push	{r7}
 800300c:	b089      	sub	sp, #36	@ 0x24
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	330c      	adds	r3, #12
 8003016:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	e853 3f00 	ldrex	r3, [r3]
 800301e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	330c      	adds	r3, #12
 800302c:	69fa      	ldr	r2, [r7, #28]
 800302e:	61ba      	str	r2, [r7, #24]
 8003030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003032:	6979      	ldr	r1, [r7, #20]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	e841 2300 	strex	r3, r2, [r1]
 800303a:	613b      	str	r3, [r7, #16]
   return(result);
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1e7      	bne.n	8003012 <LL_USART_DisableIT_TXE+0x8>
}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3724      	adds	r7, #36	@ 0x24
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b20      	cmp	r3, #32
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b80      	cmp	r3, #128	@ 0x80
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b2db      	uxtb	r3, r3
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	605a      	str	r2, [r3, #4]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr

080030ca <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  uartstdio_device->e_uart_irqn = uart_irqn;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	79fa      	ldrb	r2, [r7, #7]
 80030e4:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	334c      	adds	r3, #76	@ 0x4c
 80030ec:	4618      	mov	r0, r3
 80030ee:	f001 ffd1 	bl	8005094 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f001 ffcd 	bl	8005094 <RING_BUFFER_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 80030fa:	68b8      	ldr	r0, [r7, #8]
 80030fc:	f7ff ff41 	bl	8002f82 <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 8003100:	68b8      	ldr	r0, [r7, #8]
 8003102:	f7ff fefa 	bl	8002efa <LL_USART_EnableIT_RXNE>
}
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f001 ffdf 	bl	80050dc <RING_BUFFER_Is_Empty>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 8003124:	2300      	movs	r3, #0
 8003126:	e000      	b.n	800312a <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 8003128:	2301      	movs	r3, #1
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 800313e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003142:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8003144:	e005      	b.n	8003152 <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d024      	beq.n	8003196 <BSP_UART_SendChar+0x64>
    {
      return;
    }
    u32_uart_timeout--;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	3b01      	subs	r3, #1
 8003150:	60fb      	str	r3, [r7, #12]
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	334c      	adds	r3, #76	@ 0x4c
 8003156:	4618      	mov	r0, r3
 8003158:	f001 ffd0 	bl	80050fc <RING_BUFFER_Is_Full>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f1      	bne.n	8003146 <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff2c 	bl	8002fc6 <LL_USART_DisableIT_RXNE>
  RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	334c      	adds	r3, #76	@ 0x4c
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f001 ffd0 	bl	800511c <RING_BUFFER_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff feb9 	bl	8002efa <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800318e:	4618      	mov	r0, r3
 8003190:	f7ff fed5 	bl	8002f3e <LL_USART_EnableIT_TXE>
 8003194:	e000      	b.n	8003198 <BSP_UART_SendChar+0x66>
      return;
 8003196:	bf00      	nop
}
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
  while (*s)
 80031a8:	e007      	b.n	80031ba <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	603a      	str	r2, [r7, #0]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	4619      	mov	r1, r3
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ffbc 	bl	8003132 <BSP_UART_SendChar>
  while (*s)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f3      	bne.n	80031aa <BSP_UART_SendString+0xc>
  }
}
 80031c2:	bf00      	nop
 80031c4:	bf00      	nop
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 80031cc:	b590      	push	{r4, r7, lr}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 80031d4:	2400      	movs	r4, #0
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 ff7f 	bl	80050dc <RING_BUFFER_Is_Empty>
 80031de:	4603      	mov	r3, r0
 80031e0:	f083 0301 	eor.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d013      	beq.n	8003212 <BSP_UART_ReadChar+0x46>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fee8 	bl	8002fc6 <LL_USART_DisableIT_RXNE>
    c = (char)RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f001 ffb4 	bl	8005166 <RING_BUFFER_Pull_Data>
 80031fe:	4603      	mov	r3, r0
 8003200:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fe76 	bl	8002efa <LL_USART_EnableIT_RXNE>
    return c;
 800320e:	4623      	mov	r3, r4
 8003210:	e000      	b.n	8003214 <BSP_UART_ReadChar+0x48>
  }
  return c;
 8003212:	4623      	mov	r3, r4
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bd90      	pop	{r4, r7, pc}

0800321c <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 8003220:	4b06      	ldr	r3, [pc, #24]	@ (800323c <BSP_UART_TimeOut+0x20>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d004      	beq.n	8003232 <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8003228:	4b04      	ldr	r3, [pc, #16]	@ (800323c <BSP_UART_TimeOut+0x20>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3b01      	subs	r3, #1
 800322e:	4a03      	ldr	r2, [pc, #12]	@ (800323c <BSP_UART_TimeOut+0x20>)
 8003230:	6013      	str	r3, [r2, #0]
  }
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	2000072c 	.word	0x2000072c

08003240 <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fdfc 	bl	8002e4c <LL_USART_IsActiveFlag_RXNE>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d045      	beq.n	80032e6 <BSP_UART_ISR+0xa6>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fef4 	bl	800304e <LL_USART_IsEnabledIT_RXNE>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03c      	beq.n	80032e6 <BSP_UART_ISR+0xa6>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff0f 	bl	8003096 <LL_USART_ReceiveData8>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fdd0 	bl	8002e28 <LL_USART_IsActiveFlag_ORE>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d111      	bne.n	80032b2 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fda3 	bl	8002de0 <LL_USART_IsActiveFlag_FE>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fdac 	bl	8002e04 <LL_USART_IsActiveFlag_NE>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d012      	beq.n	80032d8 <BSP_UART_ISR+0x98>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fe0d 	bl	8002ed8 <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fde5 	bl	8002e94 <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fdf0 	bl	8002eb6 <LL_USART_ClearFlag_NE>
    }
    else
    {
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 80032d6:	e037      	b.n	8003348 <BSP_UART_ISR+0x108>
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f001 ff1c 	bl	800511c <RING_BUFFER_Push_Data>
    return;
 80032e4:	e030      	b.n	8003348 <BSP_UART_ISR+0x108>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fdbf 	bl	8002e70 <LL_USART_IsActiveFlag_TXE>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d027      	beq.n	8003348 <BSP_UART_ISR+0x108>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff feb7 	bl	8003072 <LL_USART_IsEnabledIT_TXE>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01e      	beq.n	8003348 <BSP_UART_ISR+0x108>
  {
    if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	334c      	adds	r3, #76	@ 0x4c
 800330e:	4618      	mov	r0, r3
 8003310:	f001 fee4 	bl	80050dc <RING_BUFFER_Is_Empty>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <BSP_UART_ISR+0xe8>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fe72 	bl	800300a <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 8003326:	e00e      	b.n	8003346 <BSP_UART_ISR+0x106>
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	334c      	adds	r3, #76	@ 0x4c
 800332c:	4618      	mov	r0, r3
 800332e:	f001 ff1a 	bl	8005166 <RING_BUFFER_Pull_Data>
 8003332:	4603      	mov	r3, r0
 8003334:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800333c:	7bba      	ldrb	r2, [r7, #14]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff feb4 	bl	80030ae <LL_USART_TransmitData8>
    return;
 8003346:	bf00      	nop
  }
}
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <__NVIC_SetPriorityGrouping>:
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003360:	4b0c      	ldr	r3, [pc, #48]	@ (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003378:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800337c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003382:	4a04      	ldr	r2, [pc, #16]	@ (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	60d3      	str	r3, [r2, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	bc80      	pop	{r7}
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_GetPriorityGrouping>:
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <__NVIC_GetPriorityGrouping+0x18>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 0307 	and.w	r3, r3, #7
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bc80      	pop	{r7}
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_EnableIRQ>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	db0b      	blt.n	80033de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	f003 021f 	and.w	r2, r3, #31
 80033cc:	4906      	ldr	r1, [pc, #24]	@ (80033e8 <__NVIC_EnableIRQ+0x34>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2001      	movs	r0, #1
 80033d6:	fa00 f202 	lsl.w	r2, r0, r2
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100

080033ec <__NVIC_SetPriority>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	6039      	str	r1, [r7, #0]
 80033f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	db0a      	blt.n	8003416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b2da      	uxtb	r2, r3
 8003404:	490c      	ldr	r1, [pc, #48]	@ (8003438 <__NVIC_SetPriority+0x4c>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	0112      	lsls	r2, r2, #4
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	440b      	add	r3, r1
 8003410:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003414:	e00a      	b.n	800342c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4908      	ldr	r1, [pc, #32]	@ (800343c <__NVIC_SetPriority+0x50>)
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	3b04      	subs	r3, #4
 8003424:	0112      	lsls	r2, r2, #4
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	440b      	add	r3, r1
 800342a:	761a      	strb	r2, [r3, #24]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000e100 	.word	0xe000e100
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <NVIC_EncodePriority>:
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	@ 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f1c3 0307 	rsb	r3, r3, #7
 800345a:	2b04      	cmp	r3, #4
 800345c:	bf28      	it	cs
 800345e:	2304      	movcs	r3, #4
 8003460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3304      	adds	r3, #4
 8003466:	2b06      	cmp	r3, #6
 8003468:	d902      	bls.n	8003470 <NVIC_EncodePriority+0x30>
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3b03      	subs	r3, #3
 800346e:	e000      	b.n	8003472 <NVIC_EncodePriority+0x32>
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	401a      	ands	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003488:	f04f 31ff 	mov.w	r1, #4294967295
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	43d9      	mvns	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	4313      	orrs	r3, r2
}
 800349a:	4618      	mov	r0, r3
 800349c:	3724      	adds	r7, #36	@ 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_REG_SetSequencerRanks>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	b089      	sub	sp, #36	@ 0x24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	332c      	adds	r3, #44	@ 0x2c
 80034b4:	4619      	mov	r1, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034bc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80034c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	fa92 f2a2 	rbit	r2, r2
 80034c8:	617a      	str	r2, [r7, #20]
  return result;
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	fab2 f282 	clz	r2, r2
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	40d3      	lsrs	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	211f      	movs	r1, #31
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f003 011f 	and.w	r1, r3, #31
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	431a      	orrs	r2, r3
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	601a      	str	r2, [r3, #0]
}
 8003504:	bf00      	nop
 8003506:	3724      	adds	r7, #36	@ 0x24
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <LL_ADC_SetChannelSamplingTime>:
{
 800350e:	b480      	push	{r7}
 8003510:	b08d      	sub	sp, #52	@ 0x34
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	330c      	adds	r3, #12
 800351e:	4619      	mov	r1, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003526:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800352a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	fa92 f2a2 	rbit	r2, r2
 8003532:	617a      	str	r2, [r7, #20]
  return result;
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	fab2 f282 	clz	r2, r2
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	40d3      	lsrs	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(*preg,
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800354e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8003552:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	6a39      	ldr	r1, [r7, #32]
 8003556:	fa91 f1a1 	rbit	r1, r1
 800355a:	61f9      	str	r1, [r7, #28]
  return result;
 800355c:	69f9      	ldr	r1, [r7, #28]
 800355e:	fab1 f181 	clz	r1, r1
 8003562:	b2c9      	uxtb	r1, r1
 8003564:	40cb      	lsrs	r3, r1
 8003566:	2107      	movs	r1, #7
 8003568:	fa01 f303 	lsl.w	r3, r1, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	401a      	ands	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8003576:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800357a:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800357e:	fa91 f1a1 	rbit	r1, r1
 8003582:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8003584:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003586:	fab1 f181 	clz	r1, r1
 800358a:	b2c9      	uxtb	r1, r1
 800358c:	40cb      	lsrs	r3, r1
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	431a      	orrs	r2, r3
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	601a      	str	r2, [r3, #0]
}
 800359a:	bf00      	nop
 800359c:	3734      	adds	r7, #52	@ 0x34
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <LL_DMA_SetDataTransferDirection>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80035b6:	5cd3      	ldrb	r3, [r2, r3]
 80035b8:	461a      	mov	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4413      	add	r3, r2
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035c4:	f023 0310 	bic.w	r3, r3, #16
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	3a01      	subs	r2, #1
 80035cc:	4906      	ldr	r1, [pc, #24]	@ (80035e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80035ce:	5c8a      	ldrb	r2, [r1, r2]
 80035d0:	4611      	mov	r1, r2
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	440a      	add	r2, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr
 80035e8:	080082f0 	.word	0x080082f0

080035ec <LL_DMA_SetMode>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	4a0b      	ldr	r2, [pc, #44]	@ (800362c <LL_DMA_SetMode+0x40>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	461a      	mov	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4413      	add	r3, r2
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 0220 	bic.w	r2, r3, #32
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	3b01      	subs	r3, #1
 8003610:	4906      	ldr	r1, [pc, #24]	@ (800362c <LL_DMA_SetMode+0x40>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	4619      	mov	r1, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	440b      	add	r3, r1
 800361a:	4619      	mov	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4313      	orrs	r3, r2
 8003620:	600b      	str	r3, [r1, #0]
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	080082f0 	.word	0x080082f0

08003630 <LL_DMA_SetPeriphIncMode>:
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	3b01      	subs	r3, #1
 8003640:	4a0b      	ldr	r2, [pc, #44]	@ (8003670 <LL_DMA_SetPeriphIncMode+0x40>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	461a      	mov	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	3b01      	subs	r3, #1
 8003654:	4906      	ldr	r1, [pc, #24]	@ (8003670 <LL_DMA_SetPeriphIncMode+0x40>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	4619      	mov	r1, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	440b      	add	r3, r1
 800365e:	4619      	mov	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	080082f0 	.word	0x080082f0

08003674 <LL_DMA_SetMemoryIncMode>:
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3b01      	subs	r3, #1
 8003684:	4a0b      	ldr	r2, [pc, #44]	@ (80036b4 <LL_DMA_SetMemoryIncMode+0x40>)
 8003686:	5cd3      	ldrb	r3, [r2, r3]
 8003688:	461a      	mov	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3b01      	subs	r3, #1
 8003698:	4906      	ldr	r1, [pc, #24]	@ (80036b4 <LL_DMA_SetMemoryIncMode+0x40>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	4619      	mov	r1, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	440b      	add	r3, r1
 80036a2:	4619      	mov	r1, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	080082f0 	.word	0x080082f0

080036b8 <LL_DMA_SetPeriphSize>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	4a0b      	ldr	r2, [pc, #44]	@ (80036f8 <LL_DMA_SetPeriphSize+0x40>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	461a      	mov	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4413      	add	r3, r2
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	3b01      	subs	r3, #1
 80036dc:	4906      	ldr	r1, [pc, #24]	@ (80036f8 <LL_DMA_SetPeriphSize+0x40>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	4619      	mov	r1, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	440b      	add	r3, r1
 80036e6:	4619      	mov	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	080082f0 	.word	0x080082f0

080036fc <LL_DMA_SetMemorySize>:
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	3b01      	subs	r3, #1
 800370c:	4a0b      	ldr	r2, [pc, #44]	@ (800373c <LL_DMA_SetMemorySize+0x40>)
 800370e:	5cd3      	ldrb	r3, [r2, r3]
 8003710:	461a      	mov	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4413      	add	r3, r2
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3b01      	subs	r3, #1
 8003720:	4906      	ldr	r1, [pc, #24]	@ (800373c <LL_DMA_SetMemorySize+0x40>)
 8003722:	5ccb      	ldrb	r3, [r1, r3]
 8003724:	4619      	mov	r1, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	440b      	add	r3, r1
 800372a:	4619      	mov	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	080082f0 	.word	0x080082f0

08003740 <LL_DMA_SetChannelPriorityLevel>:
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3b01      	subs	r3, #1
 8003750:	4a0b      	ldr	r2, [pc, #44]	@ (8003780 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003752:	5cd3      	ldrb	r3, [r2, r3]
 8003754:	461a      	mov	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4413      	add	r3, r2
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3b01      	subs	r3, #1
 8003764:	4906      	ldr	r1, [pc, #24]	@ (8003780 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003766:	5ccb      	ldrb	r3, [r1, r3]
 8003768:	4619      	mov	r1, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	440b      	add	r3, r1
 800376e:	4619      	mov	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
}
 8003776:	bf00      	nop
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	080082f0 	.word	0x080082f0

08003784 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003788:	4b04      	ldr	r3, [pc, #16]	@ (800379c <LL_RCC_HSE_Enable+0x18>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a03      	ldr	r2, [pc, #12]	@ (800379c <LL_RCC_HSE_Enable+0x18>)
 800378e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003792:	6013      	str	r3, [r2, #0]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000

080037a0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80037a4:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <LL_RCC_HSE_IsReady+0x20>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	40021000 	.word	0x40021000

080037c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <LL_RCC_SetSysClkSource+0x24>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f023 0203 	bic.w	r2, r3, #3
 80037d4:	4904      	ldr	r1, [pc, #16]	@ (80037e8 <LL_RCC_SetSysClkSource+0x24>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40021000 	.word	0x40021000

080037ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80037f0:	4b03      	ldr	r3, [pc, #12]	@ (8003800 <LL_RCC_GetSysClkSource+0x14>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	40021000 	.word	0x40021000

08003804 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <LL_RCC_SetAHBPrescaler+0x24>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003814:	4904      	ldr	r1, [pc, #16]	@ (8003828 <LL_RCC_SetAHBPrescaler+0x24>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800383c:	4904      	ldr	r1, [pc, #16]	@ (8003850 <LL_RCC_SetAPB1Prescaler+0x24>)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4313      	orrs	r3, r2
 8003842:	604b      	str	r3, [r1, #4]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	bc80      	pop	{r7}
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	40021000 	.word	0x40021000

08003854 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800385c:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <LL_RCC_SetAPB2Prescaler+0x24>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003864:	4904      	ldr	r1, [pc, #16]	@ (8003878 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4313      	orrs	r3, r2
 800386a:	604b      	str	r3, [r1, #4]
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8003884:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <LL_RCC_SetADCClockSource+0x24>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800388c:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <LL_RCC_SetADCClockSource+0x24>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80038a8:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <LL_RCC_PLL_Enable+0x18>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a03      	ldr	r2, [pc, #12]	@ (80038bc <LL_RCC_PLL_Enable+0x18>)
 80038ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40021000 	.word	0x40021000

080038c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <LL_RCC_PLL_IsReady+0x20>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40021000 	.word	0x40021000

080038e4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80038ee:	4b08      	ldr	r3, [pc, #32]	@ (8003910 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	430b      	orrs	r3, r1
 8003900:	4903      	ldr	r1, [pc, #12]	@ (8003910 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr
 8003910:	40021000 	.word	0x40021000

08003914 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800391c:	4b08      	ldr	r3, [pc, #32]	@ (8003940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	4907      	ldr	r1, [pc, #28]	@ (8003940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4313      	orrs	r3, r2
 8003926:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003928:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4013      	ands	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40021000 	.word	0x40021000

08003944 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800394c:	4b08      	ldr	r3, [pc, #32]	@ (8003970 <LL_APB1_GRP1_EnableClock+0x2c>)
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	4907      	ldr	r1, [pc, #28]	@ (8003970 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003958:	4b05      	ldr	r3, [pc, #20]	@ (8003970 <LL_APB1_GRP1_EnableClock+0x2c>)
 800395a:	69da      	ldr	r2, [r3, #28]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4013      	ands	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003962:	68fb      	ldr	r3, [r7, #12]
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	bc80      	pop	{r7}
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000

08003974 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800397c:	4b08      	ldr	r3, [pc, #32]	@ (80039a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	4907      	ldr	r1, [pc, #28]	@ (80039a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4313      	orrs	r3, r2
 8003986:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4013      	ands	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003992:	68fb      	ldr	r3, [r7, #12]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40021000 	.word	0x40021000

080039a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80039ac:	4b06      	ldr	r3, [pc, #24]	@ (80039c8 <LL_FLASH_SetLatency+0x24>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 0207 	bic.w	r2, r3, #7
 80039b4:	4904      	ldr	r1, [pc, #16]	@ (80039c8 <LL_FLASH_SetLatency+0x24>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000

080039cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80039d0:	4b03      	ldr	r3, [pc, #12]	@ (80039e0 <LL_FLASH_GetLatency+0x14>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0307 	and.w	r3, r3, #7
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	40022000 	.word	0x40022000

080039e4 <LL_TIM_DisableARRPreload>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr

08003a02 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a14:	f023 0307 	bic.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	605a      	str	r2, [r3, #4]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <LL_USART_Enable>:
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	60da      	str	r2, [r3, #12]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bc80      	pop	{r7}
 8003a88:	4770      	bx	lr

08003a8a <LL_USART_ConfigAsyncMode>:
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	615a      	str	r2, [r3, #20]
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <LL_GPIO_SetPinMode>:
{
 8003ab4:	b490      	push	{r4, r7}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	0e1b      	lsrs	r3, r3, #24
 8003ac8:	4413      	add	r3, r2
 8003aca:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	fa93 f3a3 	rbit	r3, r3
 8003ad8:	613b      	str	r3, [r7, #16]
  return result;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	210f      	movs	r1, #15
 8003ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aea:	43db      	mvns	r3, r3
 8003aec:	401a      	ands	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	fa93 f3a3 	rbit	r3, r3
 8003af8:	61bb      	str	r3, [r7, #24]
  return result;
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	fab3 f383 	clz	r3, r3
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	6023      	str	r3, [r4, #0]
}
 8003b0e:	bf00      	nop
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc90      	pop	{r4, r7}
 8003b16:	4770      	bx	lr

08003b18 <LL_GPIO_SetPinPull>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	401a      	ands	r2, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	0a1b      	lsrs	r3, r3, #8
 8003b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	fa93 f3a3 	rbit	r3, r3
 8003b3c:	613b      	str	r3, [r7, #16]
  return result;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	4619      	mov	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	408b      	lsls	r3, r1
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	60da      	str	r2, [r3, #12]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <LL_GPIO_ResetOutputPin>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	0a1b      	lsrs	r3, r3, #8
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	615a      	str	r2, [r3, #20]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr
	...

08003b7c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003b88:	4a03      	ldr	r2, [pc, #12]	@ (8003b98 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8003b8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b8e:	6053      	str	r3, [r2, #4]
}
 8003b90:	bf00      	nop
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr
 8003b98:	40010000 	.word	0x40010000

08003b9c <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8003ba6:	4a13      	ldr	r2, [pc, #76]	@ (8003bf4 <LL_GPIO_AF_SetEXTISource+0x58>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	3302      	adds	r3, #2
 8003bae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	ea02 0103 	and.w	r1, r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	60bb      	str	r3, [r7, #8]
  return result;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	fab3 f383 	clz	r3, r3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	fa03 f202 	lsl.w	r2, r3, r2
 8003bda:	4806      	ldr	r0, [pc, #24]	@ (8003bf4 <LL_GPIO_AF_SetEXTISource+0x58>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	430a      	orrs	r2, r1
 8003be2:	3302      	adds	r3, #2
 8003be4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bc80      	pop	{r7}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	40010000 	.word	0x40010000

08003bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f7ff feb9 	bl	8003974 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003c02:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003c06:	f7ff fe9d 	bl	8003944 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0a:	2003      	movs	r0, #3
 8003c0c:	f7ff fba0 	bl	8003350 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8003c10:	f7ff fbc2 	bl	8003398 <__NVIC_GetPriorityGrouping>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2200      	movs	r2, #0
 8003c18:	210f      	movs	r1, #15
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff fc10 	bl	8003440 <NVIC_EncodePriority>
 8003c20:	4603      	mov	r3, r0
 8003c22:	4619      	mov	r1, r3
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295
 8003c28:	f7ff fbe0 	bl	80033ec <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8003c2c:	f7ff ffa6 	bl	8003b7c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c30:	f000 f844 	bl	8003cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c34:	f000 fa68 	bl	8004108 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c38:	f000 fa4e 	bl	80040d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003c3c:	f000 f880 	bl	8003d40 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003c40:	f000 f97a 	bl	8003f38 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003c44:	f000 f9e0 	bl	8004008 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003c48:	f000 f914 	bl	8003e74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c4c:	f000 f944 	bl	8003ed8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Application Initialize
  APP_READ_DATA_Init();
 8003c50:	f7fe fa98 	bl	8002184 <APP_READ_DATA_Init>
  APP_CALCULATOR_PF_Init();
 8003c54:	f7fd fcbc 	bl	80015d0 <APP_CALCULATOR_PF_Init>
  APP_DATA_TRANS_REC_Init();
 8003c58:	f7fd fddc 	bl	8001814 <APP_DATA_TRANS_REC_Init>
  APP_COMMAND_Init();
 8003c5c:	f7fd fabc 	bl	80011d8 <APP_COMMAND_Init>
  APP_STATUS_LED_Init();
 8003c60:	f7fe fc50 	bl	8002504 <APP_STATUS_LED_Init>
  APP_LED_7_SEG_Init();
 8003c64:	f7fd ff50 	bl	8001b08 <APP_LED_7_SEG_Init>

  // Initialize Scheduler
  SCH_Initialize();
 8003c68:	f001 faa0 	bl	80051ac <SCH_Initialize>

  // Create Timer
  APP_STATUS_LED_CreateTimer();
 8003c6c:	f7fe fc62 	bl	8002534 <APP_STATUS_LED_CreateTimer>

  // Application Create Task
  APP_READ_DATA_CreateTask();
 8003c70:	f7fe fa7c 	bl	800216c <APP_READ_DATA_CreateTask>
  APP_CALCULATOR_PF_CreateTask();
 8003c74:	f7fd fca0 	bl	80015b8 <APP_CALCULATOR_PF_CreateTask>
  APP_DATA_TRANS_REC_CreateTask();
 8003c78:	f7fd fdc0 	bl	80017fc <APP_DATA_TRANS_REC_CreateTask>
  APP_COMMAND_CreateTask();
 8003c7c:	f7fd face 	bl	800121c <APP_COMMAND_CreateTask>
  APP_LED_7_SEG_CreateTask();
 8003c80:	f7fd ffbc 	bl	8001bfc <APP_LED_7_SEG_CreateTask>
  APP_STATUS_LED_CreateTask();
 8003c84:	f7fe fc6a 	bl	800255c <APP_STATUS_LED_CreateTask>

  // Start Scheduler
  SCH_StartScheduler();
 8003c88:	f001 fb80 	bl	800538c <SCH_StartScheduler>

  // Start ADC - TIM3
  BSP_ADC_Start_Calibration(ADC1);
 8003c8c:	4808      	ldr	r0, [pc, #32]	@ (8003cb0 <main+0xb8>)
 8003c8e:	f7fe fda5 	bl	80027dc <BSP_ADC_Start_Calibration>
  BSP_ADC_Start_DMA(ADC1, (uint16_t *)s_data_system.u16_adc_value, 2);
 8003c92:	2202      	movs	r2, #2
 8003c94:	4907      	ldr	r1, [pc, #28]	@ (8003cb4 <main+0xbc>)
 8003c96:	4806      	ldr	r0, [pc, #24]	@ (8003cb0 <main+0xb8>)
 8003c98:	f7fe fdde 	bl	8002858 <BSP_ADC_Start_DMA>
  TIM3->CR1 |= TIM_CR1_CEN;
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <main+0xc0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a05      	ldr	r2, [pc, #20]	@ (8003cb8 <main+0xc0>)
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8003ca8:	f001 fb76 	bl	8005398 <SCH_HandleScheduledTask>
 8003cac:	e7fc      	b.n	8003ca8 <main+0xb0>
 8003cae:	bf00      	nop
 8003cb0:	40012400 	.word	0x40012400
 8003cb4:	2000066c 	.word	0x2000066c
 8003cb8:	40000400 	.word	0x40000400

08003cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8003cc0:	2002      	movs	r0, #2
 8003cc2:	f7ff fe6f 	bl	80039a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8003cc6:	bf00      	nop
 8003cc8:	f7ff fe80 	bl	80039cc <LL_FLASH_GetLatency>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d1fa      	bne.n	8003cc8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8003cd2:	f7ff fd57 	bl	8003784 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003cd6:	bf00      	nop
 8003cd8:	f7ff fd62 	bl	80037a0 <LL_RCC_HSE_IsReady>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d1fa      	bne.n	8003cd8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_7);
 8003ce2:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
 8003ce6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003cea:	f7ff fdfb 	bl	80038e4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003cee:	f7ff fdd9 	bl	80038a4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003cf2:	bf00      	nop
 8003cf4:	f7ff fde4 	bl	80038c0 <LL_RCC_PLL_IsReady>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d1fa      	bne.n	8003cf4 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f7ff fd80 	bl	8003804 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8003d04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003d08:	f7ff fd90 	bl	800382c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7ff fda1 	bl	8003854 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003d12:	2002      	movs	r0, #2
 8003d14:	f7ff fd56 	bl	80037c4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003d18:	bf00      	nop
 8003d1a:	f7ff fd67 	bl	80037ec <LL_RCC_GetSysClkSource>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d1fa      	bne.n	8003d1a <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(56000000);
 8003d24:	4805      	ldr	r0, [pc, #20]	@ (8003d3c <SystemClock_Config+0x80>)
 8003d26:	f001 f975 	bl	8005014 <LL_Init1msTick>
  LL_SetSystemCoreClock(56000000);
 8003d2a:	4804      	ldr	r0, [pc, #16]	@ (8003d3c <SystemClock_Config+0x80>)
 8003d2c:	f001 f9a4 	bl	8005078 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_4);
 8003d30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003d34:	f7ff fda2 	bl	800387c <LL_RCC_SetADCClockSource>
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	03567e00 	.word	0x03567e00

08003d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b08e      	sub	sp, #56	@ 0x38
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003d46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003d50:	2300      	movs	r3, #0
 8003d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003d54:	f107 0318 	add.w	r3, r7, #24
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
 8003d6c:	609a      	str	r2, [r3, #8]
 8003d6e:	60da      	str	r2, [r3, #12]
 8003d70:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003d72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003d76:	f7ff fdfd 	bl	8003974 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003d7a:	2004      	movs	r0, #4
 8003d7c:	f7ff fdfa 	bl	8003974 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8003d80:	f240 6306 	movw	r3, #1542	@ 0x606
 8003d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4834      	ldr	r0, [pc, #208]	@ (8003e60 <MX_ADC1_Init+0x120>)
 8003d90:	f000 fe23 	bl	80049da <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003d94:	2200      	movs	r2, #0
 8003d96:	2101      	movs	r1, #1
 8003d98:	4832      	ldr	r0, [pc, #200]	@ (8003e64 <MX_ADC1_Init+0x124>)
 8003d9a:	f7ff fc03 	bl	80035a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2101      	movs	r1, #1
 8003da2:	4830      	ldr	r0, [pc, #192]	@ (8003e64 <MX_ADC1_Init+0x124>)
 8003da4:	f7ff fccc 	bl	8003740 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003da8:	2220      	movs	r2, #32
 8003daa:	2101      	movs	r1, #1
 8003dac:	482d      	ldr	r0, [pc, #180]	@ (8003e64 <MX_ADC1_Init+0x124>)
 8003dae:	f7ff fc1d 	bl	80035ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2101      	movs	r1, #1
 8003db6:	482b      	ldr	r0, [pc, #172]	@ (8003e64 <MX_ADC1_Init+0x124>)
 8003db8:	f7ff fc3a 	bl	8003630 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003dbc:	2280      	movs	r2, #128	@ 0x80
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4828      	ldr	r0, [pc, #160]	@ (8003e64 <MX_ADC1_Init+0x124>)
 8003dc2:	f7ff fc57 	bl	8003674 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 8003dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4825      	ldr	r0, [pc, #148]	@ (8003e64 <MX_ADC1_Init+0x124>)
 8003dce:	f7ff fc73 	bl	80036b8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 8003dd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4822      	ldr	r0, [pc, #136]	@ (8003e64 <MX_ADC1_Init+0x124>)
 8003dda:	f7ff fc8f 	bl	80036fc <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003dde:	2300      	movs	r3, #0
 8003de0:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8003de2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003de8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003dec:	4619      	mov	r1, r3
 8003dee:	481e      	ldr	r0, [pc, #120]	@ (8003e68 <MX_ADC1_Init+0x128>)
 8003df0:	f000 fbbe 	bl	8004570 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8003df8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	481a      	ldr	r0, [pc, #104]	@ (8003e68 <MX_ADC1_Init+0x128>)
 8003e00:	f000 fb84 	bl	800450c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 8003e04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003e08:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8003e0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003e0e:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8003e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003e1e:	f107 0318 	add.w	r3, r7, #24
 8003e22:	4619      	mov	r1, r3
 8003e24:	4810      	ldr	r0, [pc, #64]	@ (8003e68 <MX_ADC1_Init+0x128>)
 8003e26:	f000 fbca 	bl	80045be <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8003e2a:	4a10      	ldr	r2, [pc, #64]	@ (8003e6c <MX_ADC1_Init+0x12c>)
 8003e2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e30:	480d      	ldr	r0, [pc, #52]	@ (8003e68 <MX_ADC1_Init+0x128>)
 8003e32:	f7ff fb37 	bl	80034a4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003e36:	2207      	movs	r2, #7
 8003e38:	490c      	ldr	r1, [pc, #48]	@ (8003e6c <MX_ADC1_Init+0x12c>)
 8003e3a:	480b      	ldr	r0, [pc, #44]	@ (8003e68 <MX_ADC1_Init+0x128>)
 8003e3c:	f7ff fb67 	bl	800350e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8003e40:	4a0b      	ldr	r2, [pc, #44]	@ (8003e70 <MX_ADC1_Init+0x130>)
 8003e42:	f240 2105 	movw	r1, #517	@ 0x205
 8003e46:	4808      	ldr	r0, [pc, #32]	@ (8003e68 <MX_ADC1_Init+0x128>)
 8003e48:	f7ff fb2c 	bl	80034a4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	4908      	ldr	r1, [pc, #32]	@ (8003e70 <MX_ADC1_Init+0x130>)
 8003e50:	4805      	ldr	r0, [pc, #20]	@ (8003e68 <MX_ADC1_Init+0x128>)
 8003e52:	f7ff fb5c 	bl	800350e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003e56:	bf00      	nop
 8003e58:	3738      	adds	r7, #56	@ 0x38
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40010800 	.word	0x40010800
 8003e64:	40020000 	.word	0x40020000
 8003e68:	40012400 	.word	0x40012400
 8003e6c:	02300001 	.word	0x02300001
 8003e70:	02600002 	.word	0x02600002

08003e74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003e7a:	1d3b      	adds	r3, r7, #4
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f7ff fd5b 	bl	8003944 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8003e96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e9a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003ea8:	f000 ff46 	bl	8004d38 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003eac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003eb0:	f7ff fd98 	bl	80039e4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003eba:	f7ff fda2 	bl	8003a02 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003ec4:	f7ff fdb1 	bl	8003a2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003ec8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003ecc:	f7ff fdbf 	bl	8003a4e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ed0:	bf00      	nop
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003eec:	2002      	movs	r0, #2
 8003eee:	f7ff fd29 	bl	8003944 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 55999;
 8003ef2:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8003ef6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19;
 8003efc:	2313      	movs	r3, #19
 8003efe:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003f04:	1d3b      	adds	r3, r7, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	480a      	ldr	r0, [pc, #40]	@ (8003f34 <MX_TIM3_Init+0x5c>)
 8003f0a:	f000 ff15 	bl	8004d38 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003f0e:	4809      	ldr	r0, [pc, #36]	@ (8003f34 <MX_TIM3_Init+0x5c>)
 8003f10:	f7ff fd68 	bl	80039e4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003f14:	2100      	movs	r1, #0
 8003f16:	4807      	ldr	r0, [pc, #28]	@ (8003f34 <MX_TIM3_Init+0x5c>)
 8003f18:	f7ff fd73 	bl	8003a02 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 8003f1c:	2120      	movs	r1, #32
 8003f1e:	4805      	ldr	r0, [pc, #20]	@ (8003f34 <MX_TIM3_Init+0x5c>)
 8003f20:	f7ff fd83 	bl	8003a2a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003f24:	4803      	ldr	r0, [pc, #12]	@ (8003f34 <MX_TIM3_Init+0x5c>)
 8003f26:	f7ff fd92 	bl	8003a4e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40000400 	.word	0x40000400

08003f38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	@ 0x30
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003f3e:	f107 0314 	add.w	r3, r7, #20
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	611a      	str	r2, [r3, #16]
 8003f4e:	615a      	str	r2, [r3, #20]
 8003f50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f52:	463b      	mov	r3, r7
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003f60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003f64:	f7ff fd06 	bl	8003974 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003f68:	2004      	movs	r0, #4
 8003f6a:	f7ff fd03 	bl	8003974 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003f6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ff8 <MX_USART1_UART_Init+0xc0>)
 8003f70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003f72:	2309      	movs	r3, #9
 8003f74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7e:	463b      	mov	r3, r7
 8003f80:	4619      	mov	r1, r3
 8003f82:	481e      	ldr	r0, [pc, #120]	@ (8003ffc <MX_USART1_UART_Init+0xc4>)
 8003f84:	f000 fd29 	bl	80049da <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003f88:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <MX_USART1_UART_Init+0xc8>)
 8003f8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003f8c:	2304      	movs	r3, #4
 8003f8e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f90:	463b      	mov	r3, r7
 8003f92:	4619      	mov	r1, r3
 8003f94:	4819      	ldr	r0, [pc, #100]	@ (8003ffc <MX_USART1_UART_Init+0xc4>)
 8003f96:	f000 fd20 	bl	80049da <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8003f9a:	f7ff f9fd 	bl	8003398 <__NVIC_GetPriorityGrouping>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fa4b 	bl	8003440 <NVIC_EncodePriority>
 8003faa:	4603      	mov	r3, r0
 8003fac:	4619      	mov	r1, r3
 8003fae:	2025      	movs	r0, #37	@ 0x25
 8003fb0:	f7ff fa1c 	bl	80033ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003fb4:	2025      	movs	r0, #37	@ 0x25
 8003fb6:	f7ff f9fd 	bl	80033b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003fba:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003fbe:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003fcc:	230c      	movs	r3, #12
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4809      	ldr	r0, [pc, #36]	@ (8004004 <MX_USART1_UART_Init+0xcc>)
 8003fe0:	f000 ff9e 	bl	8004f20 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003fe4:	4807      	ldr	r0, [pc, #28]	@ (8004004 <MX_USART1_UART_Init+0xcc>)
 8003fe6:	f7ff fd50 	bl	8003a8a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003fea:	4806      	ldr	r0, [pc, #24]	@ (8004004 <MX_USART1_UART_Init+0xcc>)
 8003fec:	f7ff fd3e 	bl	8003a6c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ff0:	bf00      	nop
 8003ff2:	3730      	adds	r7, #48	@ 0x30
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	04020002 	.word	0x04020002
 8003ffc:	40010800 	.word	0x40010800
 8004000:	04040004 	.word	0x04040004
 8004004:	40013800 	.word	0x40013800

08004008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	@ 0x30
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800400e:	f107 0314 	add.w	r3, r7, #20
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	611a      	str	r2, [r3, #16]
 800401e:	615a      	str	r2, [r3, #20]
 8004020:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004022:	463b      	mov	r3, r7
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8004030:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004034:	f7ff fc86 	bl	8003944 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004038:	2008      	movs	r0, #8
 800403a:	f7ff fc9b 	bl	8003974 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800403e:	4b22      	ldr	r3, [pc, #136]	@ (80040c8 <MX_USART3_UART_Init+0xc0>)
 8004040:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004042:	2309      	movs	r3, #9
 8004044:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8004046:	2303      	movs	r3, #3
 8004048:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800404e:	463b      	mov	r3, r7
 8004050:	4619      	mov	r1, r3
 8004052:	481e      	ldr	r0, [pc, #120]	@ (80040cc <MX_USART3_UART_Init+0xc4>)
 8004054:	f000 fcc1 	bl	80049da <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8004058:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <MX_USART3_UART_Init+0xc8>)
 800405a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 800405c:	2304      	movs	r3, #4
 800405e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004060:	463b      	mov	r3, r7
 8004062:	4619      	mov	r1, r3
 8004064:	4819      	ldr	r0, [pc, #100]	@ (80040cc <MX_USART3_UART_Init+0xc4>)
 8004066:	f000 fcb8 	bl	80049da <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 800406a:	f7ff f995 	bl	8003398 <__NVIC_GetPriorityGrouping>
 800406e:	4603      	mov	r3, r0
 8004070:	2200      	movs	r2, #0
 8004072:	2104      	movs	r1, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff f9e3 	bl	8003440 <NVIC_EncodePriority>
 800407a:	4603      	mov	r3, r0
 800407c:	4619      	mov	r1, r3
 800407e:	2027      	movs	r0, #39	@ 0x27
 8004080:	f7ff f9b4 	bl	80033ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8004084:	2027      	movs	r0, #39	@ 0x27
 8004086:	f7ff f995 	bl	80033b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800408a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800408e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8004090:	2300      	movs	r3, #0
 8004092:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8004098:	2300      	movs	r3, #0
 800409a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800409c:	230c      	movs	r3, #12
 800409e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	4619      	mov	r1, r3
 80040ae:	4809      	ldr	r0, [pc, #36]	@ (80040d4 <MX_USART3_UART_Init+0xcc>)
 80040b0:	f000 ff36 	bl	8004f20 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 80040b4:	4807      	ldr	r0, [pc, #28]	@ (80040d4 <MX_USART3_UART_Init+0xcc>)
 80040b6:	f7ff fce8 	bl	8003a8a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 80040ba:	4806      	ldr	r0, [pc, #24]	@ (80040d4 <MX_USART3_UART_Init+0xcc>)
 80040bc:	f7ff fcd6 	bl	8003a6c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040c0:	bf00      	nop
 80040c2:	3730      	adds	r7, #48	@ 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	04040004 	.word	0x04040004
 80040cc:	40010c00 	.word	0x40010c00
 80040d0:	04080008 	.word	0x04080008
 80040d4:	40004800 	.word	0x40004800

080040d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80040dc:	2001      	movs	r0, #1
 80040de:	f7ff fc19 	bl	8003914 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 80040e2:	f7ff f959 	bl	8003398 <__NVIC_GetPriorityGrouping>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2200      	movs	r2, #0
 80040ea:	2101      	movs	r1, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f9a7 	bl	8003440 <NVIC_EncodePriority>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4619      	mov	r1, r3
 80040f6:	200b      	movs	r0, #11
 80040f8:	f7ff f978 	bl	80033ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040fc:	200b      	movs	r0, #11
 80040fe:	f7ff f959 	bl	80033b4 <__NVIC_EnableIRQ>

}
 8004102:	bf00      	nop
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800410e:	f107 0318 	add.w	r3, r7, #24
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	1d3b      	adds	r3, r7, #4
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004126:	2020      	movs	r0, #32
 8004128:	f7ff fc24 	bl	8003974 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800412c:	2004      	movs	r0, #4
 800412e:	f7ff fc21 	bl	8003974 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004132:	2008      	movs	r0, #8
 8004134:	f7ff fc1e 	bl	8003974 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8004138:	4937      	ldr	r1, [pc, #220]	@ (8004218 <MX_GPIO_Init+0x110>)
 800413a:	4838      	ldr	r0, [pc, #224]	@ (800421c <MX_GPIO_Init+0x114>)
 800413c:	f7ff fd0e 	bl	8003b5c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8004140:	4937      	ldr	r1, [pc, #220]	@ (8004220 <MX_GPIO_Init+0x118>)
 8004142:	4838      	ldr	r0, [pc, #224]	@ (8004224 <MX_GPIO_Init+0x11c>)
 8004144:	f7ff fd0a 	bl	8003b5c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8004148:	4b33      	ldr	r3, [pc, #204]	@ (8004218 <MX_GPIO_Init+0x110>)
 800414a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800414c:	2301      	movs	r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004150:	2302      	movs	r3, #2
 8004152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004158:	1d3b      	adds	r3, r7, #4
 800415a:	4619      	mov	r1, r3
 800415c:	482f      	ldr	r0, [pc, #188]	@ (800421c <MX_GPIO_Init+0x114>)
 800415e:	f000 fc3c 	bl	80049da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8004162:	4b2f      	ldr	r3, [pc, #188]	@ (8004220 <MX_GPIO_Init+0x118>)
 8004164:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004166:	2301      	movs	r3, #1
 8004168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800416a:	2302      	movs	r3, #2
 800416c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800416e:	2300      	movs	r3, #0
 8004170:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	4619      	mov	r1, r3
 8004176:	482b      	ldr	r0, [pc, #172]	@ (8004224 <MX_GPIO_Init+0x11c>)
 8004178:	f000 fc2f 	bl	80049da <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 800417c:	492a      	ldr	r1, [pc, #168]	@ (8004228 <MX_GPIO_Init+0x120>)
 800417e:	2001      	movs	r0, #1
 8004180:	f7ff fd0c 	bl	8003b9c <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE6);
 8004184:	4929      	ldr	r1, [pc, #164]	@ (800422c <MX_GPIO_Init+0x124>)
 8004186:	2001      	movs	r0, #1
 8004188:	f7ff fd08 	bl	8003b9c <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 800418c:	2320      	movs	r3, #32
 800418e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004190:	2301      	movs	r3, #1
 8004192:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004194:	2300      	movs	r3, #0
 8004196:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8004198:	2301      	movs	r3, #1
 800419a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800419c:	f107 0318 	add.w	r3, r7, #24
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fae3 	bl	800476c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80041a6:	2340      	movs	r3, #64	@ 0x40
 80041a8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80041aa:	2301      	movs	r3, #1
 80041ac:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80041ae:	2300      	movs	r3, #0
 80041b0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80041b2:	2301      	movs	r3, #1
 80041b4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80041b6:	f107 0318 	add.w	r3, r7, #24
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fad6 	bl	800476c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 80041c0:	2201      	movs	r2, #1
 80041c2:	f242 0120 	movw	r1, #8224	@ 0x2020
 80041c6:	4817      	ldr	r0, [pc, #92]	@ (8004224 <MX_GPIO_Init+0x11c>)
 80041c8:	f7ff fca6 	bl	8003b18 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 80041cc:	2201      	movs	r2, #1
 80041ce:	f244 0140 	movw	r1, #16448	@ 0x4040
 80041d2:	4814      	ldr	r0, [pc, #80]	@ (8004224 <MX_GPIO_Init+0x11c>)
 80041d4:	f7ff fca0 	bl	8003b18 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 80041d8:	2208      	movs	r2, #8
 80041da:	f242 0120 	movw	r1, #8224	@ 0x2020
 80041de:	4811      	ldr	r0, [pc, #68]	@ (8004224 <MX_GPIO_Init+0x11c>)
 80041e0:	f7ff fc68 	bl	8003ab4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 80041e4:	2208      	movs	r2, #8
 80041e6:	f244 0140 	movw	r1, #16448	@ 0x4040
 80041ea:	480e      	ldr	r0, [pc, #56]	@ (8004224 <MX_GPIO_Init+0x11c>)
 80041ec:	f7ff fc62 	bl	8003ab4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80041f0:	f7ff f8d2 	bl	8003398 <__NVIC_GetPriorityGrouping>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2200      	movs	r2, #0
 80041f8:	2102      	movs	r1, #2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f920 	bl	8003440 <NVIC_EncodePriority>
 8004200:	4603      	mov	r3, r0
 8004202:	4619      	mov	r1, r3
 8004204:	2017      	movs	r0, #23
 8004206:	f7ff f8f1 	bl	80033ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800420a:	2017      	movs	r0, #23
 800420c:	f7ff f8d2 	bl	80033b4 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004210:	bf00      	nop
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	0401f8f9 	.word	0x0401f8f9
 800421c:	40010800 	.word	0x40010800
 8004220:	04f01fff 	.word	0x04f01fff
 8004224:	40010c00 	.word	0x40010c00
 8004228:	00f00001 	.word	0x00f00001
 800422c:	0f000001 	.word	0x0f000001

08004230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <NMI_Handler+0x4>

08004238 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800423c:	bf00      	nop
 800423e:	e7fd      	b.n	800423c <HardFault_Handler+0x4>

08004240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <MemManage_Handler+0x4>

08004248 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <BusFault_Handler+0x4>

08004250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <UsageFault_Handler+0x4>

08004258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800425c:	bf00      	nop
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  BSP_ADC_TimeOut();
 8004280:	f7fe fb1e 	bl	80028c0 <BSP_ADC_TimeOut>
  BSP_UART_TimeOut();
 8004284:	f7fe ffca 	bl	800321c <BSP_UART_TimeOut>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004288:	bf00      	nop
 800428a:	bd80      	pop	{r7, pc}

0800428c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  status = BSP_DMA_IRQ_Channel1_Handler(DMA1);
 8004290:	4806      	ldr	r0, [pc, #24]	@ (80042ac <DMA1_Channel1_IRQHandler+0x20>)
 8004292:	f7fe fced 	bl	8002c70 <BSP_DMA_IRQ_Channel1_Handler>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <DMA1_Channel1_IRQHandler+0x24>)
 800429c:	701a      	strb	r2, [r3, #0]
  APP_READ_DATA_HandleDMA_IRQ(status);
 800429e:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <DMA1_Channel1_IRQHandler+0x24>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fd ff92 	bl	80021cc <APP_READ_DATA_HandleDMA_IRQ>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80042a8:	bf00      	nop
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40020000 	.word	0x40020000
 80042b0:	20000730 	.word	0x20000730

080042b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  APP_CALCULATOR_PF_EXTI_IRQHandler();
 80042b8:	f7fd f9aa 	bl	8001610 <APP_CALCULATOR_PF_EXTI_IRQHandler>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}

080042c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)&s_data_system.s_uart_data_trans_rec);
 80042c4:	4802      	ldr	r0, [pc, #8]	@ (80042d0 <USART1_IRQHandler+0x10>)
 80042c6:	f7fe ffbb 	bl	8003240 <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	2000051c 	.word	0x2000051c

080042d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)&s_data_system.s_uart_cmd);
 80042d8:	4802      	ldr	r0, [pc, #8]	@ (80042e4 <USART3_IRQHandler+0x10>)
 80042da:	f7fe ffb1 	bl	8003240 <BSP_UART_ISR>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	200005bc 	.word	0x200005bc

080042e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return 1;
 80042ec:	2301      	movs	r3, #1
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <_kill>:

int _kill(int pid, int sig)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004300:	f001 fe78 	bl	8005ff4 <__errno>
 8004304:	4603      	mov	r3, r0
 8004306:	2216      	movs	r2, #22
 8004308:	601a      	str	r2, [r3, #0]
  return -1;
 800430a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <_exit>:

void _exit (int status)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800431e:	f04f 31ff 	mov.w	r1, #4294967295
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7ff ffe7 	bl	80042f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004328:	bf00      	nop
 800432a:	e7fd      	b.n	8004328 <_exit+0x12>

0800432c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004338:	2300      	movs	r3, #0
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	e00a      	b.n	8004354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800433e:	f3af 8000 	nop.w
 8004342:	4601      	mov	r1, r0
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	60ba      	str	r2, [r7, #8]
 800434a:	b2ca      	uxtb	r2, r1
 800434c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	3301      	adds	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	dbf0      	blt.n	800433e <_read+0x12>
  }

  return len;
 800435c:	687b      	ldr	r3, [r7, #4]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e009      	b.n	800438c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	60ba      	str	r2, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	3301      	adds	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	429a      	cmp	r2, r3
 8004392:	dbf1      	blt.n	8004378 <_write+0x12>
  }
  return len;
 8004394:	687b      	ldr	r3, [r7, #4]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <_close>:

int _close(int file)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043c4:	605a      	str	r2, [r3, #4]
  return 0;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <_isatty>:

int _isatty(int file)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043da:	2301      	movs	r3, #1
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr

080043e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr
	...

08004400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004408:	4a14      	ldr	r2, [pc, #80]	@ (800445c <_sbrk+0x5c>)
 800440a:	4b15      	ldr	r3, [pc, #84]	@ (8004460 <_sbrk+0x60>)
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004414:	4b13      	ldr	r3, [pc, #76]	@ (8004464 <_sbrk+0x64>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800441c:	4b11      	ldr	r3, [pc, #68]	@ (8004464 <_sbrk+0x64>)
 800441e:	4a12      	ldr	r2, [pc, #72]	@ (8004468 <_sbrk+0x68>)
 8004420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <_sbrk+0x64>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	429a      	cmp	r2, r3
 800442e:	d207      	bcs.n	8004440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004430:	f001 fde0 	bl	8005ff4 <__errno>
 8004434:	4603      	mov	r3, r0
 8004436:	220c      	movs	r2, #12
 8004438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800443a:	f04f 33ff 	mov.w	r3, #4294967295
 800443e:	e009      	b.n	8004454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004440:	4b08      	ldr	r3, [pc, #32]	@ (8004464 <_sbrk+0x64>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004446:	4b07      	ldr	r3, [pc, #28]	@ (8004464 <_sbrk+0x64>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	4a05      	ldr	r2, [pc, #20]	@ (8004464 <_sbrk+0x64>)
 8004450:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20005000 	.word	0x20005000
 8004460:	00000400 	.word	0x00000400
 8004464:	20000734 	.word	0x20000734
 8004468:	200008f0 	.word	0x200008f0

0800446c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr

08004478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004478:	f7ff fff8 	bl	800446c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800447c:	480b      	ldr	r0, [pc, #44]	@ (80044ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800447e:	490c      	ldr	r1, [pc, #48]	@ (80044b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004480:	4a0c      	ldr	r2, [pc, #48]	@ (80044b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004484:	e002      	b.n	800448c <LoopCopyDataInit>

08004486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800448a:	3304      	adds	r3, #4

0800448c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800448c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800448e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004490:	d3f9      	bcc.n	8004486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004492:	4a09      	ldr	r2, [pc, #36]	@ (80044b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004494:	4c09      	ldr	r4, [pc, #36]	@ (80044bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004498:	e001      	b.n	800449e <LoopFillZerobss>

0800449a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800449a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800449c:	3204      	adds	r2, #4

0800449e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800449e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044a0:	d3fb      	bcc.n	800449a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044a2:	f001 fdad 	bl	8006000 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044a6:	f7ff fba7 	bl	8003bf8 <main>
  bx lr
 80044aa:	4770      	bx	lr
  ldr r0, =_sdata
 80044ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044b0:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80044b4:	08008690 	.word	0x08008690
  ldr r2, =_sbss
 80044b8:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80044bc:	200008ec 	.word	0x200008ec

080044c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044c0:	e7fe      	b.n	80044c0 <ADC1_2_IRQHandler>

080044c2 <LL_ADC_REG_SetSequencerLength>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <LL_ADC_IsEnabled>:
{
 80044e6:	b480      	push	{r7}
 80044e8:	b083      	sub	sp, #12
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	bf0c      	ite	eq
 80044fa:	2301      	moveq	r3, #1
 80044fc:	2300      	movne	r3, #0
 80044fe:	b2db      	uxtb	r3, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr
	...

0800450c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8004516:	2300      	movs	r3, #0
 8004518:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800451a:	4813      	ldr	r0, [pc, #76]	@ (8004568 <LL_ADC_CommonInit+0x5c>)
 800451c:	f7ff ffe3 	bl	80044e6 <LL_ADC_IsEnabled>
 8004520:	4604      	mov	r4, r0
 8004522:	4812      	ldr	r0, [pc, #72]	@ (800456c <LL_ADC_CommonInit+0x60>)
 8004524:	f7ff ffdf 	bl	80044e6 <LL_ADC_IsEnabled>
 8004528:	4603      	mov	r3, r0
 800452a:	4323      	orrs	r3, r4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d114      	bne.n	800455a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]
 800454a:	e008      	b.n	800455e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]
 8004558:	e001      	b.n	800455e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	bd90      	pop	{r4, r7, pc}
 8004568:	40012400 	.word	0x40012400
 800456c:	40012800 	.word	0x40012800

08004570 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ffb1 	bl	80044e6 <LL_ADC_IsEnabled>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d112      	bne.n	80045b0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	609a      	str	r2, [r3, #8]
 80045ae:	e001      	b.n	80045b4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80045c8:	2300      	movs	r3, #0
 80045ca:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff ff8a 	bl	80044e6 <LL_ADC_IsEnabled>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d131      	bne.n	800463c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00c      	beq.n	80045fa <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6859      	ldr	r1, [r3, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	430b      	orrs	r3, r1
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	e008      	b.n	800460c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8004614:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	6811      	ldr	r1, [r2, #0]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	68d2      	ldr	r2, [r2, #12]
 8004620:	4311      	orrs	r1, r2
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	6912      	ldr	r2, [r2, #16]
 8004626:	430a      	orrs	r2, r1
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff44 	bl	80044c2 <LL_ADC_REG_SetSequencerLength>
 800463a:	e001      	b.n	8004640 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <LL_EXTI_EnableIT_0_31>:
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <LL_EXTI_EnableIT_0_31+0x20>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4904      	ldr	r1, [pc, #16]	@ (800466c <LL_EXTI_EnableIT_0_31+0x20>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40010400 	.word	0x40010400

08004670 <LL_EXTI_DisableIT_0_31>:
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <LL_EXTI_DisableIT_0_31+0x20>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	43db      	mvns	r3, r3
 8004680:	4903      	ldr	r1, [pc, #12]	@ (8004690 <LL_EXTI_DisableIT_0_31+0x20>)
 8004682:	4013      	ands	r3, r2
 8004684:	600b      	str	r3, [r1, #0]
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr
 8004690:	40010400 	.word	0x40010400

08004694 <LL_EXTI_EnableEvent_0_31>:
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800469c:	4b05      	ldr	r3, [pc, #20]	@ (80046b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	4904      	ldr	r1, [pc, #16]	@ (80046b4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010400 	.word	0x40010400

080046b8 <LL_EXTI_DisableEvent_0_31>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	4903      	ldr	r1, [pc, #12]	@ (80046d8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80046ca:	4013      	ands	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	40010400 	.word	0x40010400

080046dc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80046e4:	4b05      	ldr	r3, [pc, #20]	@ (80046fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	4904      	ldr	r1, [pc, #16]	@ (80046fc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	608b      	str	r3, [r1, #8]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bc80      	pop	{r7}
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40010400 	.word	0x40010400

08004700 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	43db      	mvns	r3, r3
 8004710:	4903      	ldr	r1, [pc, #12]	@ (8004720 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004712:	4013      	ands	r3, r2
 8004714:	608b      	str	r3, [r1, #8]
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr
 8004720:	40010400 	.word	0x40010400

08004724 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800472c:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800472e:	68da      	ldr	r2, [r3, #12]
 8004730:	4904      	ldr	r1, [pc, #16]	@ (8004744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4313      	orrs	r3, r2
 8004736:	60cb      	str	r3, [r1, #12]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	bc80      	pop	{r7}
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	40010400 	.word	0x40010400

08004748 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	43db      	mvns	r3, r3
 8004758:	4903      	ldr	r1, [pc, #12]	@ (8004768 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800475a:	4013      	ands	r3, r2
 800475c:	60cb      	str	r3, [r1, #12]
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr
 8004768:	40010400 	.word	0x40010400

0800476c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004774:	2300      	movs	r3, #0
 8004776:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	791b      	ldrb	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d065      	beq.n	800484c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d06b      	beq.n	8004860 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	795b      	ldrb	r3, [r3, #5]
 800478c:	2b02      	cmp	r3, #2
 800478e:	d01c      	beq.n	80047ca <LL_EXTI_Init+0x5e>
 8004790:	2b02      	cmp	r3, #2
 8004792:	dc25      	bgt.n	80047e0 <LL_EXTI_Init+0x74>
 8004794:	2b00      	cmp	r3, #0
 8004796:	d002      	beq.n	800479e <LL_EXTI_Init+0x32>
 8004798:	2b01      	cmp	r3, #1
 800479a:	d00b      	beq.n	80047b4 <LL_EXTI_Init+0x48>
 800479c:	e020      	b.n	80047e0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff ff88 	bl	80046b8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff ff4d 	bl	800464c <LL_EXTI_EnableIT_0_31>
          break;
 80047b2:	e018      	b.n	80047e6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ff59 	bl	8004670 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ff66 	bl	8004694 <LL_EXTI_EnableEvent_0_31>
          break;
 80047c8:	e00d      	b.n	80047e6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ff3c 	bl	800464c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff ff5b 	bl	8004694 <LL_EXTI_EnableEvent_0_31>
          break;
 80047de:	e002      	b.n	80047e6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
          break;
 80047e4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	799b      	ldrb	r3, [r3, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d038      	beq.n	8004860 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	799b      	ldrb	r3, [r3, #6]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d01c      	beq.n	8004830 <LL_EXTI_Init+0xc4>
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	dc25      	bgt.n	8004846 <LL_EXTI_Init+0xda>
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d002      	beq.n	8004804 <LL_EXTI_Init+0x98>
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d00b      	beq.n	800481a <LL_EXTI_Init+0xae>
 8004802:	e020      	b.n	8004846 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff9d 	bl	8004748 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ff62 	bl	80046dc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004818:	e022      	b.n	8004860 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff ff6e 	bl	8004700 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff ff7b 	bl	8004724 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800482e:	e017      	b.n	8004860 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff51 	bl	80046dc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ff70 	bl	8004724 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004844:	e00c      	b.n	8004860 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
            break;
 800484a:	e009      	b.n	8004860 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff0d 	bl	8004670 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff2c 	bl	80046b8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8004860:	7bfb      	ldrb	r3, [r7, #15]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <LL_GPIO_SetPinMode>:
{
 800486a:	b490      	push	{r4, r7}
 800486c:	b088      	sub	sp, #32
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	0e1b      	lsrs	r3, r3, #24
 800487e:	4413      	add	r3, r2
 8004880:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	613b      	str	r3, [r7, #16]
  return result;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	fab3 f383 	clz	r3, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	210f      	movs	r1, #15
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	401a      	ands	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	61bb      	str	r3, [r7, #24]
  return result;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	fa01 f303 	lsl.w	r3, r1, r3
 80048c0:	4313      	orrs	r3, r2
 80048c2:	6023      	str	r3, [r4, #0]
}
 80048c4:	bf00      	nop
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bc90      	pop	{r4, r7}
 80048cc:	4770      	bx	lr

080048ce <LL_GPIO_SetPinSpeed>:
{
 80048ce:	b490      	push	{r4, r7}
 80048d0:	b088      	sub	sp, #32
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	461a      	mov	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	0e1b      	lsrs	r3, r3, #24
 80048e2:	4413      	add	r3, r2
 80048e4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	613b      	str	r3, [r7, #16]
  return result;
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	fab3 f383 	clz	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	2103      	movs	r1, #3
 8004900:	fa01 f303 	lsl.w	r3, r1, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	401a      	ands	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	fa93 f3a3 	rbit	r3, r3
 8004912:	61bb      	str	r3, [r7, #24]
  return result;
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	6879      	ldr	r1, [r7, #4]
 8004920:	fa01 f303 	lsl.w	r3, r1, r3
 8004924:	4313      	orrs	r3, r2
 8004926:	6023      	str	r3, [r4, #0]
}
 8004928:	bf00      	nop
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bc90      	pop	{r4, r7}
 8004930:	4770      	bx	lr

08004932 <LL_GPIO_SetPinOutputType>:
{
 8004932:	b490      	push	{r4, r7}
 8004934:	b088      	sub	sp, #32
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	0e1b      	lsrs	r3, r3, #24
 8004946:	4413      	add	r3, r2
 8004948:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	fa93 f3a3 	rbit	r3, r3
 8004956:	613b      	str	r3, [r7, #16]
  return result;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	2104      	movs	r1, #4
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	401a      	ands	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	61bb      	str	r3, [r7, #24]
  return result;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	4313      	orrs	r3, r2
 800498a:	6023      	str	r3, [r4, #0]
}
 800498c:	bf00      	nop
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bc90      	pop	{r4, r7}
 8004994:	4770      	bx	lr

08004996 <LL_GPIO_SetPinPull>:
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	0a1b      	lsrs	r3, r3, #8
 80049aa:	43db      	mvns	r3, r3
 80049ac:	401a      	ands	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	0a1b      	lsrs	r3, r3, #8
 80049b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	fa93 f3a3 	rbit	r3, r3
 80049ba:	613b      	str	r3, [r7, #16]
  return result;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	fab3 f383 	clz	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	4619      	mov	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	408b      	lsls	r3, r1
 80049ca:	431a      	orrs	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	60da      	str	r2, [r3, #12]
}
 80049d0:	bf00      	nop
 80049d2:	371c      	adds	r7, #28
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bc80      	pop	{r7}
 80049d8:	4770      	bx	lr

080049da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b088      	sub	sp, #32
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	0c1b      	lsrs	r3, r3, #16
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	60fb      	str	r3, [r7, #12]
  return result;
 80049fa:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80049fc:	fab3 f383 	clz	r3, r3
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004a04:	e044      	b.n	8004a90 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8004a06:	2201      	movs	r2, #1
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d03a      	beq.n	8004a8a <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b07      	cmp	r3, #7
 8004a18:	d806      	bhi.n	8004a28 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8004a1a:	f240 1201 	movw	r2, #257	@ 0x101
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	61bb      	str	r3, [r7, #24]
 8004a26:	e008      	b.n	8004a3a <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	3b08      	subs	r3, #8
 8004a2c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a38:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d106      	bne.n	8004a50 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	461a      	mov	r2, r3
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ffa3 	bl	8004996 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	461a      	mov	r2, r3
 8004a56:	69b9      	ldr	r1, [r7, #24]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff06 	bl	800486a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d003      	beq.n	8004a6e <LL_GPIO_Init+0x94>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b09      	cmp	r3, #9
 8004a6c:	d10d      	bne.n	8004a8a <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	461a      	mov	r2, r3
 8004a74:	69b9      	ldr	r1, [r7, #24]
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ff29 	bl	80048ce <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	461a      	mov	r2, r3
 8004a82:	69b9      	ldr	r1, [r7, #24]
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff54 	bl	8004932 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa22 f303 	lsr.w	r3, r2, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1b4      	bne.n	8004a06 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <LL_RCC_GetSysClkSource>:
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <LL_RCC_GetSysClkSource+0x14>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr
 8004abc:	40021000 	.word	0x40021000

08004ac0 <LL_RCC_GetAHBPrescaler>:
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004ac4:	4b03      	ldr	r3, [pc, #12]	@ (8004ad4 <LL_RCC_GetAHBPrescaler+0x14>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <LL_RCC_GetAPB1Prescaler>:
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004adc:	4b03      	ldr	r3, [pc, #12]	@ (8004aec <LL_RCC_GetAPB1Prescaler+0x14>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr
 8004aec:	40021000 	.word	0x40021000

08004af0 <LL_RCC_GetAPB2Prescaler>:
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004af4:	4b03      	ldr	r3, [pc, #12]	@ (8004b04 <LL_RCC_GetAPB2Prescaler+0x14>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr
 8004b04:	40021000 	.word	0x40021000

08004b08 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <LL_RCC_PLL_GetMainSource+0x14>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	40021000 	.word	0x40021000

08004b20 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004b24:	4b03      	ldr	r3, [pc, #12]	@ (8004b34 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bc80      	pop	{r7}
 8004b32:	4770      	bx	lr
 8004b34:	40021000 	.word	0x40021000

08004b38 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004b3c:	4b04      	ldr	r3, [pc, #16]	@ (8004b50 <LL_RCC_PLL_GetPrediv+0x18>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	0c5b      	lsrs	r3, r3, #17
 8004b42:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000

08004b54 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004b5c:	f000 f820 	bl	8004ba0 <RCC_GetSystemClockFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 f83e 	bl	8004bec <RCC_GetHCLKClockFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f84c 	bl	8004c18 <RCC_GetPCLK1ClockFreq>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 f858 	bl	8004c40 <RCC_GetPCLK2ClockFreq>
 8004b90:	4602      	mov	r2, r0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60da      	str	r2, [r3, #12]
}
 8004b96:	bf00      	nop
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
	...

08004ba0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004baa:	f7ff ff7d 	bl	8004aa8 <LL_RCC_GetSysClkSource>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d00c      	beq.n	8004bce <RCC_GetSystemClockFreq+0x2e>
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d80e      	bhi.n	8004bd6 <RCC_GetSystemClockFreq+0x36>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <RCC_GetSystemClockFreq+0x22>
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d003      	beq.n	8004bc8 <RCC_GetSystemClockFreq+0x28>
 8004bc0:	e009      	b.n	8004bd6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004bc2:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <RCC_GetSystemClockFreq+0x48>)
 8004bc4:	607b      	str	r3, [r7, #4]
      break;
 8004bc6:	e009      	b.n	8004bdc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004bc8:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <RCC_GetSystemClockFreq+0x48>)
 8004bca:	607b      	str	r3, [r7, #4]
      break;
 8004bcc:	e006      	b.n	8004bdc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004bce:	f000 f84b 	bl	8004c68 <RCC_PLL_GetFreqDomain_SYS>
 8004bd2:	6078      	str	r0, [r7, #4]
      break;
 8004bd4:	e002      	b.n	8004bdc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8004bd6:	4b04      	ldr	r3, [pc, #16]	@ (8004be8 <RCC_GetSystemClockFreq+0x48>)
 8004bd8:	607b      	str	r3, [r7, #4]
      break;
 8004bda:	bf00      	nop
  }

  return frequency;
 8004bdc:	687b      	ldr	r3, [r7, #4]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	007a1200 	.word	0x007a1200

08004bec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004bf4:	f7ff ff64 	bl	8004ac0 <LL_RCC_GetAHBPrescaler>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	4a04      	ldr	r2, [pc, #16]	@ (8004c14 <RCC_GetHCLKClockFreq+0x28>)
 8004c02:	5cd3      	ldrb	r3, [r2, r3]
 8004c04:	461a      	mov	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	40d3      	lsrs	r3, r2
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	080082f8 	.word	0x080082f8

08004c18 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c20:	f7ff ff5a 	bl	8004ad8 <LL_RCC_GetAPB1Prescaler>
 8004c24:	4603      	mov	r3, r0
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	4a04      	ldr	r2, [pc, #16]	@ (8004c3c <RCC_GetPCLK1ClockFreq+0x24>)
 8004c2a:	5cd3      	ldrb	r3, [r2, r3]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	40d3      	lsrs	r3, r2
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	08008308 	.word	0x08008308

08004c40 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c48:	f7ff ff52 	bl	8004af0 <LL_RCC_GetAPB2Prescaler>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	0adb      	lsrs	r3, r3, #11
 8004c50:	4a04      	ldr	r2, [pc, #16]	@ (8004c64 <RCC_GetPCLK2ClockFreq+0x24>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	461a      	mov	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	40d3      	lsrs	r3, r2
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08008308 	.word	0x08008308

08004c68 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
 8004c72:	2300      	movs	r3, #0
 8004c74:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004c76:	f7ff ff47 	bl	8004b08 <LL_RCC_PLL_GetMainSource>
 8004c7a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c88:	d003      	beq.n	8004c92 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004c8a:	e00b      	b.n	8004ca4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004c8e:	607b      	str	r3, [r7, #4]
      break;
 8004c90:	e00b      	b.n	8004caa <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004c92:	f7ff ff51 	bl	8004b38 <LL_RCC_PLL_GetPrediv>
 8004c96:	4603      	mov	r3, r0
 8004c98:	3301      	adds	r3, #1
 8004c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8004cc8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca0:	607b      	str	r3, [r7, #4]
      break;
 8004ca2:	e002      	b.n	8004caa <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004ca4:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004ca6:	607b      	str	r3, [r7, #4]
      break;
 8004ca8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004caa:	f7ff ff39 	bl	8004b20 <LL_RCC_PLL_GetMultiplicator>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	0c9b      	lsrs	r3, r3, #18
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	003d0900 	.word	0x003d0900
 8004cc8:	007a1200 	.word	0x007a1200

08004ccc <LL_TIM_SetPrescaler>:
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <LL_TIM_SetAutoReload>:
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr

08004d00 <LL_TIM_SetRepetitionCounter>:
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc80      	pop	{r7}
 8004d18:	4770      	bx	lr

08004d1a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	615a      	str	r2, [r3, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr

08004d38 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a27      	ldr	r2, [pc, #156]	@ (8004de8 <LL_TIM_Init+0xb0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <LL_TIM_Init+0x30>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d56:	d007      	beq.n	8004d68 <LL_TIM_Init+0x30>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a24      	ldr	r2, [pc, #144]	@ (8004dec <LL_TIM_Init+0xb4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <LL_TIM_Init+0x30>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a23      	ldr	r2, [pc, #140]	@ (8004df0 <LL_TIM_Init+0xb8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d106      	bne.n	8004d76 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a1b      	ldr	r2, [pc, #108]	@ (8004de8 <LL_TIM_Init+0xb0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00b      	beq.n	8004d96 <LL_TIM_Init+0x5e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d84:	d007      	beq.n	8004d96 <LL_TIM_Init+0x5e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a18      	ldr	r2, [pc, #96]	@ (8004dec <LL_TIM_Init+0xb4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d003      	beq.n	8004d96 <LL_TIM_Init+0x5e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a17      	ldr	r2, [pc, #92]	@ (8004df0 <LL_TIM_Init+0xb8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d106      	bne.n	8004da4 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ff98 	bl	8004ce6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff85 	bl	8004ccc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a08      	ldr	r2, [pc, #32]	@ (8004de8 <LL_TIM_Init+0xb0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d105      	bne.n	8004dd6 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff ff95 	bl	8004d00 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7ff ff9f 	bl	8004d1a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	40012c00 	.word	0x40012c00
 8004dec:	40000400 	.word	0x40000400
 8004df0:	40000800 	.word	0x40000800

08004df4 <LL_USART_IsEnabled>:
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e08:	bf0c      	ite	eq
 8004e0a:	2301      	moveq	r3, #1
 8004e0c:	2300      	movne	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <LL_USART_SetStopBitsLength>:
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	611a      	str	r2, [r3, #16]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bc80      	pop	{r7}
 8004e3c:	4770      	bx	lr

08004e3e <LL_USART_SetHWFlowCtrl>:
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	615a      	str	r2, [r3, #20]
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr
	...

08004e64 <LL_USART_SetBaudRate>:
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009a      	lsls	r2, r3, #2
 8004e7a:	441a      	add	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	4a25      	ldr	r2, [pc, #148]	@ (8004f1c <LL_USART_SetBaudRate+0xb8>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	b299      	uxth	r1, r3
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	4613      	mov	r3, r2
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	009a      	lsls	r2, r3, #2
 8004e9c:	441a      	add	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <LL_USART_SetBaudRate+0xb8>)
 8004ea8:	fba3 0302 	umull	r0, r3, r3, r2
 8004eac:	095b      	lsrs	r3, r3, #5
 8004eae:	2064      	movs	r0, #100	@ 0x64
 8004eb0:	fb00 f303 	mul.w	r3, r0, r3
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	3332      	adds	r3, #50	@ 0x32
 8004eba:	4a18      	ldr	r2, [pc, #96]	@ (8004f1c <LL_USART_SetBaudRate+0xb8>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	095b      	lsrs	r3, r3, #5
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	440b      	add	r3, r1
 8004ecc:	b299      	uxth	r1, r3
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <LL_USART_SetBaudRate+0xb8>)
 8004ee4:	fba3 0302 	umull	r0, r3, r3, r2
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	2064      	movs	r0, #100	@ 0x64
 8004eec:	fb00 f303 	mul.w	r3, r0, r3
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	3332      	adds	r3, #50	@ 0x32
 8004ef6:	4a09      	ldr	r2, [pc, #36]	@ (8004f1c <LL_USART_SetBaudRate+0xb8>)
 8004ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	440b      	add	r3, r1
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7ff ff5e 	bl	8004df4 <LL_USART_IsEnabled>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d145      	bne.n	8004fca <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004f46:	f023 030c 	bic.w	r3, r3, #12
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	6851      	ldr	r1, [r2, #4]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	68d2      	ldr	r2, [r2, #12]
 8004f52:	4311      	orrs	r1, r2
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	6912      	ldr	r2, [r2, #16]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4619      	mov	r1, r3
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ff57 	bl	8004e1a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff ff63 	bl	8004e3e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fde9 	bl	8004b54 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a13      	ldr	r2, [pc, #76]	@ (8004fd4 <LL_USART_Init+0xb4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d102      	bne.n	8004f90 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	e00c      	b.n	8004faa <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a11      	ldr	r2, [pc, #68]	@ (8004fd8 <LL_USART_Init+0xb8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d102      	bne.n	8004f9e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	e005      	b.n	8004faa <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8004fdc <LL_USART_Init+0xbc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d101      	bne.n	8004faa <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ff4d 	bl	8004e64 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3720      	adds	r7, #32
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40004400 	.word	0x40004400
 8004fdc:	40004800 	.word	0x40004800

08004fe0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	4a07      	ldr	r2, [pc, #28]	@ (8005010 <LL_InitTick+0x30>)
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004ff8:	4b05      	ldr	r3, [pc, #20]	@ (8005010 <LL_InitTick+0x30>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffe:	4b04      	ldr	r3, [pc, #16]	@ (8005010 <LL_InitTick+0x30>)
 8005000:	2205      	movs	r2, #5
 8005002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010

08005014 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800501c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ffdd 	bl	8004fe0 <LL_InitTick>
}
 8005026:	bf00      	nop
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005038:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <LL_mDelay+0x44>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800503e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005046:	d00c      	beq.n	8005062 <LL_mDelay+0x32>
  {
    Delay++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3301      	adds	r3, #1
 800504c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800504e:	e008      	b.n	8005062 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005050:	4b08      	ldr	r3, [pc, #32]	@ (8005074 <LL_mDelay+0x44>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <LL_mDelay+0x32>
    {
      Delay--;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	607b      	str	r3, [r7, #4]
  while (Delay)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f3      	bne.n	8005050 <LL_mDelay+0x20>
    }
  }
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	e000e010 	.word	0xe000e010

08005078 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005080:	4a03      	ldr	r2, [pc, #12]	@ (8005090 <LL_SetSystemCoreClock+0x18>)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6013      	str	r3, [r2, #0]
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	200000cc 	.word	0x200000cc

08005094 <RING_BUFFER_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
RING_BUFFER_Init (ring_buffer_t *rb)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_out   = 0;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count = 0;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bc80      	pop	{r7}
 80050b6:	4770      	bx	lr

080050b8 <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_out   = 0;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count = 0;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <RING_BUFFER_Is_Empty>:
 * the count of elements in the ring buffer is 0, indicating that the buffer is
 * empty, and `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf0c      	ite	eq
 80050ec:	2301      	moveq	r3, #1
 80050ee:	2300      	movne	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <RING_BUFFER_Is_Full>:
 * either `true` or `false`, based on whether the count of elements in the ring
 * buffer `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005108:	2b40      	cmp	r3, #64	@ 0x40
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <RING_BUFFER_Push_Data>:
 * buffer. It is of type `char`, which means it can store a single character (1
 * byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff ffe7 	bl	80050fc <RING_BUFFER_Is_Full>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ffbf 	bl	80050b8 <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005140:	4413      	add	r3, r2
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514a:	3301      	adds	r3, #1
 800514c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_count++;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data
 * value from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 8005166:	b590      	push	{r4, r7, lr}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7ff ffb4 	bl	80050dc <RING_BUFFER_Is_Empty>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 800517a:	23ff      	movs	r3, #255	@ 0xff
 800517c:	e012      	b.n	80051a4 <RING_BUFFER_Pull_Data+0x3e>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005184:	4413      	add	r3, r2
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	3301      	adds	r3, #1
 8005190:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count--;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800519c:	1e5a      	subs	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	649a      	str	r2, [r3, #72]	@ 0x48

  return data;
 80051a2:	4623      	mov	r3, r4
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd90      	pop	{r4, r7, pc}

080051ac <SCH_Initialize>:
 * scheduler context, including task and timer contexts, as well as soft timers.
 * It also initializes the SysTick timer for scheduler operations.
 */
void
SCH_Initialize (void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  s_SystemTick         = RESET; /**< @brief Reset system tick counter. */
 80051b0:	4b0d      	ldr	r3, [pc, #52]	@ (80051e8 <SCH_Initialize+0x3c>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET; /**< @brief Reset number of scheduled tasks. */
 80051b6:	4b0d      	ldr	r3, [pc, #52]	@ (80051ec <SCH_Initialize+0x40>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers        = RESET; /**< @brief Reset number of timers. */
 80051bc:	4b0c      	ldr	r3, [pc, #48]	@ (80051f0 <SCH_Initialize+0x44>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]

  /**< @brief Initialize Scheduler Context */

  /**< @brief Clear task context array. */
  memset((uint8_t *)&s_TaskContext[0],
 80051c2:	223c      	movs	r2, #60	@ 0x3c
 80051c4:	2100      	movs	r1, #0
 80051c6:	480b      	ldr	r0, [pc, #44]	@ (80051f4 <SCH_Initialize+0x48>)
 80051c8:	f000 fec1 	bl	8005f4e <memset>
         RESET,
         (sizeof(SCH_TaskContextTypedef) * MAX_TASK));

  /**< @brief Clear timer context array. */
  memset((uint8_t *)&s_TimerContext[0],
 80051cc:	2218      	movs	r2, #24
 80051ce:	2100      	movs	r1, #0
 80051d0:	4809      	ldr	r0, [pc, #36]	@ (80051f8 <SCH_Initialize+0x4c>)
 80051d2:	f000 febc 	bl	8005f4e <memset>
         RESET,
         (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));

  /**< @brief Clear soft timers array. */
  memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80051d6:	2208      	movs	r2, #8
 80051d8:	2100      	movs	r1, #0
 80051da:	4808      	ldr	r0, [pc, #32]	@ (80051fc <SCH_Initialize+0x50>)
 80051dc:	f000 feb7 	bl	8005f4e <memset>

  /**< @brief Initialize SysTick timer. */
  BSP_SYSTICK_TimerInit();
 80051e0:	f7fd fdec 	bl	8002dbc <BSP_SYSTICK_TimerInit>
}
 80051e4:	bf00      	nop
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000794 	.word	0x20000794
 80051ec:	20000774 	.word	0x20000774
 80051f0:	20000790 	.word	0x20000790
 80051f4:	20000738 	.word	0x20000738
 80051f8:	20000778 	.word	0x20000778
 80051fc:	20000798 	.word	0x20000798

08005200 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  status_t status
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTaskProperty)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d029      	beq.n	8005268 <SCH_TASK_CreateTask+0x68>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d026      	beq.n	8005268 <SCH_TASK_CreateTask+0x68>
  {
    /**< @brief Check if there's room for more tasks */
    if (s_NumOfTaskScheduled < (MAX_TASK - 1))
 800521a:	4b16      	ldr	r3, [pc, #88]	@ (8005274 <SCH_TASK_CreateTask+0x74>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b03      	cmp	r3, #3
 8005220:	d822      	bhi.n	8005268 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef *pTaskContext
          = &s_TaskContext[s_NumOfTaskScheduled];
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <SCH_TASK_CreateTask+0x74>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
      SCH_TaskContextTypedef *pTaskContext
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4a11      	ldr	r2, [pc, #68]	@ (8005278 <SCH_TASK_CreateTask+0x78>)
 8005232:	4413      	add	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]

      /**< @brief Set task properties in task context */
      pTaskContext->pTaskProperty = pTaskProperty;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	609a      	str	r2, [r3, #8]
      pTaskContext->taskFlag      = FALSE;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2200      	movs	r2, #0
 8005240:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick      = pTaskProperty->taskTick;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	605a      	str	r2, [r3, #4]
      pTaskContext->taskState     = TASK_StateReady;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2201      	movs	r2, #1
 800524e:	701a      	strb	r2, [r3, #0]

      /**< @brief Provide task handle to caller */
      *pHandle = s_NumOfTaskScheduled;
 8005250:	4b08      	ldr	r3, [pc, #32]	@ (8005274 <SCH_TASK_CreateTask+0x74>)
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment task count */
      s_NumOfTaskScheduled++;
 8005258:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <SCH_TASK_CreateTask+0x74>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	b2da      	uxtb	r2, r3
 8005260:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <SCH_TASK_CreateTask+0x74>)
 8005262:	701a      	strb	r2, [r3, #0]

      /**< @brief Task registered successfully */
      status = STS_DONE;
 8005264:	2300      	movs	r3, #0
 8005266:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 8005268:	7bfb      	ldrb	r3, [r7, #15]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr
 8005274:	20000774 	.word	0x20000774
 8005278:	20000738 	.word	0x20000738

0800527c <SCH_TIM_CreateTimer>:
 * registered, otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_CreateTimer (SCH_TIMER_HANDLE         *pHandle,
                     SCH_TimerPropertyTypedef *pTimerProperty)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  status_t status
 8005286:	2301      	movs	r3, #1
 8005288:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTimerProperty)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d028      	beq.n	80052e2 <SCH_TIM_CreateTimer+0x66>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d025      	beq.n	80052e2 <SCH_TIM_CreateTimer+0x66>
  {
    /**< @brief Check if there's room for more timers */
    if (s_NumOfTimers < (MAX_TIMERS - 1))
 8005296:	4b16      	ldr	r3, [pc, #88]	@ (80052f0 <SCH_TIM_CreateTimer+0x74>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d121      	bne.n	80052e2 <SCH_TIM_CreateTimer+0x66>
    {
      SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[s_NumOfTimers];
 800529e:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <SCH_TIM_CreateTimer+0x74>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4a11      	ldr	r2, [pc, #68]	@ (80052f4 <SCH_TIM_CreateTimer+0x78>)
 80052ae:	4413      	add	r3, r2
 80052b0:	60bb      	str	r3, [r7, #8]

      /**< @brief Set timer properties in timer context */
      pTimerContext->pTimerProperty = pTimerProperty;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	609a      	str	r2, [r3, #8]
      pTimerContext->timerState     = TIM_StateStop;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
      pTimerContext->timerFlag      = FALSE;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2200      	movs	r2, #0
 80052c2:	805a      	strh	r2, [r3, #2]
      pTimerContext->timerTick      = RESET;
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2200      	movs	r2, #0
 80052c8:	605a      	str	r2, [r3, #4]

      /**< @brief Provide timer handle to caller */
      *pHandle = s_NumOfTimers;
 80052ca:	4b09      	ldr	r3, [pc, #36]	@ (80052f0 <SCH_TIM_CreateTimer+0x74>)
 80052cc:	781a      	ldrb	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment timer count */
      s_NumOfTimers++;
 80052d2:	4b07      	ldr	r3, [pc, #28]	@ (80052f0 <SCH_TIM_CreateTimer+0x74>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <SCH_TIM_CreateTimer+0x74>)
 80052dc:	701a      	strb	r2, [r3, #0]

      /**< @brief Timer registered successfully */
      status = STS_DONE;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 80052e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000790 	.word	0x20000790
 80052f4:	20000778 	.word	0x20000778

080052f8 <SCH_TIM_RestartTimer>:
 * @return Returns STS_DONE if the timer was successfully restarted,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_RestartTimer (SCH_TIMER_HANDLE timerIndex)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
  status_t status
 8005302:	2301      	movs	r3, #1
 8005304:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <SCH_TIM_RestartTimer+0x44>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	79fa      	ldrb	r2, [r7, #7]
 800530c:	429a      	cmp	r2, r3
 800530e:	d20f      	bcs.n	8005330 <SCH_TIM_RestartTimer+0x38>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 8005310:	79fa      	ldrb	r2, [r7, #7]
 8005312:	4613      	mov	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <SCH_TIM_RestartTimer+0x48>)
 800531c:	4413      	add	r3, r2
 800531e:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerTick               = RESET;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	605a      	str	r2, [r3, #4]
    pTimerContext->timerState              = TIM_StateRun;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 800532c:	2300      	movs	r3, #0
 800532e:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	20000790 	.word	0x20000790
 8005340:	20000778 	.word	0x20000778

08005344 <SCH_TIM_StopTimer>:
 * @return Returns STS_DONE if the timer was successfully stopped,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_StopTimer (SCH_TIMER_HANDLE timerIndex)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  status_t status
 800534e:	2301      	movs	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 8005352:	4b0c      	ldr	r3, [pc, #48]	@ (8005384 <SCH_TIM_StopTimer+0x40>)
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	79fa      	ldrb	r2, [r7, #7]
 8005358:	429a      	cmp	r2, r3
 800535a:	d20c      	bcs.n	8005376 <SCH_TIM_StopTimer+0x32>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 800535c:	79fa      	ldrb	r2, [r7, #7]
 800535e:	4613      	mov	r3, r2
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4a08      	ldr	r2, [pc, #32]	@ (8005388 <SCH_TIM_StopTimer+0x44>)
 8005368:	4413      	add	r3, r2
 800536a:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerState              = TIM_StateStop;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 8005376:	7bfb      	ldrb	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	bc80      	pop	{r7}
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000790 	.word	0x20000790
 8005388:	20000778 	.word	0x20000778

0800538c <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 8005390:	f7fd fd06 	bl	8002da0 <BSP_SYSTICK_TimerStart>
}
 8005394:	bf00      	nop
 8005396:	bd80      	pop	{r7, pc}

08005398 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
 80053a2:	e01e      	b.n	80053e2 <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 80053a4:	7bfa      	ldrb	r2, [r7, #15]
 80053a6:	4613      	mov	r3, r2
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4a23      	ldr	r2, [pc, #140]	@ (800543c <SCH_HandleScheduledTask+0xa4>)
 80053b0:	4413      	add	r3, r2
 80053b2:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	885b      	ldrh	r3, [r3, #2]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d10f      	bne.n	80053dc <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d10b      	bne.n	80053dc <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	3301      	adds	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	4b17      	ldr	r3, [pc, #92]	@ (8005440 <SCH_HandleScheduledTask+0xa8>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	7bfa      	ldrb	r2, [r7, #15]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d3db      	bcc.n	80053a4 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	73bb      	strb	r3, [r7, #14]
 80053f0:	e01a      	b.n	8005428 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 80053f2:	7bba      	ldrb	r2, [r7, #14]
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4a11      	ldr	r2, [pc, #68]	@ (8005444 <SCH_HandleScheduledTask+0xac>)
 80053fe:	4413      	add	r3, r2
 8005400:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	885b      	ldrh	r3, [r3, #2]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d10b      	bne.n	8005422 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8005422:	7bbb      	ldrb	r3, [r7, #14]
 8005424:	3301      	adds	r3, #1
 8005426:	73bb      	strb	r3, [r7, #14]
 8005428:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <SCH_HandleScheduledTask+0xb0>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	7bba      	ldrb	r2, [r7, #14]
 800542e:	429a      	cmp	r2, r3
 8005430:	d3df      	bcc.n	80053f2 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	20000738 	.word	0x20000738
 8005440:	20000774 	.word	0x20000774
 8005444:	20000778 	.word	0x20000778
 8005448:	20000790 	.word	0x20000790

0800544c <__cvt>:
 800544c:	2b00      	cmp	r3, #0
 800544e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005452:	461d      	mov	r5, r3
 8005454:	bfbb      	ittet	lt
 8005456:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800545a:	461d      	movlt	r5, r3
 800545c:	2300      	movge	r3, #0
 800545e:	232d      	movlt	r3, #45	@ 0x2d
 8005460:	b088      	sub	sp, #32
 8005462:	4614      	mov	r4, r2
 8005464:	bfb8      	it	lt
 8005466:	4614      	movlt	r4, r2
 8005468:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800546a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800546c:	7013      	strb	r3, [r2, #0]
 800546e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005470:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005474:	f023 0820 	bic.w	r8, r3, #32
 8005478:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800547c:	d005      	beq.n	800548a <__cvt+0x3e>
 800547e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005482:	d100      	bne.n	8005486 <__cvt+0x3a>
 8005484:	3601      	adds	r6, #1
 8005486:	2302      	movs	r3, #2
 8005488:	e000      	b.n	800548c <__cvt+0x40>
 800548a:	2303      	movs	r3, #3
 800548c:	aa07      	add	r2, sp, #28
 800548e:	9204      	str	r2, [sp, #16]
 8005490:	aa06      	add	r2, sp, #24
 8005492:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005496:	e9cd 3600 	strd	r3, r6, [sp]
 800549a:	4622      	mov	r2, r4
 800549c:	462b      	mov	r3, r5
 800549e:	f000 fe6f 	bl	8006180 <_dtoa_r>
 80054a2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054a6:	4607      	mov	r7, r0
 80054a8:	d119      	bne.n	80054de <__cvt+0x92>
 80054aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054ac:	07db      	lsls	r3, r3, #31
 80054ae:	d50e      	bpl.n	80054ce <__cvt+0x82>
 80054b0:	eb00 0906 	add.w	r9, r0, r6
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	4620      	mov	r0, r4
 80054ba:	4629      	mov	r1, r5
 80054bc:	f7fb fa7e 	bl	80009bc <__aeabi_dcmpeq>
 80054c0:	b108      	cbz	r0, 80054c6 <__cvt+0x7a>
 80054c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80054c6:	2230      	movs	r2, #48	@ 0x30
 80054c8:	9b07      	ldr	r3, [sp, #28]
 80054ca:	454b      	cmp	r3, r9
 80054cc:	d31e      	bcc.n	800550c <__cvt+0xc0>
 80054ce:	4638      	mov	r0, r7
 80054d0:	9b07      	ldr	r3, [sp, #28]
 80054d2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80054d4:	1bdb      	subs	r3, r3, r7
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	b008      	add	sp, #32
 80054da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054e2:	eb00 0906 	add.w	r9, r0, r6
 80054e6:	d1e5      	bne.n	80054b4 <__cvt+0x68>
 80054e8:	7803      	ldrb	r3, [r0, #0]
 80054ea:	2b30      	cmp	r3, #48	@ 0x30
 80054ec:	d10a      	bne.n	8005504 <__cvt+0xb8>
 80054ee:	2200      	movs	r2, #0
 80054f0:	2300      	movs	r3, #0
 80054f2:	4620      	mov	r0, r4
 80054f4:	4629      	mov	r1, r5
 80054f6:	f7fb fa61 	bl	80009bc <__aeabi_dcmpeq>
 80054fa:	b918      	cbnz	r0, 8005504 <__cvt+0xb8>
 80054fc:	f1c6 0601 	rsb	r6, r6, #1
 8005500:	f8ca 6000 	str.w	r6, [sl]
 8005504:	f8da 3000 	ldr.w	r3, [sl]
 8005508:	4499      	add	r9, r3
 800550a:	e7d3      	b.n	80054b4 <__cvt+0x68>
 800550c:	1c59      	adds	r1, r3, #1
 800550e:	9107      	str	r1, [sp, #28]
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e7d9      	b.n	80054c8 <__cvt+0x7c>

08005514 <__exponent>:
 8005514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005516:	2900      	cmp	r1, #0
 8005518:	bfb6      	itet	lt
 800551a:	232d      	movlt	r3, #45	@ 0x2d
 800551c:	232b      	movge	r3, #43	@ 0x2b
 800551e:	4249      	neglt	r1, r1
 8005520:	2909      	cmp	r1, #9
 8005522:	7002      	strb	r2, [r0, #0]
 8005524:	7043      	strb	r3, [r0, #1]
 8005526:	dd29      	ble.n	800557c <__exponent+0x68>
 8005528:	f10d 0307 	add.w	r3, sp, #7
 800552c:	461d      	mov	r5, r3
 800552e:	270a      	movs	r7, #10
 8005530:	fbb1 f6f7 	udiv	r6, r1, r7
 8005534:	461a      	mov	r2, r3
 8005536:	fb07 1416 	mls	r4, r7, r6, r1
 800553a:	3430      	adds	r4, #48	@ 0x30
 800553c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005540:	460c      	mov	r4, r1
 8005542:	2c63      	cmp	r4, #99	@ 0x63
 8005544:	4631      	mov	r1, r6
 8005546:	f103 33ff 	add.w	r3, r3, #4294967295
 800554a:	dcf1      	bgt.n	8005530 <__exponent+0x1c>
 800554c:	3130      	adds	r1, #48	@ 0x30
 800554e:	1e94      	subs	r4, r2, #2
 8005550:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005554:	4623      	mov	r3, r4
 8005556:	1c41      	adds	r1, r0, #1
 8005558:	42ab      	cmp	r3, r5
 800555a:	d30a      	bcc.n	8005572 <__exponent+0x5e>
 800555c:	f10d 0309 	add.w	r3, sp, #9
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	42ac      	cmp	r4, r5
 8005564:	bf88      	it	hi
 8005566:	2300      	movhi	r3, #0
 8005568:	3302      	adds	r3, #2
 800556a:	4403      	add	r3, r0
 800556c:	1a18      	subs	r0, r3, r0
 800556e:	b003      	add	sp, #12
 8005570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005572:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005576:	f801 6f01 	strb.w	r6, [r1, #1]!
 800557a:	e7ed      	b.n	8005558 <__exponent+0x44>
 800557c:	2330      	movs	r3, #48	@ 0x30
 800557e:	3130      	adds	r1, #48	@ 0x30
 8005580:	7083      	strb	r3, [r0, #2]
 8005582:	70c1      	strb	r1, [r0, #3]
 8005584:	1d03      	adds	r3, r0, #4
 8005586:	e7f1      	b.n	800556c <__exponent+0x58>

08005588 <_printf_float>:
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	b091      	sub	sp, #68	@ 0x44
 800558e:	460c      	mov	r4, r1
 8005590:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005594:	4616      	mov	r6, r2
 8005596:	461f      	mov	r7, r3
 8005598:	4605      	mov	r5, r0
 800559a:	f000 fce1 	bl	8005f60 <_localeconv_r>
 800559e:	6803      	ldr	r3, [r0, #0]
 80055a0:	4618      	mov	r0, r3
 80055a2:	9308      	str	r3, [sp, #32]
 80055a4:	f7fa fdde 	bl	8000164 <strlen>
 80055a8:	2300      	movs	r3, #0
 80055aa:	930e      	str	r3, [sp, #56]	@ 0x38
 80055ac:	f8d8 3000 	ldr.w	r3, [r8]
 80055b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80055b2:	3307      	adds	r3, #7
 80055b4:	f023 0307 	bic.w	r3, r3, #7
 80055b8:	f103 0208 	add.w	r2, r3, #8
 80055bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055c0:	f8d4 b000 	ldr.w	fp, [r4]
 80055c4:	f8c8 2000 	str.w	r2, [r8]
 80055c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80055d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055d2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295
 80055da:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055de:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80055e2:	4b9c      	ldr	r3, [pc, #624]	@ (8005854 <_printf_float+0x2cc>)
 80055e4:	f7fb fa1c 	bl	8000a20 <__aeabi_dcmpun>
 80055e8:	bb70      	cbnz	r0, 8005648 <_printf_float+0xc0>
 80055ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055ee:	f04f 32ff 	mov.w	r2, #4294967295
 80055f2:	4b98      	ldr	r3, [pc, #608]	@ (8005854 <_printf_float+0x2cc>)
 80055f4:	f7fb f9f6 	bl	80009e4 <__aeabi_dcmple>
 80055f8:	bb30      	cbnz	r0, 8005648 <_printf_float+0xc0>
 80055fa:	2200      	movs	r2, #0
 80055fc:	2300      	movs	r3, #0
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	f7fb f9e5 	bl	80009d0 <__aeabi_dcmplt>
 8005606:	b110      	cbz	r0, 800560e <_printf_float+0x86>
 8005608:	232d      	movs	r3, #45	@ 0x2d
 800560a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800560e:	4a92      	ldr	r2, [pc, #584]	@ (8005858 <_printf_float+0x2d0>)
 8005610:	4b92      	ldr	r3, [pc, #584]	@ (800585c <_printf_float+0x2d4>)
 8005612:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005616:	bf94      	ite	ls
 8005618:	4690      	movls	r8, r2
 800561a:	4698      	movhi	r8, r3
 800561c:	2303      	movs	r3, #3
 800561e:	f04f 0900 	mov.w	r9, #0
 8005622:	6123      	str	r3, [r4, #16]
 8005624:	f02b 0304 	bic.w	r3, fp, #4
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	4633      	mov	r3, r6
 800562c:	4621      	mov	r1, r4
 800562e:	4628      	mov	r0, r5
 8005630:	9700      	str	r7, [sp, #0]
 8005632:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005634:	f000 f9d4 	bl	80059e0 <_printf_common>
 8005638:	3001      	adds	r0, #1
 800563a:	f040 8090 	bne.w	800575e <_printf_float+0x1d6>
 800563e:	f04f 30ff 	mov.w	r0, #4294967295
 8005642:	b011      	add	sp, #68	@ 0x44
 8005644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005648:	4642      	mov	r2, r8
 800564a:	464b      	mov	r3, r9
 800564c:	4640      	mov	r0, r8
 800564e:	4649      	mov	r1, r9
 8005650:	f7fb f9e6 	bl	8000a20 <__aeabi_dcmpun>
 8005654:	b148      	cbz	r0, 800566a <_printf_float+0xe2>
 8005656:	464b      	mov	r3, r9
 8005658:	2b00      	cmp	r3, #0
 800565a:	bfb8      	it	lt
 800565c:	232d      	movlt	r3, #45	@ 0x2d
 800565e:	4a80      	ldr	r2, [pc, #512]	@ (8005860 <_printf_float+0x2d8>)
 8005660:	bfb8      	it	lt
 8005662:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005666:	4b7f      	ldr	r3, [pc, #508]	@ (8005864 <_printf_float+0x2dc>)
 8005668:	e7d3      	b.n	8005612 <_printf_float+0x8a>
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005670:	1c5a      	adds	r2, r3, #1
 8005672:	d13f      	bne.n	80056f4 <_printf_float+0x16c>
 8005674:	2306      	movs	r3, #6
 8005676:	6063      	str	r3, [r4, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800567e:	6023      	str	r3, [r4, #0]
 8005680:	9206      	str	r2, [sp, #24]
 8005682:	aa0e      	add	r2, sp, #56	@ 0x38
 8005684:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005688:	aa0d      	add	r2, sp, #52	@ 0x34
 800568a:	9203      	str	r2, [sp, #12]
 800568c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005690:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	4642      	mov	r2, r8
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	4628      	mov	r0, r5
 800569c:	464b      	mov	r3, r9
 800569e:	910a      	str	r1, [sp, #40]	@ 0x28
 80056a0:	f7ff fed4 	bl	800544c <__cvt>
 80056a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056a6:	4680      	mov	r8, r0
 80056a8:	2947      	cmp	r1, #71	@ 0x47
 80056aa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80056ac:	d128      	bne.n	8005700 <_printf_float+0x178>
 80056ae:	1cc8      	adds	r0, r1, #3
 80056b0:	db02      	blt.n	80056b8 <_printf_float+0x130>
 80056b2:	6863      	ldr	r3, [r4, #4]
 80056b4:	4299      	cmp	r1, r3
 80056b6:	dd40      	ble.n	800573a <_printf_float+0x1b2>
 80056b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80056bc:	fa5f fa8a 	uxtb.w	sl, sl
 80056c0:	4652      	mov	r2, sl
 80056c2:	3901      	subs	r1, #1
 80056c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80056c8:	910d      	str	r1, [sp, #52]	@ 0x34
 80056ca:	f7ff ff23 	bl	8005514 <__exponent>
 80056ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80056d0:	4681      	mov	r9, r0
 80056d2:	1813      	adds	r3, r2, r0
 80056d4:	2a01      	cmp	r2, #1
 80056d6:	6123      	str	r3, [r4, #16]
 80056d8:	dc02      	bgt.n	80056e0 <_printf_float+0x158>
 80056da:	6822      	ldr	r2, [r4, #0]
 80056dc:	07d2      	lsls	r2, r2, #31
 80056de:	d501      	bpl.n	80056e4 <_printf_float+0x15c>
 80056e0:	3301      	adds	r3, #1
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d09e      	beq.n	800562a <_printf_float+0xa2>
 80056ec:	232d      	movs	r3, #45	@ 0x2d
 80056ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f2:	e79a      	b.n	800562a <_printf_float+0xa2>
 80056f4:	2947      	cmp	r1, #71	@ 0x47
 80056f6:	d1bf      	bne.n	8005678 <_printf_float+0xf0>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1bd      	bne.n	8005678 <_printf_float+0xf0>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e7ba      	b.n	8005676 <_printf_float+0xee>
 8005700:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005704:	d9dc      	bls.n	80056c0 <_printf_float+0x138>
 8005706:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800570a:	d118      	bne.n	800573e <_printf_float+0x1b6>
 800570c:	2900      	cmp	r1, #0
 800570e:	6863      	ldr	r3, [r4, #4]
 8005710:	dd0b      	ble.n	800572a <_printf_float+0x1a2>
 8005712:	6121      	str	r1, [r4, #16]
 8005714:	b913      	cbnz	r3, 800571c <_printf_float+0x194>
 8005716:	6822      	ldr	r2, [r4, #0]
 8005718:	07d0      	lsls	r0, r2, #31
 800571a:	d502      	bpl.n	8005722 <_printf_float+0x19a>
 800571c:	3301      	adds	r3, #1
 800571e:	440b      	add	r3, r1
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	f04f 0900 	mov.w	r9, #0
 8005726:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005728:	e7dc      	b.n	80056e4 <_printf_float+0x15c>
 800572a:	b913      	cbnz	r3, 8005732 <_printf_float+0x1aa>
 800572c:	6822      	ldr	r2, [r4, #0]
 800572e:	07d2      	lsls	r2, r2, #31
 8005730:	d501      	bpl.n	8005736 <_printf_float+0x1ae>
 8005732:	3302      	adds	r3, #2
 8005734:	e7f4      	b.n	8005720 <_printf_float+0x198>
 8005736:	2301      	movs	r3, #1
 8005738:	e7f2      	b.n	8005720 <_printf_float+0x198>
 800573a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800573e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005740:	4299      	cmp	r1, r3
 8005742:	db05      	blt.n	8005750 <_printf_float+0x1c8>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	6121      	str	r1, [r4, #16]
 8005748:	07d8      	lsls	r0, r3, #31
 800574a:	d5ea      	bpl.n	8005722 <_printf_float+0x19a>
 800574c:	1c4b      	adds	r3, r1, #1
 800574e:	e7e7      	b.n	8005720 <_printf_float+0x198>
 8005750:	2900      	cmp	r1, #0
 8005752:	bfcc      	ite	gt
 8005754:	2201      	movgt	r2, #1
 8005756:	f1c1 0202 	rsble	r2, r1, #2
 800575a:	4413      	add	r3, r2
 800575c:	e7e0      	b.n	8005720 <_printf_float+0x198>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	055a      	lsls	r2, r3, #21
 8005762:	d407      	bmi.n	8005774 <_printf_float+0x1ec>
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	4642      	mov	r2, r8
 8005768:	4631      	mov	r1, r6
 800576a:	4628      	mov	r0, r5
 800576c:	47b8      	blx	r7
 800576e:	3001      	adds	r0, #1
 8005770:	d12b      	bne.n	80057ca <_printf_float+0x242>
 8005772:	e764      	b.n	800563e <_printf_float+0xb6>
 8005774:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005778:	f240 80dc 	bls.w	8005934 <_printf_float+0x3ac>
 800577c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005780:	2200      	movs	r2, #0
 8005782:	2300      	movs	r3, #0
 8005784:	f7fb f91a 	bl	80009bc <__aeabi_dcmpeq>
 8005788:	2800      	cmp	r0, #0
 800578a:	d033      	beq.n	80057f4 <_printf_float+0x26c>
 800578c:	2301      	movs	r3, #1
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	4a35      	ldr	r2, [pc, #212]	@ (8005868 <_printf_float+0x2e0>)
 8005794:	47b8      	blx	r7
 8005796:	3001      	adds	r0, #1
 8005798:	f43f af51 	beq.w	800563e <_printf_float+0xb6>
 800579c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80057a0:	4543      	cmp	r3, r8
 80057a2:	db02      	blt.n	80057aa <_printf_float+0x222>
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	07d8      	lsls	r0, r3, #31
 80057a8:	d50f      	bpl.n	80057ca <_printf_float+0x242>
 80057aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	47b8      	blx	r7
 80057b4:	3001      	adds	r0, #1
 80057b6:	f43f af42 	beq.w	800563e <_printf_float+0xb6>
 80057ba:	f04f 0900 	mov.w	r9, #0
 80057be:	f108 38ff 	add.w	r8, r8, #4294967295
 80057c2:	f104 0a1a 	add.w	sl, r4, #26
 80057c6:	45c8      	cmp	r8, r9
 80057c8:	dc09      	bgt.n	80057de <_printf_float+0x256>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	079b      	lsls	r3, r3, #30
 80057ce:	f100 8102 	bmi.w	80059d6 <_printf_float+0x44e>
 80057d2:	68e0      	ldr	r0, [r4, #12]
 80057d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80057d6:	4298      	cmp	r0, r3
 80057d8:	bfb8      	it	lt
 80057da:	4618      	movlt	r0, r3
 80057dc:	e731      	b.n	8005642 <_printf_float+0xba>
 80057de:	2301      	movs	r3, #1
 80057e0:	4652      	mov	r2, sl
 80057e2:	4631      	mov	r1, r6
 80057e4:	4628      	mov	r0, r5
 80057e6:	47b8      	blx	r7
 80057e8:	3001      	adds	r0, #1
 80057ea:	f43f af28 	beq.w	800563e <_printf_float+0xb6>
 80057ee:	f109 0901 	add.w	r9, r9, #1
 80057f2:	e7e8      	b.n	80057c6 <_printf_float+0x23e>
 80057f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dc38      	bgt.n	800586c <_printf_float+0x2e4>
 80057fa:	2301      	movs	r3, #1
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	4a19      	ldr	r2, [pc, #100]	@ (8005868 <_printf_float+0x2e0>)
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f af1a 	beq.w	800563e <_printf_float+0xb6>
 800580a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800580e:	ea59 0303 	orrs.w	r3, r9, r3
 8005812:	d102      	bne.n	800581a <_printf_float+0x292>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07d9      	lsls	r1, r3, #31
 8005818:	d5d7      	bpl.n	80057ca <_printf_float+0x242>
 800581a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800581e:	4631      	mov	r1, r6
 8005820:	4628      	mov	r0, r5
 8005822:	47b8      	blx	r7
 8005824:	3001      	adds	r0, #1
 8005826:	f43f af0a 	beq.w	800563e <_printf_float+0xb6>
 800582a:	f04f 0a00 	mov.w	sl, #0
 800582e:	f104 0b1a 	add.w	fp, r4, #26
 8005832:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005834:	425b      	negs	r3, r3
 8005836:	4553      	cmp	r3, sl
 8005838:	dc01      	bgt.n	800583e <_printf_float+0x2b6>
 800583a:	464b      	mov	r3, r9
 800583c:	e793      	b.n	8005766 <_printf_float+0x1de>
 800583e:	2301      	movs	r3, #1
 8005840:	465a      	mov	r2, fp
 8005842:	4631      	mov	r1, r6
 8005844:	4628      	mov	r0, r5
 8005846:	47b8      	blx	r7
 8005848:	3001      	adds	r0, #1
 800584a:	f43f aef8 	beq.w	800563e <_printf_float+0xb6>
 800584e:	f10a 0a01 	add.w	sl, sl, #1
 8005852:	e7ee      	b.n	8005832 <_printf_float+0x2aa>
 8005854:	7fefffff 	.word	0x7fefffff
 8005858:	08008310 	.word	0x08008310
 800585c:	08008314 	.word	0x08008314
 8005860:	08008318 	.word	0x08008318
 8005864:	0800831c 	.word	0x0800831c
 8005868:	08008320 	.word	0x08008320
 800586c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800586e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005872:	4553      	cmp	r3, sl
 8005874:	bfa8      	it	ge
 8005876:	4653      	movge	r3, sl
 8005878:	2b00      	cmp	r3, #0
 800587a:	4699      	mov	r9, r3
 800587c:	dc36      	bgt.n	80058ec <_printf_float+0x364>
 800587e:	f04f 0b00 	mov.w	fp, #0
 8005882:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005886:	f104 021a 	add.w	r2, r4, #26
 800588a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800588c:	930a      	str	r3, [sp, #40]	@ 0x28
 800588e:	eba3 0309 	sub.w	r3, r3, r9
 8005892:	455b      	cmp	r3, fp
 8005894:	dc31      	bgt.n	80058fa <_printf_float+0x372>
 8005896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005898:	459a      	cmp	sl, r3
 800589a:	dc3a      	bgt.n	8005912 <_printf_float+0x38a>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	07da      	lsls	r2, r3, #31
 80058a0:	d437      	bmi.n	8005912 <_printf_float+0x38a>
 80058a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058a4:	ebaa 0903 	sub.w	r9, sl, r3
 80058a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058aa:	ebaa 0303 	sub.w	r3, sl, r3
 80058ae:	4599      	cmp	r9, r3
 80058b0:	bfa8      	it	ge
 80058b2:	4699      	movge	r9, r3
 80058b4:	f1b9 0f00 	cmp.w	r9, #0
 80058b8:	dc33      	bgt.n	8005922 <_printf_float+0x39a>
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058c2:	f104 0b1a 	add.w	fp, r4, #26
 80058c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058c8:	ebaa 0303 	sub.w	r3, sl, r3
 80058cc:	eba3 0309 	sub.w	r3, r3, r9
 80058d0:	4543      	cmp	r3, r8
 80058d2:	f77f af7a 	ble.w	80057ca <_printf_float+0x242>
 80058d6:	2301      	movs	r3, #1
 80058d8:	465a      	mov	r2, fp
 80058da:	4631      	mov	r1, r6
 80058dc:	4628      	mov	r0, r5
 80058de:	47b8      	blx	r7
 80058e0:	3001      	adds	r0, #1
 80058e2:	f43f aeac 	beq.w	800563e <_printf_float+0xb6>
 80058e6:	f108 0801 	add.w	r8, r8, #1
 80058ea:	e7ec      	b.n	80058c6 <_printf_float+0x33e>
 80058ec:	4642      	mov	r2, r8
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	d1c2      	bne.n	800587e <_printf_float+0x2f6>
 80058f8:	e6a1      	b.n	800563e <_printf_float+0xb6>
 80058fa:	2301      	movs	r3, #1
 80058fc:	4631      	mov	r1, r6
 80058fe:	4628      	mov	r0, r5
 8005900:	920a      	str	r2, [sp, #40]	@ 0x28
 8005902:	47b8      	blx	r7
 8005904:	3001      	adds	r0, #1
 8005906:	f43f ae9a 	beq.w	800563e <_printf_float+0xb6>
 800590a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800590c:	f10b 0b01 	add.w	fp, fp, #1
 8005910:	e7bb      	b.n	800588a <_printf_float+0x302>
 8005912:	4631      	mov	r1, r6
 8005914:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	d1c0      	bne.n	80058a2 <_printf_float+0x31a>
 8005920:	e68d      	b.n	800563e <_printf_float+0xb6>
 8005922:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005924:	464b      	mov	r3, r9
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	4442      	add	r2, r8
 800592c:	47b8      	blx	r7
 800592e:	3001      	adds	r0, #1
 8005930:	d1c3      	bne.n	80058ba <_printf_float+0x332>
 8005932:	e684      	b.n	800563e <_printf_float+0xb6>
 8005934:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005938:	f1ba 0f01 	cmp.w	sl, #1
 800593c:	dc01      	bgt.n	8005942 <_printf_float+0x3ba>
 800593e:	07db      	lsls	r3, r3, #31
 8005940:	d536      	bpl.n	80059b0 <_printf_float+0x428>
 8005942:	2301      	movs	r3, #1
 8005944:	4642      	mov	r2, r8
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	f43f ae76 	beq.w	800563e <_printf_float+0xb6>
 8005952:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f ae6e 	beq.w	800563e <_printf_float+0xb6>
 8005962:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005966:	2200      	movs	r2, #0
 8005968:	2300      	movs	r3, #0
 800596a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800596e:	f7fb f825 	bl	80009bc <__aeabi_dcmpeq>
 8005972:	b9c0      	cbnz	r0, 80059a6 <_printf_float+0x41e>
 8005974:	4653      	mov	r3, sl
 8005976:	f108 0201 	add.w	r2, r8, #1
 800597a:	4631      	mov	r1, r6
 800597c:	4628      	mov	r0, r5
 800597e:	47b8      	blx	r7
 8005980:	3001      	adds	r0, #1
 8005982:	d10c      	bne.n	800599e <_printf_float+0x416>
 8005984:	e65b      	b.n	800563e <_printf_float+0xb6>
 8005986:	2301      	movs	r3, #1
 8005988:	465a      	mov	r2, fp
 800598a:	4631      	mov	r1, r6
 800598c:	4628      	mov	r0, r5
 800598e:	47b8      	blx	r7
 8005990:	3001      	adds	r0, #1
 8005992:	f43f ae54 	beq.w	800563e <_printf_float+0xb6>
 8005996:	f108 0801 	add.w	r8, r8, #1
 800599a:	45d0      	cmp	r8, sl
 800599c:	dbf3      	blt.n	8005986 <_printf_float+0x3fe>
 800599e:	464b      	mov	r3, r9
 80059a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059a4:	e6e0      	b.n	8005768 <_printf_float+0x1e0>
 80059a6:	f04f 0800 	mov.w	r8, #0
 80059aa:	f104 0b1a 	add.w	fp, r4, #26
 80059ae:	e7f4      	b.n	800599a <_printf_float+0x412>
 80059b0:	2301      	movs	r3, #1
 80059b2:	4642      	mov	r2, r8
 80059b4:	e7e1      	b.n	800597a <_printf_float+0x3f2>
 80059b6:	2301      	movs	r3, #1
 80059b8:	464a      	mov	r2, r9
 80059ba:	4631      	mov	r1, r6
 80059bc:	4628      	mov	r0, r5
 80059be:	47b8      	blx	r7
 80059c0:	3001      	adds	r0, #1
 80059c2:	f43f ae3c 	beq.w	800563e <_printf_float+0xb6>
 80059c6:	f108 0801 	add.w	r8, r8, #1
 80059ca:	68e3      	ldr	r3, [r4, #12]
 80059cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80059ce:	1a5b      	subs	r3, r3, r1
 80059d0:	4543      	cmp	r3, r8
 80059d2:	dcf0      	bgt.n	80059b6 <_printf_float+0x42e>
 80059d4:	e6fd      	b.n	80057d2 <_printf_float+0x24a>
 80059d6:	f04f 0800 	mov.w	r8, #0
 80059da:	f104 0919 	add.w	r9, r4, #25
 80059de:	e7f4      	b.n	80059ca <_printf_float+0x442>

080059e0 <_printf_common>:
 80059e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e4:	4616      	mov	r6, r2
 80059e6:	4698      	mov	r8, r3
 80059e8:	688a      	ldr	r2, [r1, #8]
 80059ea:	690b      	ldr	r3, [r1, #16]
 80059ec:	4607      	mov	r7, r0
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bfb8      	it	lt
 80059f2:	4613      	movlt	r3, r2
 80059f4:	6033      	str	r3, [r6, #0]
 80059f6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059fa:	460c      	mov	r4, r1
 80059fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a00:	b10a      	cbz	r2, 8005a06 <_printf_common+0x26>
 8005a02:	3301      	adds	r3, #1
 8005a04:	6033      	str	r3, [r6, #0]
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	0699      	lsls	r1, r3, #26
 8005a0a:	bf42      	ittt	mi
 8005a0c:	6833      	ldrmi	r3, [r6, #0]
 8005a0e:	3302      	addmi	r3, #2
 8005a10:	6033      	strmi	r3, [r6, #0]
 8005a12:	6825      	ldr	r5, [r4, #0]
 8005a14:	f015 0506 	ands.w	r5, r5, #6
 8005a18:	d106      	bne.n	8005a28 <_printf_common+0x48>
 8005a1a:	f104 0a19 	add.w	sl, r4, #25
 8005a1e:	68e3      	ldr	r3, [r4, #12]
 8005a20:	6832      	ldr	r2, [r6, #0]
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	42ab      	cmp	r3, r5
 8005a26:	dc2b      	bgt.n	8005a80 <_printf_common+0xa0>
 8005a28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a2c:	6822      	ldr	r2, [r4, #0]
 8005a2e:	3b00      	subs	r3, #0
 8005a30:	bf18      	it	ne
 8005a32:	2301      	movne	r3, #1
 8005a34:	0692      	lsls	r2, r2, #26
 8005a36:	d430      	bmi.n	8005a9a <_printf_common+0xba>
 8005a38:	4641      	mov	r1, r8
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a40:	47c8      	blx	r9
 8005a42:	3001      	adds	r0, #1
 8005a44:	d023      	beq.n	8005a8e <_printf_common+0xae>
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	6922      	ldr	r2, [r4, #16]
 8005a4a:	f003 0306 	and.w	r3, r3, #6
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	bf14      	ite	ne
 8005a52:	2500      	movne	r5, #0
 8005a54:	6833      	ldreq	r3, [r6, #0]
 8005a56:	f04f 0600 	mov.w	r6, #0
 8005a5a:	bf08      	it	eq
 8005a5c:	68e5      	ldreq	r5, [r4, #12]
 8005a5e:	f104 041a 	add.w	r4, r4, #26
 8005a62:	bf08      	it	eq
 8005a64:	1aed      	subeq	r5, r5, r3
 8005a66:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a6a:	bf08      	it	eq
 8005a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a70:	4293      	cmp	r3, r2
 8005a72:	bfc4      	itt	gt
 8005a74:	1a9b      	subgt	r3, r3, r2
 8005a76:	18ed      	addgt	r5, r5, r3
 8005a78:	42b5      	cmp	r5, r6
 8005a7a:	d11a      	bne.n	8005ab2 <_printf_common+0xd2>
 8005a7c:	2000      	movs	r0, #0
 8005a7e:	e008      	b.n	8005a92 <_printf_common+0xb2>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4652      	mov	r2, sl
 8005a84:	4641      	mov	r1, r8
 8005a86:	4638      	mov	r0, r7
 8005a88:	47c8      	blx	r9
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d103      	bne.n	8005a96 <_printf_common+0xb6>
 8005a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a96:	3501      	adds	r5, #1
 8005a98:	e7c1      	b.n	8005a1e <_printf_common+0x3e>
 8005a9a:	2030      	movs	r0, #48	@ 0x30
 8005a9c:	18e1      	adds	r1, r4, r3
 8005a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005aa8:	4422      	add	r2, r4
 8005aaa:	3302      	adds	r3, #2
 8005aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ab0:	e7c2      	b.n	8005a38 <_printf_common+0x58>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	4641      	mov	r1, r8
 8005ab8:	4638      	mov	r0, r7
 8005aba:	47c8      	blx	r9
 8005abc:	3001      	adds	r0, #1
 8005abe:	d0e6      	beq.n	8005a8e <_printf_common+0xae>
 8005ac0:	3601      	adds	r6, #1
 8005ac2:	e7d9      	b.n	8005a78 <_printf_common+0x98>

08005ac4 <_printf_i>:
 8005ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	7e0f      	ldrb	r7, [r1, #24]
 8005aca:	4691      	mov	r9, r2
 8005acc:	2f78      	cmp	r7, #120	@ 0x78
 8005ace:	4680      	mov	r8, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	469a      	mov	sl, r3
 8005ad4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ada:	d807      	bhi.n	8005aec <_printf_i+0x28>
 8005adc:	2f62      	cmp	r7, #98	@ 0x62
 8005ade:	d80a      	bhi.n	8005af6 <_printf_i+0x32>
 8005ae0:	2f00      	cmp	r7, #0
 8005ae2:	f000 80d3 	beq.w	8005c8c <_printf_i+0x1c8>
 8005ae6:	2f58      	cmp	r7, #88	@ 0x58
 8005ae8:	f000 80ba 	beq.w	8005c60 <_printf_i+0x19c>
 8005aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005af4:	e03a      	b.n	8005b6c <_printf_i+0xa8>
 8005af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005afa:	2b15      	cmp	r3, #21
 8005afc:	d8f6      	bhi.n	8005aec <_printf_i+0x28>
 8005afe:	a101      	add	r1, pc, #4	@ (adr r1, 8005b04 <_printf_i+0x40>)
 8005b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005aed 	.word	0x08005aed
 8005b10:	08005aed 	.word	0x08005aed
 8005b14:	08005aed 	.word	0x08005aed
 8005b18:	08005aed 	.word	0x08005aed
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005aed 	.word	0x08005aed
 8005b24:	08005aed 	.word	0x08005aed
 8005b28:	08005aed 	.word	0x08005aed
 8005b2c:	08005aed 	.word	0x08005aed
 8005b30:	08005c73 	.word	0x08005c73
 8005b34:	08005b9b 	.word	0x08005b9b
 8005b38:	08005c2d 	.word	0x08005c2d
 8005b3c:	08005aed 	.word	0x08005aed
 8005b40:	08005aed 	.word	0x08005aed
 8005b44:	08005c95 	.word	0x08005c95
 8005b48:	08005aed 	.word	0x08005aed
 8005b4c:	08005b9b 	.word	0x08005b9b
 8005b50:	08005aed 	.word	0x08005aed
 8005b54:	08005aed 	.word	0x08005aed
 8005b58:	08005c35 	.word	0x08005c35
 8005b5c:	6833      	ldr	r3, [r6, #0]
 8005b5e:	1d1a      	adds	r2, r3, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6032      	str	r2, [r6, #0]
 8005b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e09e      	b.n	8005cae <_printf_i+0x1ea>
 8005b70:	6833      	ldr	r3, [r6, #0]
 8005b72:	6820      	ldr	r0, [r4, #0]
 8005b74:	1d19      	adds	r1, r3, #4
 8005b76:	6031      	str	r1, [r6, #0]
 8005b78:	0606      	lsls	r6, r0, #24
 8005b7a:	d501      	bpl.n	8005b80 <_printf_i+0xbc>
 8005b7c:	681d      	ldr	r5, [r3, #0]
 8005b7e:	e003      	b.n	8005b88 <_printf_i+0xc4>
 8005b80:	0645      	lsls	r5, r0, #25
 8005b82:	d5fb      	bpl.n	8005b7c <_printf_i+0xb8>
 8005b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	da03      	bge.n	8005b94 <_printf_i+0xd0>
 8005b8c:	232d      	movs	r3, #45	@ 0x2d
 8005b8e:	426d      	negs	r5, r5
 8005b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b94:	230a      	movs	r3, #10
 8005b96:	4859      	ldr	r0, [pc, #356]	@ (8005cfc <_printf_i+0x238>)
 8005b98:	e011      	b.n	8005bbe <_printf_i+0xfa>
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	6833      	ldr	r3, [r6, #0]
 8005b9e:	0608      	lsls	r0, r1, #24
 8005ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ba4:	d402      	bmi.n	8005bac <_printf_i+0xe8>
 8005ba6:	0649      	lsls	r1, r1, #25
 8005ba8:	bf48      	it	mi
 8005baa:	b2ad      	uxthmi	r5, r5
 8005bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bae:	6033      	str	r3, [r6, #0]
 8005bb0:	bf14      	ite	ne
 8005bb2:	230a      	movne	r3, #10
 8005bb4:	2308      	moveq	r3, #8
 8005bb6:	4851      	ldr	r0, [pc, #324]	@ (8005cfc <_printf_i+0x238>)
 8005bb8:	2100      	movs	r1, #0
 8005bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bbe:	6866      	ldr	r6, [r4, #4]
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	bfa8      	it	ge
 8005bc4:	6821      	ldrge	r1, [r4, #0]
 8005bc6:	60a6      	str	r6, [r4, #8]
 8005bc8:	bfa4      	itt	ge
 8005bca:	f021 0104 	bicge.w	r1, r1, #4
 8005bce:	6021      	strge	r1, [r4, #0]
 8005bd0:	b90d      	cbnz	r5, 8005bd6 <_printf_i+0x112>
 8005bd2:	2e00      	cmp	r6, #0
 8005bd4:	d04b      	beq.n	8005c6e <_printf_i+0x1aa>
 8005bd6:	4616      	mov	r6, r2
 8005bd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bdc:	fb03 5711 	mls	r7, r3, r1, r5
 8005be0:	5dc7      	ldrb	r7, [r0, r7]
 8005be2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005be6:	462f      	mov	r7, r5
 8005be8:	42bb      	cmp	r3, r7
 8005bea:	460d      	mov	r5, r1
 8005bec:	d9f4      	bls.n	8005bd8 <_printf_i+0x114>
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d10b      	bne.n	8005c0a <_printf_i+0x146>
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	07df      	lsls	r7, r3, #31
 8005bf6:	d508      	bpl.n	8005c0a <_printf_i+0x146>
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	6861      	ldr	r1, [r4, #4]
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	bfde      	ittt	le
 8005c00:	2330      	movle	r3, #48	@ 0x30
 8005c02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c0a:	1b92      	subs	r2, r2, r6
 8005c0c:	6122      	str	r2, [r4, #16]
 8005c0e:	464b      	mov	r3, r9
 8005c10:	4621      	mov	r1, r4
 8005c12:	4640      	mov	r0, r8
 8005c14:	f8cd a000 	str.w	sl, [sp]
 8005c18:	aa03      	add	r2, sp, #12
 8005c1a:	f7ff fee1 	bl	80059e0 <_printf_common>
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d14a      	bne.n	8005cb8 <_printf_i+0x1f4>
 8005c22:	f04f 30ff 	mov.w	r0, #4294967295
 8005c26:	b004      	add	sp, #16
 8005c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	2778      	movs	r7, #120	@ 0x78
 8005c36:	4832      	ldr	r0, [pc, #200]	@ (8005d00 <_printf_i+0x23c>)
 8005c38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	6831      	ldr	r1, [r6, #0]
 8005c40:	061f      	lsls	r7, r3, #24
 8005c42:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c46:	d402      	bmi.n	8005c4e <_printf_i+0x18a>
 8005c48:	065f      	lsls	r7, r3, #25
 8005c4a:	bf48      	it	mi
 8005c4c:	b2ad      	uxthmi	r5, r5
 8005c4e:	6031      	str	r1, [r6, #0]
 8005c50:	07d9      	lsls	r1, r3, #31
 8005c52:	bf44      	itt	mi
 8005c54:	f043 0320 	orrmi.w	r3, r3, #32
 8005c58:	6023      	strmi	r3, [r4, #0]
 8005c5a:	b11d      	cbz	r5, 8005c64 <_printf_i+0x1a0>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	e7ab      	b.n	8005bb8 <_printf_i+0xf4>
 8005c60:	4826      	ldr	r0, [pc, #152]	@ (8005cfc <_printf_i+0x238>)
 8005c62:	e7e9      	b.n	8005c38 <_printf_i+0x174>
 8005c64:	6823      	ldr	r3, [r4, #0]
 8005c66:	f023 0320 	bic.w	r3, r3, #32
 8005c6a:	6023      	str	r3, [r4, #0]
 8005c6c:	e7f6      	b.n	8005c5c <_printf_i+0x198>
 8005c6e:	4616      	mov	r6, r2
 8005c70:	e7bd      	b.n	8005bee <_printf_i+0x12a>
 8005c72:	6833      	ldr	r3, [r6, #0]
 8005c74:	6825      	ldr	r5, [r4, #0]
 8005c76:	1d18      	adds	r0, r3, #4
 8005c78:	6961      	ldr	r1, [r4, #20]
 8005c7a:	6030      	str	r0, [r6, #0]
 8005c7c:	062e      	lsls	r6, r5, #24
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	d501      	bpl.n	8005c86 <_printf_i+0x1c2>
 8005c82:	6019      	str	r1, [r3, #0]
 8005c84:	e002      	b.n	8005c8c <_printf_i+0x1c8>
 8005c86:	0668      	lsls	r0, r5, #25
 8005c88:	d5fb      	bpl.n	8005c82 <_printf_i+0x1be>
 8005c8a:	8019      	strh	r1, [r3, #0]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4616      	mov	r6, r2
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	e7bc      	b.n	8005c0e <_printf_i+0x14a>
 8005c94:	6833      	ldr	r3, [r6, #0]
 8005c96:	2100      	movs	r1, #0
 8005c98:	1d1a      	adds	r2, r3, #4
 8005c9a:	6032      	str	r2, [r6, #0]
 8005c9c:	681e      	ldr	r6, [r3, #0]
 8005c9e:	6862      	ldr	r2, [r4, #4]
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f000 f9d4 	bl	800604e <memchr>
 8005ca6:	b108      	cbz	r0, 8005cac <_printf_i+0x1e8>
 8005ca8:	1b80      	subs	r0, r0, r6
 8005caa:	6060      	str	r0, [r4, #4]
 8005cac:	6863      	ldr	r3, [r4, #4]
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb6:	e7aa      	b.n	8005c0e <_printf_i+0x14a>
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4649      	mov	r1, r9
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	6923      	ldr	r3, [r4, #16]
 8005cc0:	47d0      	blx	sl
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	d0ad      	beq.n	8005c22 <_printf_i+0x15e>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	079b      	lsls	r3, r3, #30
 8005cca:	d413      	bmi.n	8005cf4 <_printf_i+0x230>
 8005ccc:	68e0      	ldr	r0, [r4, #12]
 8005cce:	9b03      	ldr	r3, [sp, #12]
 8005cd0:	4298      	cmp	r0, r3
 8005cd2:	bfb8      	it	lt
 8005cd4:	4618      	movlt	r0, r3
 8005cd6:	e7a6      	b.n	8005c26 <_printf_i+0x162>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	4632      	mov	r2, r6
 8005cdc:	4649      	mov	r1, r9
 8005cde:	4640      	mov	r0, r8
 8005ce0:	47d0      	blx	sl
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	d09d      	beq.n	8005c22 <_printf_i+0x15e>
 8005ce6:	3501      	adds	r5, #1
 8005ce8:	68e3      	ldr	r3, [r4, #12]
 8005cea:	9903      	ldr	r1, [sp, #12]
 8005cec:	1a5b      	subs	r3, r3, r1
 8005cee:	42ab      	cmp	r3, r5
 8005cf0:	dcf2      	bgt.n	8005cd8 <_printf_i+0x214>
 8005cf2:	e7eb      	b.n	8005ccc <_printf_i+0x208>
 8005cf4:	2500      	movs	r5, #0
 8005cf6:	f104 0619 	add.w	r6, r4, #25
 8005cfa:	e7f5      	b.n	8005ce8 <_printf_i+0x224>
 8005cfc:	08008322 	.word	0x08008322
 8005d00:	08008333 	.word	0x08008333

08005d04 <std>:
 8005d04:	2300      	movs	r3, #0
 8005d06:	b510      	push	{r4, lr}
 8005d08:	4604      	mov	r4, r0
 8005d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d12:	6083      	str	r3, [r0, #8]
 8005d14:	8181      	strh	r1, [r0, #12]
 8005d16:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d18:	81c2      	strh	r2, [r0, #14]
 8005d1a:	6183      	str	r3, [r0, #24]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2208      	movs	r2, #8
 8005d20:	305c      	adds	r0, #92	@ 0x5c
 8005d22:	f000 f914 	bl	8005f4e <memset>
 8005d26:	4b0d      	ldr	r3, [pc, #52]	@ (8005d5c <std+0x58>)
 8005d28:	6224      	str	r4, [r4, #32]
 8005d2a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <std+0x5c>)
 8005d2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d30:	4b0c      	ldr	r3, [pc, #48]	@ (8005d64 <std+0x60>)
 8005d32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d34:	4b0c      	ldr	r3, [pc, #48]	@ (8005d68 <std+0x64>)
 8005d36:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d38:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <std+0x68>)
 8005d3a:	429c      	cmp	r4, r3
 8005d3c:	d006      	beq.n	8005d4c <std+0x48>
 8005d3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d42:	4294      	cmp	r4, r2
 8005d44:	d002      	beq.n	8005d4c <std+0x48>
 8005d46:	33d0      	adds	r3, #208	@ 0xd0
 8005d48:	429c      	cmp	r4, r3
 8005d4a:	d105      	bne.n	8005d58 <std+0x54>
 8005d4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d54:	f000 b978 	b.w	8006048 <__retarget_lock_init_recursive>
 8005d58:	bd10      	pop	{r4, pc}
 8005d5a:	bf00      	nop
 8005d5c:	08005ec9 	.word	0x08005ec9
 8005d60:	08005eeb 	.word	0x08005eeb
 8005d64:	08005f23 	.word	0x08005f23
 8005d68:	08005f47 	.word	0x08005f47
 8005d6c:	200007a0 	.word	0x200007a0

08005d70 <stdio_exit_handler>:
 8005d70:	4a02      	ldr	r2, [pc, #8]	@ (8005d7c <stdio_exit_handler+0xc>)
 8005d72:	4903      	ldr	r1, [pc, #12]	@ (8005d80 <stdio_exit_handler+0x10>)
 8005d74:	4803      	ldr	r0, [pc, #12]	@ (8005d84 <stdio_exit_handler+0x14>)
 8005d76:	f000 b869 	b.w	8005e4c <_fwalk_sglue>
 8005d7a:	bf00      	nop
 8005d7c:	200000d0 	.word	0x200000d0
 8005d80:	080079bd 	.word	0x080079bd
 8005d84:	200000e0 	.word	0x200000e0

08005d88 <cleanup_stdio>:
 8005d88:	6841      	ldr	r1, [r0, #4]
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <cleanup_stdio+0x34>)
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	4299      	cmp	r1, r3
 8005d90:	4604      	mov	r4, r0
 8005d92:	d001      	beq.n	8005d98 <cleanup_stdio+0x10>
 8005d94:	f001 fe12 	bl	80079bc <_fflush_r>
 8005d98:	68a1      	ldr	r1, [r4, #8]
 8005d9a:	4b09      	ldr	r3, [pc, #36]	@ (8005dc0 <cleanup_stdio+0x38>)
 8005d9c:	4299      	cmp	r1, r3
 8005d9e:	d002      	beq.n	8005da6 <cleanup_stdio+0x1e>
 8005da0:	4620      	mov	r0, r4
 8005da2:	f001 fe0b 	bl	80079bc <_fflush_r>
 8005da6:	68e1      	ldr	r1, [r4, #12]
 8005da8:	4b06      	ldr	r3, [pc, #24]	@ (8005dc4 <cleanup_stdio+0x3c>)
 8005daa:	4299      	cmp	r1, r3
 8005dac:	d004      	beq.n	8005db8 <cleanup_stdio+0x30>
 8005dae:	4620      	mov	r0, r4
 8005db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db4:	f001 be02 	b.w	80079bc <_fflush_r>
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	bf00      	nop
 8005dbc:	200007a0 	.word	0x200007a0
 8005dc0:	20000808 	.word	0x20000808
 8005dc4:	20000870 	.word	0x20000870

08005dc8 <global_stdio_init.part.0>:
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <global_stdio_init.part.0+0x30>)
 8005dcc:	4c0b      	ldr	r4, [pc, #44]	@ (8005dfc <global_stdio_init.part.0+0x34>)
 8005dce:	4a0c      	ldr	r2, [pc, #48]	@ (8005e00 <global_stdio_init.part.0+0x38>)
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	2104      	movs	r1, #4
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f7ff ff94 	bl	8005d04 <std>
 8005ddc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005de0:	2201      	movs	r2, #1
 8005de2:	2109      	movs	r1, #9
 8005de4:	f7ff ff8e 	bl	8005d04 <std>
 8005de8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dec:	2202      	movs	r2, #2
 8005dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df2:	2112      	movs	r1, #18
 8005df4:	f7ff bf86 	b.w	8005d04 <std>
 8005df8:	200008d8 	.word	0x200008d8
 8005dfc:	200007a0 	.word	0x200007a0
 8005e00:	08005d71 	.word	0x08005d71

08005e04 <__sfp_lock_acquire>:
 8005e04:	4801      	ldr	r0, [pc, #4]	@ (8005e0c <__sfp_lock_acquire+0x8>)
 8005e06:	f000 b920 	b.w	800604a <__retarget_lock_acquire_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	200008e1 	.word	0x200008e1

08005e10 <__sfp_lock_release>:
 8005e10:	4801      	ldr	r0, [pc, #4]	@ (8005e18 <__sfp_lock_release+0x8>)
 8005e12:	f000 b91b 	b.w	800604c <__retarget_lock_release_recursive>
 8005e16:	bf00      	nop
 8005e18:	200008e1 	.word	0x200008e1

08005e1c <__sinit>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	4604      	mov	r4, r0
 8005e20:	f7ff fff0 	bl	8005e04 <__sfp_lock_acquire>
 8005e24:	6a23      	ldr	r3, [r4, #32]
 8005e26:	b11b      	cbz	r3, 8005e30 <__sinit+0x14>
 8005e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2c:	f7ff bff0 	b.w	8005e10 <__sfp_lock_release>
 8005e30:	4b04      	ldr	r3, [pc, #16]	@ (8005e44 <__sinit+0x28>)
 8005e32:	6223      	str	r3, [r4, #32]
 8005e34:	4b04      	ldr	r3, [pc, #16]	@ (8005e48 <__sinit+0x2c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f5      	bne.n	8005e28 <__sinit+0xc>
 8005e3c:	f7ff ffc4 	bl	8005dc8 <global_stdio_init.part.0>
 8005e40:	e7f2      	b.n	8005e28 <__sinit+0xc>
 8005e42:	bf00      	nop
 8005e44:	08005d89 	.word	0x08005d89
 8005e48:	200008d8 	.word	0x200008d8

08005e4c <_fwalk_sglue>:
 8005e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e50:	4607      	mov	r7, r0
 8005e52:	4688      	mov	r8, r1
 8005e54:	4614      	mov	r4, r2
 8005e56:	2600      	movs	r6, #0
 8005e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e60:	d505      	bpl.n	8005e6e <_fwalk_sglue+0x22>
 8005e62:	6824      	ldr	r4, [r4, #0]
 8005e64:	2c00      	cmp	r4, #0
 8005e66:	d1f7      	bne.n	8005e58 <_fwalk_sglue+0xc>
 8005e68:	4630      	mov	r0, r6
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	89ab      	ldrh	r3, [r5, #12]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d907      	bls.n	8005e84 <_fwalk_sglue+0x38>
 8005e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	d003      	beq.n	8005e84 <_fwalk_sglue+0x38>
 8005e7c:	4629      	mov	r1, r5
 8005e7e:	4638      	mov	r0, r7
 8005e80:	47c0      	blx	r8
 8005e82:	4306      	orrs	r6, r0
 8005e84:	3568      	adds	r5, #104	@ 0x68
 8005e86:	e7e9      	b.n	8005e5c <_fwalk_sglue+0x10>

08005e88 <siprintf>:
 8005e88:	b40e      	push	{r1, r2, r3}
 8005e8a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e8e:	b500      	push	{lr}
 8005e90:	b09c      	sub	sp, #112	@ 0x70
 8005e92:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e94:	9002      	str	r0, [sp, #8]
 8005e96:	9006      	str	r0, [sp, #24]
 8005e98:	9107      	str	r1, [sp, #28]
 8005e9a:	9104      	str	r1, [sp, #16]
 8005e9c:	4808      	ldr	r0, [pc, #32]	@ (8005ec0 <siprintf+0x38>)
 8005e9e:	4909      	ldr	r1, [pc, #36]	@ (8005ec4 <siprintf+0x3c>)
 8005ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea4:	9105      	str	r1, [sp, #20]
 8005ea6:	6800      	ldr	r0, [r0, #0]
 8005ea8:	a902      	add	r1, sp, #8
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	f001 fc0a 	bl	80076c4 <_svfiprintf_r>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	9b02      	ldr	r3, [sp, #8]
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	b01c      	add	sp, #112	@ 0x70
 8005eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ebc:	b003      	add	sp, #12
 8005ebe:	4770      	bx	lr
 8005ec0:	200000dc 	.word	0x200000dc
 8005ec4:	ffff0208 	.word	0xffff0208

08005ec8 <__sread>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	460c      	mov	r4, r1
 8005ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed0:	f000 f86c 	bl	8005fac <_read_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	bfab      	itete	ge
 8005ed8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005eda:	89a3      	ldrhlt	r3, [r4, #12]
 8005edc:	181b      	addge	r3, r3, r0
 8005ede:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ee2:	bfac      	ite	ge
 8005ee4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ee6:	81a3      	strhlt	r3, [r4, #12]
 8005ee8:	bd10      	pop	{r4, pc}

08005eea <__swrite>:
 8005eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eee:	461f      	mov	r7, r3
 8005ef0:	898b      	ldrh	r3, [r1, #12]
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	05db      	lsls	r3, r3, #23
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	4616      	mov	r6, r2
 8005efa:	d505      	bpl.n	8005f08 <__swrite+0x1e>
 8005efc:	2302      	movs	r3, #2
 8005efe:	2200      	movs	r2, #0
 8005f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f04:	f000 f840 	bl	8005f88 <_lseek_r>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	4632      	mov	r2, r6
 8005f0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f10:	81a3      	strh	r3, [r4, #12]
 8005f12:	4628      	mov	r0, r5
 8005f14:	463b      	mov	r3, r7
 8005f16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f1e:	f000 b857 	b.w	8005fd0 <_write_r>

08005f22 <__sseek>:
 8005f22:	b510      	push	{r4, lr}
 8005f24:	460c      	mov	r4, r1
 8005f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f2a:	f000 f82d 	bl	8005f88 <_lseek_r>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	bf15      	itete	ne
 8005f34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f3e:	81a3      	strheq	r3, [r4, #12]
 8005f40:	bf18      	it	ne
 8005f42:	81a3      	strhne	r3, [r4, #12]
 8005f44:	bd10      	pop	{r4, pc}

08005f46 <__sclose>:
 8005f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4a:	f000 b80d 	b.w	8005f68 <_close_r>

08005f4e <memset>:
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4402      	add	r2, r0
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d100      	bne.n	8005f58 <memset+0xa>
 8005f56:	4770      	bx	lr
 8005f58:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5c:	e7f9      	b.n	8005f52 <memset+0x4>
	...

08005f60 <_localeconv_r>:
 8005f60:	4800      	ldr	r0, [pc, #0]	@ (8005f64 <_localeconv_r+0x4>)
 8005f62:	4770      	bx	lr
 8005f64:	2000021c 	.word	0x2000021c

08005f68 <_close_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4d05      	ldr	r5, [pc, #20]	@ (8005f84 <_close_r+0x1c>)
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fe fa13 	bl	800439e <_close>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_close_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_close_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	200008dc 	.word	0x200008dc

08005f88 <_lseek_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	2200      	movs	r2, #0
 8005f92:	4d05      	ldr	r5, [pc, #20]	@ (8005fa8 <_lseek_r+0x20>)
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fe fa25 	bl	80043e6 <_lseek>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_lseek_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_lseek_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	200008dc 	.word	0x200008dc

08005fac <_read_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4d05      	ldr	r5, [pc, #20]	@ (8005fcc <_read_r+0x20>)
 8005fb8:	602a      	str	r2, [r5, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f7fe f9b6 	bl	800432c <_read>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	d102      	bne.n	8005fca <_read_r+0x1e>
 8005fc4:	682b      	ldr	r3, [r5, #0]
 8005fc6:	b103      	cbz	r3, 8005fca <_read_r+0x1e>
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	bd38      	pop	{r3, r4, r5, pc}
 8005fcc:	200008dc 	.word	0x200008dc

08005fd0 <_write_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	4608      	mov	r0, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	2200      	movs	r2, #0
 8005fda:	4d05      	ldr	r5, [pc, #20]	@ (8005ff0 <_write_r+0x20>)
 8005fdc:	602a      	str	r2, [r5, #0]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f7fe f9c1 	bl	8004366 <_write>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d102      	bne.n	8005fee <_write_r+0x1e>
 8005fe8:	682b      	ldr	r3, [r5, #0]
 8005fea:	b103      	cbz	r3, 8005fee <_write_r+0x1e>
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	bd38      	pop	{r3, r4, r5, pc}
 8005ff0:	200008dc 	.word	0x200008dc

08005ff4 <__errno>:
 8005ff4:	4b01      	ldr	r3, [pc, #4]	@ (8005ffc <__errno+0x8>)
 8005ff6:	6818      	ldr	r0, [r3, #0]
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	200000dc 	.word	0x200000dc

08006000 <__libc_init_array>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	2600      	movs	r6, #0
 8006004:	4d0c      	ldr	r5, [pc, #48]	@ (8006038 <__libc_init_array+0x38>)
 8006006:	4c0d      	ldr	r4, [pc, #52]	@ (800603c <__libc_init_array+0x3c>)
 8006008:	1b64      	subs	r4, r4, r5
 800600a:	10a4      	asrs	r4, r4, #2
 800600c:	42a6      	cmp	r6, r4
 800600e:	d109      	bne.n	8006024 <__libc_init_array+0x24>
 8006010:	f002 f870 	bl	80080f4 <_init>
 8006014:	2600      	movs	r6, #0
 8006016:	4d0a      	ldr	r5, [pc, #40]	@ (8006040 <__libc_init_array+0x40>)
 8006018:	4c0a      	ldr	r4, [pc, #40]	@ (8006044 <__libc_init_array+0x44>)
 800601a:	1b64      	subs	r4, r4, r5
 800601c:	10a4      	asrs	r4, r4, #2
 800601e:	42a6      	cmp	r6, r4
 8006020:	d105      	bne.n	800602e <__libc_init_array+0x2e>
 8006022:	bd70      	pop	{r4, r5, r6, pc}
 8006024:	f855 3b04 	ldr.w	r3, [r5], #4
 8006028:	4798      	blx	r3
 800602a:	3601      	adds	r6, #1
 800602c:	e7ee      	b.n	800600c <__libc_init_array+0xc>
 800602e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006032:	4798      	blx	r3
 8006034:	3601      	adds	r6, #1
 8006036:	e7f2      	b.n	800601e <__libc_init_array+0x1e>
 8006038:	08008688 	.word	0x08008688
 800603c:	08008688 	.word	0x08008688
 8006040:	08008688 	.word	0x08008688
 8006044:	0800868c 	.word	0x0800868c

08006048 <__retarget_lock_init_recursive>:
 8006048:	4770      	bx	lr

0800604a <__retarget_lock_acquire_recursive>:
 800604a:	4770      	bx	lr

0800604c <__retarget_lock_release_recursive>:
 800604c:	4770      	bx	lr

0800604e <memchr>:
 800604e:	4603      	mov	r3, r0
 8006050:	b510      	push	{r4, lr}
 8006052:	b2c9      	uxtb	r1, r1
 8006054:	4402      	add	r2, r0
 8006056:	4293      	cmp	r3, r2
 8006058:	4618      	mov	r0, r3
 800605a:	d101      	bne.n	8006060 <memchr+0x12>
 800605c:	2000      	movs	r0, #0
 800605e:	e003      	b.n	8006068 <memchr+0x1a>
 8006060:	7804      	ldrb	r4, [r0, #0]
 8006062:	3301      	adds	r3, #1
 8006064:	428c      	cmp	r4, r1
 8006066:	d1f6      	bne.n	8006056 <memchr+0x8>
 8006068:	bd10      	pop	{r4, pc}

0800606a <quorem>:
 800606a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606e:	6903      	ldr	r3, [r0, #16]
 8006070:	690c      	ldr	r4, [r1, #16]
 8006072:	4607      	mov	r7, r0
 8006074:	42a3      	cmp	r3, r4
 8006076:	db7e      	blt.n	8006176 <quorem+0x10c>
 8006078:	3c01      	subs	r4, #1
 800607a:	00a3      	lsls	r3, r4, #2
 800607c:	f100 0514 	add.w	r5, r0, #20
 8006080:	f101 0814 	add.w	r8, r1, #20
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006090:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006094:	3301      	adds	r3, #1
 8006096:	429a      	cmp	r2, r3
 8006098:	fbb2 f6f3 	udiv	r6, r2, r3
 800609c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060a0:	d32e      	bcc.n	8006100 <quorem+0x96>
 80060a2:	f04f 0a00 	mov.w	sl, #0
 80060a6:	46c4      	mov	ip, r8
 80060a8:	46ae      	mov	lr, r5
 80060aa:	46d3      	mov	fp, sl
 80060ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060b0:	b298      	uxth	r0, r3
 80060b2:	fb06 a000 	mla	r0, r6, r0, sl
 80060b6:	0c1b      	lsrs	r3, r3, #16
 80060b8:	0c02      	lsrs	r2, r0, #16
 80060ba:	fb06 2303 	mla	r3, r6, r3, r2
 80060be:	f8de 2000 	ldr.w	r2, [lr]
 80060c2:	b280      	uxth	r0, r0
 80060c4:	b292      	uxth	r2, r2
 80060c6:	1a12      	subs	r2, r2, r0
 80060c8:	445a      	add	r2, fp
 80060ca:	f8de 0000 	ldr.w	r0, [lr]
 80060ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060dc:	b292      	uxth	r2, r2
 80060de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80060e2:	45e1      	cmp	r9, ip
 80060e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80060e8:	f84e 2b04 	str.w	r2, [lr], #4
 80060ec:	d2de      	bcs.n	80060ac <quorem+0x42>
 80060ee:	9b00      	ldr	r3, [sp, #0]
 80060f0:	58eb      	ldr	r3, [r5, r3]
 80060f2:	b92b      	cbnz	r3, 8006100 <quorem+0x96>
 80060f4:	9b01      	ldr	r3, [sp, #4]
 80060f6:	3b04      	subs	r3, #4
 80060f8:	429d      	cmp	r5, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	d32f      	bcc.n	800615e <quorem+0xf4>
 80060fe:	613c      	str	r4, [r7, #16]
 8006100:	4638      	mov	r0, r7
 8006102:	f001 f97b 	bl	80073fc <__mcmp>
 8006106:	2800      	cmp	r0, #0
 8006108:	db25      	blt.n	8006156 <quorem+0xec>
 800610a:	4629      	mov	r1, r5
 800610c:	2000      	movs	r0, #0
 800610e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006112:	f8d1 c000 	ldr.w	ip, [r1]
 8006116:	fa1f fe82 	uxth.w	lr, r2
 800611a:	fa1f f38c 	uxth.w	r3, ip
 800611e:	eba3 030e 	sub.w	r3, r3, lr
 8006122:	4403      	add	r3, r0
 8006124:	0c12      	lsrs	r2, r2, #16
 8006126:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800612a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800612e:	b29b      	uxth	r3, r3
 8006130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006134:	45c1      	cmp	r9, r8
 8006136:	ea4f 4022 	mov.w	r0, r2, asr #16
 800613a:	f841 3b04 	str.w	r3, [r1], #4
 800613e:	d2e6      	bcs.n	800610e <quorem+0xa4>
 8006140:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006148:	b922      	cbnz	r2, 8006154 <quorem+0xea>
 800614a:	3b04      	subs	r3, #4
 800614c:	429d      	cmp	r5, r3
 800614e:	461a      	mov	r2, r3
 8006150:	d30b      	bcc.n	800616a <quorem+0x100>
 8006152:	613c      	str	r4, [r7, #16]
 8006154:	3601      	adds	r6, #1
 8006156:	4630      	mov	r0, r6
 8006158:	b003      	add	sp, #12
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	6812      	ldr	r2, [r2, #0]
 8006160:	3b04      	subs	r3, #4
 8006162:	2a00      	cmp	r2, #0
 8006164:	d1cb      	bne.n	80060fe <quorem+0x94>
 8006166:	3c01      	subs	r4, #1
 8006168:	e7c6      	b.n	80060f8 <quorem+0x8e>
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	3b04      	subs	r3, #4
 800616e:	2a00      	cmp	r2, #0
 8006170:	d1ef      	bne.n	8006152 <quorem+0xe8>
 8006172:	3c01      	subs	r4, #1
 8006174:	e7ea      	b.n	800614c <quorem+0xe2>
 8006176:	2000      	movs	r0, #0
 8006178:	e7ee      	b.n	8006158 <quorem+0xee>
 800617a:	0000      	movs	r0, r0
 800617c:	0000      	movs	r0, r0
	...

08006180 <_dtoa_r>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	4614      	mov	r4, r2
 8006186:	461d      	mov	r5, r3
 8006188:	69c7      	ldr	r7, [r0, #28]
 800618a:	b097      	sub	sp, #92	@ 0x5c
 800618c:	4683      	mov	fp, r0
 800618e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006192:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006194:	b97f      	cbnz	r7, 80061b6 <_dtoa_r+0x36>
 8006196:	2010      	movs	r0, #16
 8006198:	f000 fe02 	bl	8006da0 <malloc>
 800619c:	4602      	mov	r2, r0
 800619e:	f8cb 001c 	str.w	r0, [fp, #28]
 80061a2:	b920      	cbnz	r0, 80061ae <_dtoa_r+0x2e>
 80061a4:	21ef      	movs	r1, #239	@ 0xef
 80061a6:	4ba8      	ldr	r3, [pc, #672]	@ (8006448 <_dtoa_r+0x2c8>)
 80061a8:	48a8      	ldr	r0, [pc, #672]	@ (800644c <_dtoa_r+0x2cc>)
 80061aa:	f001 fc67 	bl	8007a7c <__assert_func>
 80061ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061b2:	6007      	str	r7, [r0, #0]
 80061b4:	60c7      	str	r7, [r0, #12]
 80061b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061ba:	6819      	ldr	r1, [r3, #0]
 80061bc:	b159      	cbz	r1, 80061d6 <_dtoa_r+0x56>
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	2301      	movs	r3, #1
 80061c2:	4093      	lsls	r3, r2
 80061c4:	604a      	str	r2, [r1, #4]
 80061c6:	608b      	str	r3, [r1, #8]
 80061c8:	4658      	mov	r0, fp
 80061ca:	f000 fedf 	bl	8006f8c <_Bfree>
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	1e2b      	subs	r3, r5, #0
 80061d8:	bfaf      	iteee	ge
 80061da:	2300      	movge	r3, #0
 80061dc:	2201      	movlt	r2, #1
 80061de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80061e2:	9303      	strlt	r3, [sp, #12]
 80061e4:	bfa8      	it	ge
 80061e6:	6033      	strge	r3, [r6, #0]
 80061e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80061ec:	4b98      	ldr	r3, [pc, #608]	@ (8006450 <_dtoa_r+0x2d0>)
 80061ee:	bfb8      	it	lt
 80061f0:	6032      	strlt	r2, [r6, #0]
 80061f2:	ea33 0308 	bics.w	r3, r3, r8
 80061f6:	d112      	bne.n	800621e <_dtoa_r+0x9e>
 80061f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80061fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061fe:	6013      	str	r3, [r2, #0]
 8006200:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006204:	4323      	orrs	r3, r4
 8006206:	f000 8550 	beq.w	8006caa <_dtoa_r+0xb2a>
 800620a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800620c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006454 <_dtoa_r+0x2d4>
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8552 	beq.w	8006cba <_dtoa_r+0xb3a>
 8006216:	f10a 0303 	add.w	r3, sl, #3
 800621a:	f000 bd4c 	b.w	8006cb6 <_dtoa_r+0xb36>
 800621e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006222:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800622a:	2200      	movs	r2, #0
 800622c:	2300      	movs	r3, #0
 800622e:	f7fa fbc5 	bl	80009bc <__aeabi_dcmpeq>
 8006232:	4607      	mov	r7, r0
 8006234:	b158      	cbz	r0, 800624e <_dtoa_r+0xce>
 8006236:	2301      	movs	r3, #1
 8006238:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800623e:	b113      	cbz	r3, 8006246 <_dtoa_r+0xc6>
 8006240:	4b85      	ldr	r3, [pc, #532]	@ (8006458 <_dtoa_r+0x2d8>)
 8006242:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800645c <_dtoa_r+0x2dc>
 800624a:	f000 bd36 	b.w	8006cba <_dtoa_r+0xb3a>
 800624e:	ab14      	add	r3, sp, #80	@ 0x50
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	ab15      	add	r3, sp, #84	@ 0x54
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4658      	mov	r0, fp
 8006258:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800625c:	f001 f97e 	bl	800755c <__d2b>
 8006260:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006264:	4681      	mov	r9, r0
 8006266:	2e00      	cmp	r6, #0
 8006268:	d077      	beq.n	800635a <_dtoa_r+0x1da>
 800626a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800626e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006270:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006278:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800627c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006280:	9712      	str	r7, [sp, #72]	@ 0x48
 8006282:	4619      	mov	r1, r3
 8006284:	2200      	movs	r2, #0
 8006286:	4b76      	ldr	r3, [pc, #472]	@ (8006460 <_dtoa_r+0x2e0>)
 8006288:	f7f9 ff78 	bl	800017c <__aeabi_dsub>
 800628c:	a368      	add	r3, pc, #416	@ (adr r3, 8006430 <_dtoa_r+0x2b0>)
 800628e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006292:	f7fa f92b 	bl	80004ec <__aeabi_dmul>
 8006296:	a368      	add	r3, pc, #416	@ (adr r3, 8006438 <_dtoa_r+0x2b8>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f7f9 ff70 	bl	8000180 <__adddf3>
 80062a0:	4604      	mov	r4, r0
 80062a2:	4630      	mov	r0, r6
 80062a4:	460d      	mov	r5, r1
 80062a6:	f7fa f8b7 	bl	8000418 <__aeabi_i2d>
 80062aa:	a365      	add	r3, pc, #404	@ (adr r3, 8006440 <_dtoa_r+0x2c0>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f91c 	bl	80004ec <__aeabi_dmul>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4620      	mov	r0, r4
 80062ba:	4629      	mov	r1, r5
 80062bc:	f7f9 ff60 	bl	8000180 <__adddf3>
 80062c0:	4604      	mov	r4, r0
 80062c2:	460d      	mov	r5, r1
 80062c4:	f7fa fbc2 	bl	8000a4c <__aeabi_d2iz>
 80062c8:	2200      	movs	r2, #0
 80062ca:	4607      	mov	r7, r0
 80062cc:	2300      	movs	r3, #0
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa fb7d 	bl	80009d0 <__aeabi_dcmplt>
 80062d6:	b140      	cbz	r0, 80062ea <_dtoa_r+0x16a>
 80062d8:	4638      	mov	r0, r7
 80062da:	f7fa f89d 	bl	8000418 <__aeabi_i2d>
 80062de:	4622      	mov	r2, r4
 80062e0:	462b      	mov	r3, r5
 80062e2:	f7fa fb6b 	bl	80009bc <__aeabi_dcmpeq>
 80062e6:	b900      	cbnz	r0, 80062ea <_dtoa_r+0x16a>
 80062e8:	3f01      	subs	r7, #1
 80062ea:	2f16      	cmp	r7, #22
 80062ec:	d853      	bhi.n	8006396 <_dtoa_r+0x216>
 80062ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006464 <_dtoa_r+0x2e4>)
 80062f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f7fa fb68 	bl	80009d0 <__aeabi_dcmplt>
 8006300:	2800      	cmp	r0, #0
 8006302:	d04a      	beq.n	800639a <_dtoa_r+0x21a>
 8006304:	2300      	movs	r3, #0
 8006306:	3f01      	subs	r7, #1
 8006308:	930f      	str	r3, [sp, #60]	@ 0x3c
 800630a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800630c:	1b9b      	subs	r3, r3, r6
 800630e:	1e5a      	subs	r2, r3, #1
 8006310:	bf46      	itte	mi
 8006312:	f1c3 0801 	rsbmi	r8, r3, #1
 8006316:	2300      	movmi	r3, #0
 8006318:	f04f 0800 	movpl.w	r8, #0
 800631c:	9209      	str	r2, [sp, #36]	@ 0x24
 800631e:	bf48      	it	mi
 8006320:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006322:	2f00      	cmp	r7, #0
 8006324:	db3b      	blt.n	800639e <_dtoa_r+0x21e>
 8006326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006328:	970e      	str	r7, [sp, #56]	@ 0x38
 800632a:	443b      	add	r3, r7
 800632c:	9309      	str	r3, [sp, #36]	@ 0x24
 800632e:	2300      	movs	r3, #0
 8006330:	930a      	str	r3, [sp, #40]	@ 0x28
 8006332:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006334:	2b09      	cmp	r3, #9
 8006336:	d866      	bhi.n	8006406 <_dtoa_r+0x286>
 8006338:	2b05      	cmp	r3, #5
 800633a:	bfc4      	itt	gt
 800633c:	3b04      	subgt	r3, #4
 800633e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006340:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006342:	bfc8      	it	gt
 8006344:	2400      	movgt	r4, #0
 8006346:	f1a3 0302 	sub.w	r3, r3, #2
 800634a:	bfd8      	it	le
 800634c:	2401      	movle	r4, #1
 800634e:	2b03      	cmp	r3, #3
 8006350:	d864      	bhi.n	800641c <_dtoa_r+0x29c>
 8006352:	e8df f003 	tbb	[pc, r3]
 8006356:	382b      	.short	0x382b
 8006358:	5636      	.short	0x5636
 800635a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800635e:	441e      	add	r6, r3
 8006360:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006364:	2b20      	cmp	r3, #32
 8006366:	bfc1      	itttt	gt
 8006368:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800636c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006370:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006374:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006378:	bfd6      	itet	le
 800637a:	f1c3 0320 	rsble	r3, r3, #32
 800637e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006382:	fa04 f003 	lslle.w	r0, r4, r3
 8006386:	f7fa f837 	bl	80003f8 <__aeabi_ui2d>
 800638a:	2201      	movs	r2, #1
 800638c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006390:	3e01      	subs	r6, #1
 8006392:	9212      	str	r2, [sp, #72]	@ 0x48
 8006394:	e775      	b.n	8006282 <_dtoa_r+0x102>
 8006396:	2301      	movs	r3, #1
 8006398:	e7b6      	b.n	8006308 <_dtoa_r+0x188>
 800639a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800639c:	e7b5      	b.n	800630a <_dtoa_r+0x18a>
 800639e:	427b      	negs	r3, r7
 80063a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a2:	2300      	movs	r3, #0
 80063a4:	eba8 0807 	sub.w	r8, r8, r7
 80063a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80063aa:	e7c2      	b.n	8006332 <_dtoa_r+0x1b2>
 80063ac:	2300      	movs	r3, #0
 80063ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	dc35      	bgt.n	8006422 <_dtoa_r+0x2a2>
 80063b6:	2301      	movs	r3, #1
 80063b8:	461a      	mov	r2, r3
 80063ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063be:	9221      	str	r2, [sp, #132]	@ 0x84
 80063c0:	e00b      	b.n	80063da <_dtoa_r+0x25a>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7f3      	b.n	80063ae <_dtoa_r+0x22e>
 80063c6:	2300      	movs	r3, #0
 80063c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063cc:	18fb      	adds	r3, r7, r3
 80063ce:	9308      	str	r3, [sp, #32]
 80063d0:	3301      	adds	r3, #1
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	bfb8      	it	lt
 80063d8:	2301      	movlt	r3, #1
 80063da:	2100      	movs	r1, #0
 80063dc:	2204      	movs	r2, #4
 80063de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80063e2:	f102 0514 	add.w	r5, r2, #20
 80063e6:	429d      	cmp	r5, r3
 80063e8:	d91f      	bls.n	800642a <_dtoa_r+0x2aa>
 80063ea:	6041      	str	r1, [r0, #4]
 80063ec:	4658      	mov	r0, fp
 80063ee:	f000 fd8d 	bl	8006f0c <_Balloc>
 80063f2:	4682      	mov	sl, r0
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d139      	bne.n	800646c <_dtoa_r+0x2ec>
 80063f8:	4602      	mov	r2, r0
 80063fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80063fe:	4b1a      	ldr	r3, [pc, #104]	@ (8006468 <_dtoa_r+0x2e8>)
 8006400:	e6d2      	b.n	80061a8 <_dtoa_r+0x28>
 8006402:	2301      	movs	r3, #1
 8006404:	e7e0      	b.n	80063c8 <_dtoa_r+0x248>
 8006406:	2401      	movs	r4, #1
 8006408:	2300      	movs	r3, #0
 800640a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800640c:	9320      	str	r3, [sp, #128]	@ 0x80
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	2200      	movs	r2, #0
 8006414:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006418:	2312      	movs	r3, #18
 800641a:	e7d0      	b.n	80063be <_dtoa_r+0x23e>
 800641c:	2301      	movs	r3, #1
 800641e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006420:	e7f5      	b.n	800640e <_dtoa_r+0x28e>
 8006422:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006424:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006428:	e7d7      	b.n	80063da <_dtoa_r+0x25a>
 800642a:	3101      	adds	r1, #1
 800642c:	0052      	lsls	r2, r2, #1
 800642e:	e7d8      	b.n	80063e2 <_dtoa_r+0x262>
 8006430:	636f4361 	.word	0x636f4361
 8006434:	3fd287a7 	.word	0x3fd287a7
 8006438:	8b60c8b3 	.word	0x8b60c8b3
 800643c:	3fc68a28 	.word	0x3fc68a28
 8006440:	509f79fb 	.word	0x509f79fb
 8006444:	3fd34413 	.word	0x3fd34413
 8006448:	08008351 	.word	0x08008351
 800644c:	08008368 	.word	0x08008368
 8006450:	7ff00000 	.word	0x7ff00000
 8006454:	0800834d 	.word	0x0800834d
 8006458:	08008321 	.word	0x08008321
 800645c:	08008320 	.word	0x08008320
 8006460:	3ff80000 	.word	0x3ff80000
 8006464:	08008460 	.word	0x08008460
 8006468:	080083c0 	.word	0x080083c0
 800646c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006470:	6018      	str	r0, [r3, #0]
 8006472:	9b07      	ldr	r3, [sp, #28]
 8006474:	2b0e      	cmp	r3, #14
 8006476:	f200 80a4 	bhi.w	80065c2 <_dtoa_r+0x442>
 800647a:	2c00      	cmp	r4, #0
 800647c:	f000 80a1 	beq.w	80065c2 <_dtoa_r+0x442>
 8006480:	2f00      	cmp	r7, #0
 8006482:	dd33      	ble.n	80064ec <_dtoa_r+0x36c>
 8006484:	4b86      	ldr	r3, [pc, #536]	@ (80066a0 <_dtoa_r+0x520>)
 8006486:	f007 020f 	and.w	r2, r7, #15
 800648a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800648e:	05f8      	lsls	r0, r7, #23
 8006490:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006494:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006498:	ea4f 1427 	mov.w	r4, r7, asr #4
 800649c:	d516      	bpl.n	80064cc <_dtoa_r+0x34c>
 800649e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064a2:	4b80      	ldr	r3, [pc, #512]	@ (80066a4 <_dtoa_r+0x524>)
 80064a4:	2603      	movs	r6, #3
 80064a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064aa:	f7fa f949 	bl	8000740 <__aeabi_ddiv>
 80064ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b2:	f004 040f 	and.w	r4, r4, #15
 80064b6:	4d7b      	ldr	r5, [pc, #492]	@ (80066a4 <_dtoa_r+0x524>)
 80064b8:	b954      	cbnz	r4, 80064d0 <_dtoa_r+0x350>
 80064ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c2:	f7fa f93d 	bl	8000740 <__aeabi_ddiv>
 80064c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ca:	e028      	b.n	800651e <_dtoa_r+0x39e>
 80064cc:	2602      	movs	r6, #2
 80064ce:	e7f2      	b.n	80064b6 <_dtoa_r+0x336>
 80064d0:	07e1      	lsls	r1, r4, #31
 80064d2:	d508      	bpl.n	80064e6 <_dtoa_r+0x366>
 80064d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064dc:	f7fa f806 	bl	80004ec <__aeabi_dmul>
 80064e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064e4:	3601      	adds	r6, #1
 80064e6:	1064      	asrs	r4, r4, #1
 80064e8:	3508      	adds	r5, #8
 80064ea:	e7e5      	b.n	80064b8 <_dtoa_r+0x338>
 80064ec:	f000 80d2 	beq.w	8006694 <_dtoa_r+0x514>
 80064f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064f4:	427c      	negs	r4, r7
 80064f6:	4b6a      	ldr	r3, [pc, #424]	@ (80066a0 <_dtoa_r+0x520>)
 80064f8:	f004 020f 	and.w	r2, r4, #15
 80064fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f7f9 fff2 	bl	80004ec <__aeabi_dmul>
 8006508:	2602      	movs	r6, #2
 800650a:	2300      	movs	r3, #0
 800650c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006510:	4d64      	ldr	r5, [pc, #400]	@ (80066a4 <_dtoa_r+0x524>)
 8006512:	1124      	asrs	r4, r4, #4
 8006514:	2c00      	cmp	r4, #0
 8006516:	f040 80b2 	bne.w	800667e <_dtoa_r+0x4fe>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1d3      	bne.n	80064c6 <_dtoa_r+0x346>
 800651e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006522:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 80b7 	beq.w	8006698 <_dtoa_r+0x518>
 800652a:	2200      	movs	r2, #0
 800652c:	4620      	mov	r0, r4
 800652e:	4629      	mov	r1, r5
 8006530:	4b5d      	ldr	r3, [pc, #372]	@ (80066a8 <_dtoa_r+0x528>)
 8006532:	f7fa fa4d 	bl	80009d0 <__aeabi_dcmplt>
 8006536:	2800      	cmp	r0, #0
 8006538:	f000 80ae 	beq.w	8006698 <_dtoa_r+0x518>
 800653c:	9b07      	ldr	r3, [sp, #28]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f000 80aa 	beq.w	8006698 <_dtoa_r+0x518>
 8006544:	9b08      	ldr	r3, [sp, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	dd37      	ble.n	80065ba <_dtoa_r+0x43a>
 800654a:	1e7b      	subs	r3, r7, #1
 800654c:	4620      	mov	r0, r4
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	2200      	movs	r2, #0
 8006552:	4629      	mov	r1, r5
 8006554:	4b55      	ldr	r3, [pc, #340]	@ (80066ac <_dtoa_r+0x52c>)
 8006556:	f7f9 ffc9 	bl	80004ec <__aeabi_dmul>
 800655a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800655e:	9c08      	ldr	r4, [sp, #32]
 8006560:	3601      	adds	r6, #1
 8006562:	4630      	mov	r0, r6
 8006564:	f7f9 ff58 	bl	8000418 <__aeabi_i2d>
 8006568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800656c:	f7f9 ffbe 	bl	80004ec <__aeabi_dmul>
 8006570:	2200      	movs	r2, #0
 8006572:	4b4f      	ldr	r3, [pc, #316]	@ (80066b0 <_dtoa_r+0x530>)
 8006574:	f7f9 fe04 	bl	8000180 <__adddf3>
 8006578:	4605      	mov	r5, r0
 800657a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800657e:	2c00      	cmp	r4, #0
 8006580:	f040 809a 	bne.w	80066b8 <_dtoa_r+0x538>
 8006584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006588:	2200      	movs	r2, #0
 800658a:	4b4a      	ldr	r3, [pc, #296]	@ (80066b4 <_dtoa_r+0x534>)
 800658c:	f7f9 fdf6 	bl	800017c <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006598:	462a      	mov	r2, r5
 800659a:	4633      	mov	r3, r6
 800659c:	f7fa fa36 	bl	8000a0c <__aeabi_dcmpgt>
 80065a0:	2800      	cmp	r0, #0
 80065a2:	f040 828e 	bne.w	8006ac2 <_dtoa_r+0x942>
 80065a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065aa:	462a      	mov	r2, r5
 80065ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065b0:	f7fa fa0e 	bl	80009d0 <__aeabi_dcmplt>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f040 8127 	bne.w	8006808 <_dtoa_r+0x688>
 80065ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f2c0 8163 	blt.w	8006890 <_dtoa_r+0x710>
 80065ca:	2f0e      	cmp	r7, #14
 80065cc:	f300 8160 	bgt.w	8006890 <_dtoa_r+0x710>
 80065d0:	4b33      	ldr	r3, [pc, #204]	@ (80066a0 <_dtoa_r+0x520>)
 80065d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80065da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	da03      	bge.n	80065ec <_dtoa_r+0x46c>
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f340 8100 	ble.w	80067ec <_dtoa_r+0x66c>
 80065ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80065f0:	4656      	mov	r6, sl
 80065f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f6:	4620      	mov	r0, r4
 80065f8:	4629      	mov	r1, r5
 80065fa:	f7fa f8a1 	bl	8000740 <__aeabi_ddiv>
 80065fe:	f7fa fa25 	bl	8000a4c <__aeabi_d2iz>
 8006602:	4680      	mov	r8, r0
 8006604:	f7f9 ff08 	bl	8000418 <__aeabi_i2d>
 8006608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800660c:	f7f9 ff6e 	bl	80004ec <__aeabi_dmul>
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	4620      	mov	r0, r4
 8006616:	4629      	mov	r1, r5
 8006618:	f7f9 fdb0 	bl	800017c <__aeabi_dsub>
 800661c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006620:	9d07      	ldr	r5, [sp, #28]
 8006622:	f806 4b01 	strb.w	r4, [r6], #1
 8006626:	eba6 040a 	sub.w	r4, r6, sl
 800662a:	42a5      	cmp	r5, r4
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	f040 8116 	bne.w	8006860 <_dtoa_r+0x6e0>
 8006634:	f7f9 fda4 	bl	8000180 <__adddf3>
 8006638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663c:	4604      	mov	r4, r0
 800663e:	460d      	mov	r5, r1
 8006640:	f7fa f9e4 	bl	8000a0c <__aeabi_dcmpgt>
 8006644:	2800      	cmp	r0, #0
 8006646:	f040 80f8 	bne.w	800683a <_dtoa_r+0x6ba>
 800664a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa f9b3 	bl	80009bc <__aeabi_dcmpeq>
 8006656:	b118      	cbz	r0, 8006660 <_dtoa_r+0x4e0>
 8006658:	f018 0f01 	tst.w	r8, #1
 800665c:	f040 80ed 	bne.w	800683a <_dtoa_r+0x6ba>
 8006660:	4649      	mov	r1, r9
 8006662:	4658      	mov	r0, fp
 8006664:	f000 fc92 	bl	8006f8c <_Bfree>
 8006668:	2300      	movs	r3, #0
 800666a:	7033      	strb	r3, [r6, #0]
 800666c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800666e:	3701      	adds	r7, #1
 8006670:	601f      	str	r7, [r3, #0]
 8006672:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8320 	beq.w	8006cba <_dtoa_r+0xb3a>
 800667a:	601e      	str	r6, [r3, #0]
 800667c:	e31d      	b.n	8006cba <_dtoa_r+0xb3a>
 800667e:	07e2      	lsls	r2, r4, #31
 8006680:	d505      	bpl.n	800668e <_dtoa_r+0x50e>
 8006682:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006686:	f7f9 ff31 	bl	80004ec <__aeabi_dmul>
 800668a:	2301      	movs	r3, #1
 800668c:	3601      	adds	r6, #1
 800668e:	1064      	asrs	r4, r4, #1
 8006690:	3508      	adds	r5, #8
 8006692:	e73f      	b.n	8006514 <_dtoa_r+0x394>
 8006694:	2602      	movs	r6, #2
 8006696:	e742      	b.n	800651e <_dtoa_r+0x39e>
 8006698:	9c07      	ldr	r4, [sp, #28]
 800669a:	9704      	str	r7, [sp, #16]
 800669c:	e761      	b.n	8006562 <_dtoa_r+0x3e2>
 800669e:	bf00      	nop
 80066a0:	08008460 	.word	0x08008460
 80066a4:	08008438 	.word	0x08008438
 80066a8:	3ff00000 	.word	0x3ff00000
 80066ac:	40240000 	.word	0x40240000
 80066b0:	401c0000 	.word	0x401c0000
 80066b4:	40140000 	.word	0x40140000
 80066b8:	4b70      	ldr	r3, [pc, #448]	@ (800687c <_dtoa_r+0x6fc>)
 80066ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066c4:	4454      	add	r4, sl
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d045      	beq.n	8006756 <_dtoa_r+0x5d6>
 80066ca:	2000      	movs	r0, #0
 80066cc:	496c      	ldr	r1, [pc, #432]	@ (8006880 <_dtoa_r+0x700>)
 80066ce:	f7fa f837 	bl	8000740 <__aeabi_ddiv>
 80066d2:	4633      	mov	r3, r6
 80066d4:	462a      	mov	r2, r5
 80066d6:	f7f9 fd51 	bl	800017c <__aeabi_dsub>
 80066da:	4656      	mov	r6, sl
 80066dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066e4:	f7fa f9b2 	bl	8000a4c <__aeabi_d2iz>
 80066e8:	4605      	mov	r5, r0
 80066ea:	f7f9 fe95 	bl	8000418 <__aeabi_i2d>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f6:	f7f9 fd41 	bl	800017c <__aeabi_dsub>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	3530      	adds	r5, #48	@ 0x30
 8006700:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006704:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006708:	f806 5b01 	strb.w	r5, [r6], #1
 800670c:	f7fa f960 	bl	80009d0 <__aeabi_dcmplt>
 8006710:	2800      	cmp	r0, #0
 8006712:	d163      	bne.n	80067dc <_dtoa_r+0x65c>
 8006714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006718:	2000      	movs	r0, #0
 800671a:	495a      	ldr	r1, [pc, #360]	@ (8006884 <_dtoa_r+0x704>)
 800671c:	f7f9 fd2e 	bl	800017c <__aeabi_dsub>
 8006720:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006724:	f7fa f954 	bl	80009d0 <__aeabi_dcmplt>
 8006728:	2800      	cmp	r0, #0
 800672a:	f040 8087 	bne.w	800683c <_dtoa_r+0x6bc>
 800672e:	42a6      	cmp	r6, r4
 8006730:	f43f af43 	beq.w	80065ba <_dtoa_r+0x43a>
 8006734:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006738:	2200      	movs	r2, #0
 800673a:	4b53      	ldr	r3, [pc, #332]	@ (8006888 <_dtoa_r+0x708>)
 800673c:	f7f9 fed6 	bl	80004ec <__aeabi_dmul>
 8006740:	2200      	movs	r2, #0
 8006742:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674a:	4b4f      	ldr	r3, [pc, #316]	@ (8006888 <_dtoa_r+0x708>)
 800674c:	f7f9 fece 	bl	80004ec <__aeabi_dmul>
 8006750:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006754:	e7c4      	b.n	80066e0 <_dtoa_r+0x560>
 8006756:	4631      	mov	r1, r6
 8006758:	4628      	mov	r0, r5
 800675a:	f7f9 fec7 	bl	80004ec <__aeabi_dmul>
 800675e:	4656      	mov	r6, sl
 8006760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006764:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800676a:	f7fa f96f 	bl	8000a4c <__aeabi_d2iz>
 800676e:	4605      	mov	r5, r0
 8006770:	f7f9 fe52 	bl	8000418 <__aeabi_i2d>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800677c:	f7f9 fcfe 	bl	800017c <__aeabi_dsub>
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	3530      	adds	r5, #48	@ 0x30
 8006786:	f806 5b01 	strb.w	r5, [r6], #1
 800678a:	42a6      	cmp	r6, r4
 800678c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	d124      	bne.n	80067e0 <_dtoa_r+0x660>
 8006796:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800679a:	4b39      	ldr	r3, [pc, #228]	@ (8006880 <_dtoa_r+0x700>)
 800679c:	f7f9 fcf0 	bl	8000180 <__adddf3>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a8:	f7fa f930 	bl	8000a0c <__aeabi_dcmpgt>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d145      	bne.n	800683c <_dtoa_r+0x6bc>
 80067b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067b4:	2000      	movs	r0, #0
 80067b6:	4932      	ldr	r1, [pc, #200]	@ (8006880 <_dtoa_r+0x700>)
 80067b8:	f7f9 fce0 	bl	800017c <__aeabi_dsub>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c4:	f7fa f904 	bl	80009d0 <__aeabi_dcmplt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f43f aef6 	beq.w	80065ba <_dtoa_r+0x43a>
 80067ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80067d0:	1e73      	subs	r3, r6, #1
 80067d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067d8:	2b30      	cmp	r3, #48	@ 0x30
 80067da:	d0f8      	beq.n	80067ce <_dtoa_r+0x64e>
 80067dc:	9f04      	ldr	r7, [sp, #16]
 80067de:	e73f      	b.n	8006660 <_dtoa_r+0x4e0>
 80067e0:	4b29      	ldr	r3, [pc, #164]	@ (8006888 <_dtoa_r+0x708>)
 80067e2:	f7f9 fe83 	bl	80004ec <__aeabi_dmul>
 80067e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ea:	e7bc      	b.n	8006766 <_dtoa_r+0x5e6>
 80067ec:	d10c      	bne.n	8006808 <_dtoa_r+0x688>
 80067ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f2:	2200      	movs	r2, #0
 80067f4:	4b25      	ldr	r3, [pc, #148]	@ (800688c <_dtoa_r+0x70c>)
 80067f6:	f7f9 fe79 	bl	80004ec <__aeabi_dmul>
 80067fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067fe:	f7fa f8fb 	bl	80009f8 <__aeabi_dcmpge>
 8006802:	2800      	cmp	r0, #0
 8006804:	f000 815b 	beq.w	8006abe <_dtoa_r+0x93e>
 8006808:	2400      	movs	r4, #0
 800680a:	4625      	mov	r5, r4
 800680c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800680e:	4656      	mov	r6, sl
 8006810:	43db      	mvns	r3, r3
 8006812:	9304      	str	r3, [sp, #16]
 8006814:	2700      	movs	r7, #0
 8006816:	4621      	mov	r1, r4
 8006818:	4658      	mov	r0, fp
 800681a:	f000 fbb7 	bl	8006f8c <_Bfree>
 800681e:	2d00      	cmp	r5, #0
 8006820:	d0dc      	beq.n	80067dc <_dtoa_r+0x65c>
 8006822:	b12f      	cbz	r7, 8006830 <_dtoa_r+0x6b0>
 8006824:	42af      	cmp	r7, r5
 8006826:	d003      	beq.n	8006830 <_dtoa_r+0x6b0>
 8006828:	4639      	mov	r1, r7
 800682a:	4658      	mov	r0, fp
 800682c:	f000 fbae 	bl	8006f8c <_Bfree>
 8006830:	4629      	mov	r1, r5
 8006832:	4658      	mov	r0, fp
 8006834:	f000 fbaa 	bl	8006f8c <_Bfree>
 8006838:	e7d0      	b.n	80067dc <_dtoa_r+0x65c>
 800683a:	9704      	str	r7, [sp, #16]
 800683c:	4633      	mov	r3, r6
 800683e:	461e      	mov	r6, r3
 8006840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006844:	2a39      	cmp	r2, #57	@ 0x39
 8006846:	d107      	bne.n	8006858 <_dtoa_r+0x6d8>
 8006848:	459a      	cmp	sl, r3
 800684a:	d1f8      	bne.n	800683e <_dtoa_r+0x6be>
 800684c:	9a04      	ldr	r2, [sp, #16]
 800684e:	3201      	adds	r2, #1
 8006850:	9204      	str	r2, [sp, #16]
 8006852:	2230      	movs	r2, #48	@ 0x30
 8006854:	f88a 2000 	strb.w	r2, [sl]
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	3201      	adds	r2, #1
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	e7bd      	b.n	80067dc <_dtoa_r+0x65c>
 8006860:	2200      	movs	r2, #0
 8006862:	4b09      	ldr	r3, [pc, #36]	@ (8006888 <_dtoa_r+0x708>)
 8006864:	f7f9 fe42 	bl	80004ec <__aeabi_dmul>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4604      	mov	r4, r0
 800686e:	460d      	mov	r5, r1
 8006870:	f7fa f8a4 	bl	80009bc <__aeabi_dcmpeq>
 8006874:	2800      	cmp	r0, #0
 8006876:	f43f aebc 	beq.w	80065f2 <_dtoa_r+0x472>
 800687a:	e6f1      	b.n	8006660 <_dtoa_r+0x4e0>
 800687c:	08008460 	.word	0x08008460
 8006880:	3fe00000 	.word	0x3fe00000
 8006884:	3ff00000 	.word	0x3ff00000
 8006888:	40240000 	.word	0x40240000
 800688c:	40140000 	.word	0x40140000
 8006890:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006892:	2a00      	cmp	r2, #0
 8006894:	f000 80db 	beq.w	8006a4e <_dtoa_r+0x8ce>
 8006898:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800689a:	2a01      	cmp	r2, #1
 800689c:	f300 80bf 	bgt.w	8006a1e <_dtoa_r+0x89e>
 80068a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	f000 80b7 	beq.w	8006a16 <_dtoa_r+0x896>
 80068a8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ac:	4646      	mov	r6, r8
 80068ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068b2:	2101      	movs	r1, #1
 80068b4:	441a      	add	r2, r3
 80068b6:	4658      	mov	r0, fp
 80068b8:	4498      	add	r8, r3
 80068ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80068bc:	f000 fc1a 	bl	80070f4 <__i2b>
 80068c0:	4605      	mov	r5, r0
 80068c2:	b15e      	cbz	r6, 80068dc <_dtoa_r+0x75c>
 80068c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd08      	ble.n	80068dc <_dtoa_r+0x75c>
 80068ca:	42b3      	cmp	r3, r6
 80068cc:	bfa8      	it	ge
 80068ce:	4633      	movge	r3, r6
 80068d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068d2:	eba8 0803 	sub.w	r8, r8, r3
 80068d6:	1af6      	subs	r6, r6, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	9309      	str	r3, [sp, #36]	@ 0x24
 80068dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068de:	b1f3      	cbz	r3, 800691e <_dtoa_r+0x79e>
 80068e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 80b7 	beq.w	8006a56 <_dtoa_r+0x8d6>
 80068e8:	b18c      	cbz	r4, 800690e <_dtoa_r+0x78e>
 80068ea:	4629      	mov	r1, r5
 80068ec:	4622      	mov	r2, r4
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 fcbe 	bl	8007270 <__pow5mult>
 80068f4:	464a      	mov	r2, r9
 80068f6:	4601      	mov	r1, r0
 80068f8:	4605      	mov	r5, r0
 80068fa:	4658      	mov	r0, fp
 80068fc:	f000 fc10 	bl	8007120 <__multiply>
 8006900:	4649      	mov	r1, r9
 8006902:	9004      	str	r0, [sp, #16]
 8006904:	4658      	mov	r0, fp
 8006906:	f000 fb41 	bl	8006f8c <_Bfree>
 800690a:	9b04      	ldr	r3, [sp, #16]
 800690c:	4699      	mov	r9, r3
 800690e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006910:	1b1a      	subs	r2, r3, r4
 8006912:	d004      	beq.n	800691e <_dtoa_r+0x79e>
 8006914:	4649      	mov	r1, r9
 8006916:	4658      	mov	r0, fp
 8006918:	f000 fcaa 	bl	8007270 <__pow5mult>
 800691c:	4681      	mov	r9, r0
 800691e:	2101      	movs	r1, #1
 8006920:	4658      	mov	r0, fp
 8006922:	f000 fbe7 	bl	80070f4 <__i2b>
 8006926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006928:	4604      	mov	r4, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 81c9 	beq.w	8006cc2 <_dtoa_r+0xb42>
 8006930:	461a      	mov	r2, r3
 8006932:	4601      	mov	r1, r0
 8006934:	4658      	mov	r0, fp
 8006936:	f000 fc9b 	bl	8007270 <__pow5mult>
 800693a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800693c:	4604      	mov	r4, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	f300 808f 	bgt.w	8006a62 <_dtoa_r+0x8e2>
 8006944:	9b02      	ldr	r3, [sp, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f040 8087 	bne.w	8006a5a <_dtoa_r+0x8da>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006952:	2b00      	cmp	r3, #0
 8006954:	f040 8083 	bne.w	8006a5e <_dtoa_r+0x8de>
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800695e:	0d1b      	lsrs	r3, r3, #20
 8006960:	051b      	lsls	r3, r3, #20
 8006962:	b12b      	cbz	r3, 8006970 <_dtoa_r+0x7f0>
 8006964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006966:	f108 0801 	add.w	r8, r8, #1
 800696a:	3301      	adds	r3, #1
 800696c:	9309      	str	r3, [sp, #36]	@ 0x24
 800696e:	2301      	movs	r3, #1
 8006970:	930a      	str	r3, [sp, #40]	@ 0x28
 8006972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 81aa 	beq.w	8006cce <_dtoa_r+0xb4e>
 800697a:	6923      	ldr	r3, [r4, #16]
 800697c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006980:	6918      	ldr	r0, [r3, #16]
 8006982:	f000 fb6b 	bl	800705c <__hi0bits>
 8006986:	f1c0 0020 	rsb	r0, r0, #32
 800698a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698c:	4418      	add	r0, r3
 800698e:	f010 001f 	ands.w	r0, r0, #31
 8006992:	d071      	beq.n	8006a78 <_dtoa_r+0x8f8>
 8006994:	f1c0 0320 	rsb	r3, r0, #32
 8006998:	2b04      	cmp	r3, #4
 800699a:	dd65      	ble.n	8006a68 <_dtoa_r+0x8e8>
 800699c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800699e:	f1c0 001c 	rsb	r0, r0, #28
 80069a2:	4403      	add	r3, r0
 80069a4:	4480      	add	r8, r0
 80069a6:	4406      	add	r6, r0
 80069a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069aa:	f1b8 0f00 	cmp.w	r8, #0
 80069ae:	dd05      	ble.n	80069bc <_dtoa_r+0x83c>
 80069b0:	4649      	mov	r1, r9
 80069b2:	4642      	mov	r2, r8
 80069b4:	4658      	mov	r0, fp
 80069b6:	f000 fcb5 	bl	8007324 <__lshift>
 80069ba:	4681      	mov	r9, r0
 80069bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	dd05      	ble.n	80069ce <_dtoa_r+0x84e>
 80069c2:	4621      	mov	r1, r4
 80069c4:	461a      	mov	r2, r3
 80069c6:	4658      	mov	r0, fp
 80069c8:	f000 fcac 	bl	8007324 <__lshift>
 80069cc:	4604      	mov	r4, r0
 80069ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d053      	beq.n	8006a7c <_dtoa_r+0x8fc>
 80069d4:	4621      	mov	r1, r4
 80069d6:	4648      	mov	r0, r9
 80069d8:	f000 fd10 	bl	80073fc <__mcmp>
 80069dc:	2800      	cmp	r0, #0
 80069de:	da4d      	bge.n	8006a7c <_dtoa_r+0x8fc>
 80069e0:	1e7b      	subs	r3, r7, #1
 80069e2:	4649      	mov	r1, r9
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	220a      	movs	r2, #10
 80069e8:	2300      	movs	r3, #0
 80069ea:	4658      	mov	r0, fp
 80069ec:	f000 faf0 	bl	8006fd0 <__multadd>
 80069f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069f2:	4681      	mov	r9, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 816c 	beq.w	8006cd2 <_dtoa_r+0xb52>
 80069fa:	2300      	movs	r3, #0
 80069fc:	4629      	mov	r1, r5
 80069fe:	220a      	movs	r2, #10
 8006a00:	4658      	mov	r0, fp
 8006a02:	f000 fae5 	bl	8006fd0 <__multadd>
 8006a06:	9b08      	ldr	r3, [sp, #32]
 8006a08:	4605      	mov	r5, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dc61      	bgt.n	8006ad2 <_dtoa_r+0x952>
 8006a0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	dc3b      	bgt.n	8006a8c <_dtoa_r+0x90c>
 8006a14:	e05d      	b.n	8006ad2 <_dtoa_r+0x952>
 8006a16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a18:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a1c:	e746      	b.n	80068ac <_dtoa_r+0x72c>
 8006a1e:	9b07      	ldr	r3, [sp, #28]
 8006a20:	1e5c      	subs	r4, r3, #1
 8006a22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	bfbf      	itttt	lt
 8006a28:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a2a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a2c:	1ae3      	sublt	r3, r4, r3
 8006a2e:	18d2      	addlt	r2, r2, r3
 8006a30:	bfa8      	it	ge
 8006a32:	1b1c      	subge	r4, r3, r4
 8006a34:	9b07      	ldr	r3, [sp, #28]
 8006a36:	bfbe      	ittt	lt
 8006a38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a3a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a3c:	2400      	movlt	r4, #0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bfb5      	itete	lt
 8006a42:	eba8 0603 	sublt.w	r6, r8, r3
 8006a46:	4646      	movge	r6, r8
 8006a48:	2300      	movlt	r3, #0
 8006a4a:	9b07      	ldrge	r3, [sp, #28]
 8006a4c:	e730      	b.n	80068b0 <_dtoa_r+0x730>
 8006a4e:	4646      	mov	r6, r8
 8006a50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a54:	e735      	b.n	80068c2 <_dtoa_r+0x742>
 8006a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a58:	e75c      	b.n	8006914 <_dtoa_r+0x794>
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	e788      	b.n	8006970 <_dtoa_r+0x7f0>
 8006a5e:	9b02      	ldr	r3, [sp, #8]
 8006a60:	e786      	b.n	8006970 <_dtoa_r+0x7f0>
 8006a62:	2300      	movs	r3, #0
 8006a64:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a66:	e788      	b.n	800697a <_dtoa_r+0x7fa>
 8006a68:	d09f      	beq.n	80069aa <_dtoa_r+0x82a>
 8006a6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a6c:	331c      	adds	r3, #28
 8006a6e:	441a      	add	r2, r3
 8006a70:	4498      	add	r8, r3
 8006a72:	441e      	add	r6, r3
 8006a74:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a76:	e798      	b.n	80069aa <_dtoa_r+0x82a>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e7f6      	b.n	8006a6a <_dtoa_r+0x8ea>
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	9704      	str	r7, [sp, #16]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	dc20      	bgt.n	8006ac6 <_dtoa_r+0x946>
 8006a84:	9308      	str	r3, [sp, #32]
 8006a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	dd1e      	ble.n	8006aca <_dtoa_r+0x94a>
 8006a8c:	9b08      	ldr	r3, [sp, #32]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f47f aebc 	bne.w	800680c <_dtoa_r+0x68c>
 8006a94:	4621      	mov	r1, r4
 8006a96:	2205      	movs	r2, #5
 8006a98:	4658      	mov	r0, fp
 8006a9a:	f000 fa99 	bl	8006fd0 <__multadd>
 8006a9e:	4601      	mov	r1, r0
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	4648      	mov	r0, r9
 8006aa4:	f000 fcaa 	bl	80073fc <__mcmp>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f77f aeaf 	ble.w	800680c <_dtoa_r+0x68c>
 8006aae:	2331      	movs	r3, #49	@ 0x31
 8006ab0:	4656      	mov	r6, sl
 8006ab2:	f806 3b01 	strb.w	r3, [r6], #1
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	e6aa      	b.n	8006814 <_dtoa_r+0x694>
 8006abe:	9c07      	ldr	r4, [sp, #28]
 8006ac0:	9704      	str	r7, [sp, #16]
 8006ac2:	4625      	mov	r5, r4
 8006ac4:	e7f3      	b.n	8006aae <_dtoa_r+0x92e>
 8006ac6:	9b07      	ldr	r3, [sp, #28]
 8006ac8:	9308      	str	r3, [sp, #32]
 8006aca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 8104 	beq.w	8006cda <_dtoa_r+0xb5a>
 8006ad2:	2e00      	cmp	r6, #0
 8006ad4:	dd05      	ble.n	8006ae2 <_dtoa_r+0x962>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4632      	mov	r2, r6
 8006ada:	4658      	mov	r0, fp
 8006adc:	f000 fc22 	bl	8007324 <__lshift>
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d05a      	beq.n	8006b9e <_dtoa_r+0xa1e>
 8006ae8:	4658      	mov	r0, fp
 8006aea:	6869      	ldr	r1, [r5, #4]
 8006aec:	f000 fa0e 	bl	8006f0c <_Balloc>
 8006af0:	4606      	mov	r6, r0
 8006af2:	b928      	cbnz	r0, 8006b00 <_dtoa_r+0x980>
 8006af4:	4602      	mov	r2, r0
 8006af6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006afa:	4b83      	ldr	r3, [pc, #524]	@ (8006d08 <_dtoa_r+0xb88>)
 8006afc:	f7ff bb54 	b.w	80061a8 <_dtoa_r+0x28>
 8006b00:	692a      	ldr	r2, [r5, #16]
 8006b02:	f105 010c 	add.w	r1, r5, #12
 8006b06:	3202      	adds	r2, #2
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	300c      	adds	r0, #12
 8006b0c:	f000 ffa8 	bl	8007a60 <memcpy>
 8006b10:	2201      	movs	r2, #1
 8006b12:	4631      	mov	r1, r6
 8006b14:	4658      	mov	r0, fp
 8006b16:	f000 fc05 	bl	8007324 <__lshift>
 8006b1a:	462f      	mov	r7, r5
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	f10a 0301 	add.w	r3, sl, #1
 8006b22:	9307      	str	r3, [sp, #28]
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	4453      	add	r3, sl
 8006b28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b2a:	9b02      	ldr	r3, [sp, #8]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b32:	9b07      	ldr	r3, [sp, #28]
 8006b34:	4621      	mov	r1, r4
 8006b36:	3b01      	subs	r3, #1
 8006b38:	4648      	mov	r0, r9
 8006b3a:	9302      	str	r3, [sp, #8]
 8006b3c:	f7ff fa95 	bl	800606a <quorem>
 8006b40:	4639      	mov	r1, r7
 8006b42:	9008      	str	r0, [sp, #32]
 8006b44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f000 fc57 	bl	80073fc <__mcmp>
 8006b4e:	462a      	mov	r2, r5
 8006b50:	9009      	str	r0, [sp, #36]	@ 0x24
 8006b52:	4621      	mov	r1, r4
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 fc6d 	bl	8007434 <__mdiff>
 8006b5a:	68c2      	ldr	r2, [r0, #12]
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	bb02      	cbnz	r2, 8006ba2 <_dtoa_r+0xa22>
 8006b60:	4601      	mov	r1, r0
 8006b62:	4648      	mov	r0, r9
 8006b64:	f000 fc4a 	bl	80073fc <__mcmp>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	4658      	mov	r0, fp
 8006b6e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b70:	f000 fa0c 	bl	8006f8c <_Bfree>
 8006b74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b78:	9e07      	ldr	r6, [sp, #28]
 8006b7a:	ea43 0102 	orr.w	r1, r3, r2
 8006b7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b80:	4319      	orrs	r1, r3
 8006b82:	d110      	bne.n	8006ba6 <_dtoa_r+0xa26>
 8006b84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b88:	d029      	beq.n	8006bde <_dtoa_r+0xa5e>
 8006b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd02      	ble.n	8006b96 <_dtoa_r+0xa16>
 8006b90:	9b08      	ldr	r3, [sp, #32]
 8006b92:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b96:	9b02      	ldr	r3, [sp, #8]
 8006b98:	f883 8000 	strb.w	r8, [r3]
 8006b9c:	e63b      	b.n	8006816 <_dtoa_r+0x696>
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	e7bb      	b.n	8006b1a <_dtoa_r+0x99a>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	e7e1      	b.n	8006b6a <_dtoa_r+0x9ea>
 8006ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	db04      	blt.n	8006bb6 <_dtoa_r+0xa36>
 8006bac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006bae:	430b      	orrs	r3, r1
 8006bb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bb2:	430b      	orrs	r3, r1
 8006bb4:	d120      	bne.n	8006bf8 <_dtoa_r+0xa78>
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	dded      	ble.n	8006b96 <_dtoa_r+0xa16>
 8006bba:	4649      	mov	r1, r9
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	f000 fbb0 	bl	8007324 <__lshift>
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4681      	mov	r9, r0
 8006bc8:	f000 fc18 	bl	80073fc <__mcmp>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	dc03      	bgt.n	8006bd8 <_dtoa_r+0xa58>
 8006bd0:	d1e1      	bne.n	8006b96 <_dtoa_r+0xa16>
 8006bd2:	f018 0f01 	tst.w	r8, #1
 8006bd6:	d0de      	beq.n	8006b96 <_dtoa_r+0xa16>
 8006bd8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bdc:	d1d8      	bne.n	8006b90 <_dtoa_r+0xa10>
 8006bde:	2339      	movs	r3, #57	@ 0x39
 8006be0:	9a02      	ldr	r2, [sp, #8]
 8006be2:	7013      	strb	r3, [r2, #0]
 8006be4:	4633      	mov	r3, r6
 8006be6:	461e      	mov	r6, r3
 8006be8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	2a39      	cmp	r2, #57	@ 0x39
 8006bf0:	d052      	beq.n	8006c98 <_dtoa_r+0xb18>
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e60e      	b.n	8006816 <_dtoa_r+0x696>
 8006bf8:	2a00      	cmp	r2, #0
 8006bfa:	dd07      	ble.n	8006c0c <_dtoa_r+0xa8c>
 8006bfc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c00:	d0ed      	beq.n	8006bde <_dtoa_r+0xa5e>
 8006c02:	9a02      	ldr	r2, [sp, #8]
 8006c04:	f108 0301 	add.w	r3, r8, #1
 8006c08:	7013      	strb	r3, [r2, #0]
 8006c0a:	e604      	b.n	8006816 <_dtoa_r+0x696>
 8006c0c:	9b07      	ldr	r3, [sp, #28]
 8006c0e:	9a07      	ldr	r2, [sp, #28]
 8006c10:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d028      	beq.n	8006c6c <_dtoa_r+0xaec>
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	220a      	movs	r2, #10
 8006c20:	4658      	mov	r0, fp
 8006c22:	f000 f9d5 	bl	8006fd0 <__multadd>
 8006c26:	42af      	cmp	r7, r5
 8006c28:	4681      	mov	r9, r0
 8006c2a:	f04f 0300 	mov.w	r3, #0
 8006c2e:	f04f 020a 	mov.w	r2, #10
 8006c32:	4639      	mov	r1, r7
 8006c34:	4658      	mov	r0, fp
 8006c36:	d107      	bne.n	8006c48 <_dtoa_r+0xac8>
 8006c38:	f000 f9ca 	bl	8006fd0 <__multadd>
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	4605      	mov	r5, r0
 8006c40:	9b07      	ldr	r3, [sp, #28]
 8006c42:	3301      	adds	r3, #1
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	e774      	b.n	8006b32 <_dtoa_r+0x9b2>
 8006c48:	f000 f9c2 	bl	8006fd0 <__multadd>
 8006c4c:	4629      	mov	r1, r5
 8006c4e:	4607      	mov	r7, r0
 8006c50:	2300      	movs	r3, #0
 8006c52:	220a      	movs	r2, #10
 8006c54:	4658      	mov	r0, fp
 8006c56:	f000 f9bb 	bl	8006fd0 <__multadd>
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	e7f0      	b.n	8006c40 <_dtoa_r+0xac0>
 8006c5e:	9b08      	ldr	r3, [sp, #32]
 8006c60:	2700      	movs	r7, #0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	bfcc      	ite	gt
 8006c66:	461e      	movgt	r6, r3
 8006c68:	2601      	movle	r6, #1
 8006c6a:	4456      	add	r6, sl
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4658      	mov	r0, fp
 8006c72:	f000 fb57 	bl	8007324 <__lshift>
 8006c76:	4621      	mov	r1, r4
 8006c78:	4681      	mov	r9, r0
 8006c7a:	f000 fbbf 	bl	80073fc <__mcmp>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	dcb0      	bgt.n	8006be4 <_dtoa_r+0xa64>
 8006c82:	d102      	bne.n	8006c8a <_dtoa_r+0xb0a>
 8006c84:	f018 0f01 	tst.w	r8, #1
 8006c88:	d1ac      	bne.n	8006be4 <_dtoa_r+0xa64>
 8006c8a:	4633      	mov	r3, r6
 8006c8c:	461e      	mov	r6, r3
 8006c8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c92:	2a30      	cmp	r2, #48	@ 0x30
 8006c94:	d0fa      	beq.n	8006c8c <_dtoa_r+0xb0c>
 8006c96:	e5be      	b.n	8006816 <_dtoa_r+0x696>
 8006c98:	459a      	cmp	sl, r3
 8006c9a:	d1a4      	bne.n	8006be6 <_dtoa_r+0xa66>
 8006c9c:	9b04      	ldr	r3, [sp, #16]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	2331      	movs	r3, #49	@ 0x31
 8006ca4:	f88a 3000 	strb.w	r3, [sl]
 8006ca8:	e5b5      	b.n	8006816 <_dtoa_r+0x696>
 8006caa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d0c <_dtoa_r+0xb8c>
 8006cb0:	b11b      	cbz	r3, 8006cba <_dtoa_r+0xb3a>
 8006cb2:	f10a 0308 	add.w	r3, sl, #8
 8006cb6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006cb8:	6013      	str	r3, [r2, #0]
 8006cba:	4650      	mov	r0, sl
 8006cbc:	b017      	add	sp, #92	@ 0x5c
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	f77f ae3d 	ble.w	8006944 <_dtoa_r+0x7c4>
 8006cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cce:	2001      	movs	r0, #1
 8006cd0:	e65b      	b.n	800698a <_dtoa_r+0x80a>
 8006cd2:	9b08      	ldr	r3, [sp, #32]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f77f aed6 	ble.w	8006a86 <_dtoa_r+0x906>
 8006cda:	4656      	mov	r6, sl
 8006cdc:	4621      	mov	r1, r4
 8006cde:	4648      	mov	r0, r9
 8006ce0:	f7ff f9c3 	bl	800606a <quorem>
 8006ce4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ce8:	9b08      	ldr	r3, [sp, #32]
 8006cea:	f806 8b01 	strb.w	r8, [r6], #1
 8006cee:	eba6 020a 	sub.w	r2, r6, sl
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	ddb3      	ble.n	8006c5e <_dtoa_r+0xade>
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	220a      	movs	r2, #10
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	f000 f967 	bl	8006fd0 <__multadd>
 8006d02:	4681      	mov	r9, r0
 8006d04:	e7ea      	b.n	8006cdc <_dtoa_r+0xb5c>
 8006d06:	bf00      	nop
 8006d08:	080083c0 	.word	0x080083c0
 8006d0c:	08008344 	.word	0x08008344

08006d10 <_free_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4605      	mov	r5, r0
 8006d14:	2900      	cmp	r1, #0
 8006d16:	d040      	beq.n	8006d9a <_free_r+0x8a>
 8006d18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d1c:	1f0c      	subs	r4, r1, #4
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfb8      	it	lt
 8006d22:	18e4      	addlt	r4, r4, r3
 8006d24:	f000 f8e6 	bl	8006ef4 <__malloc_lock>
 8006d28:	4a1c      	ldr	r2, [pc, #112]	@ (8006d9c <_free_r+0x8c>)
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	b933      	cbnz	r3, 8006d3c <_free_r+0x2c>
 8006d2e:	6063      	str	r3, [r4, #4]
 8006d30:	6014      	str	r4, [r2, #0]
 8006d32:	4628      	mov	r0, r5
 8006d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d38:	f000 b8e2 	b.w	8006f00 <__malloc_unlock>
 8006d3c:	42a3      	cmp	r3, r4
 8006d3e:	d908      	bls.n	8006d52 <_free_r+0x42>
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	1821      	adds	r1, r4, r0
 8006d44:	428b      	cmp	r3, r1
 8006d46:	bf01      	itttt	eq
 8006d48:	6819      	ldreq	r1, [r3, #0]
 8006d4a:	685b      	ldreq	r3, [r3, #4]
 8006d4c:	1809      	addeq	r1, r1, r0
 8006d4e:	6021      	streq	r1, [r4, #0]
 8006d50:	e7ed      	b.n	8006d2e <_free_r+0x1e>
 8006d52:	461a      	mov	r2, r3
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	b10b      	cbz	r3, 8006d5c <_free_r+0x4c>
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d9fa      	bls.n	8006d52 <_free_r+0x42>
 8006d5c:	6811      	ldr	r1, [r2, #0]
 8006d5e:	1850      	adds	r0, r2, r1
 8006d60:	42a0      	cmp	r0, r4
 8006d62:	d10b      	bne.n	8006d7c <_free_r+0x6c>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	4401      	add	r1, r0
 8006d68:	1850      	adds	r0, r2, r1
 8006d6a:	4283      	cmp	r3, r0
 8006d6c:	6011      	str	r1, [r2, #0]
 8006d6e:	d1e0      	bne.n	8006d32 <_free_r+0x22>
 8006d70:	6818      	ldr	r0, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4408      	add	r0, r1
 8006d76:	6010      	str	r0, [r2, #0]
 8006d78:	6053      	str	r3, [r2, #4]
 8006d7a:	e7da      	b.n	8006d32 <_free_r+0x22>
 8006d7c:	d902      	bls.n	8006d84 <_free_r+0x74>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	e7d6      	b.n	8006d32 <_free_r+0x22>
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	1821      	adds	r1, r4, r0
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	bf01      	itttt	eq
 8006d8c:	6819      	ldreq	r1, [r3, #0]
 8006d8e:	685b      	ldreq	r3, [r3, #4]
 8006d90:	1809      	addeq	r1, r1, r0
 8006d92:	6021      	streq	r1, [r4, #0]
 8006d94:	6063      	str	r3, [r4, #4]
 8006d96:	6054      	str	r4, [r2, #4]
 8006d98:	e7cb      	b.n	8006d32 <_free_r+0x22>
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	200008e8 	.word	0x200008e8

08006da0 <malloc>:
 8006da0:	4b02      	ldr	r3, [pc, #8]	@ (8006dac <malloc+0xc>)
 8006da2:	4601      	mov	r1, r0
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	f000 b825 	b.w	8006df4 <_malloc_r>
 8006daa:	bf00      	nop
 8006dac:	200000dc 	.word	0x200000dc

08006db0 <sbrk_aligned>:
 8006db0:	b570      	push	{r4, r5, r6, lr}
 8006db2:	4e0f      	ldr	r6, [pc, #60]	@ (8006df0 <sbrk_aligned+0x40>)
 8006db4:	460c      	mov	r4, r1
 8006db6:	6831      	ldr	r1, [r6, #0]
 8006db8:	4605      	mov	r5, r0
 8006dba:	b911      	cbnz	r1, 8006dc2 <sbrk_aligned+0x12>
 8006dbc:	f000 fe40 	bl	8007a40 <_sbrk_r>
 8006dc0:	6030      	str	r0, [r6, #0]
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	f000 fe3b 	bl	8007a40 <_sbrk_r>
 8006dca:	1c43      	adds	r3, r0, #1
 8006dcc:	d103      	bne.n	8006dd6 <sbrk_aligned+0x26>
 8006dce:	f04f 34ff 	mov.w	r4, #4294967295
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	bd70      	pop	{r4, r5, r6, pc}
 8006dd6:	1cc4      	adds	r4, r0, #3
 8006dd8:	f024 0403 	bic.w	r4, r4, #3
 8006ddc:	42a0      	cmp	r0, r4
 8006dde:	d0f8      	beq.n	8006dd2 <sbrk_aligned+0x22>
 8006de0:	1a21      	subs	r1, r4, r0
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 fe2c 	bl	8007a40 <_sbrk_r>
 8006de8:	3001      	adds	r0, #1
 8006dea:	d1f2      	bne.n	8006dd2 <sbrk_aligned+0x22>
 8006dec:	e7ef      	b.n	8006dce <sbrk_aligned+0x1e>
 8006dee:	bf00      	nop
 8006df0:	200008e4 	.word	0x200008e4

08006df4 <_malloc_r>:
 8006df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006df8:	1ccd      	adds	r5, r1, #3
 8006dfa:	f025 0503 	bic.w	r5, r5, #3
 8006dfe:	3508      	adds	r5, #8
 8006e00:	2d0c      	cmp	r5, #12
 8006e02:	bf38      	it	cc
 8006e04:	250c      	movcc	r5, #12
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	4606      	mov	r6, r0
 8006e0a:	db01      	blt.n	8006e10 <_malloc_r+0x1c>
 8006e0c:	42a9      	cmp	r1, r5
 8006e0e:	d904      	bls.n	8006e1a <_malloc_r+0x26>
 8006e10:	230c      	movs	r3, #12
 8006e12:	6033      	str	r3, [r6, #0]
 8006e14:	2000      	movs	r0, #0
 8006e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ef0 <_malloc_r+0xfc>
 8006e1e:	f000 f869 	bl	8006ef4 <__malloc_lock>
 8006e22:	f8d8 3000 	ldr.w	r3, [r8]
 8006e26:	461c      	mov	r4, r3
 8006e28:	bb44      	cbnz	r4, 8006e7c <_malloc_r+0x88>
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f7ff ffbf 	bl	8006db0 <sbrk_aligned>
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	4604      	mov	r4, r0
 8006e36:	d158      	bne.n	8006eea <_malloc_r+0xf6>
 8006e38:	f8d8 4000 	ldr.w	r4, [r8]
 8006e3c:	4627      	mov	r7, r4
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	d143      	bne.n	8006eca <_malloc_r+0xd6>
 8006e42:	2c00      	cmp	r4, #0
 8006e44:	d04b      	beq.n	8006ede <_malloc_r+0xea>
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	4639      	mov	r1, r7
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	eb04 0903 	add.w	r9, r4, r3
 8006e50:	f000 fdf6 	bl	8007a40 <_sbrk_r>
 8006e54:	4581      	cmp	r9, r0
 8006e56:	d142      	bne.n	8006ede <_malloc_r+0xea>
 8006e58:	6821      	ldr	r1, [r4, #0]
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	1a6d      	subs	r5, r5, r1
 8006e5e:	4629      	mov	r1, r5
 8006e60:	f7ff ffa6 	bl	8006db0 <sbrk_aligned>
 8006e64:	3001      	adds	r0, #1
 8006e66:	d03a      	beq.n	8006ede <_malloc_r+0xea>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	442b      	add	r3, r5
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	bb62      	cbnz	r2, 8006ed0 <_malloc_r+0xdc>
 8006e76:	f8c8 7000 	str.w	r7, [r8]
 8006e7a:	e00f      	b.n	8006e9c <_malloc_r+0xa8>
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	1b52      	subs	r2, r2, r5
 8006e80:	d420      	bmi.n	8006ec4 <_malloc_r+0xd0>
 8006e82:	2a0b      	cmp	r2, #11
 8006e84:	d917      	bls.n	8006eb6 <_malloc_r+0xc2>
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	42a3      	cmp	r3, r4
 8006e8a:	6025      	str	r5, [r4, #0]
 8006e8c:	bf18      	it	ne
 8006e8e:	6059      	strne	r1, [r3, #4]
 8006e90:	6863      	ldr	r3, [r4, #4]
 8006e92:	bf08      	it	eq
 8006e94:	f8c8 1000 	streq.w	r1, [r8]
 8006e98:	5162      	str	r2, [r4, r5]
 8006e9a:	604b      	str	r3, [r1, #4]
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f82f 	bl	8006f00 <__malloc_unlock>
 8006ea2:	f104 000b 	add.w	r0, r4, #11
 8006ea6:	1d23      	adds	r3, r4, #4
 8006ea8:	f020 0007 	bic.w	r0, r0, #7
 8006eac:	1ac2      	subs	r2, r0, r3
 8006eae:	bf1c      	itt	ne
 8006eb0:	1a1b      	subne	r3, r3, r0
 8006eb2:	50a3      	strne	r3, [r4, r2]
 8006eb4:	e7af      	b.n	8006e16 <_malloc_r+0x22>
 8006eb6:	6862      	ldr	r2, [r4, #4]
 8006eb8:	42a3      	cmp	r3, r4
 8006eba:	bf0c      	ite	eq
 8006ebc:	f8c8 2000 	streq.w	r2, [r8]
 8006ec0:	605a      	strne	r2, [r3, #4]
 8006ec2:	e7eb      	b.n	8006e9c <_malloc_r+0xa8>
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	6864      	ldr	r4, [r4, #4]
 8006ec8:	e7ae      	b.n	8006e28 <_malloc_r+0x34>
 8006eca:	463c      	mov	r4, r7
 8006ecc:	687f      	ldr	r7, [r7, #4]
 8006ece:	e7b6      	b.n	8006e3e <_malloc_r+0x4a>
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d1fb      	bne.n	8006ed0 <_malloc_r+0xdc>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6053      	str	r3, [r2, #4]
 8006edc:	e7de      	b.n	8006e9c <_malloc_r+0xa8>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	6033      	str	r3, [r6, #0]
 8006ee4:	f000 f80c 	bl	8006f00 <__malloc_unlock>
 8006ee8:	e794      	b.n	8006e14 <_malloc_r+0x20>
 8006eea:	6005      	str	r5, [r0, #0]
 8006eec:	e7d6      	b.n	8006e9c <_malloc_r+0xa8>
 8006eee:	bf00      	nop
 8006ef0:	200008e8 	.word	0x200008e8

08006ef4 <__malloc_lock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	@ (8006efc <__malloc_lock+0x8>)
 8006ef6:	f7ff b8a8 	b.w	800604a <__retarget_lock_acquire_recursive>
 8006efa:	bf00      	nop
 8006efc:	200008e0 	.word	0x200008e0

08006f00 <__malloc_unlock>:
 8006f00:	4801      	ldr	r0, [pc, #4]	@ (8006f08 <__malloc_unlock+0x8>)
 8006f02:	f7ff b8a3 	b.w	800604c <__retarget_lock_release_recursive>
 8006f06:	bf00      	nop
 8006f08:	200008e0 	.word	0x200008e0

08006f0c <_Balloc>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	69c6      	ldr	r6, [r0, #28]
 8006f10:	4604      	mov	r4, r0
 8006f12:	460d      	mov	r5, r1
 8006f14:	b976      	cbnz	r6, 8006f34 <_Balloc+0x28>
 8006f16:	2010      	movs	r0, #16
 8006f18:	f7ff ff42 	bl	8006da0 <malloc>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	61e0      	str	r0, [r4, #28]
 8006f20:	b920      	cbnz	r0, 8006f2c <_Balloc+0x20>
 8006f22:	216b      	movs	r1, #107	@ 0x6b
 8006f24:	4b17      	ldr	r3, [pc, #92]	@ (8006f84 <_Balloc+0x78>)
 8006f26:	4818      	ldr	r0, [pc, #96]	@ (8006f88 <_Balloc+0x7c>)
 8006f28:	f000 fda8 	bl	8007a7c <__assert_func>
 8006f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f30:	6006      	str	r6, [r0, #0]
 8006f32:	60c6      	str	r6, [r0, #12]
 8006f34:	69e6      	ldr	r6, [r4, #28]
 8006f36:	68f3      	ldr	r3, [r6, #12]
 8006f38:	b183      	cbz	r3, 8006f5c <_Balloc+0x50>
 8006f3a:	69e3      	ldr	r3, [r4, #28]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f42:	b9b8      	cbnz	r0, 8006f74 <_Balloc+0x68>
 8006f44:	2101      	movs	r1, #1
 8006f46:	fa01 f605 	lsl.w	r6, r1, r5
 8006f4a:	1d72      	adds	r2, r6, #5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	0092      	lsls	r2, r2, #2
 8006f50:	f000 fdb2 	bl	8007ab8 <_calloc_r>
 8006f54:	b160      	cbz	r0, 8006f70 <_Balloc+0x64>
 8006f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f5a:	e00e      	b.n	8006f7a <_Balloc+0x6e>
 8006f5c:	2221      	movs	r2, #33	@ 0x21
 8006f5e:	2104      	movs	r1, #4
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fda9 	bl	8007ab8 <_calloc_r>
 8006f66:	69e3      	ldr	r3, [r4, #28]
 8006f68:	60f0      	str	r0, [r6, #12]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e4      	bne.n	8006f3a <_Balloc+0x2e>
 8006f70:	2000      	movs	r0, #0
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	6802      	ldr	r2, [r0, #0]
 8006f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f80:	e7f7      	b.n	8006f72 <_Balloc+0x66>
 8006f82:	bf00      	nop
 8006f84:	08008351 	.word	0x08008351
 8006f88:	080083d1 	.word	0x080083d1

08006f8c <_Bfree>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	69c6      	ldr	r6, [r0, #28]
 8006f90:	4605      	mov	r5, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	b976      	cbnz	r6, 8006fb4 <_Bfree+0x28>
 8006f96:	2010      	movs	r0, #16
 8006f98:	f7ff ff02 	bl	8006da0 <malloc>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	61e8      	str	r0, [r5, #28]
 8006fa0:	b920      	cbnz	r0, 8006fac <_Bfree+0x20>
 8006fa2:	218f      	movs	r1, #143	@ 0x8f
 8006fa4:	4b08      	ldr	r3, [pc, #32]	@ (8006fc8 <_Bfree+0x3c>)
 8006fa6:	4809      	ldr	r0, [pc, #36]	@ (8006fcc <_Bfree+0x40>)
 8006fa8:	f000 fd68 	bl	8007a7c <__assert_func>
 8006fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fb0:	6006      	str	r6, [r0, #0]
 8006fb2:	60c6      	str	r6, [r0, #12]
 8006fb4:	b13c      	cbz	r4, 8006fc6 <_Bfree+0x3a>
 8006fb6:	69eb      	ldr	r3, [r5, #28]
 8006fb8:	6862      	ldr	r2, [r4, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fc0:	6021      	str	r1, [r4, #0]
 8006fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	08008351 	.word	0x08008351
 8006fcc:	080083d1 	.word	0x080083d1

08006fd0 <__multadd>:
 8006fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	461e      	mov	r6, r3
 8006fda:	2000      	movs	r0, #0
 8006fdc:	690d      	ldr	r5, [r1, #16]
 8006fde:	f101 0c14 	add.w	ip, r1, #20
 8006fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8006fe6:	3001      	adds	r0, #1
 8006fe8:	b299      	uxth	r1, r3
 8006fea:	fb02 6101 	mla	r1, r2, r1, r6
 8006fee:	0c1e      	lsrs	r6, r3, #16
 8006ff0:	0c0b      	lsrs	r3, r1, #16
 8006ff2:	fb02 3306 	mla	r3, r2, r6, r3
 8006ff6:	b289      	uxth	r1, r1
 8006ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ffc:	4285      	cmp	r5, r0
 8006ffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007002:	f84c 1b04 	str.w	r1, [ip], #4
 8007006:	dcec      	bgt.n	8006fe2 <__multadd+0x12>
 8007008:	b30e      	cbz	r6, 800704e <__multadd+0x7e>
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	42ab      	cmp	r3, r5
 800700e:	dc19      	bgt.n	8007044 <__multadd+0x74>
 8007010:	6861      	ldr	r1, [r4, #4]
 8007012:	4638      	mov	r0, r7
 8007014:	3101      	adds	r1, #1
 8007016:	f7ff ff79 	bl	8006f0c <_Balloc>
 800701a:	4680      	mov	r8, r0
 800701c:	b928      	cbnz	r0, 800702a <__multadd+0x5a>
 800701e:	4602      	mov	r2, r0
 8007020:	21ba      	movs	r1, #186	@ 0xba
 8007022:	4b0c      	ldr	r3, [pc, #48]	@ (8007054 <__multadd+0x84>)
 8007024:	480c      	ldr	r0, [pc, #48]	@ (8007058 <__multadd+0x88>)
 8007026:	f000 fd29 	bl	8007a7c <__assert_func>
 800702a:	6922      	ldr	r2, [r4, #16]
 800702c:	f104 010c 	add.w	r1, r4, #12
 8007030:	3202      	adds	r2, #2
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	300c      	adds	r0, #12
 8007036:	f000 fd13 	bl	8007a60 <memcpy>
 800703a:	4621      	mov	r1, r4
 800703c:	4638      	mov	r0, r7
 800703e:	f7ff ffa5 	bl	8006f8c <_Bfree>
 8007042:	4644      	mov	r4, r8
 8007044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007048:	3501      	adds	r5, #1
 800704a:	615e      	str	r6, [r3, #20]
 800704c:	6125      	str	r5, [r4, #16]
 800704e:	4620      	mov	r0, r4
 8007050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007054:	080083c0 	.word	0x080083c0
 8007058:	080083d1 	.word	0x080083d1

0800705c <__hi0bits>:
 800705c:	4603      	mov	r3, r0
 800705e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007062:	bf3a      	itte	cc
 8007064:	0403      	lslcc	r3, r0, #16
 8007066:	2010      	movcc	r0, #16
 8007068:	2000      	movcs	r0, #0
 800706a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800706e:	bf3c      	itt	cc
 8007070:	021b      	lslcc	r3, r3, #8
 8007072:	3008      	addcc	r0, #8
 8007074:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007078:	bf3c      	itt	cc
 800707a:	011b      	lslcc	r3, r3, #4
 800707c:	3004      	addcc	r0, #4
 800707e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007082:	bf3c      	itt	cc
 8007084:	009b      	lslcc	r3, r3, #2
 8007086:	3002      	addcc	r0, #2
 8007088:	2b00      	cmp	r3, #0
 800708a:	db05      	blt.n	8007098 <__hi0bits+0x3c>
 800708c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007090:	f100 0001 	add.w	r0, r0, #1
 8007094:	bf08      	it	eq
 8007096:	2020      	moveq	r0, #32
 8007098:	4770      	bx	lr

0800709a <__lo0bits>:
 800709a:	6803      	ldr	r3, [r0, #0]
 800709c:	4602      	mov	r2, r0
 800709e:	f013 0007 	ands.w	r0, r3, #7
 80070a2:	d00b      	beq.n	80070bc <__lo0bits+0x22>
 80070a4:	07d9      	lsls	r1, r3, #31
 80070a6:	d421      	bmi.n	80070ec <__lo0bits+0x52>
 80070a8:	0798      	lsls	r0, r3, #30
 80070aa:	bf49      	itett	mi
 80070ac:	085b      	lsrmi	r3, r3, #1
 80070ae:	089b      	lsrpl	r3, r3, #2
 80070b0:	2001      	movmi	r0, #1
 80070b2:	6013      	strmi	r3, [r2, #0]
 80070b4:	bf5c      	itt	pl
 80070b6:	2002      	movpl	r0, #2
 80070b8:	6013      	strpl	r3, [r2, #0]
 80070ba:	4770      	bx	lr
 80070bc:	b299      	uxth	r1, r3
 80070be:	b909      	cbnz	r1, 80070c4 <__lo0bits+0x2a>
 80070c0:	2010      	movs	r0, #16
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	b2d9      	uxtb	r1, r3
 80070c6:	b909      	cbnz	r1, 80070cc <__lo0bits+0x32>
 80070c8:	3008      	adds	r0, #8
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	0719      	lsls	r1, r3, #28
 80070ce:	bf04      	itt	eq
 80070d0:	091b      	lsreq	r3, r3, #4
 80070d2:	3004      	addeq	r0, #4
 80070d4:	0799      	lsls	r1, r3, #30
 80070d6:	bf04      	itt	eq
 80070d8:	089b      	lsreq	r3, r3, #2
 80070da:	3002      	addeq	r0, #2
 80070dc:	07d9      	lsls	r1, r3, #31
 80070de:	d403      	bmi.n	80070e8 <__lo0bits+0x4e>
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	f100 0001 	add.w	r0, r0, #1
 80070e6:	d003      	beq.n	80070f0 <__lo0bits+0x56>
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	4770      	bx	lr
 80070ec:	2000      	movs	r0, #0
 80070ee:	4770      	bx	lr
 80070f0:	2020      	movs	r0, #32
 80070f2:	4770      	bx	lr

080070f4 <__i2b>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	460c      	mov	r4, r1
 80070f8:	2101      	movs	r1, #1
 80070fa:	f7ff ff07 	bl	8006f0c <_Balloc>
 80070fe:	4602      	mov	r2, r0
 8007100:	b928      	cbnz	r0, 800710e <__i2b+0x1a>
 8007102:	f240 1145 	movw	r1, #325	@ 0x145
 8007106:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <__i2b+0x24>)
 8007108:	4804      	ldr	r0, [pc, #16]	@ (800711c <__i2b+0x28>)
 800710a:	f000 fcb7 	bl	8007a7c <__assert_func>
 800710e:	2301      	movs	r3, #1
 8007110:	6144      	str	r4, [r0, #20]
 8007112:	6103      	str	r3, [r0, #16]
 8007114:	bd10      	pop	{r4, pc}
 8007116:	bf00      	nop
 8007118:	080083c0 	.word	0x080083c0
 800711c:	080083d1 	.word	0x080083d1

08007120 <__multiply>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	4614      	mov	r4, r2
 8007126:	690a      	ldr	r2, [r1, #16]
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	460f      	mov	r7, r1
 800712c:	429a      	cmp	r2, r3
 800712e:	bfa2      	ittt	ge
 8007130:	4623      	movge	r3, r4
 8007132:	460c      	movge	r4, r1
 8007134:	461f      	movge	r7, r3
 8007136:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800713a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800713e:	68a3      	ldr	r3, [r4, #8]
 8007140:	6861      	ldr	r1, [r4, #4]
 8007142:	eb0a 0609 	add.w	r6, sl, r9
 8007146:	42b3      	cmp	r3, r6
 8007148:	b085      	sub	sp, #20
 800714a:	bfb8      	it	lt
 800714c:	3101      	addlt	r1, #1
 800714e:	f7ff fedd 	bl	8006f0c <_Balloc>
 8007152:	b930      	cbnz	r0, 8007162 <__multiply+0x42>
 8007154:	4602      	mov	r2, r0
 8007156:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800715a:	4b43      	ldr	r3, [pc, #268]	@ (8007268 <__multiply+0x148>)
 800715c:	4843      	ldr	r0, [pc, #268]	@ (800726c <__multiply+0x14c>)
 800715e:	f000 fc8d 	bl	8007a7c <__assert_func>
 8007162:	f100 0514 	add.w	r5, r0, #20
 8007166:	462b      	mov	r3, r5
 8007168:	2200      	movs	r2, #0
 800716a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800716e:	4543      	cmp	r3, r8
 8007170:	d321      	bcc.n	80071b6 <__multiply+0x96>
 8007172:	f107 0114 	add.w	r1, r7, #20
 8007176:	f104 0214 	add.w	r2, r4, #20
 800717a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800717e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007182:	9302      	str	r3, [sp, #8]
 8007184:	1b13      	subs	r3, r2, r4
 8007186:	3b15      	subs	r3, #21
 8007188:	f023 0303 	bic.w	r3, r3, #3
 800718c:	3304      	adds	r3, #4
 800718e:	f104 0715 	add.w	r7, r4, #21
 8007192:	42ba      	cmp	r2, r7
 8007194:	bf38      	it	cc
 8007196:	2304      	movcc	r3, #4
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	9b02      	ldr	r3, [sp, #8]
 800719c:	9103      	str	r1, [sp, #12]
 800719e:	428b      	cmp	r3, r1
 80071a0:	d80c      	bhi.n	80071bc <__multiply+0x9c>
 80071a2:	2e00      	cmp	r6, #0
 80071a4:	dd03      	ble.n	80071ae <__multiply+0x8e>
 80071a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d05a      	beq.n	8007264 <__multiply+0x144>
 80071ae:	6106      	str	r6, [r0, #16]
 80071b0:	b005      	add	sp, #20
 80071b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b6:	f843 2b04 	str.w	r2, [r3], #4
 80071ba:	e7d8      	b.n	800716e <__multiply+0x4e>
 80071bc:	f8b1 a000 	ldrh.w	sl, [r1]
 80071c0:	f1ba 0f00 	cmp.w	sl, #0
 80071c4:	d023      	beq.n	800720e <__multiply+0xee>
 80071c6:	46a9      	mov	r9, r5
 80071c8:	f04f 0c00 	mov.w	ip, #0
 80071cc:	f104 0e14 	add.w	lr, r4, #20
 80071d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071d4:	f8d9 3000 	ldr.w	r3, [r9]
 80071d8:	fa1f fb87 	uxth.w	fp, r7
 80071dc:	b29b      	uxth	r3, r3
 80071de:	fb0a 330b 	mla	r3, sl, fp, r3
 80071e2:	4463      	add	r3, ip
 80071e4:	f8d9 c000 	ldr.w	ip, [r9]
 80071e8:	0c3f      	lsrs	r7, r7, #16
 80071ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80071ee:	fb0a c707 	mla	r7, sl, r7, ip
 80071f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071fc:	4572      	cmp	r2, lr
 80071fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007202:	f849 3b04 	str.w	r3, [r9], #4
 8007206:	d8e3      	bhi.n	80071d0 <__multiply+0xb0>
 8007208:	9b01      	ldr	r3, [sp, #4]
 800720a:	f845 c003 	str.w	ip, [r5, r3]
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	3104      	adds	r1, #4
 8007212:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007216:	f1b9 0f00 	cmp.w	r9, #0
 800721a:	d021      	beq.n	8007260 <__multiply+0x140>
 800721c:	46ae      	mov	lr, r5
 800721e:	f04f 0a00 	mov.w	sl, #0
 8007222:	682b      	ldr	r3, [r5, #0]
 8007224:	f104 0c14 	add.w	ip, r4, #20
 8007228:	f8bc b000 	ldrh.w	fp, [ip]
 800722c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007230:	b29b      	uxth	r3, r3
 8007232:	fb09 770b 	mla	r7, r9, fp, r7
 8007236:	4457      	add	r7, sl
 8007238:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800723c:	f84e 3b04 	str.w	r3, [lr], #4
 8007240:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007248:	f8be 3000 	ldrh.w	r3, [lr]
 800724c:	4562      	cmp	r2, ip
 800724e:	fb09 330a 	mla	r3, r9, sl, r3
 8007252:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007256:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800725a:	d8e5      	bhi.n	8007228 <__multiply+0x108>
 800725c:	9f01      	ldr	r7, [sp, #4]
 800725e:	51eb      	str	r3, [r5, r7]
 8007260:	3504      	adds	r5, #4
 8007262:	e79a      	b.n	800719a <__multiply+0x7a>
 8007264:	3e01      	subs	r6, #1
 8007266:	e79c      	b.n	80071a2 <__multiply+0x82>
 8007268:	080083c0 	.word	0x080083c0
 800726c:	080083d1 	.word	0x080083d1

08007270 <__pow5mult>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	4615      	mov	r5, r2
 8007276:	f012 0203 	ands.w	r2, r2, #3
 800727a:	4607      	mov	r7, r0
 800727c:	460e      	mov	r6, r1
 800727e:	d007      	beq.n	8007290 <__pow5mult+0x20>
 8007280:	4c25      	ldr	r4, [pc, #148]	@ (8007318 <__pow5mult+0xa8>)
 8007282:	3a01      	subs	r2, #1
 8007284:	2300      	movs	r3, #0
 8007286:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800728a:	f7ff fea1 	bl	8006fd0 <__multadd>
 800728e:	4606      	mov	r6, r0
 8007290:	10ad      	asrs	r5, r5, #2
 8007292:	d03d      	beq.n	8007310 <__pow5mult+0xa0>
 8007294:	69fc      	ldr	r4, [r7, #28]
 8007296:	b97c      	cbnz	r4, 80072b8 <__pow5mult+0x48>
 8007298:	2010      	movs	r0, #16
 800729a:	f7ff fd81 	bl	8006da0 <malloc>
 800729e:	4602      	mov	r2, r0
 80072a0:	61f8      	str	r0, [r7, #28]
 80072a2:	b928      	cbnz	r0, 80072b0 <__pow5mult+0x40>
 80072a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072a8:	4b1c      	ldr	r3, [pc, #112]	@ (800731c <__pow5mult+0xac>)
 80072aa:	481d      	ldr	r0, [pc, #116]	@ (8007320 <__pow5mult+0xb0>)
 80072ac:	f000 fbe6 	bl	8007a7c <__assert_func>
 80072b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072b4:	6004      	str	r4, [r0, #0]
 80072b6:	60c4      	str	r4, [r0, #12]
 80072b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072c0:	b94c      	cbnz	r4, 80072d6 <__pow5mult+0x66>
 80072c2:	f240 2171 	movw	r1, #625	@ 0x271
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7ff ff14 	bl	80070f4 <__i2b>
 80072cc:	2300      	movs	r3, #0
 80072ce:	4604      	mov	r4, r0
 80072d0:	f8c8 0008 	str.w	r0, [r8, #8]
 80072d4:	6003      	str	r3, [r0, #0]
 80072d6:	f04f 0900 	mov.w	r9, #0
 80072da:	07eb      	lsls	r3, r5, #31
 80072dc:	d50a      	bpl.n	80072f4 <__pow5mult+0x84>
 80072de:	4631      	mov	r1, r6
 80072e0:	4622      	mov	r2, r4
 80072e2:	4638      	mov	r0, r7
 80072e4:	f7ff ff1c 	bl	8007120 <__multiply>
 80072e8:	4680      	mov	r8, r0
 80072ea:	4631      	mov	r1, r6
 80072ec:	4638      	mov	r0, r7
 80072ee:	f7ff fe4d 	bl	8006f8c <_Bfree>
 80072f2:	4646      	mov	r6, r8
 80072f4:	106d      	asrs	r5, r5, #1
 80072f6:	d00b      	beq.n	8007310 <__pow5mult+0xa0>
 80072f8:	6820      	ldr	r0, [r4, #0]
 80072fa:	b938      	cbnz	r0, 800730c <__pow5mult+0x9c>
 80072fc:	4622      	mov	r2, r4
 80072fe:	4621      	mov	r1, r4
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff ff0d 	bl	8007120 <__multiply>
 8007306:	6020      	str	r0, [r4, #0]
 8007308:	f8c0 9000 	str.w	r9, [r0]
 800730c:	4604      	mov	r4, r0
 800730e:	e7e4      	b.n	80072da <__pow5mult+0x6a>
 8007310:	4630      	mov	r0, r6
 8007312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007316:	bf00      	nop
 8007318:	0800842c 	.word	0x0800842c
 800731c:	08008351 	.word	0x08008351
 8007320:	080083d1 	.word	0x080083d1

08007324 <__lshift>:
 8007324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	4607      	mov	r7, r0
 800732c:	4691      	mov	r9, r2
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	6849      	ldr	r1, [r1, #4]
 8007332:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800733c:	f108 0601 	add.w	r6, r8, #1
 8007340:	42b3      	cmp	r3, r6
 8007342:	db0b      	blt.n	800735c <__lshift+0x38>
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff fde1 	bl	8006f0c <_Balloc>
 800734a:	4605      	mov	r5, r0
 800734c:	b948      	cbnz	r0, 8007362 <__lshift+0x3e>
 800734e:	4602      	mov	r2, r0
 8007350:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007354:	4b27      	ldr	r3, [pc, #156]	@ (80073f4 <__lshift+0xd0>)
 8007356:	4828      	ldr	r0, [pc, #160]	@ (80073f8 <__lshift+0xd4>)
 8007358:	f000 fb90 	bl	8007a7c <__assert_func>
 800735c:	3101      	adds	r1, #1
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	e7ee      	b.n	8007340 <__lshift+0x1c>
 8007362:	2300      	movs	r3, #0
 8007364:	f100 0114 	add.w	r1, r0, #20
 8007368:	f100 0210 	add.w	r2, r0, #16
 800736c:	4618      	mov	r0, r3
 800736e:	4553      	cmp	r3, sl
 8007370:	db33      	blt.n	80073da <__lshift+0xb6>
 8007372:	6920      	ldr	r0, [r4, #16]
 8007374:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007378:	f104 0314 	add.w	r3, r4, #20
 800737c:	f019 091f 	ands.w	r9, r9, #31
 8007380:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007384:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007388:	d02b      	beq.n	80073e2 <__lshift+0xbe>
 800738a:	468a      	mov	sl, r1
 800738c:	2200      	movs	r2, #0
 800738e:	f1c9 0e20 	rsb	lr, r9, #32
 8007392:	6818      	ldr	r0, [r3, #0]
 8007394:	fa00 f009 	lsl.w	r0, r0, r9
 8007398:	4310      	orrs	r0, r2
 800739a:	f84a 0b04 	str.w	r0, [sl], #4
 800739e:	f853 2b04 	ldr.w	r2, [r3], #4
 80073a2:	459c      	cmp	ip, r3
 80073a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073a8:	d8f3      	bhi.n	8007392 <__lshift+0x6e>
 80073aa:	ebac 0304 	sub.w	r3, ip, r4
 80073ae:	3b15      	subs	r3, #21
 80073b0:	f023 0303 	bic.w	r3, r3, #3
 80073b4:	3304      	adds	r3, #4
 80073b6:	f104 0015 	add.w	r0, r4, #21
 80073ba:	4584      	cmp	ip, r0
 80073bc:	bf38      	it	cc
 80073be:	2304      	movcc	r3, #4
 80073c0:	50ca      	str	r2, [r1, r3]
 80073c2:	b10a      	cbz	r2, 80073c8 <__lshift+0xa4>
 80073c4:	f108 0602 	add.w	r6, r8, #2
 80073c8:	3e01      	subs	r6, #1
 80073ca:	4638      	mov	r0, r7
 80073cc:	4621      	mov	r1, r4
 80073ce:	612e      	str	r6, [r5, #16]
 80073d0:	f7ff fddc 	bl	8006f8c <_Bfree>
 80073d4:	4628      	mov	r0, r5
 80073d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073da:	f842 0f04 	str.w	r0, [r2, #4]!
 80073de:	3301      	adds	r3, #1
 80073e0:	e7c5      	b.n	800736e <__lshift+0x4a>
 80073e2:	3904      	subs	r1, #4
 80073e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e8:	459c      	cmp	ip, r3
 80073ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80073ee:	d8f9      	bhi.n	80073e4 <__lshift+0xc0>
 80073f0:	e7ea      	b.n	80073c8 <__lshift+0xa4>
 80073f2:	bf00      	nop
 80073f4:	080083c0 	.word	0x080083c0
 80073f8:	080083d1 	.word	0x080083d1

080073fc <__mcmp>:
 80073fc:	4603      	mov	r3, r0
 80073fe:	690a      	ldr	r2, [r1, #16]
 8007400:	6900      	ldr	r0, [r0, #16]
 8007402:	b530      	push	{r4, r5, lr}
 8007404:	1a80      	subs	r0, r0, r2
 8007406:	d10e      	bne.n	8007426 <__mcmp+0x2a>
 8007408:	3314      	adds	r3, #20
 800740a:	3114      	adds	r1, #20
 800740c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007410:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007414:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007418:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800741c:	4295      	cmp	r5, r2
 800741e:	d003      	beq.n	8007428 <__mcmp+0x2c>
 8007420:	d205      	bcs.n	800742e <__mcmp+0x32>
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	bd30      	pop	{r4, r5, pc}
 8007428:	42a3      	cmp	r3, r4
 800742a:	d3f3      	bcc.n	8007414 <__mcmp+0x18>
 800742c:	e7fb      	b.n	8007426 <__mcmp+0x2a>
 800742e:	2001      	movs	r0, #1
 8007430:	e7f9      	b.n	8007426 <__mcmp+0x2a>
	...

08007434 <__mdiff>:
 8007434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007438:	4689      	mov	r9, r1
 800743a:	4606      	mov	r6, r0
 800743c:	4611      	mov	r1, r2
 800743e:	4648      	mov	r0, r9
 8007440:	4614      	mov	r4, r2
 8007442:	f7ff ffdb 	bl	80073fc <__mcmp>
 8007446:	1e05      	subs	r5, r0, #0
 8007448:	d112      	bne.n	8007470 <__mdiff+0x3c>
 800744a:	4629      	mov	r1, r5
 800744c:	4630      	mov	r0, r6
 800744e:	f7ff fd5d 	bl	8006f0c <_Balloc>
 8007452:	4602      	mov	r2, r0
 8007454:	b928      	cbnz	r0, 8007462 <__mdiff+0x2e>
 8007456:	f240 2137 	movw	r1, #567	@ 0x237
 800745a:	4b3e      	ldr	r3, [pc, #248]	@ (8007554 <__mdiff+0x120>)
 800745c:	483e      	ldr	r0, [pc, #248]	@ (8007558 <__mdiff+0x124>)
 800745e:	f000 fb0d 	bl	8007a7c <__assert_func>
 8007462:	2301      	movs	r3, #1
 8007464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007468:	4610      	mov	r0, r2
 800746a:	b003      	add	sp, #12
 800746c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007470:	bfbc      	itt	lt
 8007472:	464b      	movlt	r3, r9
 8007474:	46a1      	movlt	r9, r4
 8007476:	4630      	mov	r0, r6
 8007478:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800747c:	bfba      	itte	lt
 800747e:	461c      	movlt	r4, r3
 8007480:	2501      	movlt	r5, #1
 8007482:	2500      	movge	r5, #0
 8007484:	f7ff fd42 	bl	8006f0c <_Balloc>
 8007488:	4602      	mov	r2, r0
 800748a:	b918      	cbnz	r0, 8007494 <__mdiff+0x60>
 800748c:	f240 2145 	movw	r1, #581	@ 0x245
 8007490:	4b30      	ldr	r3, [pc, #192]	@ (8007554 <__mdiff+0x120>)
 8007492:	e7e3      	b.n	800745c <__mdiff+0x28>
 8007494:	f100 0b14 	add.w	fp, r0, #20
 8007498:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800749c:	f109 0310 	add.w	r3, r9, #16
 80074a0:	60c5      	str	r5, [r0, #12]
 80074a2:	f04f 0c00 	mov.w	ip, #0
 80074a6:	f109 0514 	add.w	r5, r9, #20
 80074aa:	46d9      	mov	r9, fp
 80074ac:	6926      	ldr	r6, [r4, #16]
 80074ae:	f104 0e14 	add.w	lr, r4, #20
 80074b2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074b6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074ba:	9301      	str	r3, [sp, #4]
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074c6:	b281      	uxth	r1, r0
 80074c8:	9301      	str	r3, [sp, #4]
 80074ca:	fa1f f38a 	uxth.w	r3, sl
 80074ce:	1a5b      	subs	r3, r3, r1
 80074d0:	0c00      	lsrs	r0, r0, #16
 80074d2:	4463      	add	r3, ip
 80074d4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074d8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074dc:	b29b      	uxth	r3, r3
 80074de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80074e2:	4576      	cmp	r6, lr
 80074e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074e8:	f849 3b04 	str.w	r3, [r9], #4
 80074ec:	d8e6      	bhi.n	80074bc <__mdiff+0x88>
 80074ee:	1b33      	subs	r3, r6, r4
 80074f0:	3b15      	subs	r3, #21
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	3415      	adds	r4, #21
 80074f8:	3304      	adds	r3, #4
 80074fa:	42a6      	cmp	r6, r4
 80074fc:	bf38      	it	cc
 80074fe:	2304      	movcc	r3, #4
 8007500:	441d      	add	r5, r3
 8007502:	445b      	add	r3, fp
 8007504:	461e      	mov	r6, r3
 8007506:	462c      	mov	r4, r5
 8007508:	4544      	cmp	r4, r8
 800750a:	d30e      	bcc.n	800752a <__mdiff+0xf6>
 800750c:	f108 0103 	add.w	r1, r8, #3
 8007510:	1b49      	subs	r1, r1, r5
 8007512:	f021 0103 	bic.w	r1, r1, #3
 8007516:	3d03      	subs	r5, #3
 8007518:	45a8      	cmp	r8, r5
 800751a:	bf38      	it	cc
 800751c:	2100      	movcc	r1, #0
 800751e:	440b      	add	r3, r1
 8007520:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007524:	b199      	cbz	r1, 800754e <__mdiff+0x11a>
 8007526:	6117      	str	r7, [r2, #16]
 8007528:	e79e      	b.n	8007468 <__mdiff+0x34>
 800752a:	46e6      	mov	lr, ip
 800752c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007530:	fa1f fc81 	uxth.w	ip, r1
 8007534:	44f4      	add	ip, lr
 8007536:	0c08      	lsrs	r0, r1, #16
 8007538:	4471      	add	r1, lr
 800753a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800753e:	b289      	uxth	r1, r1
 8007540:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007544:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007548:	f846 1b04 	str.w	r1, [r6], #4
 800754c:	e7dc      	b.n	8007508 <__mdiff+0xd4>
 800754e:	3f01      	subs	r7, #1
 8007550:	e7e6      	b.n	8007520 <__mdiff+0xec>
 8007552:	bf00      	nop
 8007554:	080083c0 	.word	0x080083c0
 8007558:	080083d1 	.word	0x080083d1

0800755c <__d2b>:
 800755c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007560:	2101      	movs	r1, #1
 8007562:	4690      	mov	r8, r2
 8007564:	4699      	mov	r9, r3
 8007566:	9e08      	ldr	r6, [sp, #32]
 8007568:	f7ff fcd0 	bl	8006f0c <_Balloc>
 800756c:	4604      	mov	r4, r0
 800756e:	b930      	cbnz	r0, 800757e <__d2b+0x22>
 8007570:	4602      	mov	r2, r0
 8007572:	f240 310f 	movw	r1, #783	@ 0x30f
 8007576:	4b23      	ldr	r3, [pc, #140]	@ (8007604 <__d2b+0xa8>)
 8007578:	4823      	ldr	r0, [pc, #140]	@ (8007608 <__d2b+0xac>)
 800757a:	f000 fa7f 	bl	8007a7c <__assert_func>
 800757e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007582:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007586:	b10d      	cbz	r5, 800758c <__d2b+0x30>
 8007588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f1b8 0300 	subs.w	r3, r8, #0
 8007592:	d024      	beq.n	80075de <__d2b+0x82>
 8007594:	4668      	mov	r0, sp
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	f7ff fd7f 	bl	800709a <__lo0bits>
 800759c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075a0:	b1d8      	cbz	r0, 80075da <__d2b+0x7e>
 80075a2:	f1c0 0320 	rsb	r3, r0, #32
 80075a6:	fa02 f303 	lsl.w	r3, r2, r3
 80075aa:	430b      	orrs	r3, r1
 80075ac:	40c2      	lsrs	r2, r0
 80075ae:	6163      	str	r3, [r4, #20]
 80075b0:	9201      	str	r2, [sp, #4]
 80075b2:	9b01      	ldr	r3, [sp, #4]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bf0c      	ite	eq
 80075b8:	2201      	moveq	r2, #1
 80075ba:	2202      	movne	r2, #2
 80075bc:	61a3      	str	r3, [r4, #24]
 80075be:	6122      	str	r2, [r4, #16]
 80075c0:	b1ad      	cbz	r5, 80075ee <__d2b+0x92>
 80075c2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80075c6:	4405      	add	r5, r0
 80075c8:	6035      	str	r5, [r6, #0]
 80075ca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80075ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d0:	6018      	str	r0, [r3, #0]
 80075d2:	4620      	mov	r0, r4
 80075d4:	b002      	add	sp, #8
 80075d6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80075da:	6161      	str	r1, [r4, #20]
 80075dc:	e7e9      	b.n	80075b2 <__d2b+0x56>
 80075de:	a801      	add	r0, sp, #4
 80075e0:	f7ff fd5b 	bl	800709a <__lo0bits>
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	6163      	str	r3, [r4, #20]
 80075ea:	3020      	adds	r0, #32
 80075ec:	e7e7      	b.n	80075be <__d2b+0x62>
 80075ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80075f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075f6:	6030      	str	r0, [r6, #0]
 80075f8:	6918      	ldr	r0, [r3, #16]
 80075fa:	f7ff fd2f 	bl	800705c <__hi0bits>
 80075fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007602:	e7e4      	b.n	80075ce <__d2b+0x72>
 8007604:	080083c0 	.word	0x080083c0
 8007608:	080083d1 	.word	0x080083d1

0800760c <__ssputs_r>:
 800760c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007610:	461f      	mov	r7, r3
 8007612:	688e      	ldr	r6, [r1, #8]
 8007614:	4682      	mov	sl, r0
 8007616:	42be      	cmp	r6, r7
 8007618:	460c      	mov	r4, r1
 800761a:	4690      	mov	r8, r2
 800761c:	680b      	ldr	r3, [r1, #0]
 800761e:	d82d      	bhi.n	800767c <__ssputs_r+0x70>
 8007620:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007624:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007628:	d026      	beq.n	8007678 <__ssputs_r+0x6c>
 800762a:	6965      	ldr	r5, [r4, #20]
 800762c:	6909      	ldr	r1, [r1, #16]
 800762e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007632:	eba3 0901 	sub.w	r9, r3, r1
 8007636:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800763a:	1c7b      	adds	r3, r7, #1
 800763c:	444b      	add	r3, r9
 800763e:	106d      	asrs	r5, r5, #1
 8007640:	429d      	cmp	r5, r3
 8007642:	bf38      	it	cc
 8007644:	461d      	movcc	r5, r3
 8007646:	0553      	lsls	r3, r2, #21
 8007648:	d527      	bpl.n	800769a <__ssputs_r+0x8e>
 800764a:	4629      	mov	r1, r5
 800764c:	f7ff fbd2 	bl	8006df4 <_malloc_r>
 8007650:	4606      	mov	r6, r0
 8007652:	b360      	cbz	r0, 80076ae <__ssputs_r+0xa2>
 8007654:	464a      	mov	r2, r9
 8007656:	6921      	ldr	r1, [r4, #16]
 8007658:	f000 fa02 	bl	8007a60 <memcpy>
 800765c:	89a3      	ldrh	r3, [r4, #12]
 800765e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007662:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007666:	81a3      	strh	r3, [r4, #12]
 8007668:	6126      	str	r6, [r4, #16]
 800766a:	444e      	add	r6, r9
 800766c:	6026      	str	r6, [r4, #0]
 800766e:	463e      	mov	r6, r7
 8007670:	6165      	str	r5, [r4, #20]
 8007672:	eba5 0509 	sub.w	r5, r5, r9
 8007676:	60a5      	str	r5, [r4, #8]
 8007678:	42be      	cmp	r6, r7
 800767a:	d900      	bls.n	800767e <__ssputs_r+0x72>
 800767c:	463e      	mov	r6, r7
 800767e:	4632      	mov	r2, r6
 8007680:	4641      	mov	r1, r8
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	f000 f9c2 	bl	8007a0c <memmove>
 8007688:	2000      	movs	r0, #0
 800768a:	68a3      	ldr	r3, [r4, #8]
 800768c:	1b9b      	subs	r3, r3, r6
 800768e:	60a3      	str	r3, [r4, #8]
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	4433      	add	r3, r6
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769a:	462a      	mov	r2, r5
 800769c:	f000 fa32 	bl	8007b04 <_realloc_r>
 80076a0:	4606      	mov	r6, r0
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d1e0      	bne.n	8007668 <__ssputs_r+0x5c>
 80076a6:	4650      	mov	r0, sl
 80076a8:	6921      	ldr	r1, [r4, #16]
 80076aa:	f7ff fb31 	bl	8006d10 <_free_r>
 80076ae:	230c      	movs	r3, #12
 80076b0:	f8ca 3000 	str.w	r3, [sl]
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	e7e9      	b.n	8007696 <__ssputs_r+0x8a>
	...

080076c4 <_svfiprintf_r>:
 80076c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c8:	4698      	mov	r8, r3
 80076ca:	898b      	ldrh	r3, [r1, #12]
 80076cc:	4607      	mov	r7, r0
 80076ce:	061b      	lsls	r3, r3, #24
 80076d0:	460d      	mov	r5, r1
 80076d2:	4614      	mov	r4, r2
 80076d4:	b09d      	sub	sp, #116	@ 0x74
 80076d6:	d510      	bpl.n	80076fa <_svfiprintf_r+0x36>
 80076d8:	690b      	ldr	r3, [r1, #16]
 80076da:	b973      	cbnz	r3, 80076fa <_svfiprintf_r+0x36>
 80076dc:	2140      	movs	r1, #64	@ 0x40
 80076de:	f7ff fb89 	bl	8006df4 <_malloc_r>
 80076e2:	6028      	str	r0, [r5, #0]
 80076e4:	6128      	str	r0, [r5, #16]
 80076e6:	b930      	cbnz	r0, 80076f6 <_svfiprintf_r+0x32>
 80076e8:	230c      	movs	r3, #12
 80076ea:	603b      	str	r3, [r7, #0]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295
 80076f0:	b01d      	add	sp, #116	@ 0x74
 80076f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f6:	2340      	movs	r3, #64	@ 0x40
 80076f8:	616b      	str	r3, [r5, #20]
 80076fa:	2300      	movs	r3, #0
 80076fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076fe:	2320      	movs	r3, #32
 8007700:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007704:	2330      	movs	r3, #48	@ 0x30
 8007706:	f04f 0901 	mov.w	r9, #1
 800770a:	f8cd 800c 	str.w	r8, [sp, #12]
 800770e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80078a8 <_svfiprintf_r+0x1e4>
 8007712:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007716:	4623      	mov	r3, r4
 8007718:	469a      	mov	sl, r3
 800771a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800771e:	b10a      	cbz	r2, 8007724 <_svfiprintf_r+0x60>
 8007720:	2a25      	cmp	r2, #37	@ 0x25
 8007722:	d1f9      	bne.n	8007718 <_svfiprintf_r+0x54>
 8007724:	ebba 0b04 	subs.w	fp, sl, r4
 8007728:	d00b      	beq.n	8007742 <_svfiprintf_r+0x7e>
 800772a:	465b      	mov	r3, fp
 800772c:	4622      	mov	r2, r4
 800772e:	4629      	mov	r1, r5
 8007730:	4638      	mov	r0, r7
 8007732:	f7ff ff6b 	bl	800760c <__ssputs_r>
 8007736:	3001      	adds	r0, #1
 8007738:	f000 80a7 	beq.w	800788a <_svfiprintf_r+0x1c6>
 800773c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800773e:	445a      	add	r2, fp
 8007740:	9209      	str	r2, [sp, #36]	@ 0x24
 8007742:	f89a 3000 	ldrb.w	r3, [sl]
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 809f 	beq.w	800788a <_svfiprintf_r+0x1c6>
 800774c:	2300      	movs	r3, #0
 800774e:	f04f 32ff 	mov.w	r2, #4294967295
 8007752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007756:	f10a 0a01 	add.w	sl, sl, #1
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	9307      	str	r3, [sp, #28]
 800775e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007762:	931a      	str	r3, [sp, #104]	@ 0x68
 8007764:	4654      	mov	r4, sl
 8007766:	2205      	movs	r2, #5
 8007768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776c:	484e      	ldr	r0, [pc, #312]	@ (80078a8 <_svfiprintf_r+0x1e4>)
 800776e:	f7fe fc6e 	bl	800604e <memchr>
 8007772:	9a04      	ldr	r2, [sp, #16]
 8007774:	b9d8      	cbnz	r0, 80077ae <_svfiprintf_r+0xea>
 8007776:	06d0      	lsls	r0, r2, #27
 8007778:	bf44      	itt	mi
 800777a:	2320      	movmi	r3, #32
 800777c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007780:	0711      	lsls	r1, r2, #28
 8007782:	bf44      	itt	mi
 8007784:	232b      	movmi	r3, #43	@ 0x2b
 8007786:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800778a:	f89a 3000 	ldrb.w	r3, [sl]
 800778e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007790:	d015      	beq.n	80077be <_svfiprintf_r+0xfa>
 8007792:	4654      	mov	r4, sl
 8007794:	2000      	movs	r0, #0
 8007796:	f04f 0c0a 	mov.w	ip, #10
 800779a:	9a07      	ldr	r2, [sp, #28]
 800779c:	4621      	mov	r1, r4
 800779e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a2:	3b30      	subs	r3, #48	@ 0x30
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	d94b      	bls.n	8007840 <_svfiprintf_r+0x17c>
 80077a8:	b1b0      	cbz	r0, 80077d8 <_svfiprintf_r+0x114>
 80077aa:	9207      	str	r2, [sp, #28]
 80077ac:	e014      	b.n	80077d8 <_svfiprintf_r+0x114>
 80077ae:	eba0 0308 	sub.w	r3, r0, r8
 80077b2:	fa09 f303 	lsl.w	r3, r9, r3
 80077b6:	4313      	orrs	r3, r2
 80077b8:	46a2      	mov	sl, r4
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	e7d2      	b.n	8007764 <_svfiprintf_r+0xa0>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	1d19      	adds	r1, r3, #4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	9103      	str	r1, [sp, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfbb      	ittet	lt
 80077ca:	425b      	neglt	r3, r3
 80077cc:	f042 0202 	orrlt.w	r2, r2, #2
 80077d0:	9307      	strge	r3, [sp, #28]
 80077d2:	9307      	strlt	r3, [sp, #28]
 80077d4:	bfb8      	it	lt
 80077d6:	9204      	strlt	r2, [sp, #16]
 80077d8:	7823      	ldrb	r3, [r4, #0]
 80077da:	2b2e      	cmp	r3, #46	@ 0x2e
 80077dc:	d10a      	bne.n	80077f4 <_svfiprintf_r+0x130>
 80077de:	7863      	ldrb	r3, [r4, #1]
 80077e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e2:	d132      	bne.n	800784a <_svfiprintf_r+0x186>
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	3402      	adds	r4, #2
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9203      	str	r2, [sp, #12]
 80077ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80077f2:	9305      	str	r3, [sp, #20]
 80077f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80078ac <_svfiprintf_r+0x1e8>
 80077f8:	2203      	movs	r2, #3
 80077fa:	4650      	mov	r0, sl
 80077fc:	7821      	ldrb	r1, [r4, #0]
 80077fe:	f7fe fc26 	bl	800604e <memchr>
 8007802:	b138      	cbz	r0, 8007814 <_svfiprintf_r+0x150>
 8007804:	2240      	movs	r2, #64	@ 0x40
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	eba0 000a 	sub.w	r0, r0, sl
 800780c:	4082      	lsls	r2, r0
 800780e:	4313      	orrs	r3, r2
 8007810:	3401      	adds	r4, #1
 8007812:	9304      	str	r3, [sp, #16]
 8007814:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007818:	2206      	movs	r2, #6
 800781a:	4825      	ldr	r0, [pc, #148]	@ (80078b0 <_svfiprintf_r+0x1ec>)
 800781c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007820:	f7fe fc15 	bl	800604e <memchr>
 8007824:	2800      	cmp	r0, #0
 8007826:	d036      	beq.n	8007896 <_svfiprintf_r+0x1d2>
 8007828:	4b22      	ldr	r3, [pc, #136]	@ (80078b4 <_svfiprintf_r+0x1f0>)
 800782a:	bb1b      	cbnz	r3, 8007874 <_svfiprintf_r+0x1b0>
 800782c:	9b03      	ldr	r3, [sp, #12]
 800782e:	3307      	adds	r3, #7
 8007830:	f023 0307 	bic.w	r3, r3, #7
 8007834:	3308      	adds	r3, #8
 8007836:	9303      	str	r3, [sp, #12]
 8007838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800783a:	4433      	add	r3, r6
 800783c:	9309      	str	r3, [sp, #36]	@ 0x24
 800783e:	e76a      	b.n	8007716 <_svfiprintf_r+0x52>
 8007840:	460c      	mov	r4, r1
 8007842:	2001      	movs	r0, #1
 8007844:	fb0c 3202 	mla	r2, ip, r2, r3
 8007848:	e7a8      	b.n	800779c <_svfiprintf_r+0xd8>
 800784a:	2300      	movs	r3, #0
 800784c:	f04f 0c0a 	mov.w	ip, #10
 8007850:	4619      	mov	r1, r3
 8007852:	3401      	adds	r4, #1
 8007854:	9305      	str	r3, [sp, #20]
 8007856:	4620      	mov	r0, r4
 8007858:	f810 2b01 	ldrb.w	r2, [r0], #1
 800785c:	3a30      	subs	r2, #48	@ 0x30
 800785e:	2a09      	cmp	r2, #9
 8007860:	d903      	bls.n	800786a <_svfiprintf_r+0x1a6>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0c6      	beq.n	80077f4 <_svfiprintf_r+0x130>
 8007866:	9105      	str	r1, [sp, #20]
 8007868:	e7c4      	b.n	80077f4 <_svfiprintf_r+0x130>
 800786a:	4604      	mov	r4, r0
 800786c:	2301      	movs	r3, #1
 800786e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007872:	e7f0      	b.n	8007856 <_svfiprintf_r+0x192>
 8007874:	ab03      	add	r3, sp, #12
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	462a      	mov	r2, r5
 800787a:	4638      	mov	r0, r7
 800787c:	4b0e      	ldr	r3, [pc, #56]	@ (80078b8 <_svfiprintf_r+0x1f4>)
 800787e:	a904      	add	r1, sp, #16
 8007880:	f7fd fe82 	bl	8005588 <_printf_float>
 8007884:	1c42      	adds	r2, r0, #1
 8007886:	4606      	mov	r6, r0
 8007888:	d1d6      	bne.n	8007838 <_svfiprintf_r+0x174>
 800788a:	89ab      	ldrh	r3, [r5, #12]
 800788c:	065b      	lsls	r3, r3, #25
 800788e:	f53f af2d 	bmi.w	80076ec <_svfiprintf_r+0x28>
 8007892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007894:	e72c      	b.n	80076f0 <_svfiprintf_r+0x2c>
 8007896:	ab03      	add	r3, sp, #12
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	462a      	mov	r2, r5
 800789c:	4638      	mov	r0, r7
 800789e:	4b06      	ldr	r3, [pc, #24]	@ (80078b8 <_svfiprintf_r+0x1f4>)
 80078a0:	a904      	add	r1, sp, #16
 80078a2:	f7fe f90f 	bl	8005ac4 <_printf_i>
 80078a6:	e7ed      	b.n	8007884 <_svfiprintf_r+0x1c0>
 80078a8:	08008528 	.word	0x08008528
 80078ac:	0800852e 	.word	0x0800852e
 80078b0:	08008532 	.word	0x08008532
 80078b4:	08005589 	.word	0x08005589
 80078b8:	0800760d 	.word	0x0800760d

080078bc <__sflush_r>:
 80078bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c2:	0716      	lsls	r6, r2, #28
 80078c4:	4605      	mov	r5, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	d454      	bmi.n	8007974 <__sflush_r+0xb8>
 80078ca:	684b      	ldr	r3, [r1, #4]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	dc02      	bgt.n	80078d6 <__sflush_r+0x1a>
 80078d0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dd48      	ble.n	8007968 <__sflush_r+0xac>
 80078d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078d8:	2e00      	cmp	r6, #0
 80078da:	d045      	beq.n	8007968 <__sflush_r+0xac>
 80078dc:	2300      	movs	r3, #0
 80078de:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078e2:	682f      	ldr	r7, [r5, #0]
 80078e4:	6a21      	ldr	r1, [r4, #32]
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	d030      	beq.n	800794c <__sflush_r+0x90>
 80078ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	0759      	lsls	r1, r3, #29
 80078f0:	d505      	bpl.n	80078fe <__sflush_r+0x42>
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	1ad2      	subs	r2, r2, r3
 80078f6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078f8:	b10b      	cbz	r3, 80078fe <__sflush_r+0x42>
 80078fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078fc:	1ad2      	subs	r2, r2, r3
 80078fe:	2300      	movs	r3, #0
 8007900:	4628      	mov	r0, r5
 8007902:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007904:	6a21      	ldr	r1, [r4, #32]
 8007906:	47b0      	blx	r6
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	d106      	bne.n	800791c <__sflush_r+0x60>
 800790e:	6829      	ldr	r1, [r5, #0]
 8007910:	291d      	cmp	r1, #29
 8007912:	d82b      	bhi.n	800796c <__sflush_r+0xb0>
 8007914:	4a28      	ldr	r2, [pc, #160]	@ (80079b8 <__sflush_r+0xfc>)
 8007916:	410a      	asrs	r2, r1
 8007918:	07d6      	lsls	r6, r2, #31
 800791a:	d427      	bmi.n	800796c <__sflush_r+0xb0>
 800791c:	2200      	movs	r2, #0
 800791e:	6062      	str	r2, [r4, #4]
 8007920:	6922      	ldr	r2, [r4, #16]
 8007922:	04d9      	lsls	r1, r3, #19
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	d504      	bpl.n	8007932 <__sflush_r+0x76>
 8007928:	1c42      	adds	r2, r0, #1
 800792a:	d101      	bne.n	8007930 <__sflush_r+0x74>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b903      	cbnz	r3, 8007932 <__sflush_r+0x76>
 8007930:	6560      	str	r0, [r4, #84]	@ 0x54
 8007932:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007934:	602f      	str	r7, [r5, #0]
 8007936:	b1b9      	cbz	r1, 8007968 <__sflush_r+0xac>
 8007938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800793c:	4299      	cmp	r1, r3
 800793e:	d002      	beq.n	8007946 <__sflush_r+0x8a>
 8007940:	4628      	mov	r0, r5
 8007942:	f7ff f9e5 	bl	8006d10 <_free_r>
 8007946:	2300      	movs	r3, #0
 8007948:	6363      	str	r3, [r4, #52]	@ 0x34
 800794a:	e00d      	b.n	8007968 <__sflush_r+0xac>
 800794c:	2301      	movs	r3, #1
 800794e:	4628      	mov	r0, r5
 8007950:	47b0      	blx	r6
 8007952:	4602      	mov	r2, r0
 8007954:	1c50      	adds	r0, r2, #1
 8007956:	d1c9      	bne.n	80078ec <__sflush_r+0x30>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0c6      	beq.n	80078ec <__sflush_r+0x30>
 800795e:	2b1d      	cmp	r3, #29
 8007960:	d001      	beq.n	8007966 <__sflush_r+0xaa>
 8007962:	2b16      	cmp	r3, #22
 8007964:	d11d      	bne.n	80079a2 <__sflush_r+0xe6>
 8007966:	602f      	str	r7, [r5, #0]
 8007968:	2000      	movs	r0, #0
 800796a:	e021      	b.n	80079b0 <__sflush_r+0xf4>
 800796c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007970:	b21b      	sxth	r3, r3
 8007972:	e01a      	b.n	80079aa <__sflush_r+0xee>
 8007974:	690f      	ldr	r7, [r1, #16]
 8007976:	2f00      	cmp	r7, #0
 8007978:	d0f6      	beq.n	8007968 <__sflush_r+0xac>
 800797a:	0793      	lsls	r3, r2, #30
 800797c:	bf18      	it	ne
 800797e:	2300      	movne	r3, #0
 8007980:	680e      	ldr	r6, [r1, #0]
 8007982:	bf08      	it	eq
 8007984:	694b      	ldreq	r3, [r1, #20]
 8007986:	1bf6      	subs	r6, r6, r7
 8007988:	600f      	str	r7, [r1, #0]
 800798a:	608b      	str	r3, [r1, #8]
 800798c:	2e00      	cmp	r6, #0
 800798e:	ddeb      	ble.n	8007968 <__sflush_r+0xac>
 8007990:	4633      	mov	r3, r6
 8007992:	463a      	mov	r2, r7
 8007994:	4628      	mov	r0, r5
 8007996:	6a21      	ldr	r1, [r4, #32]
 8007998:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800799c:	47e0      	blx	ip
 800799e:	2800      	cmp	r0, #0
 80079a0:	dc07      	bgt.n	80079b2 <__sflush_r+0xf6>
 80079a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079aa:	f04f 30ff 	mov.w	r0, #4294967295
 80079ae:	81a3      	strh	r3, [r4, #12]
 80079b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079b2:	4407      	add	r7, r0
 80079b4:	1a36      	subs	r6, r6, r0
 80079b6:	e7e9      	b.n	800798c <__sflush_r+0xd0>
 80079b8:	dfbffffe 	.word	0xdfbffffe

080079bc <_fflush_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	690b      	ldr	r3, [r1, #16]
 80079c0:	4605      	mov	r5, r0
 80079c2:	460c      	mov	r4, r1
 80079c4:	b913      	cbnz	r3, 80079cc <_fflush_r+0x10>
 80079c6:	2500      	movs	r5, #0
 80079c8:	4628      	mov	r0, r5
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	b118      	cbz	r0, 80079d6 <_fflush_r+0x1a>
 80079ce:	6a03      	ldr	r3, [r0, #32]
 80079d0:	b90b      	cbnz	r3, 80079d6 <_fflush_r+0x1a>
 80079d2:	f7fe fa23 	bl	8005e1c <__sinit>
 80079d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0f3      	beq.n	80079c6 <_fflush_r+0xa>
 80079de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079e0:	07d0      	lsls	r0, r2, #31
 80079e2:	d404      	bmi.n	80079ee <_fflush_r+0x32>
 80079e4:	0599      	lsls	r1, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_fflush_r+0x32>
 80079e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ea:	f7fe fb2e 	bl	800604a <__retarget_lock_acquire_recursive>
 80079ee:	4628      	mov	r0, r5
 80079f0:	4621      	mov	r1, r4
 80079f2:	f7ff ff63 	bl	80078bc <__sflush_r>
 80079f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079f8:	4605      	mov	r5, r0
 80079fa:	07da      	lsls	r2, r3, #31
 80079fc:	d4e4      	bmi.n	80079c8 <_fflush_r+0xc>
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	059b      	lsls	r3, r3, #22
 8007a02:	d4e1      	bmi.n	80079c8 <_fflush_r+0xc>
 8007a04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a06:	f7fe fb21 	bl	800604c <__retarget_lock_release_recursive>
 8007a0a:	e7dd      	b.n	80079c8 <_fflush_r+0xc>

08007a0c <memmove>:
 8007a0c:	4288      	cmp	r0, r1
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	eb01 0402 	add.w	r4, r1, r2
 8007a14:	d902      	bls.n	8007a1c <memmove+0x10>
 8007a16:	4284      	cmp	r4, r0
 8007a18:	4623      	mov	r3, r4
 8007a1a:	d807      	bhi.n	8007a2c <memmove+0x20>
 8007a1c:	1e43      	subs	r3, r0, #1
 8007a1e:	42a1      	cmp	r1, r4
 8007a20:	d008      	beq.n	8007a34 <memmove+0x28>
 8007a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a2a:	e7f8      	b.n	8007a1e <memmove+0x12>
 8007a2c:	4601      	mov	r1, r0
 8007a2e:	4402      	add	r2, r0
 8007a30:	428a      	cmp	r2, r1
 8007a32:	d100      	bne.n	8007a36 <memmove+0x2a>
 8007a34:	bd10      	pop	{r4, pc}
 8007a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a3e:	e7f7      	b.n	8007a30 <memmove+0x24>

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	2300      	movs	r3, #0
 8007a44:	4d05      	ldr	r5, [pc, #20]	@ (8007a5c <_sbrk_r+0x1c>)
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7fc fcd8 	bl	8004400 <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200008dc 	.word	0x200008dc

08007a60 <memcpy>:
 8007a60:	440a      	add	r2, r1
 8007a62:	4291      	cmp	r1, r2
 8007a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a68:	d100      	bne.n	8007a6c <memcpy+0xc>
 8007a6a:	4770      	bx	lr
 8007a6c:	b510      	push	{r4, lr}
 8007a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a72:	4291      	cmp	r1, r2
 8007a74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a78:	d1f9      	bne.n	8007a6e <memcpy+0xe>
 8007a7a:	bd10      	pop	{r4, pc}

08007a7c <__assert_func>:
 8007a7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a7e:	4614      	mov	r4, r2
 8007a80:	461a      	mov	r2, r3
 8007a82:	4b09      	ldr	r3, [pc, #36]	@ (8007aa8 <__assert_func+0x2c>)
 8007a84:	4605      	mov	r5, r0
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68d8      	ldr	r0, [r3, #12]
 8007a8a:	b954      	cbnz	r4, 8007aa2 <__assert_func+0x26>
 8007a8c:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <__assert_func+0x30>)
 8007a8e:	461c      	mov	r4, r3
 8007a90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a94:	9100      	str	r1, [sp, #0]
 8007a96:	462b      	mov	r3, r5
 8007a98:	4905      	ldr	r1, [pc, #20]	@ (8007ab0 <__assert_func+0x34>)
 8007a9a:	f000 f86f 	bl	8007b7c <fiprintf>
 8007a9e:	f000 f87f 	bl	8007ba0 <abort>
 8007aa2:	4b04      	ldr	r3, [pc, #16]	@ (8007ab4 <__assert_func+0x38>)
 8007aa4:	e7f4      	b.n	8007a90 <__assert_func+0x14>
 8007aa6:	bf00      	nop
 8007aa8:	200000dc 	.word	0x200000dc
 8007aac:	0800857e 	.word	0x0800857e
 8007ab0:	08008550 	.word	0x08008550
 8007ab4:	08008543 	.word	0x08008543

08007ab8 <_calloc_r>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	fba1 5402 	umull	r5, r4, r1, r2
 8007abe:	b93c      	cbnz	r4, 8007ad0 <_calloc_r+0x18>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	f7ff f997 	bl	8006df4 <_malloc_r>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	b928      	cbnz	r0, 8007ad6 <_calloc_r+0x1e>
 8007aca:	2600      	movs	r6, #0
 8007acc:	4630      	mov	r0, r6
 8007ace:	bd70      	pop	{r4, r5, r6, pc}
 8007ad0:	220c      	movs	r2, #12
 8007ad2:	6002      	str	r2, [r0, #0]
 8007ad4:	e7f9      	b.n	8007aca <_calloc_r+0x12>
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4621      	mov	r1, r4
 8007ada:	f7fe fa38 	bl	8005f4e <memset>
 8007ade:	e7f5      	b.n	8007acc <_calloc_r+0x14>

08007ae0 <__ascii_mbtowc>:
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	b901      	cbnz	r1, 8007ae6 <__ascii_mbtowc+0x6>
 8007ae4:	a901      	add	r1, sp, #4
 8007ae6:	b142      	cbz	r2, 8007afa <__ascii_mbtowc+0x1a>
 8007ae8:	b14b      	cbz	r3, 8007afe <__ascii_mbtowc+0x1e>
 8007aea:	7813      	ldrb	r3, [r2, #0]
 8007aec:	600b      	str	r3, [r1, #0]
 8007aee:	7812      	ldrb	r2, [r2, #0]
 8007af0:	1e10      	subs	r0, r2, #0
 8007af2:	bf18      	it	ne
 8007af4:	2001      	movne	r0, #1
 8007af6:	b002      	add	sp, #8
 8007af8:	4770      	bx	lr
 8007afa:	4610      	mov	r0, r2
 8007afc:	e7fb      	b.n	8007af6 <__ascii_mbtowc+0x16>
 8007afe:	f06f 0001 	mvn.w	r0, #1
 8007b02:	e7f8      	b.n	8007af6 <__ascii_mbtowc+0x16>

08007b04 <_realloc_r>:
 8007b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b08:	4680      	mov	r8, r0
 8007b0a:	4615      	mov	r5, r2
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	b921      	cbnz	r1, 8007b1a <_realloc_r+0x16>
 8007b10:	4611      	mov	r1, r2
 8007b12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b16:	f7ff b96d 	b.w	8006df4 <_malloc_r>
 8007b1a:	b92a      	cbnz	r2, 8007b28 <_realloc_r+0x24>
 8007b1c:	f7ff f8f8 	bl	8006d10 <_free_r>
 8007b20:	2400      	movs	r4, #0
 8007b22:	4620      	mov	r0, r4
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b28:	f000 f841 	bl	8007bae <_malloc_usable_size_r>
 8007b2c:	4285      	cmp	r5, r0
 8007b2e:	4606      	mov	r6, r0
 8007b30:	d802      	bhi.n	8007b38 <_realloc_r+0x34>
 8007b32:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b36:	d8f4      	bhi.n	8007b22 <_realloc_r+0x1e>
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f7ff f95a 	bl	8006df4 <_malloc_r>
 8007b40:	4607      	mov	r7, r0
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d0ec      	beq.n	8007b20 <_realloc_r+0x1c>
 8007b46:	42b5      	cmp	r5, r6
 8007b48:	462a      	mov	r2, r5
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	bf28      	it	cs
 8007b4e:	4632      	movcs	r2, r6
 8007b50:	f7ff ff86 	bl	8007a60 <memcpy>
 8007b54:	4621      	mov	r1, r4
 8007b56:	4640      	mov	r0, r8
 8007b58:	f7ff f8da 	bl	8006d10 <_free_r>
 8007b5c:	463c      	mov	r4, r7
 8007b5e:	e7e0      	b.n	8007b22 <_realloc_r+0x1e>

08007b60 <__ascii_wctomb>:
 8007b60:	4603      	mov	r3, r0
 8007b62:	4608      	mov	r0, r1
 8007b64:	b141      	cbz	r1, 8007b78 <__ascii_wctomb+0x18>
 8007b66:	2aff      	cmp	r2, #255	@ 0xff
 8007b68:	d904      	bls.n	8007b74 <__ascii_wctomb+0x14>
 8007b6a:	228a      	movs	r2, #138	@ 0x8a
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	4770      	bx	lr
 8007b74:	2001      	movs	r0, #1
 8007b76:	700a      	strb	r2, [r1, #0]
 8007b78:	4770      	bx	lr
	...

08007b7c <fiprintf>:
 8007b7c:	b40e      	push	{r1, r2, r3}
 8007b7e:	b503      	push	{r0, r1, lr}
 8007b80:	4601      	mov	r1, r0
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	4805      	ldr	r0, [pc, #20]	@ (8007b9c <fiprintf+0x20>)
 8007b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	f000 f83d 	bl	8007c0c <_vfiprintf_r>
 8007b92:	b002      	add	sp, #8
 8007b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b98:	b003      	add	sp, #12
 8007b9a:	4770      	bx	lr
 8007b9c:	200000dc 	.word	0x200000dc

08007ba0 <abort>:
 8007ba0:	2006      	movs	r0, #6
 8007ba2:	b508      	push	{r3, lr}
 8007ba4:	f000 fa06 	bl	8007fb4 <raise>
 8007ba8:	2001      	movs	r0, #1
 8007baa:	f7fc fbb4 	bl	8004316 <_exit>

08007bae <_malloc_usable_size_r>:
 8007bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb2:	1f18      	subs	r0, r3, #4
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	bfbc      	itt	lt
 8007bb8:	580b      	ldrlt	r3, [r1, r0]
 8007bba:	18c0      	addlt	r0, r0, r3
 8007bbc:	4770      	bx	lr

08007bbe <__sfputc_r>:
 8007bbe:	6893      	ldr	r3, [r2, #8]
 8007bc0:	b410      	push	{r4}
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	6093      	str	r3, [r2, #8]
 8007bc8:	da07      	bge.n	8007bda <__sfputc_r+0x1c>
 8007bca:	6994      	ldr	r4, [r2, #24]
 8007bcc:	42a3      	cmp	r3, r4
 8007bce:	db01      	blt.n	8007bd4 <__sfputc_r+0x16>
 8007bd0:	290a      	cmp	r1, #10
 8007bd2:	d102      	bne.n	8007bda <__sfputc_r+0x1c>
 8007bd4:	bc10      	pop	{r4}
 8007bd6:	f000 b931 	b.w	8007e3c <__swbuf_r>
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	1c58      	adds	r0, r3, #1
 8007bde:	6010      	str	r0, [r2, #0]
 8007be0:	7019      	strb	r1, [r3, #0]
 8007be2:	4608      	mov	r0, r1
 8007be4:	bc10      	pop	{r4}
 8007be6:	4770      	bx	lr

08007be8 <__sfputs_r>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	4614      	mov	r4, r2
 8007bf0:	18d5      	adds	r5, r2, r3
 8007bf2:	42ac      	cmp	r4, r5
 8007bf4:	d101      	bne.n	8007bfa <__sfputs_r+0x12>
 8007bf6:	2000      	movs	r0, #0
 8007bf8:	e007      	b.n	8007c0a <__sfputs_r+0x22>
 8007bfa:	463a      	mov	r2, r7
 8007bfc:	4630      	mov	r0, r6
 8007bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c02:	f7ff ffdc 	bl	8007bbe <__sfputc_r>
 8007c06:	1c43      	adds	r3, r0, #1
 8007c08:	d1f3      	bne.n	8007bf2 <__sfputs_r+0xa>
 8007c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c0c <_vfiprintf_r>:
 8007c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c10:	460d      	mov	r5, r1
 8007c12:	4614      	mov	r4, r2
 8007c14:	4698      	mov	r8, r3
 8007c16:	4606      	mov	r6, r0
 8007c18:	b09d      	sub	sp, #116	@ 0x74
 8007c1a:	b118      	cbz	r0, 8007c24 <_vfiprintf_r+0x18>
 8007c1c:	6a03      	ldr	r3, [r0, #32]
 8007c1e:	b90b      	cbnz	r3, 8007c24 <_vfiprintf_r+0x18>
 8007c20:	f7fe f8fc 	bl	8005e1c <__sinit>
 8007c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c26:	07d9      	lsls	r1, r3, #31
 8007c28:	d405      	bmi.n	8007c36 <_vfiprintf_r+0x2a>
 8007c2a:	89ab      	ldrh	r3, [r5, #12]
 8007c2c:	059a      	lsls	r2, r3, #22
 8007c2e:	d402      	bmi.n	8007c36 <_vfiprintf_r+0x2a>
 8007c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c32:	f7fe fa0a 	bl	800604a <__retarget_lock_acquire_recursive>
 8007c36:	89ab      	ldrh	r3, [r5, #12]
 8007c38:	071b      	lsls	r3, r3, #28
 8007c3a:	d501      	bpl.n	8007c40 <_vfiprintf_r+0x34>
 8007c3c:	692b      	ldr	r3, [r5, #16]
 8007c3e:	b99b      	cbnz	r3, 8007c68 <_vfiprintf_r+0x5c>
 8007c40:	4629      	mov	r1, r5
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 f938 	bl	8007eb8 <__swsetup_r>
 8007c48:	b170      	cbz	r0, 8007c68 <_vfiprintf_r+0x5c>
 8007c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c4c:	07dc      	lsls	r4, r3, #31
 8007c4e:	d504      	bpl.n	8007c5a <_vfiprintf_r+0x4e>
 8007c50:	f04f 30ff 	mov.w	r0, #4294967295
 8007c54:	b01d      	add	sp, #116	@ 0x74
 8007c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c5a:	89ab      	ldrh	r3, [r5, #12]
 8007c5c:	0598      	lsls	r0, r3, #22
 8007c5e:	d4f7      	bmi.n	8007c50 <_vfiprintf_r+0x44>
 8007c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c62:	f7fe f9f3 	bl	800604c <__retarget_lock_release_recursive>
 8007c66:	e7f3      	b.n	8007c50 <_vfiprintf_r+0x44>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c6c:	2320      	movs	r3, #32
 8007c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c72:	2330      	movs	r3, #48	@ 0x30
 8007c74:	f04f 0901 	mov.w	r9, #1
 8007c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c7c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e28 <_vfiprintf_r+0x21c>
 8007c80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c84:	4623      	mov	r3, r4
 8007c86:	469a      	mov	sl, r3
 8007c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c8c:	b10a      	cbz	r2, 8007c92 <_vfiprintf_r+0x86>
 8007c8e:	2a25      	cmp	r2, #37	@ 0x25
 8007c90:	d1f9      	bne.n	8007c86 <_vfiprintf_r+0x7a>
 8007c92:	ebba 0b04 	subs.w	fp, sl, r4
 8007c96:	d00b      	beq.n	8007cb0 <_vfiprintf_r+0xa4>
 8007c98:	465b      	mov	r3, fp
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4630      	mov	r0, r6
 8007ca0:	f7ff ffa2 	bl	8007be8 <__sfputs_r>
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f000 80a7 	beq.w	8007df8 <_vfiprintf_r+0x1ec>
 8007caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cac:	445a      	add	r2, fp
 8007cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 809f 	beq.w	8007df8 <_vfiprintf_r+0x1ec>
 8007cba:	2300      	movs	r3, #0
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cc4:	f10a 0a01 	add.w	sl, sl, #1
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	9307      	str	r3, [sp, #28]
 8007ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cd2:	4654      	mov	r4, sl
 8007cd4:	2205      	movs	r2, #5
 8007cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cda:	4853      	ldr	r0, [pc, #332]	@ (8007e28 <_vfiprintf_r+0x21c>)
 8007cdc:	f7fe f9b7 	bl	800604e <memchr>
 8007ce0:	9a04      	ldr	r2, [sp, #16]
 8007ce2:	b9d8      	cbnz	r0, 8007d1c <_vfiprintf_r+0x110>
 8007ce4:	06d1      	lsls	r1, r2, #27
 8007ce6:	bf44      	itt	mi
 8007ce8:	2320      	movmi	r3, #32
 8007cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cee:	0713      	lsls	r3, r2, #28
 8007cf0:	bf44      	itt	mi
 8007cf2:	232b      	movmi	r3, #43	@ 0x2b
 8007cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cfe:	d015      	beq.n	8007d2c <_vfiprintf_r+0x120>
 8007d00:	4654      	mov	r4, sl
 8007d02:	2000      	movs	r0, #0
 8007d04:	f04f 0c0a 	mov.w	ip, #10
 8007d08:	9a07      	ldr	r2, [sp, #28]
 8007d0a:	4621      	mov	r1, r4
 8007d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d10:	3b30      	subs	r3, #48	@ 0x30
 8007d12:	2b09      	cmp	r3, #9
 8007d14:	d94b      	bls.n	8007dae <_vfiprintf_r+0x1a2>
 8007d16:	b1b0      	cbz	r0, 8007d46 <_vfiprintf_r+0x13a>
 8007d18:	9207      	str	r2, [sp, #28]
 8007d1a:	e014      	b.n	8007d46 <_vfiprintf_r+0x13a>
 8007d1c:	eba0 0308 	sub.w	r3, r0, r8
 8007d20:	fa09 f303 	lsl.w	r3, r9, r3
 8007d24:	4313      	orrs	r3, r2
 8007d26:	46a2      	mov	sl, r4
 8007d28:	9304      	str	r3, [sp, #16]
 8007d2a:	e7d2      	b.n	8007cd2 <_vfiprintf_r+0xc6>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	1d19      	adds	r1, r3, #4
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	9103      	str	r1, [sp, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bfbb      	ittet	lt
 8007d38:	425b      	neglt	r3, r3
 8007d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d3e:	9307      	strge	r3, [sp, #28]
 8007d40:	9307      	strlt	r3, [sp, #28]
 8007d42:	bfb8      	it	lt
 8007d44:	9204      	strlt	r2, [sp, #16]
 8007d46:	7823      	ldrb	r3, [r4, #0]
 8007d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d4a:	d10a      	bne.n	8007d62 <_vfiprintf_r+0x156>
 8007d4c:	7863      	ldrb	r3, [r4, #1]
 8007d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d50:	d132      	bne.n	8007db8 <_vfiprintf_r+0x1ac>
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	3402      	adds	r4, #2
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	9203      	str	r2, [sp, #12]
 8007d5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e2c <_vfiprintf_r+0x220>
 8007d66:	2203      	movs	r2, #3
 8007d68:	4650      	mov	r0, sl
 8007d6a:	7821      	ldrb	r1, [r4, #0]
 8007d6c:	f7fe f96f 	bl	800604e <memchr>
 8007d70:	b138      	cbz	r0, 8007d82 <_vfiprintf_r+0x176>
 8007d72:	2240      	movs	r2, #64	@ 0x40
 8007d74:	9b04      	ldr	r3, [sp, #16]
 8007d76:	eba0 000a 	sub.w	r0, r0, sl
 8007d7a:	4082      	lsls	r2, r0
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	3401      	adds	r4, #1
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d86:	2206      	movs	r2, #6
 8007d88:	4829      	ldr	r0, [pc, #164]	@ (8007e30 <_vfiprintf_r+0x224>)
 8007d8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d8e:	f7fe f95e 	bl	800604e <memchr>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d03f      	beq.n	8007e16 <_vfiprintf_r+0x20a>
 8007d96:	4b27      	ldr	r3, [pc, #156]	@ (8007e34 <_vfiprintf_r+0x228>)
 8007d98:	bb1b      	cbnz	r3, 8007de2 <_vfiprintf_r+0x1d6>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	3307      	adds	r3, #7
 8007d9e:	f023 0307 	bic.w	r3, r3, #7
 8007da2:	3308      	adds	r3, #8
 8007da4:	9303      	str	r3, [sp, #12]
 8007da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da8:	443b      	add	r3, r7
 8007daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dac:	e76a      	b.n	8007c84 <_vfiprintf_r+0x78>
 8007dae:	460c      	mov	r4, r1
 8007db0:	2001      	movs	r0, #1
 8007db2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007db6:	e7a8      	b.n	8007d0a <_vfiprintf_r+0xfe>
 8007db8:	2300      	movs	r3, #0
 8007dba:	f04f 0c0a 	mov.w	ip, #10
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	3401      	adds	r4, #1
 8007dc2:	9305      	str	r3, [sp, #20]
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dca:	3a30      	subs	r2, #48	@ 0x30
 8007dcc:	2a09      	cmp	r2, #9
 8007dce:	d903      	bls.n	8007dd8 <_vfiprintf_r+0x1cc>
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0c6      	beq.n	8007d62 <_vfiprintf_r+0x156>
 8007dd4:	9105      	str	r1, [sp, #20]
 8007dd6:	e7c4      	b.n	8007d62 <_vfiprintf_r+0x156>
 8007dd8:	4604      	mov	r4, r0
 8007dda:	2301      	movs	r3, #1
 8007ddc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007de0:	e7f0      	b.n	8007dc4 <_vfiprintf_r+0x1b8>
 8007de2:	ab03      	add	r3, sp, #12
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	462a      	mov	r2, r5
 8007de8:	4630      	mov	r0, r6
 8007dea:	4b13      	ldr	r3, [pc, #76]	@ (8007e38 <_vfiprintf_r+0x22c>)
 8007dec:	a904      	add	r1, sp, #16
 8007dee:	f7fd fbcb 	bl	8005588 <_printf_float>
 8007df2:	4607      	mov	r7, r0
 8007df4:	1c78      	adds	r0, r7, #1
 8007df6:	d1d6      	bne.n	8007da6 <_vfiprintf_r+0x19a>
 8007df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dfa:	07d9      	lsls	r1, r3, #31
 8007dfc:	d405      	bmi.n	8007e0a <_vfiprintf_r+0x1fe>
 8007dfe:	89ab      	ldrh	r3, [r5, #12]
 8007e00:	059a      	lsls	r2, r3, #22
 8007e02:	d402      	bmi.n	8007e0a <_vfiprintf_r+0x1fe>
 8007e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e06:	f7fe f921 	bl	800604c <__retarget_lock_release_recursive>
 8007e0a:	89ab      	ldrh	r3, [r5, #12]
 8007e0c:	065b      	lsls	r3, r3, #25
 8007e0e:	f53f af1f 	bmi.w	8007c50 <_vfiprintf_r+0x44>
 8007e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e14:	e71e      	b.n	8007c54 <_vfiprintf_r+0x48>
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	4b06      	ldr	r3, [pc, #24]	@ (8007e38 <_vfiprintf_r+0x22c>)
 8007e20:	a904      	add	r1, sp, #16
 8007e22:	f7fd fe4f 	bl	8005ac4 <_printf_i>
 8007e26:	e7e4      	b.n	8007df2 <_vfiprintf_r+0x1e6>
 8007e28:	08008528 	.word	0x08008528
 8007e2c:	0800852e 	.word	0x0800852e
 8007e30:	08008532 	.word	0x08008532
 8007e34:	08005589 	.word	0x08005589
 8007e38:	08007be9 	.word	0x08007be9

08007e3c <__swbuf_r>:
 8007e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3e:	460e      	mov	r6, r1
 8007e40:	4614      	mov	r4, r2
 8007e42:	4605      	mov	r5, r0
 8007e44:	b118      	cbz	r0, 8007e4e <__swbuf_r+0x12>
 8007e46:	6a03      	ldr	r3, [r0, #32]
 8007e48:	b90b      	cbnz	r3, 8007e4e <__swbuf_r+0x12>
 8007e4a:	f7fd ffe7 	bl	8005e1c <__sinit>
 8007e4e:	69a3      	ldr	r3, [r4, #24]
 8007e50:	60a3      	str	r3, [r4, #8]
 8007e52:	89a3      	ldrh	r3, [r4, #12]
 8007e54:	071a      	lsls	r2, r3, #28
 8007e56:	d501      	bpl.n	8007e5c <__swbuf_r+0x20>
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	b943      	cbnz	r3, 8007e6e <__swbuf_r+0x32>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 f82a 	bl	8007eb8 <__swsetup_r>
 8007e64:	b118      	cbz	r0, 8007e6e <__swbuf_r+0x32>
 8007e66:	f04f 37ff 	mov.w	r7, #4294967295
 8007e6a:	4638      	mov	r0, r7
 8007e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	6922      	ldr	r2, [r4, #16]
 8007e72:	b2f6      	uxtb	r6, r6
 8007e74:	1a98      	subs	r0, r3, r2
 8007e76:	6963      	ldr	r3, [r4, #20]
 8007e78:	4637      	mov	r7, r6
 8007e7a:	4283      	cmp	r3, r0
 8007e7c:	dc05      	bgt.n	8007e8a <__swbuf_r+0x4e>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f7ff fd9b 	bl	80079bc <_fflush_r>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d1ed      	bne.n	8007e66 <__swbuf_r+0x2a>
 8007e8a:	68a3      	ldr	r3, [r4, #8]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	60a3      	str	r3, [r4, #8]
 8007e90:	6823      	ldr	r3, [r4, #0]
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	6022      	str	r2, [r4, #0]
 8007e96:	701e      	strb	r6, [r3, #0]
 8007e98:	6962      	ldr	r2, [r4, #20]
 8007e9a:	1c43      	adds	r3, r0, #1
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d004      	beq.n	8007eaa <__swbuf_r+0x6e>
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	07db      	lsls	r3, r3, #31
 8007ea4:	d5e1      	bpl.n	8007e6a <__swbuf_r+0x2e>
 8007ea6:	2e0a      	cmp	r6, #10
 8007ea8:	d1df      	bne.n	8007e6a <__swbuf_r+0x2e>
 8007eaa:	4621      	mov	r1, r4
 8007eac:	4628      	mov	r0, r5
 8007eae:	f7ff fd85 	bl	80079bc <_fflush_r>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d0d9      	beq.n	8007e6a <__swbuf_r+0x2e>
 8007eb6:	e7d6      	b.n	8007e66 <__swbuf_r+0x2a>

08007eb8 <__swsetup_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4b29      	ldr	r3, [pc, #164]	@ (8007f60 <__swsetup_r+0xa8>)
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	b118      	cbz	r0, 8007ecc <__swsetup_r+0x14>
 8007ec4:	6a03      	ldr	r3, [r0, #32]
 8007ec6:	b90b      	cbnz	r3, 8007ecc <__swsetup_r+0x14>
 8007ec8:	f7fd ffa8 	bl	8005e1c <__sinit>
 8007ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ed0:	0719      	lsls	r1, r3, #28
 8007ed2:	d422      	bmi.n	8007f1a <__swsetup_r+0x62>
 8007ed4:	06da      	lsls	r2, r3, #27
 8007ed6:	d407      	bmi.n	8007ee8 <__swsetup_r+0x30>
 8007ed8:	2209      	movs	r2, #9
 8007eda:	602a      	str	r2, [r5, #0]
 8007edc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	e033      	b.n	8007f50 <__swsetup_r+0x98>
 8007ee8:	0758      	lsls	r0, r3, #29
 8007eea:	d512      	bpl.n	8007f12 <__swsetup_r+0x5a>
 8007eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007eee:	b141      	cbz	r1, 8007f02 <__swsetup_r+0x4a>
 8007ef0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	d002      	beq.n	8007efe <__swsetup_r+0x46>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7fe ff09 	bl	8006d10 <_free_r>
 8007efe:	2300      	movs	r3, #0
 8007f00:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6063      	str	r3, [r4, #4]
 8007f0e:	6923      	ldr	r3, [r4, #16]
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	89a3      	ldrh	r3, [r4, #12]
 8007f14:	f043 0308 	orr.w	r3, r3, #8
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	b94b      	cbnz	r3, 8007f32 <__swsetup_r+0x7a>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f28:	d003      	beq.n	8007f32 <__swsetup_r+0x7a>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f000 f882 	bl	8008036 <__smakebuf_r>
 8007f32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f36:	f013 0201 	ands.w	r2, r3, #1
 8007f3a:	d00a      	beq.n	8007f52 <__swsetup_r+0x9a>
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	60a2      	str	r2, [r4, #8]
 8007f40:	6962      	ldr	r2, [r4, #20]
 8007f42:	4252      	negs	r2, r2
 8007f44:	61a2      	str	r2, [r4, #24]
 8007f46:	6922      	ldr	r2, [r4, #16]
 8007f48:	b942      	cbnz	r2, 8007f5c <__swsetup_r+0xa4>
 8007f4a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f4e:	d1c5      	bne.n	8007edc <__swsetup_r+0x24>
 8007f50:	bd38      	pop	{r3, r4, r5, pc}
 8007f52:	0799      	lsls	r1, r3, #30
 8007f54:	bf58      	it	pl
 8007f56:	6962      	ldrpl	r2, [r4, #20]
 8007f58:	60a2      	str	r2, [r4, #8]
 8007f5a:	e7f4      	b.n	8007f46 <__swsetup_r+0x8e>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	e7f7      	b.n	8007f50 <__swsetup_r+0x98>
 8007f60:	200000dc 	.word	0x200000dc

08007f64 <_raise_r>:
 8007f64:	291f      	cmp	r1, #31
 8007f66:	b538      	push	{r3, r4, r5, lr}
 8007f68:	4605      	mov	r5, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	d904      	bls.n	8007f78 <_raise_r+0x14>
 8007f6e:	2316      	movs	r3, #22
 8007f70:	6003      	str	r3, [r0, #0]
 8007f72:	f04f 30ff 	mov.w	r0, #4294967295
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f7a:	b112      	cbz	r2, 8007f82 <_raise_r+0x1e>
 8007f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f80:	b94b      	cbnz	r3, 8007f96 <_raise_r+0x32>
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 f830 	bl	8007fe8 <_getpid_r>
 8007f88:	4622      	mov	r2, r4
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f92:	f000 b817 	b.w	8007fc4 <_kill_r>
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d00a      	beq.n	8007fb0 <_raise_r+0x4c>
 8007f9a:	1c59      	adds	r1, r3, #1
 8007f9c:	d103      	bne.n	8007fa6 <_raise_r+0x42>
 8007f9e:	2316      	movs	r3, #22
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	e7e7      	b.n	8007f76 <_raise_r+0x12>
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4620      	mov	r0, r4
 8007faa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007fae:	4798      	blx	r3
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	e7e0      	b.n	8007f76 <_raise_r+0x12>

08007fb4 <raise>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	@ (8007fc0 <raise+0xc>)
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f7ff bfd3 	b.w	8007f64 <_raise_r>
 8007fbe:	bf00      	nop
 8007fc0:	200000dc 	.word	0x200000dc

08007fc4 <_kill_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	4d06      	ldr	r5, [pc, #24]	@ (8007fe4 <_kill_r+0x20>)
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	4611      	mov	r1, r2
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	f7fc f990 	bl	80042f6 <_kill>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	d102      	bne.n	8007fe0 <_kill_r+0x1c>
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	b103      	cbz	r3, 8007fe0 <_kill_r+0x1c>
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	bd38      	pop	{r3, r4, r5, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200008dc 	.word	0x200008dc

08007fe8 <_getpid_r>:
 8007fe8:	f7fc b97e 	b.w	80042e8 <_getpid>

08007fec <__swhatbuf_r>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	460c      	mov	r4, r1
 8007ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff4:	4615      	mov	r5, r2
 8007ff6:	2900      	cmp	r1, #0
 8007ff8:	461e      	mov	r6, r3
 8007ffa:	b096      	sub	sp, #88	@ 0x58
 8007ffc:	da0c      	bge.n	8008018 <__swhatbuf_r+0x2c>
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	2100      	movs	r1, #0
 8008002:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008006:	bf14      	ite	ne
 8008008:	2340      	movne	r3, #64	@ 0x40
 800800a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800800e:	2000      	movs	r0, #0
 8008010:	6031      	str	r1, [r6, #0]
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	b016      	add	sp, #88	@ 0x58
 8008016:	bd70      	pop	{r4, r5, r6, pc}
 8008018:	466a      	mov	r2, sp
 800801a:	f000 f849 	bl	80080b0 <_fstat_r>
 800801e:	2800      	cmp	r0, #0
 8008020:	dbed      	blt.n	8007ffe <__swhatbuf_r+0x12>
 8008022:	9901      	ldr	r1, [sp, #4]
 8008024:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008028:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800802c:	4259      	negs	r1, r3
 800802e:	4159      	adcs	r1, r3
 8008030:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008034:	e7eb      	b.n	800800e <__swhatbuf_r+0x22>

08008036 <__smakebuf_r>:
 8008036:	898b      	ldrh	r3, [r1, #12]
 8008038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800803a:	079d      	lsls	r5, r3, #30
 800803c:	4606      	mov	r6, r0
 800803e:	460c      	mov	r4, r1
 8008040:	d507      	bpl.n	8008052 <__smakebuf_r+0x1c>
 8008042:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	6123      	str	r3, [r4, #16]
 800804a:	2301      	movs	r3, #1
 800804c:	6163      	str	r3, [r4, #20]
 800804e:	b003      	add	sp, #12
 8008050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008052:	466a      	mov	r2, sp
 8008054:	ab01      	add	r3, sp, #4
 8008056:	f7ff ffc9 	bl	8007fec <__swhatbuf_r>
 800805a:	9f00      	ldr	r7, [sp, #0]
 800805c:	4605      	mov	r5, r0
 800805e:	4639      	mov	r1, r7
 8008060:	4630      	mov	r0, r6
 8008062:	f7fe fec7 	bl	8006df4 <_malloc_r>
 8008066:	b948      	cbnz	r0, 800807c <__smakebuf_r+0x46>
 8008068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800806c:	059a      	lsls	r2, r3, #22
 800806e:	d4ee      	bmi.n	800804e <__smakebuf_r+0x18>
 8008070:	f023 0303 	bic.w	r3, r3, #3
 8008074:	f043 0302 	orr.w	r3, r3, #2
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	e7e2      	b.n	8008042 <__smakebuf_r+0xc>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008086:	81a3      	strh	r3, [r4, #12]
 8008088:	9b01      	ldr	r3, [sp, #4]
 800808a:	6020      	str	r0, [r4, #0]
 800808c:	b15b      	cbz	r3, 80080a6 <__smakebuf_r+0x70>
 800808e:	4630      	mov	r0, r6
 8008090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008094:	f000 f81e 	bl	80080d4 <_isatty_r>
 8008098:	b128      	cbz	r0, 80080a6 <__smakebuf_r+0x70>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	f023 0303 	bic.w	r3, r3, #3
 80080a0:	f043 0301 	orr.w	r3, r3, #1
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	431d      	orrs	r5, r3
 80080aa:	81a5      	strh	r5, [r4, #12]
 80080ac:	e7cf      	b.n	800804e <__smakebuf_r+0x18>
	...

080080b0 <_fstat_r>:
 80080b0:	b538      	push	{r3, r4, r5, lr}
 80080b2:	2300      	movs	r3, #0
 80080b4:	4d06      	ldr	r5, [pc, #24]	@ (80080d0 <_fstat_r+0x20>)
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	4611      	mov	r1, r2
 80080bc:	602b      	str	r3, [r5, #0]
 80080be:	f7fc f979 	bl	80043b4 <_fstat>
 80080c2:	1c43      	adds	r3, r0, #1
 80080c4:	d102      	bne.n	80080cc <_fstat_r+0x1c>
 80080c6:	682b      	ldr	r3, [r5, #0]
 80080c8:	b103      	cbz	r3, 80080cc <_fstat_r+0x1c>
 80080ca:	6023      	str	r3, [r4, #0]
 80080cc:	bd38      	pop	{r3, r4, r5, pc}
 80080ce:	bf00      	nop
 80080d0:	200008dc 	.word	0x200008dc

080080d4 <_isatty_r>:
 80080d4:	b538      	push	{r3, r4, r5, lr}
 80080d6:	2300      	movs	r3, #0
 80080d8:	4d05      	ldr	r5, [pc, #20]	@ (80080f0 <_isatty_r+0x1c>)
 80080da:	4604      	mov	r4, r0
 80080dc:	4608      	mov	r0, r1
 80080de:	602b      	str	r3, [r5, #0]
 80080e0:	f7fc f977 	bl	80043d2 <_isatty>
 80080e4:	1c43      	adds	r3, r0, #1
 80080e6:	d102      	bne.n	80080ee <_isatty_r+0x1a>
 80080e8:	682b      	ldr	r3, [r5, #0]
 80080ea:	b103      	cbz	r3, 80080ee <_isatty_r+0x1a>
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	200008dc 	.word	0x200008dc

080080f4 <_init>:
 80080f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f6:	bf00      	nop
 80080f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fa:	bc08      	pop	{r3}
 80080fc:	469e      	mov	lr, r3
 80080fe:	4770      	bx	lr

08008100 <_fini>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr
