
MEASURE_POWER_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009104  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08009218  08009218  0000a218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009790  08009790  0000b294  2**0
                  CONTENTS
  4 .ARM          00000008  08009790  08009790  0000a790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009798  08009798  0000b294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009798  08009798  0000a798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800979c  0800979c  0000a79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000294  20000000  080097a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc4  20000294  08009a34  0000b294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000f58  08009a34  0000bf58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001291d  00000000  00000000  0000b2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000431f  00000000  00000000  0001dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00021f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e05  00000000  00000000  00023208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dbf3  00000000  00000000  0002400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001690d  00000000  00000000  00041c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a84  00000000  00000000  0005850d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0f91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e08  00000000  00000000  000f0fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f6ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000294 	.word	0x20000294
 800012c:	00000000 	.word	0x00000000
 8000130:	080091fc 	.word	0x080091fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000298 	.word	0x20000298
 800014c:	080091fc 	.word	0x080091fc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2uiz>:
 80010e4:	0042      	lsls	r2, r0, #1
 80010e6:	d20e      	bcs.n	8001106 <__aeabi_f2uiz+0x22>
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30b      	bcc.n	8001106 <__aeabi_f2uiz+0x22>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d409      	bmi.n	800110c <__aeabi_f2uiz+0x28>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	fa23 f002 	lsr.w	r0, r3, r2
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2uiz+0x32>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d102      	bne.n	800111c <__aeabi_f2uiz+0x38>
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	4770      	bx	lr
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  char          *pcChar;
  uint_fast8_t   ui8Argc;
  bool           bFindArg = true;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]

  /**
   * Initialize the argument counter, and point to the beginning of the
   * command line string.
   */
  ui8Argc = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  pcChar  = pcCmdLine;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	617b      	str	r3, [r7, #20]

  /**
   * Advance through the command line until a zero character is found.
   */
  while (*pcChar)
 8001138:	e01f      	b.n	800117a <CmdLineProcess+0x56>
  {
    /**
     * If there is a space, then replace it with a zero, and set the flag
     * to search for the next argument.
     */
    if (*pcChar == ' ')
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d105      	bne.n	800114e <CmdLineProcess+0x2a>
    {
      *pcChar  = 0;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
      bFindArg = true;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e012      	b.n	8001174 <CmdLineProcess+0x50>
    {
      /**
       * If bFindArg is set, then that means we are looking for the start
       * of the next argument.
       */
      if (bFindArg)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00f      	beq.n	8001174 <CmdLineProcess+0x50>
        /**
         * As long as the maximum number of arguments has not been
         * reached, then save the pointer to the start of this new arg
         * in the argv array, and increment the count of args, argc.
         */
        if (ui8Argc < CMDLINE_MAX_ARGS)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	2b07      	cmp	r3, #7
 8001158:	d80a      	bhi.n	8001170 <CmdLineProcess+0x4c>
        {
          g_ppcArgv[ui8Argc] = pcChar;
 800115a:	491d      	ldr	r1, [pc, #116]	@ (80011d0 <CmdLineProcess+0xac>)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          ui8Argc++;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	3301      	adds	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
          bFindArg = false;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <CmdLineProcess+0x50>
         * The maximum number of arguments has been reached so return
         * the error.
         */
        else
        {
          return (CMDLINE_TOO_MANY_ARGS);
 8001170:	2302      	movs	r3, #2
 8001172:	e028      	b.n	80011c6 <CmdLineProcess+0xa2>
      }
    }
    /**
     * Advance to the next character in the command line.
     */
    pcChar++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (*pcChar)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1db      	bne.n	800113a <CmdLineProcess+0x16>
  }

  /**
   * If one or more arguments was found, then process the command.
   */
  if (ui8Argc)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01d      	beq.n	80011c4 <CmdLineProcess+0xa0>
  {
    /**
     * Start at the beginning of the command table, to look for a matching
     * command.
     */
    psCmdEntry = &g_psCmdTable[0];
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <CmdLineProcess+0xb0>)
 800118a:	60bb      	str	r3, [r7, #8]

    /**
     * Search through the command table until a null command string is
     * found, which marks the end of the table.
     */
    while (psCmdEntry->pcCmd)
 800118c:	e016      	b.n	80011bc <CmdLineProcess+0x98>
      /**
       * If this command entry command string matches argv[0], then call
       * the function for this command, passing the command line
       * arguments.
       */
      if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <CmdLineProcess+0xac>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7fe ffd9 	bl	8000150 <strcmp>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d108      	bne.n	80011b6 <CmdLineProcess+0x92>
      {
        return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4909      	ldr	r1, [pc, #36]	@ (80011d0 <CmdLineProcess+0xac>)
 80011ac:	4610      	mov	r0, r2
 80011ae:	4798      	blx	r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	e007      	b.n	80011c6 <CmdLineProcess+0xa2>
      }
      /**
       * Not found, so advance to the next entry.
       */
      psCmdEntry++;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	330c      	adds	r3, #12
 80011ba:	60bb      	str	r3, [r7, #8]
    while (psCmdEntry->pcCmd)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e4      	bne.n	800118e <CmdLineProcess+0x6a>

  /**
   * Fall through to here means that no matching command was found, so return
   * an error.
   */
  return (CMDLINE_BAD_CMD);
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002b0 	.word	0x200002b0
 80011d4:	20000028 	.word	0x20000028

080011d8 <APP_COMMAND_Init>:
 * The function `APP_COMMAND_Init` initializes UART configuration and sends a
 * string message for LLC control firmware.
 */
void
APP_COMMAND_Init (void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uart_cfg_cml = (uart_cfg_t *)&s_data_system.s_uart_cmd;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011de:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <APP_COMMAND_Init+0x34>)
 80011e0:	601a      	str	r2, [r3, #0]
  BSP_UART_Config(uart_cfg_cml, USART3, USART3_IRQn);
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2227      	movs	r2, #39	@ 0x27
 80011e8:	4909      	ldr	r1, [pc, #36]	@ (8001210 <APP_COMMAND_Init+0x38>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fd5b 	bl	8002ca6 <BSP_UART_Config>
  BSP_UART_SendString(uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4907      	ldr	r1, [pc, #28]	@ (8001214 <APP_COMMAND_Init+0x3c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fdc2 	bl	8002d80 <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <APP_COMMAND_Init+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200003d4 	.word	0x200003d4
 800120c:	20000a3c 	.word	0x20000a3c
 8001210:	40004800 	.word	0x40004800
 8001214:	0800935c 	.word	0x0800935c
 8001218:	200003d3 	.word	0x200003d3

0800121c <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 8001220:	4902      	ldr	r1, [pc, #8]	@ (800122c <APP_COMMAND_CreateTask+0x10>)
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <APP_COMMAND_CreateTask+0x14>)
 8001224:	f004 ffde 	bl	80061e4 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000001c 	.word	0x2000001c
 8001230:	20000018 	.word	0x20000018

08001234 <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(uart_cfg_cml, "\nAvailable commands\r\n");
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4918      	ldr	r1, [pc, #96]	@ (80012a4 <APP_COMMAND_Help+0x70>)
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fd9b 	bl	8002d80 <BSP_UART_SendString>
  BSP_UART_SendString(uart_cfg_cml, "------------------\r\n");
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4916      	ldr	r1, [pc, #88]	@ (80012a8 <APP_COMMAND_Help+0x74>)
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fd95 	bl	8002d80 <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <APP_COMMAND_Help+0x78>)
 8001258:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 800125a:	e018      	b.n	800128e <APP_COMMAND_Help+0x5a>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcCmd);
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f001 fd8a 	bl	8002d80 <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcHelp);
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f001 fd82 	bl	8002d80 <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, "\r\n");
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	490b      	ldr	r1, [pc, #44]	@ (80012b0 <APP_COMMAND_Help+0x7c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fd7c 	bl	8002d80 <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	330c      	adds	r3, #12
 800128c:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e2      	bne.n	800125c <APP_COMMAND_Help+0x28>
  }

  return (CMDLINE_OK);
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200003d4 	.word	0x200003d4
 80012a4:	08009378 	.word	0x08009378
 80012a8:	08009390 	.word	0x08009390
 80012ac:	20000028 	.word	0x20000028
 80012b0:	080093a8 	.word	0x080093a8

080012b4 <APP_COMMAND_ReadVoltage>:

int
APP_COMMAND_ReadVoltage (int argc, char *argv[])
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dc01      	bgt.n	80012c8 <APP_COMMAND_ReadVoltage+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e01a      	b.n	80012fe <APP_COMMAND_ReadVoltage+0x4a>
  }
  if (argc > 1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	dd01      	ble.n	80012d2 <APP_COMMAND_ReadVoltage+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80012ce:	2302      	movs	r3, #2
 80012d0:	e015      	b.n	80012fe <APP_COMMAND_ReadVoltage+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "\n\rVoltage: %.2f\n\r", s_data_system.f_voltage);
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <APP_COMMAND_ReadVoltage+0x54>)
 80012d4:	f8d3 3870 	ldr.w	r3, [r3, #2160]	@ 0x870
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8af 	bl	800043c <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	f107 0008 	add.w	r0, r7, #8
 80012e6:	4909      	ldr	r1, [pc, #36]	@ (800130c <APP_COMMAND_ReadVoltage+0x58>)
 80012e8:	f005 fe54 	bl	8006f94 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <APP_COMMAND_ReadVoltage+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f107 0208 	add.w	r2, r7, #8
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fd42 	bl	8002d80 <BSP_UART_SendString>

  return (CMDLINE_OK);
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3728      	adds	r7, #40	@ 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200003ec 	.word	0x200003ec
 800130c:	080093ac 	.word	0x080093ac
 8001310:	200003d4 	.word	0x200003d4

08001314 <APP_COMMAND_ReadCurrent>:

int
APP_COMMAND_ReadCurrent (int argc, char *argv[])
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dc01      	bgt.n	8001328 <APP_COMMAND_ReadCurrent+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001324:	2303      	movs	r3, #3
 8001326:	e01a      	b.n	800135e <APP_COMMAND_ReadCurrent+0x4a>
  }
  if (argc > 1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b01      	cmp	r3, #1
 800132c:	dd01      	ble.n	8001332 <APP_COMMAND_ReadCurrent+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800132e:	2302      	movs	r3, #2
 8001330:	e015      	b.n	800135e <APP_COMMAND_ReadCurrent+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "\n\rCurrent: %.2f\n\r", s_data_system.f_current);
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <APP_COMMAND_ReadCurrent+0x54>)
 8001334:	f8d3 3874 	ldr.w	r3, [r3, #2164]	@ 0x874
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f87f 	bl	800043c <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	f107 0008 	add.w	r0, r7, #8
 8001346:	4909      	ldr	r1, [pc, #36]	@ (800136c <APP_COMMAND_ReadCurrent+0x58>)
 8001348:	f005 fe24 	bl	8006f94 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <APP_COMMAND_ReadCurrent+0x5c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f107 0208 	add.w	r2, r7, #8
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fd12 	bl	8002d80 <BSP_UART_SendString>

  return (CMDLINE_OK);
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	@ 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200003ec 	.word	0x200003ec
 800136c:	080093c0 	.word	0x080093c0
 8001370:	200003d4 	.word	0x200003d4

08001374 <APP_COMMAND_ReadPF>:

int
APP_COMMAND_ReadPF (int argc, char *argv[])
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dc01      	bgt.n	8001388 <APP_COMMAND_ReadPF+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001384:	2303      	movs	r3, #3
 8001386:	e01a      	b.n	80013be <APP_COMMAND_ReadPF+0x4a>
  }
  if (argc > 1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	dd01      	ble.n	8001392 <APP_COMMAND_ReadPF+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800138e:	2302      	movs	r3, #2
 8001390:	e015      	b.n	80013be <APP_COMMAND_ReadPF+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "\n\rPOWER FACTOR: %.2f\n\r", s_data_system.f_delta_T_PF);
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <APP_COMMAND_ReadPF+0x54>)
 8001394:	f8d3 3878 	ldr.w	r3, [r3, #2168]	@ 0x878
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f84f 	bl	800043c <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	f107 0008 	add.w	r0, r7, #8
 80013a6:	4909      	ldr	r1, [pc, #36]	@ (80013cc <APP_COMMAND_ReadPF+0x58>)
 80013a8:	f005 fdf4 	bl	8006f94 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <APP_COMMAND_ReadPF+0x5c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f107 0208 	add.w	r2, r7, #8
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 fce2 	bl	8002d80 <BSP_UART_SendString>

  return (CMDLINE_OK);
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200003ec 	.word	0x200003ec
 80013cc:	080093d4 	.word	0x080093d4
 80013d0:	200003d4 	.word	0x200003d4

080013d4 <APP_COMMAND_TaskUpdate>:
 * processes commands based on the received data, and sends responses back
 * through UART.
 */
static void
APP_COMMAND_TaskUpdate (void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80013da:	e061      	b.n	80014a0 <APP_COMMAND_TaskUpdate+0xcc>
  {
    rxData = BSP_UART_ReadChar(uart_cfg_cml);
 80013dc:	4b37      	ldr	r3, [pc, #220]	@ (80014bc <APP_COMMAND_TaskUpdate+0xe8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fce4 	bl	8002dae <BSP_UART_ReadChar>
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(uart_cfg_cml, rxData);
 80013ea:	4b34      	ldr	r3, [pc, #208]	@ (80014bc <APP_COMMAND_TaskUpdate+0xe8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fc8c 	bl	8002d10 <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b0d      	cmp	r3, #13
 80013fc:	d002      	beq.n	8001404 <APP_COMMAND_TaskUpdate+0x30>
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d130      	bne.n	8001466 <APP_COMMAND_TaskUpdate+0x92>
    {
      if (s_commandBufferIndex > 0)
 8001404:	4b2e      	ldr	r3, [pc, #184]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d025      	beq.n	8001458 <APP_COMMAND_TaskUpdate+0x84>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 800140c:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b2c      	ldr	r3, [pc, #176]	@ (80014c4 <APP_COMMAND_TaskUpdate+0xf0>)
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]
        retVal               = CmdLineProcess(s_commandBuffer);
 8001418:	482a      	ldr	r0, [pc, #168]	@ (80014c4 <APP_COMMAND_TaskUpdate+0xf0>)
 800141a:	f7ff fe83 	bl	8001124 <CmdLineProcess>
 800141e:	4603      	mov	r3, r0
 8001420:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]

        // Send status command in terminal.
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001428:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <APP_COMMAND_TaskUpdate+0xe8>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4926      	ldr	r1, [pc, #152]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fca6 	bl	8002d80 <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, ErrorCode[retVal]);
 8001434:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <APP_COMMAND_TaskUpdate+0xe8>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800143c:	4923      	ldr	r1, [pc, #140]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 800143e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f001 fc9b 	bl	8002d80 <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, "> ");
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <APP_COMMAND_TaskUpdate+0xe8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4920      	ldr	r1, [pc, #128]	@ (80014d0 <APP_COMMAND_TaskUpdate+0xfc>)
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fc95 	bl	8002d80 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001456:	e023      	b.n	80014a0 <APP_COMMAND_TaskUpdate+0xcc>
      }
      else
      {
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <APP_COMMAND_TaskUpdate+0xe8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	491a      	ldr	r1, [pc, #104]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 800145e:	4618      	mov	r0, r3
 8001460:	f001 fc8e 	bl	8002d80 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001464:	e01c      	b.n	80014a0 <APP_COMMAND_TaskUpdate+0xcc>
      }
    }
    else if ((rxData == 8)
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b08      	cmp	r3, #8
 800146a:	d002      	beq.n	8001472 <APP_COMMAND_TaskUpdate+0x9e>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001470:	d10a      	bne.n	8001488 <APP_COMMAND_TaskUpdate+0xb4>
    {
      if (s_commandBufferIndex > 0)
 8001472:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d012      	beq.n	80014a0 <APP_COMMAND_TaskUpdate+0xcc>
      {
        s_commandBufferIndex--;
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3b01      	subs	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 8001484:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 8001486:	e00b      	b.n	80014a0 <APP_COMMAND_TaskUpdate+0xcc>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 8001488:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
 800148e:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <APP_COMMAND_TaskUpdate+0xf0>)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 8001494:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <APP_COMMAND_TaskUpdate+0xec>)
 800149e:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <APP_COMMAND_TaskUpdate+0xe8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fc21 	bl	8002cec <BSP_UART_IsAvailableDataReceive>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d195      	bne.n	80013dc <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003d4 	.word	0x200003d4
 80014c0:	200003d3 	.word	0x200003d3
 80014c4:	200002d4 	.word	0x200002d4
 80014c8:	080093ec 	.word	0x080093ec
 80014cc:	20000000 	.word	0x20000000
 80014d0:	080093f4 	.word	0x080093f4

080014d4 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4013      	ands	r3, r2
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	bf0c      	ite	eq
 80014ea:	2301      	moveq	r3, #1
 80014ec:	2300      	movne	r3, #0
 80014ee:	b2db      	uxtb	r3, r3
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40010400 	.word	0x40010400

08001500 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001508:	4a03      	ldr	r2, [pc, #12]	@ (8001518 <LL_EXTI_ClearFlag_0_31+0x18>)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6153      	str	r3, [r2, #20]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	40010400 	.word	0x40010400

0800151c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f043 0201 	orr.w	r2, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f023 0201 	bic.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	601a      	str	r2, [r3, #0]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <LL_TIM_IsEnabledCounter+0x18>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <LL_TIM_IsEnabledCounter+0x1a>
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <APP_CALCULATOR_PF_CreateTask>:
 * The function APP_CALCULATOR_PF_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_CALCULATOR_PF_CreateTask (void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 80015b0:	4902      	ldr	r1, [pc, #8]	@ (80015bc <APP_CALCULATOR_PF_CreateTask+0x10>)
 80015b2:	4803      	ldr	r0, [pc, #12]	@ (80015c0 <APP_CALCULATOR_PF_CreateTask+0x14>)
 80015b4:	f004 fe16 	bl	80061e4 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000005c 	.word	0x2000005c
 80015c0:	20000058 	.word	0x20000058

080015c4 <APP_CALCULATOR_PF_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_CALCULATOR_PF_Init (void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_calculator_pf.p_PF_buffer     = &s_data_system.s_PF_buffer;
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <APP_CALCULATOR_PF_Init+0x30>)
 80015ca:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <APP_CALCULATOR_PF_Init+0x34>)
 80015cc:	605a      	str	r2, [r3, #4]
  s_calculator_pf.p_PF_buffer_irq = &s_data_system.s_PF_buffer_irq;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <APP_CALCULATOR_PF_Init+0x30>)
 80015d0:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <APP_CALCULATOR_PF_Init+0x38>)
 80015d2:	601a      	str	r2, [r3, #0]
  s_calculator_pf.p_delta_T       = &s_data_system.f_delta_T_PF;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <APP_CALCULATOR_PF_Init+0x30>)
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <APP_CALCULATOR_PF_Init+0x3c>)
 80015d8:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer);
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <APP_CALCULATOR_PF_Init+0x30>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	f004 fd38 	bl	8006054 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 80015e4:	4b03      	ldr	r3, [pc, #12]	@ (80015f4 <APP_CALCULATOR_PF_Init+0x30>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f004 fd33 	bl	8006054 <RING_BUFFER_Init>
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200003d8 	.word	0x200003d8
 80015f8:	200004f8 	.word	0x200004f8
 80015fc:	200003ec 	.word	0x200003ec
 8001600:	20000c64 	.word	0x20000c64

08001604 <APP_CALCULATOR_PF_EXTI_IRQHandler>:
 * The function `APP_CALCULATOR_PF_EXTI_IRQHandler` handles EXTI interrupts for
 * lines 5 and 6, updating a buffer with timer values.
 */
void
APP_CALCULATOR_PF_EXTI_IRQHandler (void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001608:	2020      	movs	r0, #32
 800160a:	f7ff ff63 	bl	80014d4 <LL_EXTI_IsActiveFlag_0_31>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d04b      	beq.n	80016ac <APP_CALCULATOR_PF_EXTI_IRQHandler+0xa8>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001614:	2020      	movs	r0, #32
 8001616:	f7ff ff73 	bl	8001500 <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 800161a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800161e:	f7ff ff9b 	bl	8001558 <LL_TIM_IsEnabledCounter>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d038      	beq.n	800169a <APP_CALCULATOR_PF_EXTI_IRQHandler+0x96>
    {
      LL_TIM_DisableCounter(TIM2);
 8001628:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800162c:	f7ff ff85 	bl	800153a <LL_TIM_DisableCounter>
      s_calculator_pf.i32_data = LL_TIM_GetCounter(TIM2) - 18;
 8001630:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001634:	f7ff ffaf 	bl	8001596 <LL_TIM_GetCounter>
 8001638:	4603      	mov	r3, r0
 800163a:	3b12      	subs	r3, #18
 800163c:	461a      	mov	r2, r3
 800163e:	4b45      	ldr	r3, [pc, #276]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001640:	611a      	str	r2, [r3, #16]

      if(s_calculator_pf.i32_data > 0)
 8001642:	4b44      	ldr	r3, [pc, #272]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	dd0e      	ble.n	8001668 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x64>
      {
          	  s_calculator_pf.value_temp_irq[0]
          	            = (uint8_t)((s_calculator_pf.i32_data - 18) >> 8);
 800164a:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	3b12      	subs	r3, #18
 8001650:	121b      	asrs	r3, r3, #8
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001656:	721a      	strb	r2, [r3, #8]
          	  s_calculator_pf.value_temp_irq[1] = (uint8_t)(s_calculator_pf.i32_data - 18);
 8001658:	4b3e      	ldr	r3, [pc, #248]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3b12      	subs	r3, #18
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b3c      	ldr	r3, [pc, #240]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001664:	725a      	strb	r2, [r3, #9]
 8001666:	e005      	b.n	8001674 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x70>
      }
      else
      {
    	  s_calculator_pf.value_temp_irq[0] = 0;
 8001668:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800166a:	2200      	movs	r2, #0
 800166c:	721a      	strb	r2, [r3, #8]
    	  s_calculator_pf.value_temp_irq[1] = 0;
 800166e:	4b39      	ldr	r3, [pc, #228]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001670:	2200      	movs	r2, #0
 8001672:	725a      	strb	r2, [r3, #9]
      }
//      s_calculator_pf.value_temp_irq[0]
//          = (uint8_t)(LL_TIM_GetCounter(TIM2 - 18) >> 8);
//      s_calculator_pf.value_temp_irq[1] = (uint8_t)(LL_TIM_GetCounter(TIM2) - 18);

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001674:	4b37      	ldr	r3, [pc, #220]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001676:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 8001678:	4a36      	ldr	r2, [pc, #216]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800167a:	7a12      	ldrb	r2, [r2, #8]
 800167c:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fd34 	bl	80060ee <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001686:	4b33      	ldr	r3, [pc, #204]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001688:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 800168a:	4a32      	ldr	r2, [pc, #200]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800168c:	7a52      	ldrb	r2, [r2, #9]
 800168e:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f004 fd2b 	bl	80060ee <RING_BUFFER_Push_Data>
 8001698:	e008      	b.n	80016ac <APP_CALCULATOR_PF_EXTI_IRQHandler+0xa8>
    }
    else
    {
      START_COUNTER(TIM2)
 800169a:	2100      	movs	r1, #0
 800169c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016a0:	f7ff ff6c 	bl	800157c <LL_TIM_SetCounter>
 80016a4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016a8:	f7ff ff38 	bl	800151c <LL_TIM_EnableCounter>
    }
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 80016ac:	2040      	movs	r0, #64	@ 0x40
 80016ae:	f7ff ff11 	bl	80014d4 <LL_EXTI_IsActiveFlag_0_31>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d04b      	beq.n	8001750 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x14c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80016b8:	2040      	movs	r0, #64	@ 0x40
 80016ba:	f7ff ff21 	bl	8001500 <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 80016be:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016c2:	f7ff ff49 	bl	8001558 <LL_TIM_IsEnabledCounter>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d038      	beq.n	800173e <APP_CALCULATOR_PF_EXTI_IRQHandler+0x13a>
    {
      LL_TIM_DisableCounter(TIM2);
 80016cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016d0:	f7ff ff33 	bl	800153a <LL_TIM_DisableCounter>

      s_calculator_pf.i32_data = LL_TIM_GetCounter(TIM2) - 18;
 80016d4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016d8:	f7ff ff5d 	bl	8001596 <LL_TIM_GetCounter>
 80016dc:	4603      	mov	r3, r0
 80016de:	3b12      	subs	r3, #18
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 80016e4:	611a      	str	r2, [r3, #16]

            if(s_calculator_pf.i32_data > 0)
 80016e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	dd0e      	ble.n	800170c <APP_CALCULATOR_PF_EXTI_IRQHandler+0x108>
            {
                	  s_calculator_pf.value_temp_irq[0]
                	            = (uint8_t)((s_calculator_pf.i32_data - 18) >> 8);
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	3b12      	subs	r3, #18
 80016f4:	121b      	asrs	r3, r3, #8
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	4b16      	ldr	r3, [pc, #88]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 80016fa:	721a      	strb	r2, [r3, #8]
                	  s_calculator_pf.value_temp_irq[1] = (uint8_t)(s_calculator_pf.i32_data - 18);
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	3b12      	subs	r3, #18
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b13      	ldr	r3, [pc, #76]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001708:	725a      	strb	r2, [r3, #9]
 800170a:	e005      	b.n	8001718 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>
            }
            else
            {
          	  s_calculator_pf.value_temp_irq[0] = 0;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800170e:	2200      	movs	r2, #0
 8001710:	721a      	strb	r2, [r3, #8]
          	  s_calculator_pf.value_temp_irq[1] = 0;
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001714:	2200      	movs	r2, #0
 8001716:	725a      	strb	r2, [r3, #9]
            }

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800171a:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800171e:	7a12      	ldrb	r2, [r2, #8]
 8001720:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f004 fce2 	bl	80060ee <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 800172c:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 800172e:	4a09      	ldr	r2, [pc, #36]	@ (8001754 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x150>)
 8001730:	7a52      	ldrb	r2, [r2, #9]
 8001732:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f004 fcd9 	bl	80060ee <RING_BUFFER_Push_Data>
    else
    {
      START_COUNTER(TIM2)
    }
  }
}
 800173c:	e008      	b.n	8001750 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x14c>
      START_COUNTER(TIM2)
 800173e:	2100      	movs	r1, #0
 8001740:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001744:	f7ff ff1a 	bl	800157c <LL_TIM_SetCounter>
 8001748:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800174c:	f7ff fee6 	bl	800151c <LL_TIM_EnableCounter>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}
 8001754:	200003d8 	.word	0x200003d8

08001758 <APP_CALCULATOR_PF_TaskUpdate>:
 * APP_CALCULATOR_PF_TaskUpdate will return without performing any further
 * operations.
 */
static void
APP_CALCULATOR_PF_TaskUpdate (void)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq))
 800175e:	4b38      	ldr	r3, [pc, #224]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fca0 	bl	80060a8 <RING_BUFFER_Is_Empty>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d15f      	bne.n	800182e <APP_CALCULATOR_PF_TaskUpdate+0xd6>
  uint16_t  u16_value_temp;
  uint8_t   u8_value[2];

  // u8_value[0] 8 bit high of delta_T
  u8_value[0]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 800176e:	4b34      	ldr	r3, [pc, #208]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fce4 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001778:	4603      	mov	r3, r0
 800177a:	713b      	strb	r3, [r7, #4]

  // u8_value[1] 8 bit low of delta_T
  u8_value[1]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 800177c:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f004 fcdd 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001786:	4603      	mov	r3, r0
 8001788:	717b      	strb	r3, [r7, #5]

  u16_value_temp = (uint16_t)((u8_value[0] << 8) | (u8_value[1]));
 800178a:	793b      	ldrb	r3, [r7, #4]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	b21a      	sxth	r2, r3
 8001790:	797b      	ldrb	r3, [r7, #5]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b21b      	sxth	r3, r3
 8001798:	81fb      	strh	r3, [r7, #14]

  *s_calculator_pf.p_delta_T = (float)u16_value_temp / FREQUENCY_TIMER;
 800179a:	89fb      	ldrh	r3, [r7, #14]
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa83 	bl	8000ca8 <__aeabi_ui2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe49 	bl	800043c <__aeabi_f2d>
 80017aa:	a323      	add	r3, pc, #140	@ (adr r3, 8001838 <APP_CALCULATOR_PF_TaskUpdate+0xe0>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe ffc6 	bl	8000740 <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4921      	ldr	r1, [pc, #132]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 80017ba:	68cc      	ldr	r4, [r1, #12]
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f7ff f96c 	bl	8000a9c <__aeabi_d2f>
 80017c4:	4603      	mov	r3, r0
 80017c6:	6023      	str	r3, [r4, #0]

  // Transmission Data to app_data_transmission
  p_value_temp = (uint32_t *)s_calculator_pf.p_delta_T;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	0e1b      	lsrs	r3, r3, #24
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 80017f8:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 fc76 	bl	80060ee <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001802:	4b0f      	ldr	r3, [pc, #60]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001804:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 8001806:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f004 fc6f 	bl	80060ee <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001812:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 8001814:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f004 fc68 	bl	80060ee <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001820:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 8001822:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fc61 	bl	80060ee <RING_BUFFER_Push_Data>
 800182c:	e000      	b.n	8001830 <APP_CALCULATOR_PF_TaskUpdate+0xd8>
    return;
 800182e:	bf00      	nop
}
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	38e38e39 	.word	0x38e38e39
 800183c:	4018e38e 	.word	0x4018e38e
 8001840:	200003d8 	.word	0x200003d8

08001844 <APP_DATA_TRANS_REC_CreateTask>:
 * The function APP_DATA_TRANS_REC_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_DATA_TRANS_REC_CreateTask (void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001848:	4902      	ldr	r1, [pc, #8]	@ (8001854 <APP_DATA_TRANS_REC_CreateTask+0x10>)
 800184a:	4803      	ldr	r0, [pc, #12]	@ (8001858 <APP_DATA_TRANS_REC_CreateTask+0x14>)
 800184c:	f004 fcca 	bl	80061e4 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000070 	.word	0x20000070
 8001858:	2000006c 	.word	0x2000006c

0800185c <APP_DATA_TRANS_REC_Init>:

void
APP_DATA_TRANS_REC_Init (void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_data_trans_rec.p_PF_buffer           = &s_data_system.s_PF_buffer;
 8001860:	4b18      	ldr	r3, [pc, #96]	@ (80018c4 <APP_DATA_TRANS_REC_Init+0x68>)
 8001862:	4a19      	ldr	r2, [pc, #100]	@ (80018c8 <APP_DATA_TRANS_REC_Init+0x6c>)
 8001864:	601a      	str	r2, [r3, #0]
  s_data_trans_rec.p_vol_cur_buffer      = &s_data_system.s_vol_cur_buffer;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <APP_DATA_TRANS_REC_Init+0x68>)
 8001868:	4a18      	ldr	r2, [pc, #96]	@ (80018cc <APP_DATA_TRANS_REC_Init+0x70>)
 800186a:	605a      	str	r2, [r3, #4]
  s_data_trans_rec.p_uart_data_trans_rec = &s_data_system.s_uart_data_trans_rec;
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <APP_DATA_TRANS_REC_Init+0x68>)
 800186e:	4a18      	ldr	r2, [pc, #96]	@ (80018d0 <APP_DATA_TRANS_REC_Init+0x74>)
 8001870:	609a      	str	r2, [r3, #8]

  // Reset data filed of variable s_data_trans_rec
  s_data_trans_rec.flag_update_PF      = FLAG_NOT_UPDATED;
 8001872:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <APP_DATA_TRANS_REC_Init+0x68>)
 8001874:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001878:	f36f 1304 	bfc	r3, #4, #1
 800187c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  s_data_trans_rec.flag_update_vol_cur = FLAG_NOT_UPDATED;
 8001880:	4a10      	ldr	r2, [pc, #64]	@ (80018c4 <APP_DATA_TRANS_REC_Init+0x68>)
 8001882:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001886:	f36f 1345 	bfc	r3, #5, #1
 800188a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  s_data_trans_rec.u8_index_data_rec   = 0;
 800188e:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <APP_DATA_TRANS_REC_Init+0x68>)
 8001890:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001894:	f36f 0303 	bfc	r3, #0, #4
 8001898:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  memset((uint8_t *)s_data_trans_rec.u8_data_transmission,
 800189c:	2210      	movs	r2, #16
 800189e:	2100      	movs	r1, #0
 80018a0:	480c      	ldr	r0, [pc, #48]	@ (80018d4 <APP_DATA_TRANS_REC_Init+0x78>)
 80018a2:	f005 fbda 	bl	800705a <memset>
         0,
         sizeof(s_data_trans_rec.u8_data_transmission));
  memset((uint8_t *)s_data_trans_rec.u8_data_rec,
 80018a6:	2210      	movs	r2, #16
 80018a8:	2100      	movs	r1, #0
 80018aa:	480b      	ldr	r0, [pc, #44]	@ (80018d8 <APP_DATA_TRANS_REC_Init+0x7c>)
 80018ac:	f005 fbd5 	bl	800705a <memset>
         0,
         sizeof(s_data_trans_rec.u8_data_rec));

  // Config UART
  BSP_UART_Config((uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec,
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <APP_DATA_TRANS_REC_Init+0x68>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2225      	movs	r2, #37	@ 0x25
 80018b6:	4909      	ldr	r1, [pc, #36]	@ (80018dc <APP_DATA_TRANS_REC_Init+0x80>)
 80018b8:	4618      	mov	r0, r3
 80018ba:	f001 f9f4 	bl	8002ca6 <BSP_UART_Config>
                  USART1,
                  USART1_IRQn);
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000c70 	.word	0x20000c70
 80018c8:	200004f8 	.word	0x200004f8
 80018cc:	20000710 	.word	0x20000710
 80018d0:	2000081c 	.word	0x2000081c
 80018d4:	20000c7c 	.word	0x20000c7c
 80018d8:	20000c8c 	.word	0x20000c8c
 80018dc:	40013800 	.word	0x40013800

080018e0 <APP_DATA_TRANS_REC_TaskUpdate>:
 * 2. Receives data from UART, processes the received packet, and updates the
 * system's power value.
 */
static void
APP_DATA_TRANS_REC_TaskUpdate (void)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
   * @details
   * - Check if the voltage and current buffer is not empty.
   * - Read 4 bytes of voltage data and append '\r'.
   * - Read 4 bytes of current data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer))
 80018e6:	4b9c      	ldr	r3, [pc, #624]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f004 fbdc 	bl	80060a8 <RING_BUFFER_Is_Empty>
 80018f0:	4603      	mov	r3, r0
 80018f2:	f083 0301 	eor.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d054      	beq.n	80019a6 <APP_DATA_TRANS_REC_TaskUpdate+0xc6>
  {
    // Read voltage
    s_data_trans_rec.u8_data_transmission[0] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80018fc:	4b96      	ldr	r3, [pc, #600]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80018fe:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[0] = RING_BUFFER_Pull_Data(
 8001900:	4618      	mov	r0, r3
 8001902:	f004 fc1d 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001906:	4603      	mov	r3, r0
 8001908:	461a      	mov	r2, r3
 800190a:	4b93      	ldr	r3, [pc, #588]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800190c:	731a      	strb	r2, [r3, #12]
    s_data_trans_rec.u8_data_transmission[1] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800190e:	4b92      	ldr	r3, [pc, #584]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001910:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[1] = RING_BUFFER_Pull_Data(
 8001912:	4618      	mov	r0, r3
 8001914:	f004 fc14 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4b8e      	ldr	r3, [pc, #568]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800191e:	735a      	strb	r2, [r3, #13]
    s_data_trans_rec.u8_data_transmission[2] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001920:	4b8d      	ldr	r3, [pc, #564]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001922:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[2] = RING_BUFFER_Pull_Data(
 8001924:	4618      	mov	r0, r3
 8001926:	f004 fc0b 	bl	8006140 <RING_BUFFER_Pull_Data>
 800192a:	4603      	mov	r3, r0
 800192c:	461a      	mov	r2, r3
 800192e:	4b8a      	ldr	r3, [pc, #552]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001930:	739a      	strb	r2, [r3, #14]
    s_data_trans_rec.u8_data_transmission[3] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001932:	4b89      	ldr	r3, [pc, #548]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001934:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[3] = RING_BUFFER_Pull_Data(
 8001936:	4618      	mov	r0, r3
 8001938:	f004 fc02 	bl	8006140 <RING_BUFFER_Pull_Data>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b85      	ldr	r3, [pc, #532]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001942:	73da      	strb	r2, [r3, #15]
    s_data_trans_rec.u8_data_transmission[4] = 0xdd;
 8001944:	4b84      	ldr	r3, [pc, #528]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001946:	22dd      	movs	r2, #221	@ 0xdd
 8001948:	741a      	strb	r2, [r3, #16]

    // Read current
    s_data_trans_rec.u8_data_transmission[5] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800194a:	4b83      	ldr	r3, [pc, #524]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800194c:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[5] = RING_BUFFER_Pull_Data(
 800194e:	4618      	mov	r0, r3
 8001950:	f004 fbf6 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b7f      	ldr	r3, [pc, #508]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800195a:	745a      	strb	r2, [r3, #17]
    s_data_trans_rec.u8_data_transmission[6] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800195c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800195e:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[6] = RING_BUFFER_Pull_Data(
 8001960:	4618      	mov	r0, r3
 8001962:	f004 fbed 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b7b      	ldr	r3, [pc, #492]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800196c:	749a      	strb	r2, [r3, #18]
    s_data_trans_rec.u8_data_transmission[7] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800196e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001970:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[7] = RING_BUFFER_Pull_Data(
 8001972:	4618      	mov	r0, r3
 8001974:	f004 fbe4 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b76      	ldr	r3, [pc, #472]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800197e:	74da      	strb	r2, [r3, #19]
    s_data_trans_rec.u8_data_transmission[8] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001980:	4b75      	ldr	r3, [pc, #468]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001982:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[8] = RING_BUFFER_Pull_Data(
 8001984:	4618      	mov	r0, r3
 8001986:	f004 fbdb 	bl	8006140 <RING_BUFFER_Pull_Data>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b72      	ldr	r3, [pc, #456]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001990:	751a      	strb	r2, [r3, #20]
    s_data_trans_rec.u8_data_transmission[9] = 0xdd;
 8001992:	4b71      	ldr	r3, [pc, #452]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001994:	22dd      	movs	r2, #221	@ 0xdd
 8001996:	755a      	strb	r2, [r3, #21]
    s_data_trans_rec.flag_update_vol_cur     = FLAG_UPDATED;
 8001998:	4a6f      	ldr	r2, [pc, #444]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 800199a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800199e:	f043 0320 	orr.w	r3, r3, #32
 80019a2:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  /**
   * @details
   * - Check if the power factor (PF) buffer is not empty.
   * - Read 4 bytes of PF data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans_rec.p_PF_buffer))
 80019a6:	4b6c      	ldr	r3, [pc, #432]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f004 fb7c 	bl	80060a8 <RING_BUFFER_Is_Empty>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f083 0301 	eor.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d021      	beq.n	8001a00 <APP_DATA_TRANS_REC_TaskUpdate+0x120>
  {
    // Read PF
    s_data_trans_rec.u8_data_transmission[10] = 0;
 80019bc:	4b66      	ldr	r3, [pc, #408]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019be:	2200      	movs	r2, #0
 80019c0:	759a      	strb	r2, [r3, #22]
    s_data_trans_rec.u8_data_transmission[11] = 0;
 80019c2:	4b65      	ldr	r3, [pc, #404]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	75da      	strb	r2, [r3, #23]
    s_data_trans_rec.u8_data_transmission[12] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_PF_buffer);
 80019c8:	4b63      	ldr	r3, [pc, #396]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019ca:	681b      	ldr	r3, [r3, #0]
    s_data_trans_rec.u8_data_transmission[12] = RING_BUFFER_Pull_Data(
 80019cc:	4618      	mov	r0, r3
 80019ce:	f004 fbb7 	bl	8006140 <RING_BUFFER_Pull_Data>
 80019d2:	4603      	mov	r3, r0
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019d8:	761a      	strb	r2, [r3, #24]
    s_data_trans_rec.u8_data_transmission[13] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_PF_buffer);
 80019da:	4b5f      	ldr	r3, [pc, #380]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019dc:	681b      	ldr	r3, [r3, #0]
    s_data_trans_rec.u8_data_transmission[13] = RING_BUFFER_Pull_Data(
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 fbae 	bl	8006140 <RING_BUFFER_Pull_Data>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461a      	mov	r2, r3
 80019e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019ea:	765a      	strb	r2, [r3, #25]
//    s_data_trans_rec.u8_data_transmission[13] = 0x10;
    s_data_trans_rec.u8_data_transmission[14] = 0xdd;
 80019ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019ee:	22dd      	movs	r2, #221	@ 0xdd
 80019f0:	769a      	strb	r2, [r3, #26]
    s_data_trans_rec.flag_update_PF           = FLAG_UPDATED;
 80019f2:	4a59      	ldr	r2, [pc, #356]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 80019f4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80019f8:	f043 0310 	orr.w	r3, r3, #16
 80019fc:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
   * @details
   * - If both voltage/current and PF data have been updated,
   *   transmit the combined data packet via UART.
   * - Reset the update flags after transmission.
   */
  if ((s_data_trans_rec.flag_update_PF == FLAG_UPDATED)
 8001a00:	4b55      	ldr	r3, [pc, #340]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001a02:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a06:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d149      	bne.n	8001aa4 <APP_DATA_TRANS_REC_TaskUpdate+0x1c4>
      && (s_data_trans_rec.flag_update_vol_cur == FLAG_UPDATED))
 8001a10:	4b51      	ldr	r3, [pc, #324]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001a12:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001a16:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d141      	bne.n	8001aa4 <APP_DATA_TRANS_REC_TaskUpdate+0x1c4>
  {

	HAL_UART_Transmit(&huart1, &abc, 1, 1);
 8001a20:	2301      	movs	r3, #1
 8001a22:	2201      	movs	r2, #1
 8001a24:	494d      	ldr	r1, [pc, #308]	@ (8001b5c <APP_DATA_TRANS_REC_TaskUpdate+0x27c>)
 8001a26:	484e      	ldr	r0, [pc, #312]	@ (8001b60 <APP_DATA_TRANS_REC_TaskUpdate+0x280>)
 8001a28:	f002 ff8e 	bl	8004948 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &abc, 1, 1);
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	2201      	movs	r2, #1
 8001a30:	494a      	ldr	r1, [pc, #296]	@ (8001b5c <APP_DATA_TRANS_REC_TaskUpdate+0x27c>)
 8001a32:	484b      	ldr	r0, [pc, #300]	@ (8001b60 <APP_DATA_TRANS_REC_TaskUpdate+0x280>)
 8001a34:	f002 ff88 	bl	8004948 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &abc, 1, 1);
 8001a38:	2301      	movs	r3, #1
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4947      	ldr	r1, [pc, #284]	@ (8001b5c <APP_DATA_TRANS_REC_TaskUpdate+0x27c>)
 8001a3e:	4848      	ldr	r0, [pc, #288]	@ (8001b60 <APP_DATA_TRANS_REC_TaskUpdate+0x280>)
 8001a40:	f002 ff82 	bl	8004948 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &abc, 1, 1);
 8001a44:	2301      	movs	r3, #1
 8001a46:	2201      	movs	r2, #1
 8001a48:	4944      	ldr	r1, [pc, #272]	@ (8001b5c <APP_DATA_TRANS_REC_TaskUpdate+0x27c>)
 8001a4a:	4845      	ldr	r0, [pc, #276]	@ (8001b60 <APP_DATA_TRANS_REC_TaskUpdate+0x280>)
 8001a4c:	f002 ff7c 	bl	8004948 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &abc, 1, 1);
 8001a50:	2301      	movs	r3, #1
 8001a52:	2201      	movs	r2, #1
 8001a54:	4941      	ldr	r1, [pc, #260]	@ (8001b5c <APP_DATA_TRANS_REC_TaskUpdate+0x27c>)
 8001a56:	4842      	ldr	r0, [pc, #264]	@ (8001b60 <APP_DATA_TRANS_REC_TaskUpdate+0x280>)
 8001a58:	f002 ff76 	bl	8004948 <HAL_UART_Transmit>

	LL_mDelay(1);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f004 fac7 	bl	8005ff0 <LL_mDelay>

	for(uint8_t i = 0; i < 15; i++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]
 8001a66:	e00c      	b.n	8001a82 <APP_DATA_TRANS_REC_TaskUpdate+0x1a2>
    {
//    	BSP_UART_SendChar((uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec, s_data_trans_rec.u8_data_transmission[i]);
		HAL_UART_Transmit(&huart1, (uint8_t *)&s_data_trans_rec.u8_data_transmission[i], 1, 1);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001a6e:	4413      	add	r3, r2
 8001a70:	1d19      	adds	r1, r3, #4
 8001a72:	2301      	movs	r3, #1
 8001a74:	2201      	movs	r2, #1
 8001a76:	483a      	ldr	r0, [pc, #232]	@ (8001b60 <APP_DATA_TRANS_REC_TaskUpdate+0x280>)
 8001a78:	f002 ff66 	bl	8004948 <HAL_UART_Transmit>
	for(uint8_t i = 0; i < 15; i++)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b0e      	cmp	r3, #14
 8001a86:	d9ef      	bls.n	8001a68 <APP_DATA_TRANS_REC_TaskUpdate+0x188>
    }

    s_data_trans_rec.flag_update_PF      = FLAG_NOT_UPDATED;
 8001a88:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001a8a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001a8e:	f36f 1304 	bfc	r3, #4, #1
 8001a92:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
    s_data_trans_rec.flag_update_vol_cur = FLAG_NOT_UPDATED;
 8001a96:	4a30      	ldr	r2, [pc, #192]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001a98:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001a9c:	f36f 1345 	bfc	r3, #5, #1
 8001aa0:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
   * - Store received data in a buffer.
   * - If a complete data packet (terminated by '\r') is received,
   *   process the packet and update the power value in the system structure.
   */
  if (BSP_UART_IsAvailableDataReceive(
          (uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec))
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
  if (BSP_UART_IsAvailableDataReceive(
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 f91f 	bl	8002cec <BSP_UART_IsAvailableDataReceive>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d04c      	beq.n	8001b4e <APP_DATA_TRANS_REC_TaskUpdate+0x26e>
  {
    s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec]
        = BSP_UART_ReadChar(
            (uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec);
 8001ab4:	4b28      	ldr	r3, [pc, #160]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001ab6:	689a      	ldr	r2, [r3, #8]
    s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec]
 8001ab8:	4b27      	ldr	r3, [pc, #156]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001aba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001abe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461c      	mov	r4, r3
        = BSP_UART_ReadChar(
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	f001 f971 	bl	8002dae <BSP_UART_ReadChar>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4b21      	ldr	r3, [pc, #132]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001ad2:	4423      	add	r3, r4
 8001ad4:	771a      	strb	r2, [r3, #28]

    s_data_trans_rec.u8_index_data_rec++;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001ad8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001adc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f003 030f 	and.w	r3, r3, #15
 8001ae8:	b2d9      	uxtb	r1, r3
 8001aea:	4a1b      	ldr	r2, [pc, #108]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001aec:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001af0:	f361 0303 	bfi	r3, r1, #0, #4
 8001af4:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

    if (s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec - 1]
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001afa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001afe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	3b01      	subs	r3, #1
 8001b06:	4a14      	ldr	r2, [pc, #80]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	7f1b      	ldrb	r3, [r3, #28]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b0d      	cmp	r3, #13
 8001b10:	d11d      	bne.n	8001b4e <APP_DATA_TRANS_REC_TaskUpdate+0x26e>
        == '\r')
    {
      // Convert the received 4 bytes to a float power value
      uint32_t *p_val;
      p_val  = (uint32_t *)&s_data_system.f_power;
 8001b12:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <APP_DATA_TRANS_REC_TaskUpdate+0x284>)
 8001b14:	603b      	str	r3, [r7, #0]
      *p_val = (uint32_t)((s_data_trans_rec.u8_data_rec[0] << 24)
 8001b16:	4b10      	ldr	r3, [pc, #64]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001b18:	7f1b      	ldrb	r3, [r3, #28]
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	061a      	lsls	r2, r3, #24
                          | (s_data_trans_rec.u8_data_rec[1] << 16)
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001b20:	7f5b      	ldrb	r3, [r3, #29]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	431a      	orrs	r2, r3
                          | (s_data_trans_rec.u8_data_rec[2] << 8)
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001b2a:	7f9b      	ldrb	r3, [r3, #30]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	4313      	orrs	r3, r2
                          | (s_data_trans_rec.u8_data_rec[3] << 0));
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001b34:	7fd2      	ldrb	r2, [r2, #31]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	4313      	orrs	r3, r2
      *p_val = (uint32_t)((s_data_trans_rec.u8_data_rec[0] << 24)
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	601a      	str	r2, [r3, #0]
      s_data_trans_rec.u8_index_data_rec = 0; // Reset index after processing
 8001b40:	4a05      	ldr	r2, [pc, #20]	@ (8001b58 <APP_DATA_TRANS_REC_TaskUpdate+0x278>)
 8001b42:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001b46:	f36f 0303 	bfc	r3, #0, #4
 8001b4a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
    }
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000c70 	.word	0x20000c70
 8001b5c:	20000068 	.word	0x20000068
 8001b60:	20000d38 	.word	0x20000d38
 8001b64:	20000c68 	.word	0x20000c68

08001b68 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	611a      	str	r2, [r3, #16]
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
	...

08001b88 <APP_LED_7_SEG_Init>:
 * The function initializes the LED 7-segment display by assigning port and pin
 * values and linking a pointer to a system power variable.
 */
void
APP_LED_7_SEG_Init (void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_LED_7SEG.p_power = &s_data_system.f_power;
 8001b8c:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001b8e:	4a43      	ldr	r2, [pc, #268]	@ (8001c9c <APP_LED_7_SEG_Init+0x114>)
 8001b90:	669a      	str	r2, [r3, #104]	@ 0x68

  // Reset data filed of s_LED_7SEG
  s_LED_7SEG.p_port_led[0] = PORT_LED_A;
 8001b92:	4b41      	ldr	r3, [pc, #260]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001b94:	4a42      	ldr	r2, [pc, #264]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001b96:	635a      	str	r2, [r3, #52]	@ 0x34
  s_LED_7SEG.p_port_led[1] = PORT_LED_B;
 8001b98:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001b9a:	4a41      	ldr	r2, [pc, #260]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  s_LED_7SEG.p_port_led[2] = PORT_LED_C;
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001ba0:	4a3f      	ldr	r2, [pc, #252]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
  s_LED_7SEG.p_port_led[3] = PORT_LED_D;
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
  s_LED_7SEG.p_port_led[4] = PORT_LED_E;
 8001baa:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bac:	4a3c      	ldr	r2, [pc, #240]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001bae:	645a      	str	r2, [r3, #68]	@ 0x44
  s_LED_7SEG.p_port_led[5] = PORT_LED_F;
 8001bb0:	4b39      	ldr	r3, [pc, #228]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bb2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001bb4:	649a      	str	r2, [r3, #72]	@ 0x48
  s_LED_7SEG.p_port_led[6] = PORT_LED_G;
 8001bb6:	4b38      	ldr	r3, [pc, #224]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8001ca4 <APP_LED_7_SEG_Init+0x11c>)
 8001bba:	64da      	str	r2, [r3, #76]	@ 0x4c
  s_LED_7SEG.p_port_led[7] = PORT_LED_DP;
 8001bbc:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bbe:	4a38      	ldr	r2, [pc, #224]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001bc0:	651a      	str	r2, [r3, #80]	@ 0x50

  s_LED_7SEG.u32_pin_led[0] = PIN_LED_A;
 8001bc2:	4b35      	ldr	r3, [pc, #212]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ca8 <APP_LED_7_SEG_Init+0x120>)
 8001bc6:	601a      	str	r2, [r3, #0]
  s_LED_7SEG.u32_pin_led[1] = PIN_LED_B;
 8001bc8:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bca:	f240 1201 	movw	r2, #257	@ 0x101
 8001bce:	605a      	str	r2, [r3, #4]
  s_LED_7SEG.u32_pin_led[2] = PIN_LED_C;
 8001bd0:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bd2:	4a36      	ldr	r2, [pc, #216]	@ (8001cac <APP_LED_7_SEG_Init+0x124>)
 8001bd4:	609a      	str	r2, [r3, #8]
  s_LED_7SEG.u32_pin_led[3] = PIN_LED_D;
 8001bd6:	4b30      	ldr	r3, [pc, #192]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bd8:	f240 2202 	movw	r2, #514	@ 0x202
 8001bdc:	60da      	str	r2, [r3, #12]
  s_LED_7SEG.u32_pin_led[4] = PIN_LED_E;
 8001bde:	4b2e      	ldr	r3, [pc, #184]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001be0:	f240 4204 	movw	r2, #1028	@ 0x404
 8001be4:	611a      	str	r2, [r3, #16]
  s_LED_7SEG.u32_pin_led[5] = PIN_LED_F;
 8001be6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001be8:	4a31      	ldr	r2, [pc, #196]	@ (8001cb0 <APP_LED_7_SEG_Init+0x128>)
 8001bea:	615a      	str	r2, [r3, #20]
  s_LED_7SEG.u32_pin_led[6] = PIN_LED_G;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bee:	4a31      	ldr	r2, [pc, #196]	@ (8001cb4 <APP_LED_7_SEG_Init+0x12c>)
 8001bf0:	619a      	str	r2, [r3, #24]
  s_LED_7SEG.u32_pin_led[7] = PIN_LED_DP;
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bf4:	4a30      	ldr	r2, [pc, #192]	@ (8001cb8 <APP_LED_7_SEG_Init+0x130>)
 8001bf6:	61da      	str	r2, [r3, #28]

  s_LED_7SEG.p_port_control[0] = PORT_CONTROL_0;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <APP_LED_7_SEG_Init+0x11c>)
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54
  s_LED_7SEG.p_port_control[1] = PORT_CONTROL_1;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c00:	4a28      	ldr	r2, [pc, #160]	@ (8001ca4 <APP_LED_7_SEG_Init+0x11c>)
 8001c02:	659a      	str	r2, [r3, #88]	@ 0x58
  s_LED_7SEG.p_port_control[2] = PORT_CONTROL_2;
 8001c04:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c06:	4a27      	ldr	r2, [pc, #156]	@ (8001ca4 <APP_LED_7_SEG_Init+0x11c>)
 8001c08:	65da      	str	r2, [r3, #92]	@ 0x5c
  s_LED_7SEG.p_port_control[3] = PORT_CONTROL_3;
 8001c0a:	4b23      	ldr	r3, [pc, #140]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c0c:	4a25      	ldr	r2, [pc, #148]	@ (8001ca4 <APP_LED_7_SEG_Init+0x11c>)
 8001c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  s_LED_7SEG.p_port_control[4] = PORT_CONTROL_4;
 8001c10:	4b21      	ldr	r3, [pc, #132]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c12:	4a24      	ldr	r2, [pc, #144]	@ (8001ca4 <APP_LED_7_SEG_Init+0x11c>)
 8001c14:	665a      	str	r2, [r3, #100]	@ 0x64

  s_LED_7SEG.u32_pin_control[0] = PIN_CONTROL_0;
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c18:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001c1c:	621a      	str	r2, [r3, #32]
  s_LED_7SEG.u32_pin_control[1] = PIN_CONTROL_1;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c20:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001c24:	625a      	str	r2, [r3, #36]	@ 0x24
  s_LED_7SEG.u32_pin_control[2] = PIN_CONTROL_2;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c28:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  s_LED_7SEG.u32_pin_control[3] = PIN_CONTROL_3;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c30:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001c34:	62da      	str	r2, [r3, #44]	@ 0x2c
  s_LED_7SEG.u32_pin_control[4] = PIN_CONTROL_4;
 8001c36:	4b18      	ldr	r3, [pc, #96]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c38:	f640 0208 	movw	r2, #2056	@ 0x808
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30

  s_LED_7SEG.u8_position_led = 0;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  *s_LED_7SEG.p_power = 100;
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <APP_LED_7_SEG_Init+0x110>)
 8001c48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cbc <APP_LED_7_SEG_Init+0x134>)
 8001c4c:	601a      	str	r2, [r3, #0]

  LL_GPIO_SetOutputPin(PORT_LED_A, PIN_LED_A);
 8001c4e:	4916      	ldr	r1, [pc, #88]	@ (8001ca8 <APP_LED_7_SEG_Init+0x120>)
 8001c50:	4813      	ldr	r0, [pc, #76]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001c52:	f7ff ff89 	bl	8001b68 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(PORT_LED_B, PIN_LED_B);
 8001c56:	f240 1101 	movw	r1, #257	@ 0x101
 8001c5a:	4811      	ldr	r0, [pc, #68]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001c5c:	f7ff ff84 	bl	8001b68 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(PORT_LED_C, PIN_LED_C);
 8001c60:	4912      	ldr	r1, [pc, #72]	@ (8001cac <APP_LED_7_SEG_Init+0x124>)
 8001c62:	480f      	ldr	r0, [pc, #60]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001c64:	f7ff ff80 	bl	8001b68 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(PORT_LED_D, PIN_LED_D);
 8001c68:	f240 2102 	movw	r1, #514	@ 0x202
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001c6e:	f7ff ff7b 	bl	8001b68 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(PORT_LED_E, PIN_LED_E);
 8001c72:	f240 4104 	movw	r1, #1028	@ 0x404
 8001c76:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001c78:	f7ff ff76 	bl	8001b68 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(PORT_LED_F, PIN_LED_F);
 8001c7c:	490c      	ldr	r1, [pc, #48]	@ (8001cb0 <APP_LED_7_SEG_Init+0x128>)
 8001c7e:	4808      	ldr	r0, [pc, #32]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001c80:	f7ff ff72 	bl	8001b68 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(PORT_LED_G, PIN_LED_G);
 8001c84:	490b      	ldr	r1, [pc, #44]	@ (8001cb4 <APP_LED_7_SEG_Init+0x12c>)
 8001c86:	4807      	ldr	r0, [pc, #28]	@ (8001ca4 <APP_LED_7_SEG_Init+0x11c>)
 8001c88:	f7ff ff6e 	bl	8001b68 <LL_GPIO_SetOutputPin>
  LL_GPIO_SetOutputPin(PORT_LED_DP, PIN_LED_DP);
 8001c8c:	490a      	ldr	r1, [pc, #40]	@ (8001cb8 <APP_LED_7_SEG_Init+0x130>)
 8001c8e:	4804      	ldr	r0, [pc, #16]	@ (8001ca0 <APP_LED_7_SEG_Init+0x118>)
 8001c90:	f7ff ff6a 	bl	8001b68 <LL_GPIO_SetOutputPin>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000ca0 	.word	0x20000ca0
 8001c9c:	20000c68 	.word	0x20000c68
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40010800 	.word	0x40010800
 8001ca8:	04400040 	.word	0x04400040
 8001cac:	04200020 	.word	0x04200020
 8001cb0:	04800080 	.word	0x04800080
 8001cb4:	04010001 	.word	0x04010001
 8001cb8:	04100010 	.word	0x04100010
 8001cbc:	42c80000 	.word	0x42c80000

08001cc0 <ACS712_VoltageConverterCurrent>:
   *   PUBLIC FUNCTIONS
   **********************/

// Unit Voltage mV
  static inline float ACS712_VoltageConverterCurrent(float f_mVoltage)
  {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
#if  ACS712_0_30A
	  return (f_mVoltage) / 64.37;
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7fe fbb7 	bl	800043c <__aeabi_f2d>
 8001cce:	a308      	add	r3, pc, #32	@ (adr r3, 8001cf0 <ACS712_VoltageConverterCurrent+0x30>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	f7fe fd34 	bl	8000740 <__aeabi_ddiv>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe fedc 	bl	8000a9c <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
	  return f_mVoltage / 100.0;
#endif
#if  ACS712_0_5A
	  return f_mVoltage / 185.0;
#endif
  }
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	147ae148 	.word	0x147ae148
 8001cf4:	405017ae 	.word	0x405017ae

08001cf8 <APP_READ_DATA_CreateTask>:
 * The function APP_READ_DATA_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_READ_DATA_CreateTask (void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001cfc:	4902      	ldr	r1, [pc, #8]	@ (8001d08 <APP_READ_DATA_CreateTask+0x10>)
 8001cfe:	4803      	ldr	r0, [pc, #12]	@ (8001d0c <APP_READ_DATA_CreateTask+0x14>)
 8001d00:	f004 fa70 	bl	80061e4 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2000008c 	.word	0x2000008c
 8001d0c:	20000088 	.word	0x20000088

08001d10 <APP_READ_DATA_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_READ_DATA_Init (void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_read_data.p_vol_cur_buffer     = &s_data_system.s_vol_cur_buffer;
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <APP_READ_DATA_Init+0x34>)
 8001d16:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <APP_READ_DATA_Init+0x38>)
 8001d18:	605a      	str	r2, [r3, #4]
  s_read_data.p_vol_cur_buffer_irq = &s_data_system.s_vol_cur_buffer_irq;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <APP_READ_DATA_Init+0x34>)
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <APP_READ_DATA_Init+0x3c>)
 8001d1e:	601a      	str	r2, [r3, #0]
  s_read_data.p_voltage            = &s_data_system.f_voltage;
 8001d20:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <APP_READ_DATA_Init+0x34>)
 8001d22:	4a0b      	ldr	r2, [pc, #44]	@ (8001d50 <APP_READ_DATA_Init+0x40>)
 8001d24:	609a      	str	r2, [r3, #8]
  s_read_data.p_current            = &s_data_system.f_current;
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <APP_READ_DATA_Init+0x34>)
 8001d28:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <APP_READ_DATA_Init+0x44>)
 8001d2a:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer);
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <APP_READ_DATA_Init+0x34>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f004 f98f 	bl	8006054 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 8001d36:	4b03      	ldr	r3, [pc, #12]	@ (8001d44 <APP_READ_DATA_Init+0x34>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f004 f98a 	bl	8006054 <RING_BUFFER_Init>
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000d1c 	.word	0x20000d1c
 8001d48:	20000710 	.word	0x20000710
 8001d4c:	20000604 	.word	0x20000604
 8001d50:	20000c5c 	.word	0x20000c5c
 8001d54:	20000c60 	.word	0x20000c60

08001d58 <APP_READ_DATA_HandleDMA_IRQ>:

void
APP_READ_DATA_HandleDMA_IRQ (flagIRQ_dma_t status)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
  if (status == FLAG_TRANSFER_COMPLETE)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d105      	bne.n	8001d74 <APP_READ_DATA_HandleDMA_IRQ+0x1c>
  {
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq, 1);
 8001d68:	4b04      	ldr	r3, [pc, #16]	@ (8001d7c <APP_READ_DATA_HandleDMA_IRQ+0x24>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f004 f9bd 	bl	80060ee <RING_BUFFER_Push_Data>
  }
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000d1c 	.word	0x20000d1c

08001d80 <Kalman_GetValue>:

/******************************************************************************
 *  PRIVATE FUNCTION
 *****************************************************************************/

float Kalman_GetValue(float mea) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  _kalman_gain = _err_estimate / (_err_estimate + _err_measure);
 8001d88:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <Kalman_GetValue+0xcc>)
 8001d8a:	681c      	ldr	r4, [r3, #0]
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <Kalman_GetValue+0xcc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a2f      	ldr	r2, [pc, #188]	@ (8001e50 <Kalman_GetValue+0xd0>)
 8001d92:	6812      	ldr	r2, [r2, #0]
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fed6 	bl	8000b48 <__addsf3>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4620      	mov	r0, r4
 8001da2:	f7ff f88d 	bl	8000ec0 <__aeabi_fdiv>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b2a      	ldr	r3, [pc, #168]	@ (8001e54 <Kalman_GetValue+0xd4>)
 8001dac:	601a      	str	r2, [r3, #0]
  _current_estimate = _last_estimate + _kalman_gain * (mea - _last_estimate);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	@ (8001e58 <Kalman_GetValue+0xd8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4619      	mov	r1, r3
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7fe fec5 	bl	8000b44 <__aeabi_fsub>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <Kalman_GetValue+0xd4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	f7fe ffc7 	bl	8000d58 <__aeabi_fmul>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <Kalman_GetValue+0xd8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	f7fe feb7 	bl	8000b48 <__addsf3>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <Kalman_GetValue+0xdc>)
 8001de0:	601a      	str	r2, [r3, #0]
  _err_estimate = (1.0f - _kalman_gain) * _err_estimate + fabsf(_last_estimate - _current_estimate) * _q;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <Kalman_GetValue+0xd4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001dec:	f7fe feaa 	bl	8000b44 <__aeabi_fsub>
 8001df0:	4603      	mov	r3, r0
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <Kalman_GetValue+0xcc>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	f7fe ffac 	bl	8000d58 <__aeabi_fmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461c      	mov	r4, r3
 8001e04:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <Kalman_GetValue+0xd8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <Kalman_GetValue+0xdc>)
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fe98 	bl	8000b44 <__aeabi_fsub>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e1a:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <Kalman_GetValue+0xe0>)
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff99 	bl	8000d58 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	f7fe fe8c 	bl	8000b48 <__addsf3>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <Kalman_GetValue+0xcc>)
 8001e36:	601a      	str	r2, [r3, #0]
  _last_estimate = _current_estimate;
 8001e38:	4b08      	ldr	r3, [pc, #32]	@ (8001e5c <Kalman_GetValue+0xdc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a06      	ldr	r2, [pc, #24]	@ (8001e58 <Kalman_GetValue+0xd8>)
 8001e3e:	6013      	str	r3, [r2, #0]

  return _current_estimate;
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <Kalman_GetValue+0xdc>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd90      	pop	{r4, r7, pc}
 8001e4c:	20000080 	.word	0x20000080
 8001e50:	2000007c 	.word	0x2000007c
 8001e54:	20000d18 	.word	0x20000d18
 8001e58:	20000d14 	.word	0x20000d14
 8001e5c:	20000d10 	.word	0x20000d10
 8001e60:	20000084 	.word	0x20000084

08001e64 <APP_READ_DATA_TaskUpdate>:
 * @return If the ring buffer is empty, the function `APP_READ_DATA_TaskUpdate`
 * will return without performing any further operations.
 */
static void
APP_READ_DATA_TaskUpdate (void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
  uint32_t *p_value_temp;
  uint16_t  u16_value_temp;
  uint8_t   u8_value[4];
  uint16_t test;
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq))
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 f91a 	bl	80060a8 <RING_BUFFER_Is_Empty>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f083 0301 	eor.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8089 	beq.w	8001f94 <APP_READ_DATA_TaskUpdate+0x130>
  {
	  u8_value[0] = RING_BUFFER_Pull_Data(
		      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 8001e82:	4b46      	ldr	r3, [pc, #280]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001e84:	681b      	ldr	r3, [r3, #0]
	  u8_value[0] = RING_BUFFER_Pull_Data(
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 f95a 	bl	8006140 <RING_BUFFER_Pull_Data>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	713b      	strb	r3, [r7, #4]
	  u16_value_temp = (uint16_t)(s_data_system.u16_adc_value[0]);
 8001e90:	4b43      	ldr	r3, [pc, #268]	@ (8001fa0 <APP_READ_DATA_TaskUpdate+0x13c>)
 8001e92:	f8b3 3880 	ldrh.w	r3, [r3, #2176]	@ 0x880
 8001e96:	81fb      	strh	r3, [r7, #14]
	  APP_READ_DATA_ConvertVoltage(u16_value_temp);
 8001e98:	89fb      	ldrh	r3, [r7, #14]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f882 	bl	8001fa4 <APP_READ_DATA_ConvertVoltage>

	  u16_value_temp = (uint16_t)(s_data_system.u16_adc_value[1]);
 8001ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa0 <APP_READ_DATA_TaskUpdate+0x13c>)
 8001ea2:	f8b3 3882 	ldrh.w	r3, [r3, #2178]	@ 0x882
 8001ea6:	81fb      	strh	r3, [r7, #14]
	  test = (uint16_t)Kalman_GetValue((float)u16_value_temp);
 8001ea8:	89fb      	ldrh	r3, [r7, #14]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fefc 	bl	8000ca8 <__aeabi_ui2f>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff64 	bl	8001d80 <Kalman_GetValue>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff f912 	bl	80010e4 <__aeabi_f2uiz>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	81bb      	strh	r3, [r7, #12]
	  APP_READ_DATA_ConvertCurrent(test);
 8001ec4:	89bb      	ldrh	r3, [r7, #12]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f8aa 	bl	8002020 <APP_READ_DATA_ConvertCurrent>

	  // Transmission Data to app_data_transmission
	  p_value_temp = (uint32_t *)s_read_data.p_voltage;
 8001ecc:	4b33      	ldr	r3, [pc, #204]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	60bb      	str	r3, [r7, #8]

	  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	0e1b      	lsrs	r3, r3, #24
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	713b      	strb	r3, [r7, #4]
	  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	717b      	strb	r3, [r7, #5]
	  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	0a1b      	lsrs	r3, r3, #8
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	71bb      	strb	r3, [r7, #6]
	  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	71fb      	strb	r3, [r7, #7]

	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001ef8:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001efa:	685b      	ldr	r3, [r3, #4]
	                        u8_value[0]);
 8001efc:	793a      	ldrb	r2, [r7, #4]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f004 f8f4 	bl	80060ee <RING_BUFFER_Push_Data>
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f08:	685b      	ldr	r3, [r3, #4]
	                        u8_value[1]);
 8001f0a:	797a      	ldrb	r2, [r7, #5]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 f8ed 	bl	80060ee <RING_BUFFER_Push_Data>
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f16:	685b      	ldr	r3, [r3, #4]
	                        u8_value[2]);
 8001f18:	79ba      	ldrb	r2, [r7, #6]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 f8e6 	bl	80060ee <RING_BUFFER_Push_Data>
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f22:	4b1e      	ldr	r3, [pc, #120]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f24:	685b      	ldr	r3, [r3, #4]
	                        u8_value[3]);
 8001f26:	79fa      	ldrb	r2, [r7, #7]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 f8df 	bl	80060ee <RING_BUFFER_Push_Data>

	  p_value_temp = (uint32_t *)s_read_data.p_current;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]

	  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	0e1b      	lsrs	r3, r3, #24
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	713b      	strb	r3, [r7, #4]
	  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	717b      	strb	r3, [r7, #5]
	  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	71bb      	strb	r3, [r7, #6]
	  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	71fb      	strb	r3, [r7, #7]

	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
	                        u8_value[0]);
 8001f60:	793a      	ldrb	r2, [r7, #4]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 f8c2 	bl	80060ee <RING_BUFFER_Push_Data>
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
	                        u8_value[1]);
 8001f6e:	797a      	ldrb	r2, [r7, #5]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 f8bb 	bl	80060ee <RING_BUFFER_Push_Data>
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
	                        u8_value[2]);
 8001f7c:	79ba      	ldrb	r2, [r7, #6]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 f8b4 	bl	80060ee <RING_BUFFER_Push_Data>
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <APP_READ_DATA_TaskUpdate+0x138>)
 8001f88:	685b      	ldr	r3, [r3, #4]
	                        u8_value[3]);
 8001f8a:	79fa      	ldrb	r2, [r7, #7]
	  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 f8ad 	bl	80060ee <RING_BUFFER_Push_Data>
  }
}
 8001f94:	bf00      	nop
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000d1c 	.word	0x20000d1c
 8001fa0:	200003ec 	.word	0x200003ec

08001fa4 <APP_READ_DATA_ConvertVoltage>:
 * @param u16_adc_value_voltage The parameter `u16_adc_value_voltage` is a
 * 16-bit unsigned integer representing the ADC value of the voltage being read.
 */
static void
APP_READ_DATA_ConvertVoltage (uint16_t u16_adc_value_voltage)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001fb4:	fb02 f303 	mul.w	r3, r2, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <APP_READ_DATA_ConvertVoltage+0x6c>)
 8001fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc0:	1ad2      	subs	r2, r2, r3
 8001fc2:	0852      	lsrs	r2, r2, #1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fe6d 	bl	8000ca8 <__aeabi_ui2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_voltage, LL_ADC_RESOLUTION_12B);

  *s_read_data.p_voltage = f_mVolt * 11.0 / 100.0;
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7fe fa32 	bl	800043c <__aeabi_f2d>
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <APP_READ_DATA_ConvertVoltage+0x70>)
 8001fde:	f7fe fa85 	bl	80004ec <__aeabi_dmul>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b0a      	ldr	r3, [pc, #40]	@ (8002018 <APP_READ_DATA_ConvertVoltage+0x74>)
 8001ff0:	f7fe fba6 	bl	8000740 <__aeabi_ddiv>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4908      	ldr	r1, [pc, #32]	@ (800201c <APP_READ_DATA_ConvertVoltage+0x78>)
 8001ffa:	688c      	ldr	r4, [r1, #8]
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fd4c 	bl	8000a9c <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	6023      	str	r3, [r4, #0]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	00100101 	.word	0x00100101
 8002014:	40260000 	.word	0x40260000
 8002018:	40590000 	.word	0x40590000
 800201c:	20000d1c 	.word	0x20000d1c

08002020 <APP_READ_DATA_ConvertCurrent>:

static void
APP_READ_DATA_ConvertCurrent (uint16_t u16_adc_value_current)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002030:	fb02 f303 	mul.w	r3, r2, r3
 8002034:	461a      	mov	r2, r3
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <APP_READ_DATA_ConvertCurrent+0x70>)
 8002038:	fba3 1302 	umull	r1, r3, r3, r2
 800203c:	1ad2      	subs	r2, r2, r3
 800203e:	0852      	lsrs	r2, r2, #1
 8002040:	4413      	add	r3, r2
 8002042:	0adb      	lsrs	r3, r3, #11
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fe2f 	bl	8000ca8 <__aeabi_ui2f>
 800204a:	4603      	mov	r3, r0
 800204c:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_current, LL_ADC_RESOLUTION_12B);

  f_mVolt = f_mVolt / 1.6;
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7fe f9f4 	bl	800043c <__aeabi_f2d>
 8002054:	a30c      	add	r3, pc, #48	@ (adr r3, 8002088 <APP_READ_DATA_ConvertCurrent+0x68>)
 8002056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205a:	f7fe fb71 	bl	8000740 <__aeabi_ddiv>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fd19 	bl	8000a9c <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	60fb      	str	r3, [r7, #12]

  *s_read_data.p_current = ACS712_VoltageConverterCurrent(f_mVolt);
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <APP_READ_DATA_ConvertCurrent+0x74>)
 8002070:	68dc      	ldr	r4, [r3, #12]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f7ff fe24 	bl	8001cc0 <ACS712_VoltageConverterCurrent>
 8002078:	4603      	mov	r3, r0
 800207a:	6023      	str	r3, [r4, #0]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	f3af 8000 	nop.w
 8002088:	9999999a 	.word	0x9999999a
 800208c:	3ff99999 	.word	0x3ff99999
 8002090:	00100101 	.word	0x00100101
 8002094:	20000d1c 	.word	0x20000d1c

08002098 <LL_GPIO_SetOutputPin>:
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	611a      	str	r2, [r3, #16]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <BSP_GPIO_Toggle>:
    }
  }

  static inline void BSP_GPIO_Toggle (GPIO_TypeDef *gpio_port,
                                      uint32_t      gpio_pin)
  {
 80020b6:	b480      	push	{r7}
 80020b8:	b085      	sub	sp, #20
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
    uint32_t odr     = gpio_port->ODR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	60fb      	str	r3, [r7, #12]
    uint32_t pinmask = ((gpio_pin >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	60bb      	str	r3, [r7, #8]
    gpio_port->BSRR  = ((odr & pinmask) << 16u) | (~odr & pinmask);
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	4013      	ands	r3, r2
 80020d4:	041a      	lsls	r2, r3, #16
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	43d9      	mvns	r1, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	400b      	ands	r3, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	611a      	str	r2, [r3, #16]
  }
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
	...

080020f0 <APP_STATUS_LED_Init>:
 * The function initializes status LEDs by resetting GPIO pins, linking a
 * pointer to a variable, and resetting fields in a structure.
 */
void
APP_STATUS_LED_Init (void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  // Reset GPIO
  LL_GPIO_SetOutputPin(PORT_LED_STATUS, PIN_LED_STATUS);
 80020f4:	f241 0110 	movw	r1, #4112	@ 0x1010
 80020f8:	4807      	ldr	r0, [pc, #28]	@ (8002118 <APP_STATUS_LED_Init+0x28>)
 80020fa:	f7ff ffcd 	bl	8002098 <LL_GPIO_SetOutputPin>

  // Reset field of s_status_led
  s_status_led.u8_flag_enable_timer_100ms = 0;
 80020fe:	4a07      	ldr	r2, [pc, #28]	@ (800211c <APP_STATUS_LED_Init+0x2c>)
 8002100:	7813      	ldrb	r3, [r2, #0]
 8002102:	f36f 0300 	bfc	r3, #0, #1
 8002106:	7013      	strb	r3, [r2, #0]
  s_status_led.u8_flag_enable_timer_500ms = 0;
 8002108:	4a04      	ldr	r2, [pc, #16]	@ (800211c <APP_STATUS_LED_Init+0x2c>)
 800210a:	7813      	ldrb	r3, [r2, #0]
 800210c:	f36f 0341 	bfc	r3, #1, #1
 8002110:	7013      	strb	r3, [r2, #0]
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40010c00 	.word	0x40010c00
 800211c:	20000d2c 	.word	0x20000d2c

08002120 <APP_STATUS_LED_CreateTimer>:
 * The function `APP_STATUS_LED_CreateTimer` creates timers for status LED
 * handling.
 */
void
APP_STATUS_LED_CreateTimer (void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[0].timerHandle,
 8002124:	4904      	ldr	r1, [pc, #16]	@ (8002138 <APP_STATUS_LED_CreateTimer+0x18>)
 8002126:	4805      	ldr	r0, [pc, #20]	@ (800213c <APP_STATUS_LED_CreateTimer+0x1c>)
 8002128:	f004 f89a 	bl	8006260 <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[0].timerProperty);
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[1].timerHandle,
 800212c:	4904      	ldr	r1, [pc, #16]	@ (8002140 <APP_STATUS_LED_CreateTimer+0x20>)
 800212e:	4805      	ldr	r0, [pc, #20]	@ (8002144 <APP_STATUS_LED_CreateTimer+0x24>)
 8002130:	f004 f896 	bl	8006260 <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[1].timerProperty);
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200000ac 	.word	0x200000ac
 800213c:	200000a8 	.word	0x200000a8
 8002140:	200000b8 	.word	0x200000b8
 8002144:	200000b4 	.word	0x200000b4

08002148 <APP_STATUS_LED_CreateTask>:
/**
 * The function APP_STATUS_LED_CreateTask creates a task for the status LED.
 */
void
APP_STATUS_LED_CreateTask (void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_StatusLedTaskContext.taskHandle,
 800214c:	4902      	ldr	r1, [pc, #8]	@ (8002158 <APP_STATUS_LED_CreateTask+0x10>)
 800214e:	4803      	ldr	r0, [pc, #12]	@ (800215c <APP_STATUS_LED_CreateTask+0x14>)
 8002150:	f004 f848 	bl	80061e4 <SCH_TASK_CreateTask>
                      &s_StatusLedTaskContext.taskProperty);
//  SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
}
 8002154:	bf00      	nop
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000009c 	.word	0x2000009c
 800215c:	20000098 	.word	0x20000098

08002160 <APP_STATUS_LED_TaskUpdate>:
 *  PRIVATE FUNCTION
 *****************************************************************************/

static void
APP_STATUS_LED_TaskUpdate (void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  if (s_data_system.f_current < THRESHOLD_CURRENT)
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <APP_STATUS_LED_TaskUpdate+0x48>)
 8002166:	f8d3 3874 	ldr.w	r3, [r3, #2164]	@ 0x874
 800216a:	4910      	ldr	r1, [pc, #64]	@ (80021ac <APP_STATUS_LED_TaskUpdate+0x4c>)
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe ff91 	bl	8001094 <__aeabi_fcmplt>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <APP_STATUS_LED_TaskUpdate+0x2e>
  {
    SCH_TIM_StopTimer(s_StatusLedTimerContext[0].timerHandle);
 8002178:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <APP_STATUS_LED_TaskUpdate+0x50>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f004 f8d3 	bl	8006328 <SCH_TIM_StopTimer>
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[1].timerHandle);
 8002182:	4b0b      	ldr	r3, [pc, #44]	@ (80021b0 <APP_STATUS_LED_TaskUpdate+0x50>)
 8002184:	7b1b      	ldrb	r3, [r3, #12]
 8002186:	4618      	mov	r0, r3
 8002188:	f004 f8a8 	bl	80062dc <SCH_TIM_RestartTimer>
  else
  {
    SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
  }
}
 800218c:	e009      	b.n	80021a2 <APP_STATUS_LED_TaskUpdate+0x42>
    SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
 800218e:	4b08      	ldr	r3, [pc, #32]	@ (80021b0 <APP_STATUS_LED_TaskUpdate+0x50>)
 8002190:	7b1b      	ldrb	r3, [r3, #12]
 8002192:	4618      	mov	r0, r3
 8002194:	f004 f8c8 	bl	8006328 <SCH_TIM_StopTimer>
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
 8002198:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <APP_STATUS_LED_TaskUpdate+0x50>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f004 f89d 	bl	80062dc <SCH_TIM_RestartTimer>
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200003ec 	.word	0x200003ec
 80021ac:	40a00000 	.word	0x40a00000
 80021b0:	200000a8 	.word	0x200000a8

080021b4 <APP_STATUS_LED_100MS_TimerUpdate>:

static void
APP_STATUS_LED_100MS_TimerUpdate (void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  BSP_GPIO_Toggle(PORT_LED_STATUS, PIN_LED_STATUS);
 80021b8:	f241 0110 	movw	r1, #4112	@ 0x1010
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <APP_STATUS_LED_100MS_TimerUpdate+0x14>)
 80021be:	f7ff ff7a 	bl	80020b6 <BSP_GPIO_Toggle>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40010c00 	.word	0x40010c00

080021cc <APP_STATUS_LED_500MS_TimerUpdate>:

static void
APP_STATUS_LED_500MS_TimerUpdate (void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  BSP_GPIO_Toggle(PORT_LED_STATUS, PIN_LED_STATUS);
 80021d0:	f241 0110 	movw	r1, #4112	@ 0x1010
 80021d4:	4802      	ldr	r0, [pc, #8]	@ (80021e0 <APP_STATUS_LED_500MS_TimerUpdate+0x14>)
 80021d6:	f7ff ff6e 	bl	80020b6 <BSP_GPIO_Toggle>
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40010c00 	.word	0x40010c00

080021e4 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d103      	bne.n	8002200 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	334c      	adds	r3, #76	@ 0x4c
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e001      	b.n	8002204 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <LL_ADC_DMA_GetRegAddr+0x2c>)
 8002202:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	4001244c 	.word	0x4001244c

08002214 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL) == (LL_ADC_REG_TRIG_SOFTWARE));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002224:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr

0800225e <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	609a      	str	r2, [r3, #8]
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <LL_ADC_Disable>:
  * @rmtoll CR2      ADON           LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 0201 	bic.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	bf0c      	ite	eq
 80022ae:	2301      	moveq	r3, #1
 80022b0:	2300      	movne	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f043 0204 	orr.w	r2, r3, #4
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	609a      	str	r2, [r3, #8]
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f06f 0202 	mvn.w	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr

08002334 <BSP_ADC_ConversionStop_Disable>:
 *   INLINE PRIVATE FUNCTION
 *****************************************************************************/

static inline void
BSP_ADC_ConversionStop_Disable (ADC_TypeDef *p_ADC)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  // Disable the ADC peripheral
  LL_ADC_Disable(p_ADC);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ff9d 	bl	800227c <LL_ADC_Disable>

  // Wait for ADC effectively disabled
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002342:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <BSP_ADC_ConversionStop_Disable+0x38>)
 8002344:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002348:	601a      	str	r2, [r3, #0]
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 800234a:	e003      	b.n	8002354 <BSP_ADC_ConversionStop_Disable+0x20>
  {
    if (u32_adc_timeout == 0)
 800234c:	4b07      	ldr	r3, [pc, #28]	@ (800236c <BSP_ADC_ConversionStop_Disable+0x38>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <BSP_ADC_ConversionStop_Disable+0x2e>
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffa0 	bl	800229a <LL_ADC_IsEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f5      	bne.n	800234c <BSP_ADC_ConversionStop_Disable+0x18>
 8002360:	e000      	b.n	8002364 <BSP_ADC_ConversionStop_Disable+0x30>
    {
      return;
 8002362:	bf00      	nop
    }
  }
}
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000d30 	.word	0x20000d30

08002370 <BSP_ADC_Enable>:

static inline void
BSP_ADC_Enable (ADC_TypeDef *p_ADC)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if (LL_ADC_IsEnabled(p_ADC) == RESET)
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff8e 	bl	800229a <LL_ADC_IsEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d113      	bne.n	80023ac <BSP_ADC_Enable+0x3c>
  {
    LL_ADC_Enable(p_ADC);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7ff ff6a 	bl	800225e <LL_ADC_Enable>
    // Wait for ADC effectively enabled
    u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <BSP_ADC_Enable+0x44>)
 800238c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002390:	601a      	str	r2, [r3, #0]
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 8002392:	e003      	b.n	800239c <BSP_ADC_Enable+0x2c>
    {
      if (u32_adc_timeout == 0)
 8002394:	4b07      	ldr	r3, [pc, #28]	@ (80023b4 <BSP_ADC_Enable+0x44>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <BSP_ADC_Enable+0x3a>
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff7c 	bl	800229a <LL_ADC_IsEnabled>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f5      	beq.n	8002394 <BSP_ADC_Enable+0x24>
 80023a8:	e000      	b.n	80023ac <BSP_ADC_Enable+0x3c>
      {
        return;
 80023aa:	bf00      	nop
      }
    }
  }
}
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000d30 	.word	0x20000d30

080023b8 <BSP_ADC_Start_Calibration>:
 *   PUBLIC FUNCTION
 *****************************************************************************/

void
BSP_ADC_Start_Calibration (ADC_TypeDef *p_ADC)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  // 1. Disable ADC peripheral
  BSP_ADC_ConversionStop_Disable(p_ADC);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffb7 	bl	8002334 <BSP_ADC_ConversionStop_Disable>

  // 2. Calibration prerequisite delay before starting the calibration.
  // - ADC must be enabled for at least two ADC clock cycles
  BSP_ADC_Enable(p_ADC);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f7ff ffd2 	bl	8002370 <BSP_ADC_Enable>

  // Hardware prerequisite: delay before starting the calibration.
  //  - Computation of CPU clock cycles corresponding to ADC clock cycles.
  //  - Wait for the expected ADC clock cycles delay
  LL_mDelay(10);
 80023cc:	200a      	movs	r0, #10
 80023ce:	f003 fe0f 	bl	8005ff0 <LL_mDelay>

  // 3. Resets ADC calibration registers
  p_ADC->CR2 |= ADC_CR2_RSTCAL;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f043 0208 	orr.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	609a      	str	r2, [r3, #8]

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 80023de:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <BSP_ADC_Start_Calibration+0x78>)
 80023e0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023e4:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 80023e6:	e003      	b.n	80023f0 <BSP_ADC_Start_Calibration+0x38>
  {
    if (u32_adc_timeout == 0)
 80023e8:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <BSP_ADC_Start_Calibration+0x78>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d018      	beq.n	8002422 <BSP_ADC_Start_Calibration+0x6a>
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f5      	bne.n	80023e8 <BSP_ADC_Start_Calibration+0x30>
      return;
    }
  }

  // 4. Start ADC calibration
  LL_ADC_StartCalibration(p_ADC);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff5e 	bl	80022be <LL_ADC_StartCalibration>

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002402:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <BSP_ADC_Start_Calibration+0x78>)
 8002404:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002408:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 800240a:	e003      	b.n	8002414 <BSP_ADC_Start_Calibration+0x5c>
  {
    if (u32_adc_timeout == 0)
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <BSP_ADC_Start_Calibration+0x78>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <BSP_ADC_Start_Calibration+0x6e>
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f5      	bne.n	800240c <BSP_ADC_Start_Calibration+0x54>
 8002420:	e002      	b.n	8002428 <BSP_ADC_Start_Calibration+0x70>
      return;
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <BSP_ADC_Start_Calibration+0x70>
    {
      return;
 8002426:	bf00      	nop
    }
  }
}
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000d30 	.word	0x20000d30

08002434 <BSP_ADC_Start_DMA>:

// Using with >= 2 Channel in ADC
void
BSP_ADC_Start_DMA (ADC_TypeDef *p_ADC, uint16_t *pData, uint32_t Length)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  // Enable the ADC peripheral
  BSP_ADC_Enable(p_ADC);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff ff95 	bl	8002370 <BSP_ADC_Enable>

  // Clear previous flags (EOC)
  LL_ADC_ClearFlag_EOS(p_ADC);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff67 	bl	800231a <LL_ADC_ClearFlag_EOS>

  LL_ADC_REG_SetDMATransfer(p_ADC, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 800244c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff fef2 	bl	800223a <LL_ADC_REG_SetDMATransfer>

  BSP_DMA_Start_IT(DMA1,
 8002456:	2100      	movs	r1, #0
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fec3 	bl	80021e4 <LL_ADC_DMA_GetRegAddr>
 800245e:	4601      	mov	r1, r0
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	460a      	mov	r2, r1
 800246a:	2101      	movs	r1, #1
 800246c:	480a      	ldr	r0, [pc, #40]	@ (8002498 <BSP_ADC_Start_DMA+0x64>)
 800246e:	f000 f9c5 	bl	80027fc <BSP_DMA_Start_IT>
                   LL_ADC_DMA_GetRegAddr(p_ADC, LL_ADC_DMA_REG_REGULAR_DATA),
                   (uint32_t)pData,
                   Length);

  // Start ADC conversion
  if (LL_ADC_REG_IsTriggerSourceSWStart(p_ADC))
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f7ff fece 	bl	8002214 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <BSP_ADC_Start_DMA+0x52>
  {
    // If software start is selected
    LL_ADC_REG_StartConversionSWStart(p_ADC);
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff ff2c 	bl	80022dc <LL_ADC_REG_StartConversionSWStart>
  else
  {
    // If external trigger is selected
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
  }
}
 8002484:	e004      	b.n	8002490 <BSP_ADC_Start_DMA+0x5c>
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
 8002486:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f7ff ff35 	bl	80022fa <LL_ADC_REG_StartConversionExtTrig>
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40020000 	.word	0x40020000

0800249c <BSP_ADC_TimeOut>:

void
BSP_ADC_TimeOut (void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  if (u32_adc_timeout != 0)
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <BSP_ADC_TimeOut+0x20>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <BSP_ADC_TimeOut+0x16>
  {
    u32_adc_timeout--;
 80024a8:	4b04      	ldr	r3, [pc, #16]	@ (80024bc <BSP_ADC_TimeOut+0x20>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	4a03      	ldr	r2, [pc, #12]	@ (80024bc <BSP_ADC_TimeOut+0x20>)
 80024b0:	6013      	str	r3, [r2, #0]
  }
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000d30 	.word	0x20000d30

080024c0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <LL_DMA_EnableChannel+0x38>)
 80024d0:	5cd3      	ldrb	r3, [r2, r3]
 80024d2:	461a      	mov	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	3a01      	subs	r2, #1
 80024de:	4906      	ldr	r1, [pc, #24]	@ (80024f8 <LL_DMA_EnableChannel+0x38>)
 80024e0:	5c8a      	ldrb	r2, [r1, r2]
 80024e2:	4611      	mov	r1, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	440a      	add	r2, r1
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	6013      	str	r3, [r2, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	080093f8 	.word	0x080093f8

080024fc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	3b01      	subs	r3, #1
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <LL_DMA_DisableChannel+0x38>)
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4413      	add	r3, r2
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	3a01      	subs	r2, #1
 800251a:	4906      	ldr	r1, [pc, #24]	@ (8002534 <LL_DMA_DisableChannel+0x38>)
 800251c:	5c8a      	ldrb	r2, [r1, r2]
 800251e:	4611      	mov	r1, r2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	440a      	add	r2, r1
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	080093f8 	.word	0x080093f8

08002538 <LL_DMA_GetMode>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  */
__STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	3b01      	subs	r3, #1
 8002546:	4a06      	ldr	r2, [pc, #24]	@ (8002560 <LL_DMA_GetMode+0x28>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
                   DMA_CCR_CIRC));
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr
 8002560:	080093f8 	.word	0x080093f8

08002564 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	3b01      	subs	r3, #1
 8002574:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <LL_DMA_SetDataLength+0x40>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4413      	add	r3, r2
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	041b      	lsls	r3, r3, #16
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	3a01      	subs	r2, #1
 8002588:	4906      	ldr	r1, [pc, #24]	@ (80025a4 <LL_DMA_SetDataLength+0x40>)
 800258a:	5c8a      	ldrb	r2, [r1, r2]
 800258c:	4611      	mov	r1, r2
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	440a      	add	r2, r1
 8002592:	4611      	mov	r1, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	080093f8 	.word	0x080093f8

080025a8 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b10      	cmp	r3, #16
 80025ba:	d114      	bne.n	80025e6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	3b01      	subs	r3, #1
 80025c0:	4a15      	ldr	r2, [pc, #84]	@ (8002618 <LL_DMA_ConfigAddresses+0x70>)
 80025c2:	5cd3      	ldrb	r3, [r2, r3]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4413      	add	r3, r2
 80025ca:	461a      	mov	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	4a10      	ldr	r2, [pc, #64]	@ (8002618 <LL_DMA_ConfigAddresses+0x70>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	461a      	mov	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	461a      	mov	r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80025e4:	e013      	b.n	800260e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002618 <LL_DMA_ConfigAddresses+0x70>)
 80025ec:	5cd3      	ldrb	r3, [r2, r3]
 80025ee:	461a      	mov	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	3b01      	subs	r3, #1
 80025fe:	4a06      	ldr	r2, [pc, #24]	@ (8002618 <LL_DMA_ConfigAddresses+0x70>)
 8002600:	5cd3      	ldrb	r3, [r2, r3]
 8002602:	461a      	mov	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4413      	add	r3, r2
 8002608:	461a      	mov	r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	60d3      	str	r3, [r2, #12]
}
 800260e:	bf00      	nop
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	080093f8 	.word	0x080093f8

0800261c <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b02      	cmp	r3, #2
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
}
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b04      	cmp	r3, #4
 8002652:	bf0c      	ite	eq
 8002654:	2301      	moveq	r3, #1
 8002656:	2300      	movne	r3, #0
 8002658:	b2db      	uxtb	r3, r3
}
 800265a:	4618      	mov	r0, r3
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b08      	cmp	r3, #8
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
}
 800267e:	4618      	mov	r0, r3
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	605a      	str	r2, [r3, #4]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2204      	movs	r2, #4
 80026ac:	605a      	str	r2, [r3, #4]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2208      	movs	r2, #8
 80026c4:	605a      	str	r2, [r3, #4]
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	3b01      	subs	r3, #1
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <LL_DMA_EnableIT_TC+0x38>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	461a      	mov	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	3a01      	subs	r2, #1
 80026ee:	4906      	ldr	r1, [pc, #24]	@ (8002708 <LL_DMA_EnableIT_TC+0x38>)
 80026f0:	5c8a      	ldrb	r2, [r1, r2]
 80026f2:	4611      	mov	r1, r2
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	440a      	add	r2, r1
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	6013      	str	r3, [r2, #0]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	080093f8 	.word	0x080093f8

0800270c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	3b01      	subs	r3, #1
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <LL_DMA_EnableIT_TE+0x38>)
 800271c:	5cd3      	ldrb	r3, [r2, r3]
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	3a01      	subs	r2, #1
 800272a:	4906      	ldr	r1, [pc, #24]	@ (8002744 <LL_DMA_EnableIT_TE+0x38>)
 800272c:	5c8a      	ldrb	r2, [r1, r2]
 800272e:	4611      	mov	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	440a      	add	r2, r1
 8002734:	f043 0308 	orr.w	r3, r3, #8
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr
 8002744:	080093f8 	.word	0x080093f8

08002748 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <LL_DMA_DisableIT_TC+0x38>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	461a      	mov	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4413      	add	r3, r2
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	3a01      	subs	r2, #1
 8002766:	4906      	ldr	r1, [pc, #24]	@ (8002780 <LL_DMA_DisableIT_TC+0x38>)
 8002768:	5c8a      	ldrb	r2, [r1, r2]
 800276a:	4611      	mov	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	440a      	add	r2, r1
 8002770:	f023 0302 	bic.w	r3, r3, #2
 8002774:	6013      	str	r3, [r2, #0]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	080093f8 	.word	0x080093f8

08002784 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <LL_DMA_DisableIT_HT+0x38>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	3a01      	subs	r2, #1
 80027a2:	4906      	ldr	r1, [pc, #24]	@ (80027bc <LL_DMA_DisableIT_HT+0x38>)
 80027a4:	5c8a      	ldrb	r2, [r1, r2]
 80027a6:	4611      	mov	r1, r2
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	440a      	add	r2, r1
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	080093f8 	.word	0x080093f8

080027c0 <LL_DMA_DisableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <LL_DMA_DisableIT_TE+0x38>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	461a      	mov	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	3a01      	subs	r2, #1
 80027de:	4906      	ldr	r1, [pc, #24]	@ (80027f8 <LL_DMA_DisableIT_TE+0x38>)
 80027e0:	5c8a      	ldrb	r2, [r1, r2]
 80027e2:	4611      	mov	r1, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	440a      	add	r2, r1
 80027e8:	f023 0308 	bic.w	r3, r3, #8
 80027ec:	6013      	str	r3, [r2, #0]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	080093f8 	.word	0x080093f8

080027fc <BSP_DMA_Start_IT>:
BSP_DMA_Start_IT (DMA_TypeDef *p_DMA,
                  uint32_t     Channel,
                  uint32_t     SrcAddress,
                  uint32_t     DstAddress,
                  uint32_t     DataLength)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]
  LL_DMA_DisableChannel(p_DMA, Channel);
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f7ff fe75 	bl	80024fc <LL_DMA_DisableChannel>

  LL_DMA_ConfigAddresses(p_DMA,
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f7ff fec3 	bl	80025a8 <LL_DMA_ConfigAddresses>
                         Channel,
                         SrcAddress,
                         (uint32_t)DstAddress,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  LL_DMA_SetDataLength(p_DMA, Channel, DataLength);
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f7ff fe9c 	bl	8002564 <LL_DMA_SetDataLength>

//  LL_DMA_EnableIT_HT(p_DMA, Channel);
  LL_DMA_EnableIT_TC(p_DMA, Channel);
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff ff4e 	bl	80026d0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(p_DMA, Channel);
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7ff ff68 	bl	800270c <LL_DMA_EnableIT_TE>

  LL_DMA_EnableChannel(p_DMA, Channel);
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fe3e 	bl	80024c0 <LL_DMA_EnableChannel>
}
 8002844:	bf00      	nop
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <BSP_DMA_IRQ_Channel1_Handler>:
 * `DMA_TypeDef`, which is likely a data structure representing a Direct Memory
 * Access (DMA) controller in a micro-controller or embedded system.
 */
flagIRQ_dma_t
BSP_DMA_IRQ_Channel1_Handler (DMA_TypeDef *p_DMA)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Half Transfer Complete Interrupt management ******************************/
  if (LL_DMA_IsActiveFlag_HT1(p_DMA))
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff fef3 	bl	8002640 <LL_DMA_IsActiveFlag_HT1>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00f      	beq.n	8002880 <BSP_DMA_IRQ_Channel1_Handler+0x34>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002860:	2101      	movs	r1, #1
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fe68 	bl	8002538 <LL_DMA_GetMode>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <BSP_DMA_IRQ_Channel1_Handler+0x2a>
    {
      LL_DMA_DisableIT_HT(p_DMA, LL_DMA_CHANNEL_1);
 800286e:	2101      	movs	r1, #1
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff87 	bl	8002784 <LL_DMA_DisableIT_HT>
    }
    LL_DMA_ClearFlag_HT1(p_DMA);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff12 	bl	80026a0 <LL_DMA_ClearFlag_HT1>
    return FLAG_HALF_TRANSFER_COMPLETE;
 800287c:	2301      	movs	r3, #1
 800287e:	e02c      	b.n	80028da <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if (LL_DMA_IsActiveFlag_TC1(p_DMA))
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fecb 	bl	800261c <LL_DMA_IsActiveFlag_TC1>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00f      	beq.n	80028ac <BSP_DMA_IRQ_Channel1_Handler+0x60>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 800288c:	2101      	movs	r1, #1
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fe52 	bl	8002538 <LL_DMA_GetMode>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <BSP_DMA_IRQ_Channel1_Handler+0x56>
    {
      LL_DMA_DisableIT_TC(p_DMA, LL_DMA_CHANNEL_1);
 800289a:	2101      	movs	r1, #1
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff53 	bl	8002748 <LL_DMA_DisableIT_TC>
    }
    LL_DMA_ClearFlag_TC1(p_DMA);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fef0 	bl	8002688 <LL_DMA_ClearFlag_TC1>
    return FLAG_TRANSFER_COMPLETE;
 80028a8:	2302      	movs	r3, #2
 80028aa:	e016      	b.n	80028da <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Error Interrupt management **************************************/
  else if (LL_DMA_IsActiveFlag_TE1(p_DMA))
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fed9 	bl	8002664 <LL_DMA_IsActiveFlag_TE1>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00f      	beq.n	80028d8 <BSP_DMA_IRQ_Channel1_Handler+0x8c>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 80028b8:	2101      	movs	r1, #1
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fe3c 	bl	8002538 <LL_DMA_GetMode>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <BSP_DMA_IRQ_Channel1_Handler+0x82>
    {
      LL_DMA_DisableIT_TE(p_DMA, LL_DMA_CHANNEL_1);
 80028c6:	2101      	movs	r1, #1
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff ff79 	bl	80027c0 <LL_DMA_DisableIT_TE>
    }
    LL_DMA_ClearFlag_TE1(p_DMA);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff fef2 	bl	80026b8 <LL_DMA_ClearFlag_TE1>
    return FLAG_TRANSFER_ERROR;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e000      	b.n	80028da <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  return FLAG_NONE;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	@ (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	@ (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	bc80      	pop	{r7}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002948:	d301      	bcc.n	800294e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800294a:	2301      	movs	r3, #1
 800294c:	e00f      	b.n	800296e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800294e:	4a0a      	ldr	r2, [pc, #40]	@ (8002978 <SysTick_Config+0x40>)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002956:	210f      	movs	r1, #15
 8002958:	f04f 30ff 	mov.w	r0, #4294967295
 800295c:	f7ff ffc2 	bl	80028e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <SysTick_Config+0x40>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002966:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <SysTick_Config+0x40>)
 8002968:	2207      	movs	r2, #7
 800296a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000e010 	.word	0xe000e010

0800297c <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0

  SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk);
 8002980:	4b04      	ldr	r3, [pc, #16]	@ (8002994 <BSP_SYSTICK_TimerStart+0x18>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a03      	ldr	r2, [pc, #12]	@ (8002994 <BSP_SYSTICK_TimerStart+0x18>)
 8002986:	f043 0303 	orr.w	r3, r3, #3
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	e000e010 	.word	0xe000e010

08002998 <BSP_SYSTICK_TimerInit>:
 * This function configures the SysTick timer to generate interrupts at a rate
 * of 1 millisecond, based on the system core clock.
 */
void
BSP_SYSTICK_TimerInit (void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  SysTick_Config(SystemCoreClock / 1000);
 800299c:	4b05      	ldr	r3, [pc, #20]	@ (80029b4 <BSP_SYSTICK_TimerInit+0x1c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <BSP_SYSTICK_TimerInit+0x20>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	099b      	lsrs	r3, r3, #6
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ffc5 	bl	8002938 <SysTick_Config>
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200000c0 	.word	0x200000c0
 80029b8:	10624dd3 	.word	0x10624dd3

080029bc <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	bf0c      	ite	eq
 8002a18:	2301      	moveq	r3, #1
 8002a1a:	2300      	movne	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b20      	cmp	r3, #32
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5c:	2b80      	cmp	r3, #128	@ 0x80
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002a86:	68fb      	ldr	r3, [r7, #12]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
}
 8002aaa:	bf00      	nop
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr

08002ab4 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b089      	sub	sp, #36	@ 0x24
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f043 0320 	orr.w	r3, r3, #32
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	330c      	adds	r3, #12
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	61ba      	str	r2, [r7, #24]
 8002afc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afe:	6979      	ldr	r1, [r7, #20]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	e841 2300 	strex	r3, r2, [r1]
 8002b06:	613b      	str	r3, [r7, #16]
   return(result);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1e7      	bne.n	8002ade <LL_USART_EnableIT_RXNE+0x8>
}
 8002b0e:	bf00      	nop
 8002b10:	bf00      	nop
 8002b12:	3724      	adds	r7, #36	@ 0x24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b089      	sub	sp, #36	@ 0x24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	330c      	adds	r3, #12
 8002b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	61ba      	str	r2, [r7, #24]
 8002b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e7      	bne.n	8002b22 <LL_USART_EnableIT_TXE+0x8>
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	3724      	adds	r7, #36	@ 0x24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b089      	sub	sp, #36	@ 0x24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3314      	adds	r3, #20
 8002b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	e853 3f00 	ldrex	r3, [r3]
 8002b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	61fb      	str	r3, [r7, #28]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	61ba      	str	r2, [r7, #24]
 8002b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1e7      	bne.n	8002b66 <LL_USART_EnableIT_ERROR+0x8>
}
 8002b96:	bf00      	nop
 8002b98:	bf00      	nop
 8002b9a:	3724      	adds	r7, #36	@ 0x24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr

08002ba2 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b089      	sub	sp, #36	@ 0x24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	330c      	adds	r3, #12
 8002bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 0320 	bic.w	r3, r3, #32
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	61ba      	str	r2, [r7, #24]
 8002bc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bca:	6979      	ldr	r1, [r7, #20]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e7      	bne.n	8002baa <LL_USART_DisableIT_RXNE+0x8>
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	3724      	adds	r7, #36	@ 0x24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b089      	sub	sp, #36	@ 0x24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	e853 3f00 	ldrex	r3, [r3]
 8002bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	330c      	adds	r3, #12
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	61ba      	str	r2, [r7, #24]
 8002c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6979      	ldr	r1, [r7, #20]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	613b      	str	r3, [r7, #16]
   return(result);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e7      	bne.n	8002bee <LL_USART_DisableIT_TXE+0x8>
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	3724      	adds	r7, #36	@ 0x24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr

08002c4e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5e:	2b80      	cmp	r3, #128	@ 0x80
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	b2db      	uxtb	r3, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  uartstdio_device->e_uart_irqn = uart_irqn;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c

  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f003 f9c2 	bl	8006054 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 f9be 	bl	8006054 <RING_BUFFER_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 8002cd8:	68b8      	ldr	r0, [r7, #8]
 8002cda:	f7ff ff40 	bl	8002b5e <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 8002cde:	68b8      	ldr	r0, [r7, #8]
 8002ce0:	f7ff fef9 	bl	8002ad6 <LL_USART_EnableIT_RXNE>
}
 8002ce4:	bf00      	nop
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 f9d6 	bl	80060a8 <RING_BUFFER_Is_Empty>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 8002d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d20:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002d22:	e005      	b.n	8002d30 <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d026      	beq.n	8002d78 <BSP_UART_SendChar+0x68>
    {
      return;
    }
    u32_uart_timeout--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 f9c7 	bl	80060ca <RING_BUFFER_Is_Full>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff2a 	bl	8002ba2 <LL_USART_DisableIT_RXNE>
  RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002d54:	78fa      	ldrb	r2, [r7, #3]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 f9c8 	bl	80060ee <RING_BUFFER_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff feb6 	bl	8002ad6 <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fed2 	bl	8002b1a <LL_USART_EnableIT_TXE>
 8002d76:	e000      	b.n	8002d7a <BSP_UART_SendChar+0x6a>
      return;
 8002d78:	bf00      	nop
}
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  while (*s)
 8002d8a:	e007      	b.n	8002d9c <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	603a      	str	r2, [r7, #0]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	4619      	mov	r1, r3
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ffba 	bl	8002d10 <BSP_UART_SendChar>
  while (*s)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f3      	bne.n	8002d8c <BSP_UART_SendString+0xc>
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 8002dae:	b590      	push	{r4, r7, lr}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 8002db6:	2400      	movs	r4, #0
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f003 f974 	bl	80060a8 <RING_BUFFER_Is_Empty>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f083 0301 	eor.w	r3, r3, #1
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <BSP_UART_ReadChar+0x46>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fee5 	bl	8002ba2 <LL_USART_DisableIT_RXNE>
    c = (char)RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 f9b0 	bl	8006140 <RING_BUFFER_Pull_Data>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fe73 	bl	8002ad6 <LL_USART_EnableIT_RXNE>
    return c;
 8002df0:	4623      	mov	r3, r4
 8002df2:	e000      	b.n	8002df6 <BSP_UART_ReadChar+0x48>
  }
  return c;
 8002df4:	4623      	mov	r3, r4
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
	...

08002e00 <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <BSP_UART_TimeOut+0x20>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d004      	beq.n	8002e16 <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <BSP_UART_TimeOut+0x20>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	4a03      	ldr	r2, [pc, #12]	@ (8002e20 <BSP_UART_TimeOut+0x20>)
 8002e14:	6013      	str	r3, [r2, #0]
  }
}
 8002e16:	bf00      	nop
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc80      	pop	{r7}
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000d34 	.word	0x20000d34

08002e24 <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fdf8 	bl	8002a28 <LL_USART_IsActiveFlag_RXNE>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d045      	beq.n	8002eca <BSP_UART_ISR+0xa6>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fef0 	bl	8002c2a <LL_USART_IsEnabledIT_RXNE>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d03c      	beq.n	8002eca <BSP_UART_ISR+0xa6>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff0b 	bl	8002c72 <LL_USART_ReceiveData8>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fdcc 	bl	8002a04 <LL_USART_IsActiveFlag_ORE>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d111      	bne.n	8002e96 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fd9f 	bl	80029bc <LL_USART_IsActiveFlag_FE>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fda8 	bl	80029e0 <LL_USART_IsActiveFlag_NE>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <BSP_UART_ISR+0x98>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fe09 	bl	8002ab4 <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fde1 	bl	8002a70 <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fdec 	bl	8002a92 <LL_USART_ClearFlag_NE>
    }
    else
    {
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 8002eba:	e039      	b.n	8002f30 <BSP_UART_ISR+0x10c>
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 f913 	bl	80060ee <RING_BUFFER_Push_Data>
    return;
 8002ec8:	e032      	b.n	8002f30 <BSP_UART_ISR+0x10c>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fdbb 	bl	8002a4c <LL_USART_IsActiveFlag_TXE>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d029      	beq.n	8002f30 <BSP_UART_ISR+0x10c>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff feb3 	bl	8002c4e <LL_USART_IsEnabledIT_TXE>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d020      	beq.n	8002f30 <BSP_UART_ISR+0x10c>
  {
    if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 f8d7 	bl	80060a8 <RING_BUFFER_Is_Empty>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <BSP_UART_ISR+0xea>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fe6d 	bl	8002be6 <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 8002f0c:	e00f      	b.n	8002f2e <BSP_UART_ISR+0x10a>
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 f913 	bl	8006140 <RING_BUFFER_Pull_Data>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8002f24:	7bba      	ldrb	r2, [r7, #14]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff feae 	bl	8002c8a <LL_USART_TransmitData8>
    return;
 8002f2e:	bf00      	nop
  }
}
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <__NVIC_GetPriorityGrouping>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4906      	ldr	r1, [pc, #24]	@ (8002f88 <__NVIC_EnableIRQ+0x34>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	@ (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	@ (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	@ 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	@ 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <LL_ADC_REG_SetSequencerRanks>:
{
 8003044:	b480      	push	{r7}
 8003046:	b089      	sub	sp, #36	@ 0x24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	332c      	adds	r3, #44	@ 0x2c
 8003054:	4619      	mov	r1, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003060:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	fa92 f2a2 	rbit	r2, r2
 8003068:	617a      	str	r2, [r7, #20]
  return result;
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	fab2 f282 	clz	r2, r2
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	40d3      	lsrs	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	211f      	movs	r1, #31
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	401a      	ands	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f003 011f 	and.w	r1, r3, #31
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	431a      	orrs	r2, r3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	3724      	adds	r7, #36	@ 0x24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <LL_ADC_SetChannelSamplingTime>:
{
 80030ae:	b480      	push	{r7}
 80030b0:	b08d      	sub	sp, #52	@ 0x34
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	330c      	adds	r3, #12
 80030be:	4619      	mov	r1, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	fa92 f2a2 	rbit	r2, r2
 80030d2:	617a      	str	r2, [r7, #20]
  return result;
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	fab2 f282 	clz	r2, r2
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	40d3      	lsrs	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(*preg,
 80030e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80030ee:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80030f2:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f4:	6a39      	ldr	r1, [r7, #32]
 80030f6:	fa91 f1a1 	rbit	r1, r1
 80030fa:	61f9      	str	r1, [r7, #28]
  return result;
 80030fc:	69f9      	ldr	r1, [r7, #28]
 80030fe:	fab1 f181 	clz	r1, r1
 8003102:	b2c9      	uxtb	r1, r1
 8003104:	40cb      	lsrs	r3, r1
 8003106:	2107      	movs	r1, #7
 8003108:	fa01 f303 	lsl.w	r3, r1, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	401a      	ands	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8003116:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800311a:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800311e:	fa91 f1a1 	rbit	r1, r1
 8003122:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8003124:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003126:	fab1 f181 	clz	r1, r1
 800312a:	b2c9      	uxtb	r1, r1
 800312c:	40cb      	lsrs	r3, r1
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003138:	601a      	str	r2, [r3, #0]
}
 800313a:	bf00      	nop
 800313c:	3734      	adds	r7, #52	@ 0x34
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <LL_DMA_SetDataTransferDirection>:
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	3b01      	subs	r3, #1
 8003154:	4a0c      	ldr	r2, [pc, #48]	@ (8003188 <LL_DMA_SetDataTransferDirection+0x44>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	461a      	mov	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4413      	add	r3, r2
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003164:	f023 0310 	bic.w	r3, r3, #16
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	3a01      	subs	r2, #1
 800316c:	4906      	ldr	r1, [pc, #24]	@ (8003188 <LL_DMA_SetDataTransferDirection+0x44>)
 800316e:	5c8a      	ldrb	r2, [r1, r2]
 8003170:	4611      	mov	r1, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	440a      	add	r2, r1
 8003176:	4611      	mov	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	08009400 	.word	0x08009400

0800318c <LL_DMA_SetMode>:
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	3b01      	subs	r3, #1
 800319c:	4a0b      	ldr	r2, [pc, #44]	@ (80031cc <LL_DMA_SetMode+0x40>)
 800319e:	5cd3      	ldrb	r3, [r2, r3]
 80031a0:	461a      	mov	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f023 0220 	bic.w	r2, r3, #32
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	4906      	ldr	r1, [pc, #24]	@ (80031cc <LL_DMA_SetMode+0x40>)
 80031b2:	5ccb      	ldrb	r3, [r1, r3]
 80031b4:	4619      	mov	r1, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	440b      	add	r3, r1
 80031ba:	4619      	mov	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	08009400 	.word	0x08009400

080031d0 <LL_DMA_SetPeriphIncMode>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	3b01      	subs	r3, #1
 80031e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003210 <LL_DMA_SetPeriphIncMode+0x40>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	461a      	mov	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	4906      	ldr	r1, [pc, #24]	@ (8003210 <LL_DMA_SetPeriphIncMode+0x40>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	4619      	mov	r1, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	440b      	add	r3, r1
 80031fe:	4619      	mov	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4313      	orrs	r3, r2
 8003204:	600b      	str	r3, [r1, #0]
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	08009400 	.word	0x08009400

08003214 <LL_DMA_SetMemoryIncMode>:
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	3b01      	subs	r3, #1
 8003224:	4a0b      	ldr	r2, [pc, #44]	@ (8003254 <LL_DMA_SetMemoryIncMode+0x40>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3b01      	subs	r3, #1
 8003238:	4906      	ldr	r1, [pc, #24]	@ (8003254 <LL_DMA_SetMemoryIncMode+0x40>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	4619      	mov	r1, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	440b      	add	r3, r1
 8003242:	4619      	mov	r1, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	08009400 	.word	0x08009400

08003258 <LL_DMA_SetPeriphSize>:
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3b01      	subs	r3, #1
 8003268:	4a0b      	ldr	r2, [pc, #44]	@ (8003298 <LL_DMA_SetPeriphSize+0x40>)
 800326a:	5cd3      	ldrb	r3, [r2, r3]
 800326c:	461a      	mov	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	3b01      	subs	r3, #1
 800327c:	4906      	ldr	r1, [pc, #24]	@ (8003298 <LL_DMA_SetPeriphSize+0x40>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	4619      	mov	r1, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	440b      	add	r3, r1
 8003286:	4619      	mov	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr
 8003298:	08009400 	.word	0x08009400

0800329c <LL_DMA_SetMemorySize>:
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	4a0b      	ldr	r2, [pc, #44]	@ (80032dc <LL_DMA_SetMemorySize+0x40>)
 80032ae:	5cd3      	ldrb	r3, [r2, r3]
 80032b0:	461a      	mov	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	3b01      	subs	r3, #1
 80032c0:	4906      	ldr	r1, [pc, #24]	@ (80032dc <LL_DMA_SetMemorySize+0x40>)
 80032c2:	5ccb      	ldrb	r3, [r1, r3]
 80032c4:	4619      	mov	r1, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	440b      	add	r3, r1
 80032ca:	4619      	mov	r1, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]
}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr
 80032dc:	08009400 	.word	0x08009400

080032e0 <LL_DMA_SetChannelPriorityLevel>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003320 <LL_DMA_SetChannelPriorityLevel+0x40>)
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	461a      	mov	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4413      	add	r3, r2
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	3b01      	subs	r3, #1
 8003304:	4906      	ldr	r1, [pc, #24]	@ (8003320 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003306:	5ccb      	ldrb	r3, [r1, r3]
 8003308:	4619      	mov	r1, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	440b      	add	r3, r1
 800330e:	4619      	mov	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	08009400 	.word	0x08009400

08003324 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003328:	4b04      	ldr	r3, [pc, #16]	@ (800333c <LL_RCC_HSE_Enable+0x18>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a03      	ldr	r2, [pc, #12]	@ (800333c <LL_RCC_HSE_Enable+0x18>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003332:	6013      	str	r3, [r2, #0]
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr
 800333c:	40021000 	.word	0x40021000

08003340 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <LL_RCC_HSE_IsReady+0x20>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003350:	bf0c      	ite	eq
 8003352:	2301      	moveq	r3, #1
 8003354:	2300      	movne	r3, #0
 8003356:	b2db      	uxtb	r3, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	40021000 	.word	0x40021000

08003364 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <LL_RCC_SetSysClkSource+0x24>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f023 0203 	bic.w	r2, r3, #3
 8003374:	4904      	ldr	r1, [pc, #16]	@ (8003388 <LL_RCC_SetSysClkSource+0x24>)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000

0800338c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <LL_RCC_GetSysClkSource+0x14>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 030c 	and.w	r3, r3, #12
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40021000 	.word	0x40021000

080033a4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80033ac:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033b4:	4904      	ldr	r1, [pc, #16]	@ (80033c8 <LL_RCC_SetAHBPrescaler+0x24>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000

080033cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80033d4:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033dc:	4904      	ldr	r1, [pc, #16]	@ (80033f0 <LL_RCC_SetAPB1Prescaler+0x24>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000

080033f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80033fc:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <LL_RCC_SetAPB2Prescaler+0x24>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003404:	4904      	ldr	r1, [pc, #16]	@ (8003418 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4313      	orrs	r3, r2
 800340a:	604b      	str	r3, [r1, #4]
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000

0800341c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <LL_RCC_SetADCClockSource+0x24>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800342c:	4904      	ldr	r1, [pc, #16]	@ (8003440 <LL_RCC_SetADCClockSource+0x24>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000

08003444 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003448:	4b04      	ldr	r3, [pc, #16]	@ (800345c <LL_RCC_PLL_Enable+0x18>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a03      	ldr	r2, [pc, #12]	@ (800345c <LL_RCC_PLL_Enable+0x18>)
 800344e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003452:	6013      	str	r3, [r2, #0]
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr
 800345c:	40021000 	.word	0x40021000

08003460 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <LL_RCC_PLL_IsReady+0x20>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003470:	bf0c      	ite	eq
 8003472:	2301      	moveq	r3, #1
 8003474:	2300      	movne	r3, #0
 8003476:	b2db      	uxtb	r3, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	40021000 	.word	0x40021000

08003484 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	430b      	orrs	r3, r1
 80034a0:	4903      	ldr	r1, [pc, #12]	@ (80034b0 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bc80      	pop	{r7}
 80034ae:	4770      	bx	lr
 80034b0:	40021000 	.word	0x40021000

080034b4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80034bc:	4b08      	ldr	r3, [pc, #32]	@ (80034e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	4907      	ldr	r1, [pc, #28]	@ (80034e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80034c8:	4b05      	ldr	r3, [pc, #20]	@ (80034e0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4013      	ands	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034d2:	68fb      	ldr	r3, [r7, #12]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000

080034e4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80034ec:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	4907      	ldr	r1, [pc, #28]	@ (8003510 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <LL_APB1_GRP1_EnableClock+0x2c>)
 80034fa:	69da      	ldr	r2, [r3, #28]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4013      	ands	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003502:	68fb      	ldr	r3, [r7, #12]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000

08003514 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800351c:	4b08      	ldr	r3, [pc, #32]	@ (8003540 <LL_APB2_GRP1_EnableClock+0x2c>)
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	4907      	ldr	r1, [pc, #28]	@ (8003540 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4313      	orrs	r3, r2
 8003526:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003528:	4b05      	ldr	r3, [pc, #20]	@ (8003540 <LL_APB2_GRP1_EnableClock+0x2c>)
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4013      	ands	r3, r2
 8003530:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000

08003544 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <LL_FLASH_SetLatency+0x24>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f023 0207 	bic.w	r2, r3, #7
 8003554:	4904      	ldr	r1, [pc, #16]	@ (8003568 <LL_FLASH_SetLatency+0x24>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000

0800356c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <LL_FLASH_GetLatency+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0307 	and.w	r3, r3, #7
}
 8003578:	4618      	mov	r0, r3
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40022000 	.word	0x40022000

08003584 <LL_TIM_DisableARRPreload>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035b4:	f023 0307 	bic.w	r3, r3, #7
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	431a      	orrs	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	609a      	str	r2, [r3, #8]
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr

0800360c <LL_USART_Enable>:
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <LL_USART_ConfigAsyncMode>:
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	615a      	str	r2, [r3, #20]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <LL_GPIO_SetPinMode>:
{
 8003654:	b490      	push	{r4, r7}
 8003656:	b088      	sub	sp, #32
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	0e1b      	lsrs	r3, r3, #24
 8003668:	4413      	add	r3, r2
 800366a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	613b      	str	r3, [r7, #16]
  return result;
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	fab3 f383 	clz	r3, r3
 8003680:	b2db      	uxtb	r3, r3
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	210f      	movs	r1, #15
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43db      	mvns	r3, r3
 800368c:	401a      	ands	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	61bb      	str	r3, [r7, #24]
  return result;
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	6023      	str	r3, [r4, #0]
}
 80036ae:	bf00      	nop
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc90      	pop	{r4, r7}
 80036b6:	4770      	bx	lr

080036b8 <LL_GPIO_SetPinPull>:
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	0a1b      	lsrs	r3, r3, #8
 80036cc:	43db      	mvns	r3, r3
 80036ce:	401a      	ands	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	0a1b      	lsrs	r3, r3, #8
 80036d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	613b      	str	r3, [r7, #16]
  return result;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	408b      	lsls	r3, r1
 80036ec:	431a      	orrs	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	60da      	str	r2, [r3, #12]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr

080036fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	0a1b      	lsrs	r3, r3, #8
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	615a      	str	r2, [r3, #20]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bc80      	pop	{r7}
 8003718:	4770      	bx	lr
	...

0800371c <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8003726:	4a13      	ldr	r2, [pc, #76]	@ (8003774 <LL_GPIO_AF_SetEXTISource+0x58>)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3302      	adds	r3, #2
 800372e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	43db      	mvns	r3, r3
 8003738:	ea02 0103 	and.w	r1, r2, r3
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	0c1b      	lsrs	r3, r3, #16
 8003740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	fa93 f3a3 	rbit	r3, r3
 8003748:	60bb      	str	r3, [r7, #8]
  return result;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	fa03 f202 	lsl.w	r2, r3, r2
 800375a:	4806      	ldr	r0, [pc, #24]	@ (8003774 <LL_GPIO_AF_SetEXTISource+0x58>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	430a      	orrs	r2, r1
 8003762:	3302      	adds	r3, #2
 8003764:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000

08003778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800377c:	f000 fcbc 	bl	80040f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003780:	f000 f842 	bl	8003808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003784:	f000 fa2e 	bl	8003be4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003788:	f000 fa14 	bl	8003bb4 <MX_DMA_Init>
  MX_ADC1_Init();
 800378c:	f000 f884 	bl	8003898 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003790:	f000 f97e 	bl	8003a90 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003794:	f000 f9a6 	bl	8003ae4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003798:	f000 f918 	bl	80039cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800379c:	f000 f948 	bl	8003a30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // Application Initialize
  APP_READ_DATA_Init();
 80037a0:	f7fe fab6 	bl	8001d10 <APP_READ_DATA_Init>
  APP_CALCULATOR_PF_Init();
 80037a4:	f7fd ff0e 	bl	80015c4 <APP_CALCULATOR_PF_Init>
  APP_DATA_TRANS_REC_Init();
 80037a8:	f7fe f858 	bl	800185c <APP_DATA_TRANS_REC_Init>
  APP_COMMAND_Init();
 80037ac:	f7fd fd14 	bl	80011d8 <APP_COMMAND_Init>
  APP_STATUS_LED_Init();
 80037b0:	f7fe fc9e 	bl	80020f0 <APP_STATUS_LED_Init>
  APP_LED_7_SEG_Init();
 80037b4:	f7fe f9e8 	bl	8001b88 <APP_LED_7_SEG_Init>

  // Initialize Scheduler
  SCH_Initialize();
 80037b8:	f002 fcea 	bl	8006190 <SCH_Initialize>

  // Create Timer
  APP_STATUS_LED_CreateTimer();
 80037bc:	f7fe fcb0 	bl	8002120 <APP_STATUS_LED_CreateTimer>

  // Application Create Task
  APP_READ_DATA_CreateTask();
 80037c0:	f7fe fa9a 	bl	8001cf8 <APP_READ_DATA_CreateTask>
  APP_CALCULATOR_PF_CreateTask();
 80037c4:	f7fd fef2 	bl	80015ac <APP_CALCULATOR_PF_CreateTask>
  APP_DATA_TRANS_REC_CreateTask();
 80037c8:	f7fe f83c 	bl	8001844 <APP_DATA_TRANS_REC_CreateTask>
  APP_COMMAND_CreateTask();
 80037cc:	f7fd fd26 	bl	800121c <APP_COMMAND_CreateTask>
  APP_STATUS_LED_CreateTask();
 80037d0:	f7fe fcba 	bl	8002148 <APP_STATUS_LED_CreateTask>
//  APP_LED_7_SEG_CreateTask();

  // Start Scheduler
  SCH_StartScheduler();
 80037d4:	f002 fe60 	bl	8006498 <SCH_StartScheduler>

  // Start ADC - TIM3
  BSP_ADC_Start_Calibration(ADC1);
 80037d8:	4808      	ldr	r0, [pc, #32]	@ (80037fc <main+0x84>)
 80037da:	f7fe fded 	bl	80023b8 <BSP_ADC_Start_Calibration>
  BSP_ADC_Start_DMA(ADC1, (uint16_t *)s_data_system.u16_adc_value, 2);
 80037de:	2202      	movs	r2, #2
 80037e0:	4907      	ldr	r1, [pc, #28]	@ (8003800 <main+0x88>)
 80037e2:	4806      	ldr	r0, [pc, #24]	@ (80037fc <main+0x84>)
 80037e4:	f7fe fe26 	bl	8002434 <BSP_ADC_Start_DMA>
  TIM3->CR1 |= TIM_CR1_CEN;
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <main+0x8c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a05      	ldr	r2, [pc, #20]	@ (8003804 <main+0x8c>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 80037f4:	f002 fe56 	bl	80064a4 <SCH_HandleScheduledTask>
 80037f8:	e7fc      	b.n	80037f4 <main+0x7c>
 80037fa:	bf00      	nop
 80037fc:	40012400 	.word	0x40012400
 8003800:	20000c6c 	.word	0x20000c6c
 8003804:	40000400 	.word	0x40000400

08003808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800380c:	2002      	movs	r0, #2
 800380e:	f7ff fe99 	bl	8003544 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8003812:	bf00      	nop
 8003814:	f7ff feaa 	bl	800356c <LL_FLASH_GetLatency>
 8003818:	4603      	mov	r3, r0
 800381a:	2b02      	cmp	r3, #2
 800381c:	d1fa      	bne.n	8003814 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800381e:	f7ff fd81 	bl	8003324 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003822:	bf00      	nop
 8003824:	f7ff fd8c 	bl	8003340 <LL_RCC_HSE_IsReady>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d1fa      	bne.n	8003824 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_7);
 800382e:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
 8003832:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003836:	f7ff fe25 	bl	8003484 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800383a:	f7ff fe03 	bl	8003444 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800383e:	bf00      	nop
 8003840:	f7ff fe0e 	bl	8003460 <LL_RCC_PLL_IsReady>
 8003844:	4603      	mov	r3, r0
 8003846:	2b01      	cmp	r3, #1
 8003848:	d1fa      	bne.n	8003840 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800384a:	2000      	movs	r0, #0
 800384c:	f7ff fdaa 	bl	80033a4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8003850:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003854:	f7ff fdba 	bl	80033cc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003858:	2000      	movs	r0, #0
 800385a:	f7ff fdcb 	bl	80033f4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800385e:	2002      	movs	r0, #2
 8003860:	f7ff fd80 	bl	8003364 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003864:	bf00      	nop
 8003866:	f7ff fd91 	bl	800338c <LL_RCC_GetSysClkSource>
 800386a:	4603      	mov	r3, r0
 800386c:	2b08      	cmp	r3, #8
 800386e:	d1fa      	bne.n	8003866 <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(56000000);
 8003870:	4808      	ldr	r0, [pc, #32]	@ (8003894 <SystemClock_Config+0x8c>)
 8003872:	f002 fbe1 	bl	8006038 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8003876:	200f      	movs	r0, #15
 8003878:	f000 fc54 	bl	8004124 <HAL_InitTick>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8003882:	f000 fa5b 	bl	8003d3c <Error_Handler>
  }
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_4);
 8003886:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800388a:	f7ff fdc7 	bl	800341c <LL_RCC_SetADCClockSource>
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	03567e00 	.word	0x03567e00

08003898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08e      	sub	sp, #56	@ 0x38
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800389e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80038ac:	f107 0318 	add.w	r3, r7, #24
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	1d3b      	adds	r3, r7, #4
 80038be:	2200      	movs	r2, #0
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	60da      	str	r2, [r3, #12]
 80038c8:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80038ca:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80038ce:	f7ff fe21 	bl	8003514 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80038d2:	2004      	movs	r0, #4
 80038d4:	f7ff fe1e 	bl	8003514 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80038d8:	f240 6306 	movw	r3, #1542	@ 0x606
 80038dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80038de:	2300      	movs	r3, #0
 80038e0:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038e2:	1d3b      	adds	r3, r7, #4
 80038e4:	4619      	mov	r1, r3
 80038e6:	4834      	ldr	r0, [pc, #208]	@ (80039b8 <MX_ADC1_Init+0x120>)
 80038e8:	f002 f87f 	bl	80059ea <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2101      	movs	r1, #1
 80038f0:	4832      	ldr	r0, [pc, #200]	@ (80039bc <MX_ADC1_Init+0x124>)
 80038f2:	f7ff fc27 	bl	8003144 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80038f6:	2200      	movs	r2, #0
 80038f8:	2101      	movs	r1, #1
 80038fa:	4830      	ldr	r0, [pc, #192]	@ (80039bc <MX_ADC1_Init+0x124>)
 80038fc:	f7ff fcf0 	bl	80032e0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003900:	2220      	movs	r2, #32
 8003902:	2101      	movs	r1, #1
 8003904:	482d      	ldr	r0, [pc, #180]	@ (80039bc <MX_ADC1_Init+0x124>)
 8003906:	f7ff fc41 	bl	800318c <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800390a:	2200      	movs	r2, #0
 800390c:	2101      	movs	r1, #1
 800390e:	482b      	ldr	r0, [pc, #172]	@ (80039bc <MX_ADC1_Init+0x124>)
 8003910:	f7ff fc5e 	bl	80031d0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	2101      	movs	r1, #1
 8003918:	4828      	ldr	r0, [pc, #160]	@ (80039bc <MX_ADC1_Init+0x124>)
 800391a:	f7ff fc7b 	bl	8003214 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 800391e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003922:	2101      	movs	r1, #1
 8003924:	4825      	ldr	r0, [pc, #148]	@ (80039bc <MX_ADC1_Init+0x124>)
 8003926:	f7ff fc97 	bl	8003258 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 800392a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392e:	2101      	movs	r1, #1
 8003930:	4822      	ldr	r0, [pc, #136]	@ (80039bc <MX_ADC1_Init+0x124>)
 8003932:	f7ff fcb3 	bl	800329c <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003936:	2300      	movs	r3, #0
 8003938:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800393a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003940:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003944:	4619      	mov	r1, r3
 8003946:	481e      	ldr	r0, [pc, #120]	@ (80039c0 <MX_ADC1_Init+0x128>)
 8003948:	f001 fe1a 	bl	8005580 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800394c:	2300      	movs	r3, #0
 800394e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8003950:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003954:	4619      	mov	r1, r3
 8003956:	481a      	ldr	r0, [pc, #104]	@ (80039c0 <MX_ADC1_Init+0x128>)
 8003958:	f001 fde0 	bl	800551c <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 800395c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003960:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8003962:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003966:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003968:	2300      	movs	r3, #0
 800396a:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8003970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003974:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003976:	f107 0318 	add.w	r3, r7, #24
 800397a:	4619      	mov	r1, r3
 800397c:	4810      	ldr	r0, [pc, #64]	@ (80039c0 <MX_ADC1_Init+0x128>)
 800397e:	f001 fe26 	bl	80055ce <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8003982:	4a10      	ldr	r2, [pc, #64]	@ (80039c4 <MX_ADC1_Init+0x12c>)
 8003984:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003988:	480d      	ldr	r0, [pc, #52]	@ (80039c0 <MX_ADC1_Init+0x128>)
 800398a:	f7ff fb5b 	bl	8003044 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 800398e:	2207      	movs	r2, #7
 8003990:	490c      	ldr	r1, [pc, #48]	@ (80039c4 <MX_ADC1_Init+0x12c>)
 8003992:	480b      	ldr	r0, [pc, #44]	@ (80039c0 <MX_ADC1_Init+0x128>)
 8003994:	f7ff fb8b 	bl	80030ae <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8003998:	4a0b      	ldr	r2, [pc, #44]	@ (80039c8 <MX_ADC1_Init+0x130>)
 800399a:	f240 2105 	movw	r1, #517	@ 0x205
 800399e:	4808      	ldr	r0, [pc, #32]	@ (80039c0 <MX_ADC1_Init+0x128>)
 80039a0:	f7ff fb50 	bl	8003044 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80039a4:	2207      	movs	r2, #7
 80039a6:	4908      	ldr	r1, [pc, #32]	@ (80039c8 <MX_ADC1_Init+0x130>)
 80039a8:	4805      	ldr	r0, [pc, #20]	@ (80039c0 <MX_ADC1_Init+0x128>)
 80039aa:	f7ff fb80 	bl	80030ae <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039ae:	bf00      	nop
 80039b0:	3738      	adds	r7, #56	@ 0x38
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40010800 	.word	0x40010800
 80039bc:	40020000 	.word	0x40020000
 80039c0:	40012400 	.word	0x40012400
 80039c4:	02300001 	.word	0x02300001
 80039c8:	02600002 	.word	0x02600002

080039cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	60da      	str	r2, [r3, #12]
 80039de:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80039e0:	2001      	movs	r0, #1
 80039e2:	f7ff fd7f 	bl	80034e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 8;
 80039e6:	2308      	movs	r3, #8
 80039e8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 80039ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039f2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	4619      	mov	r1, r3
 80039fc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a00:	f002 f9a2 	bl	8005d48 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003a04:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a08:	f7ff fdbc 	bl	8003584 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a12:	f7ff fdc6 	bl	80035a2 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003a16:	2100      	movs	r1, #0
 8003a18:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a1c:	f7ff fdd5 	bl	80035ca <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003a20:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003a24:	f7ff fde3 	bl	80035ee <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003a44:	2002      	movs	r0, #2
 8003a46:	f7ff fd4d 	bl	80034e4 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 55999;
 8003a4a:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8003a4e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19;
 8003a54:	2313      	movs	r3, #19
 8003a56:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	480a      	ldr	r0, [pc, #40]	@ (8003a8c <MX_TIM3_Init+0x5c>)
 8003a62:	f002 f971 	bl	8005d48 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003a66:	4809      	ldr	r0, [pc, #36]	@ (8003a8c <MX_TIM3_Init+0x5c>)
 8003a68:	f7ff fd8c 	bl	8003584 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4807      	ldr	r0, [pc, #28]	@ (8003a8c <MX_TIM3_Init+0x5c>)
 8003a70:	f7ff fd97 	bl	80035a2 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 8003a74:	2120      	movs	r1, #32
 8003a76:	4805      	ldr	r0, [pc, #20]	@ (8003a8c <MX_TIM3_Init+0x5c>)
 8003a78:	f7ff fda7 	bl	80035ca <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003a7c:	4803      	ldr	r0, [pc, #12]	@ (8003a8c <MX_TIM3_Init+0x5c>)
 8003a7e:	f7ff fdb6 	bl	80035ee <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a82:	bf00      	nop
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40000400 	.word	0x40000400

08003a90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a94:	4b11      	ldr	r3, [pc, #68]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003a96:	4a12      	ldr	r2, [pc, #72]	@ (8003ae0 <MX_USART1_UART_Init+0x50>)
 8003a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a9a:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aae:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ab6:	220c      	movs	r2, #12
 8003ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aba:	4b08      	ldr	r3, [pc, #32]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ac0:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ac6:	4805      	ldr	r0, [pc, #20]	@ (8003adc <MX_USART1_UART_Init+0x4c>)
 8003ac8:	f000 feee 	bl	80048a8 <HAL_UART_Init>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ad2:	f000 f933 	bl	8003d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000d38 	.word	0x20000d38
 8003ae0:	40013800 	.word	0x40013800

08003ae4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08c      	sub	sp, #48	@ 0x30
 8003ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	60da      	str	r2, [r3, #12]
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	615a      	str	r2, [r3, #20]
 8003afc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afe:	463b      	mov	r3, r7
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	605a      	str	r2, [r3, #4]
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003b0c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003b10:	f7ff fce8 	bl	80034e4 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003b14:	2008      	movs	r0, #8
 8003b16:	f7ff fcfd 	bl	8003514 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003b1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ba4 <MX_USART3_UART_Init+0xc0>)
 8003b1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b1e:	2309      	movs	r3, #9
 8003b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003b22:	2303      	movs	r3, #3
 8003b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2a:	463b      	mov	r3, r7
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	481e      	ldr	r0, [pc, #120]	@ (8003ba8 <MX_USART3_UART_Init+0xc4>)
 8003b30:	f001 ff5b 	bl	80059ea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003b34:	4b1d      	ldr	r3, [pc, #116]	@ (8003bac <MX_USART3_UART_Init+0xc8>)
 8003b36:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003b38:	2304      	movs	r3, #4
 8003b3a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	463b      	mov	r3, r7
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4819      	ldr	r0, [pc, #100]	@ (8003ba8 <MX_USART3_UART_Init+0xc4>)
 8003b42:	f001 ff52 	bl	80059ea <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8003b46:	f7ff f9f7 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2104      	movs	r1, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fa45 	bl	8002fe0 <NVIC_EncodePriority>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4619      	mov	r1, r3
 8003b5a:	2027      	movs	r0, #39	@ 0x27
 8003b5c:	f7ff fa16 	bl	8002f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8003b60:	2027      	movs	r0, #39	@ 0x27
 8003b62:	f7ff f9f7 	bl	8002f54 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003b66:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003b6a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003b78:	230c      	movs	r3, #12
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8003b84:	f107 0314 	add.w	r3, r7, #20
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4809      	ldr	r0, [pc, #36]	@ (8003bb0 <MX_USART3_UART_Init+0xcc>)
 8003b8c:	f002 f9d0 	bl	8005f30 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003b90:	4807      	ldr	r0, [pc, #28]	@ (8003bb0 <MX_USART3_UART_Init+0xcc>)
 8003b92:	f7ff fd4a 	bl	800362a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003b96:	4806      	ldr	r0, [pc, #24]	@ (8003bb0 <MX_USART3_UART_Init+0xcc>)
 8003b98:	f7ff fd38 	bl	800360c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b9c:	bf00      	nop
 8003b9e:	3730      	adds	r7, #48	@ 0x30
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	04040004 	.word	0x04040004
 8003ba8:	40010c00 	.word	0x40010c00
 8003bac:	04080008 	.word	0x04080008
 8003bb0:	40004800 	.word	0x40004800

08003bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003bb8:	2001      	movs	r0, #1
 8003bba:	f7ff fc7b 	bl	80034b4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003bbe:	f7ff f9bb 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff fa09 	bl	8002fe0 <NVIC_EncodePriority>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	200b      	movs	r0, #11
 8003bd4:	f7ff f9da 	bl	8002f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003bd8:	200b      	movs	r0, #11
 8003bda:	f7ff f9bb 	bl	8002f54 <__NVIC_EnableIRQ>

}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8003bea:	f107 0318 	add.w	r3, r7, #24
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	605a      	str	r2, [r3, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003c02:	2010      	movs	r0, #16
 8003c04:	f7ff fc86 	bl	8003514 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003c08:	2020      	movs	r0, #32
 8003c0a:	f7ff fc83 	bl	8003514 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003c0e:	2004      	movs	r0, #4
 8003c10:	f7ff fc80 	bl	8003514 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003c14:	2008      	movs	r0, #8
 8003c16:	f7ff fc7d 	bl	8003514 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8003c1a:	4940      	ldr	r1, [pc, #256]	@ (8003d1c <MX_GPIO_Init+0x138>)
 8003c1c:	4840      	ldr	r0, [pc, #256]	@ (8003d20 <MX_GPIO_Init+0x13c>)
 8003c1e:	f7ff fd6d 	bl	80036fc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8003c22:	4940      	ldr	r1, [pc, #256]	@ (8003d24 <MX_GPIO_Init+0x140>)
 8003c24:	4840      	ldr	r0, [pc, #256]	@ (8003d28 <MX_GPIO_Init+0x144>)
 8003c26:	f7ff fd69 	bl	80036fc <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8003c2a:	4940      	ldr	r1, [pc, #256]	@ (8003d2c <MX_GPIO_Init+0x148>)
 8003c2c:	4840      	ldr	r0, [pc, #256]	@ (8003d30 <MX_GPIO_Init+0x14c>)
 8003c2e:	f7ff fd65 	bl	80036fc <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8003c32:	4b3a      	ldr	r3, [pc, #232]	@ (8003d1c <MX_GPIO_Init+0x138>)
 8003c34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003c36:	2301      	movs	r3, #1
 8003c38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4836      	ldr	r0, [pc, #216]	@ (8003d20 <MX_GPIO_Init+0x13c>)
 8003c48:	f001 fecf 	bl	80059ea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8003c4c:	4b35      	ldr	r3, [pc, #212]	@ (8003d24 <MX_GPIO_Init+0x140>)
 8003c4e:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003c50:	2301      	movs	r3, #1
 8003c52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c54:	2302      	movs	r3, #2
 8003c56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	4619      	mov	r1, r3
 8003c60:	4831      	ldr	r0, [pc, #196]	@ (8003d28 <MX_GPIO_Init+0x144>)
 8003c62:	f001 fec2 	bl	80059ea <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8003c66:	4b31      	ldr	r3, [pc, #196]	@ (8003d2c <MX_GPIO_Init+0x148>)
 8003c68:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	482d      	ldr	r0, [pc, #180]	@ (8003d30 <MX_GPIO_Init+0x14c>)
 8003c7c:	f001 feb5 	bl	80059ea <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 8003c80:	492c      	ldr	r1, [pc, #176]	@ (8003d34 <MX_GPIO_Init+0x150>)
 8003c82:	2001      	movs	r0, #1
 8003c84:	f7ff fd4a 	bl	800371c <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE6);
 8003c88:	492b      	ldr	r1, [pc, #172]	@ (8003d38 <MX_GPIO_Init+0x154>)
 8003c8a:	2001      	movs	r0, #1
 8003c8c:	f7ff fd46 	bl	800371c <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8003c90:	2320      	movs	r3, #32
 8003c92:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003ca0:	f107 0318 	add.w	r3, r7, #24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 fd69 	bl	800577c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8003caa:	2340      	movs	r3, #64	@ 0x40
 8003cac:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003cba:	f107 0318 	add.w	r3, r7, #24
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 fd5c 	bl	800577c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f242 0120 	movw	r1, #8224	@ 0x2020
 8003cca:	4819      	ldr	r0, [pc, #100]	@ (8003d30 <MX_GPIO_Init+0x14c>)
 8003ccc:	f7ff fcf4 	bl	80036b8 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f244 0140 	movw	r1, #16448	@ 0x4040
 8003cd6:	4816      	ldr	r0, [pc, #88]	@ (8003d30 <MX_GPIO_Init+0x14c>)
 8003cd8:	f7ff fcee 	bl	80036b8 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 8003cdc:	2208      	movs	r2, #8
 8003cde:	f242 0120 	movw	r1, #8224	@ 0x2020
 8003ce2:	4813      	ldr	r0, [pc, #76]	@ (8003d30 <MX_GPIO_Init+0x14c>)
 8003ce4:	f7ff fcb6 	bl	8003654 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 8003ce8:	2208      	movs	r2, #8
 8003cea:	f244 0140 	movw	r1, #16448	@ 0x4040
 8003cee:	4810      	ldr	r0, [pc, #64]	@ (8003d30 <MX_GPIO_Init+0x14c>)
 8003cf0:	f7ff fcb0 	bl	8003654 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003cf4:	f7ff f920 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff f96e 	bl	8002fe0 <NVIC_EncodePriority>
 8003d04:	4603      	mov	r3, r0
 8003d06:	4619      	mov	r1, r3
 8003d08:	2017      	movs	r0, #23
 8003d0a:	f7ff f93f 	bl	8002f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d0e:	2017      	movs	r0, #23
 8003d10:	f7ff f920 	bl	8002f54 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d14:	bf00      	nop
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	04200020 	.word	0x04200020
 8003d20:	40011000 	.word	0x40011000
 8003d24:	0401f8f9 	.word	0x0401f8f9
 8003d28:	40010800 	.word	0x40010800
 8003d2c:	04f01fff 	.word	0x04f01fff
 8003d30:	40010c00 	.word	0x40010c00
 8003d34:	00f00001 	.word	0x00f00001
 8003d38:	0f000001 	.word	0x0f000001

08003d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d40:	b672      	cpsid	i
}
 8003d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <Error_Handler+0x8>

08003d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003d4e:	4b15      	ldr	r3, [pc, #84]	@ (8003da4 <HAL_MspInit+0x5c>)
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	4a14      	ldr	r2, [pc, #80]	@ (8003da4 <HAL_MspInit+0x5c>)
 8003d54:	f043 0301 	orr.w	r3, r3, #1
 8003d58:	6193      	str	r3, [r2, #24]
 8003d5a:	4b12      	ldr	r3, [pc, #72]	@ (8003da4 <HAL_MspInit+0x5c>)
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	60bb      	str	r3, [r7, #8]
 8003d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <HAL_MspInit+0x5c>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003da4 <HAL_MspInit+0x5c>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	61d3      	str	r3, [r2, #28]
 8003d72:	4b0c      	ldr	r3, [pc, #48]	@ (8003da4 <HAL_MspInit+0x5c>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d7a:	607b      	str	r3, [r7, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003da8 <HAL_MspInit+0x60>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	4a04      	ldr	r2, [pc, #16]	@ (8003da8 <HAL_MspInit+0x60>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40010000 	.word	0x40010000

08003dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a20      	ldr	r2, [pc, #128]	@ (8003e48 <HAL_UART_MspInit+0x9c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d139      	bne.n	8003e40 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e4c <HAL_UART_MspInit+0xa0>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8003e4c <HAL_UART_MspInit+0xa0>)
 8003dd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dd6:	6193      	str	r3, [r2, #24]
 8003dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e4c <HAL_UART_MspInit+0xa0>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de4:	4b19      	ldr	r3, [pc, #100]	@ (8003e4c <HAL_UART_MspInit+0xa0>)
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	4a18      	ldr	r2, [pc, #96]	@ (8003e4c <HAL_UART_MspInit+0xa0>)
 8003dea:	f043 0304 	orr.w	r3, r3, #4
 8003dee:	6193      	str	r3, [r2, #24]
 8003df0:	4b16      	ldr	r3, [pc, #88]	@ (8003e4c <HAL_UART_MspInit+0xa0>)
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e06:	2303      	movs	r3, #3
 8003e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0a:	f107 0310 	add.w	r3, r7, #16
 8003e0e:	4619      	mov	r1, r3
 8003e10:	480f      	ldr	r0, [pc, #60]	@ (8003e50 <HAL_UART_MspInit+0xa4>)
 8003e12:	f000 fb93 	bl	800453c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4809      	ldr	r0, [pc, #36]	@ (8003e50 <HAL_UART_MspInit+0xa4>)
 8003e2c:	f000 fb86 	bl	800453c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003e30:	2200      	movs	r2, #0
 8003e32:	2103      	movs	r1, #3
 8003e34:	2025      	movs	r0, #37	@ 0x25
 8003e36:	f000 fa98 	bl	800436a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e3a:	2025      	movs	r0, #37	@ 0x25
 8003e3c:	f000 fab1 	bl	80043a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8003e40:	bf00      	nop
 8003e42:	3720      	adds	r7, #32
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40010800 	.word	0x40010800

08003e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <NMI_Handler+0x4>

08003e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <HardFault_Handler+0x4>

08003e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e68:	bf00      	nop
 8003e6a:	e7fd      	b.n	8003e68 <MemManage_Handler+0x4>

08003e6c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <BusFault_Handler+0x4>

08003e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <UsageFault_Handler+0x4>

08003e7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e80:	bf00      	nop
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bc80      	pop	{r7}
 8003e86:	4770      	bx	lr

08003e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  BSP_ADC_TimeOut();
 8003ea4:	f7fe fafa 	bl	800249c <BSP_ADC_TimeOut>
  BSP_UART_TimeOut();
 8003ea8:	f7fe ffaa 	bl	8002e00 <BSP_UART_TimeOut>
  SCH_RunSystemTickTimer();
 8003eac:	f002 fa60 	bl	8006370 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eb0:	f000 f968 	bl	8004184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb4:	bf00      	nop
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  status = BSP_DMA_IRQ_Channel1_Handler(DMA1);
 8003ebc:	4806      	ldr	r0, [pc, #24]	@ (8003ed8 <DMA1_Channel1_IRQHandler+0x20>)
 8003ebe:	f7fe fcc5 	bl	800284c <BSP_DMA_IRQ_Channel1_Handler>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b05      	ldr	r3, [pc, #20]	@ (8003edc <DMA1_Channel1_IRQHandler+0x24>)
 8003ec8:	701a      	strb	r2, [r3, #0]
  APP_READ_DATA_HandleDMA_IRQ(status);
 8003eca:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <DMA1_Channel1_IRQHandler+0x24>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fd ff42 	bl	8001d58 <APP_READ_DATA_HandleDMA_IRQ>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	20000d80 	.word	0x20000d80

08003ee0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  APP_CALCULATOR_PF_EXTI_IRQHandler();
 8003ee4:	f7fd fb8e 	bl	8001604 <APP_CALCULATOR_PF_EXTI_IRQHandler>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003ee8:	bf00      	nop
 8003eea:	bd80      	pop	{r7, pc}

08003eec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)&s_data_system.s_uart_data_trans_rec);
 8003ef0:	4803      	ldr	r0, [pc, #12]	@ (8003f00 <USART1_IRQHandler+0x14>)
 8003ef2:	f7fe ff97 	bl	8002e24 <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ef6:	4803      	ldr	r0, [pc, #12]	@ (8003f04 <USART1_IRQHandler+0x18>)
 8003ef8:	f000 fdb2 	bl	8004a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003efc:	bf00      	nop
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	2000081c 	.word	0x2000081c
 8003f04:	20000d38 	.word	0x20000d38

08003f08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)&s_data_system.s_uart_cmd);
 8003f0c:	4802      	ldr	r0, [pc, #8]	@ (8003f18 <USART3_IRQHandler+0x10>)
 8003f0e:	f7fe ff89 	bl	8002e24 <BSP_UART_ISR>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000a3c 	.word	0x20000a3c

08003f1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return 1;
 8003f20:	2301      	movs	r3, #1
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr

08003f2a <_kill>:

int _kill(int pid, int sig)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b082      	sub	sp, #8
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
 8003f32:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f34:	f003 f8e4 	bl	8007100 <__errno>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2216      	movs	r2, #22
 8003f3c:	601a      	str	r2, [r3, #0]
  return -1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <_exit>:

void _exit (int status)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f52:	f04f 31ff 	mov.w	r1, #4294967295
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff ffe7 	bl	8003f2a <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f5c:	bf00      	nop
 8003f5e:	e7fd      	b.n	8003f5c <_exit+0x12>

08003f60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e00a      	b.n	8003f88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f72:	f3af 8000 	nop.w
 8003f76:	4601      	mov	r1, r0
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	60ba      	str	r2, [r7, #8]
 8003f7e:	b2ca      	uxtb	r2, r1
 8003f80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	3301      	adds	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	dbf0      	blt.n	8003f72 <_read+0x12>
  }

  return len;
 8003f90:	687b      	ldr	r3, [r7, #4]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	e009      	b.n	8003fc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	60ba      	str	r2, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	dbf1      	blt.n	8003fac <_write+0x12>
  }
  return len;
 8003fc8:	687b      	ldr	r3, [r7, #4]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <_close>:

int _close(int file)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003fda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ff8:	605a      	str	r2, [r3, #4]
  return 0;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <_isatty>:

int _isatty(int file)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800400e:	2301      	movs	r3, #1
}
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	bc80      	pop	{r7}
 8004018:	4770      	bx	lr

0800401a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
	...

08004034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800403c:	4a14      	ldr	r2, [pc, #80]	@ (8004090 <_sbrk+0x5c>)
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <_sbrk+0x60>)
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004048:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <_sbrk+0x64>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004050:	4b11      	ldr	r3, [pc, #68]	@ (8004098 <_sbrk+0x64>)
 8004052:	4a12      	ldr	r2, [pc, #72]	@ (800409c <_sbrk+0x68>)
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004056:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <_sbrk+0x64>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4413      	add	r3, r2
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	429a      	cmp	r2, r3
 8004062:	d207      	bcs.n	8004074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004064:	f003 f84c 	bl	8007100 <__errno>
 8004068:	4603      	mov	r3, r0
 800406a:	220c      	movs	r2, #12
 800406c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	e009      	b.n	8004088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004074:	4b08      	ldr	r3, [pc, #32]	@ (8004098 <_sbrk+0x64>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800407a:	4b07      	ldr	r3, [pc, #28]	@ (8004098 <_sbrk+0x64>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4413      	add	r3, r2
 8004082:	4a05      	ldr	r2, [pc, #20]	@ (8004098 <_sbrk+0x64>)
 8004084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004086:	68fb      	ldr	r3, [r7, #12]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20005000 	.word	0x20005000
 8004094:	00000400 	.word	0x00000400
 8004098:	20000d84 	.word	0x20000d84
 800409c:	20000f58 	.word	0x20000f58

080040a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr

080040ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80040ac:	f7ff fff8 	bl	80040a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040b0:	480b      	ldr	r0, [pc, #44]	@ (80040e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80040b2:	490c      	ldr	r1, [pc, #48]	@ (80040e4 <LoopFillZerobss+0x12>)

  ldr r2, =_sidata
 80040b4:	4a0c      	ldr	r2, [pc, #48]	@ (80040e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80040b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040b8:	e002      	b.n	80040c0 <LoopCopyDataInit>

080040ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040be:	3304      	adds	r3, #4

080040c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040c4:	d3f9      	bcc.n	80040ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040c6:	4a09      	ldr	r2, [pc, #36]	@ (80040ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80040c8:	4c09      	ldr	r4, [pc, #36]	@ (80040f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040cc:	e001      	b.n	80040d2 <LoopFillZerobss>

080040ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d0:	3204      	adds	r2, #4

080040d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040d4:	d3fb      	bcc.n	80040ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040d6:	f003 f819 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040da:	f7ff fb4d 	bl	8003778 <main>
  bx lr
 80040de:	4770      	bx	lr
  ldr r0, =_sdata
 80040e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e4:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80040e8:	080097a0 	.word	0x080097a0
  ldr r2, =_sbss
 80040ec:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 80040f0:	20000f58 	.word	0x20000f58

080040f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040f4:	e7fe      	b.n	80040f4 <ADC1_2_IRQHandler>
	...

080040f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040fc:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <HAL_Init+0x28>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a07      	ldr	r2, [pc, #28]	@ (8004120 <HAL_Init+0x28>)
 8004102:	f043 0310 	orr.w	r3, r3, #16
 8004106:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004108:	2003      	movs	r0, #3
 800410a:	f000 f923 	bl	8004354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800410e:	200f      	movs	r0, #15
 8004110:	f000 f808 	bl	8004124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004114:	f7ff fe18 	bl	8003d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40022000 	.word	0x40022000

08004124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800412c:	4b12      	ldr	r3, [pc, #72]	@ (8004178 <HAL_InitTick+0x54>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b12      	ldr	r3, [pc, #72]	@ (800417c <HAL_InitTick+0x58>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	4619      	mov	r1, r3
 8004136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800413a:	fbb3 f3f1 	udiv	r3, r3, r1
 800413e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f93b 	bl	80043be <HAL_SYSTICK_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e00e      	b.n	8004170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d80a      	bhi.n	800416e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004158:	2200      	movs	r2, #0
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	f000 f903 	bl	800436a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004164:	4a06      	ldr	r2, [pc, #24]	@ (8004180 <HAL_InitTick+0x5c>)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200000c0 	.word	0x200000c0
 800417c:	200000c8 	.word	0x200000c8
 8004180:	200000c4 	.word	0x200000c4

08004184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <HAL_IncTick+0x1c>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <HAL_IncTick+0x20>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4413      	add	r3, r2
 8004194:	4a03      	ldr	r2, [pc, #12]	@ (80041a4 <HAL_IncTick+0x20>)
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	200000c8 	.word	0x200000c8
 80041a4:	20000d88 	.word	0x20000d88

080041a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return uwTick;
 80041ac:	4b02      	ldr	r3, [pc, #8]	@ (80041b8 <HAL_GetTick+0x10>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	20000d88 	.word	0x20000d88

080041bc <__NVIC_SetPriorityGrouping>:
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ee:	4a04      	ldr	r2, [pc, #16]	@ (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	60d3      	str	r3, [r2, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_GetPriorityGrouping>:
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004208:	4b04      	ldr	r3, [pc, #16]	@ (800421c <__NVIC_GetPriorityGrouping+0x18>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 0307 	and.w	r3, r3, #7
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_EnableIRQ>:
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db0b      	blt.n	800424a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4906      	ldr	r1, [pc, #24]	@ (8004254 <__NVIC_EnableIRQ+0x34>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2001      	movs	r0, #1
 8004242:	fa00 f202 	lsl.w	r2, r0, r2
 8004246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	e000e100 	.word	0xe000e100

08004258 <__NVIC_SetPriority>:
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004268:	2b00      	cmp	r3, #0
 800426a:	db0a      	blt.n	8004282 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	490c      	ldr	r1, [pc, #48]	@ (80042a4 <__NVIC_SetPriority+0x4c>)
 8004272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004276:	0112      	lsls	r2, r2, #4
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	440b      	add	r3, r1
 800427c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004280:	e00a      	b.n	8004298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	4908      	ldr	r1, [pc, #32]	@ (80042a8 <__NVIC_SetPriority+0x50>)
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	3b04      	subs	r3, #4
 8004290:	0112      	lsls	r2, r2, #4
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	440b      	add	r3, r1
 8004296:	761a      	strb	r2, [r3, #24]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <NVIC_EncodePriority>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	@ 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f1c3 0307 	rsb	r3, r3, #7
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	bf28      	it	cs
 80042ca:	2304      	movcs	r3, #4
 80042cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d902      	bls.n	80042dc <NVIC_EncodePriority+0x30>
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3b03      	subs	r3, #3
 80042da:	e000      	b.n	80042de <NVIC_EncodePriority+0x32>
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43da      	mvns	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	401a      	ands	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f4:	f04f 31ff 	mov.w	r1, #4294967295
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	43d9      	mvns	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	4313      	orrs	r3, r2
}
 8004306:	4618      	mov	r0, r3
 8004308:	3724      	adds	r7, #36	@ 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <SysTick_Config>:
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004320:	d301      	bcc.n	8004326 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004322:	2301      	movs	r3, #1
 8004324:	e00f      	b.n	8004346 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004326:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <SysTick_Config+0x40>)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800432e:	210f      	movs	r1, #15
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	f7ff ff90 	bl	8004258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004338:	4b05      	ldr	r3, [pc, #20]	@ (8004350 <SysTick_Config+0x40>)
 800433a:	2200      	movs	r2, #0
 800433c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800433e:	4b04      	ldr	r3, [pc, #16]	@ (8004350 <SysTick_Config+0x40>)
 8004340:	2207      	movs	r2, #7
 8004342:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	e000e010 	.word	0xe000e010

08004354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff2d 	bl	80041bc <__NVIC_SetPriorityGrouping>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004378:	2300      	movs	r3, #0
 800437a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800437c:	f7ff ff42 	bl	8004204 <__NVIC_GetPriorityGrouping>
 8004380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	68b9      	ldr	r1, [r7, #8]
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f7ff ff90 	bl	80042ac <NVIC_EncodePriority>
 800438c:	4602      	mov	r2, r0
 800438e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004392:	4611      	mov	r1, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff5f 	bl	8004258 <__NVIC_SetPriority>
}
 800439a:	bf00      	nop
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff35 	bl	8004220 <__NVIC_EnableIRQ>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7ff ffa2 	bl	8004310 <SysTick_Config>
 80043cc:	4603      	mov	r3, r0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b085      	sub	sp, #20
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d008      	beq.n	8004400 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2204      	movs	r2, #4
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e020      	b.n	8004442 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 020e 	bic.w	r2, r2, #14
 800440e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f202 	lsl.w	r2, r1, r2
 800442e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d005      	beq.n	8004470 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2204      	movs	r2, #4
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	73fb      	strb	r3, [r7, #15]
 800446e:	e051      	b.n	8004514 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 020e 	bic.w	r2, r2, #14
 800447e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a22      	ldr	r2, [pc, #136]	@ (8004520 <HAL_DMA_Abort_IT+0xd4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d029      	beq.n	80044ee <HAL_DMA_Abort_IT+0xa2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a21      	ldr	r2, [pc, #132]	@ (8004524 <HAL_DMA_Abort_IT+0xd8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d022      	beq.n	80044ea <HAL_DMA_Abort_IT+0x9e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004528 <HAL_DMA_Abort_IT+0xdc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d01a      	beq.n	80044e4 <HAL_DMA_Abort_IT+0x98>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1e      	ldr	r2, [pc, #120]	@ (800452c <HAL_DMA_Abort_IT+0xe0>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d012      	beq.n	80044de <HAL_DMA_Abort_IT+0x92>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004530 <HAL_DMA_Abort_IT+0xe4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00a      	beq.n	80044d8 <HAL_DMA_Abort_IT+0x8c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004534 <HAL_DMA_Abort_IT+0xe8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d102      	bne.n	80044d2 <HAL_DMA_Abort_IT+0x86>
 80044cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80044d0:	e00e      	b.n	80044f0 <HAL_DMA_Abort_IT+0xa4>
 80044d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044d6:	e00b      	b.n	80044f0 <HAL_DMA_Abort_IT+0xa4>
 80044d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044dc:	e008      	b.n	80044f0 <HAL_DMA_Abort_IT+0xa4>
 80044de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044e2:	e005      	b.n	80044f0 <HAL_DMA_Abort_IT+0xa4>
 80044e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044e8:	e002      	b.n	80044f0 <HAL_DMA_Abort_IT+0xa4>
 80044ea:	2310      	movs	r3, #16
 80044ec:	e000      	b.n	80044f0 <HAL_DMA_Abort_IT+0xa4>
 80044ee:	2301      	movs	r3, #1
 80044f0:	4a11      	ldr	r2, [pc, #68]	@ (8004538 <HAL_DMA_Abort_IT+0xec>)
 80044f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	4798      	blx	r3
    } 
  }
  return status;
 8004514:	7bfb      	ldrb	r3, [r7, #15]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40020008 	.word	0x40020008
 8004524:	4002001c 	.word	0x4002001c
 8004528:	40020030 	.word	0x40020030
 800452c:	40020044 	.word	0x40020044
 8004530:	40020058 	.word	0x40020058
 8004534:	4002006c 	.word	0x4002006c
 8004538:	40020000 	.word	0x40020000

0800453c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800453c:	b480      	push	{r7}
 800453e:	b08b      	sub	sp, #44	@ 0x2c
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800454a:	2300      	movs	r3, #0
 800454c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800454e:	e169      	b.n	8004824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004550:	2201      	movs	r2, #1
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	4013      	ands	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	429a      	cmp	r2, r3
 800456a:	f040 8158 	bne.w	800481e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4a9a      	ldr	r2, [pc, #616]	@ (80047dc <HAL_GPIO_Init+0x2a0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d05e      	beq.n	8004636 <HAL_GPIO_Init+0xfa>
 8004578:	4a98      	ldr	r2, [pc, #608]	@ (80047dc <HAL_GPIO_Init+0x2a0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d875      	bhi.n	800466a <HAL_GPIO_Init+0x12e>
 800457e:	4a98      	ldr	r2, [pc, #608]	@ (80047e0 <HAL_GPIO_Init+0x2a4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d058      	beq.n	8004636 <HAL_GPIO_Init+0xfa>
 8004584:	4a96      	ldr	r2, [pc, #600]	@ (80047e0 <HAL_GPIO_Init+0x2a4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d86f      	bhi.n	800466a <HAL_GPIO_Init+0x12e>
 800458a:	4a96      	ldr	r2, [pc, #600]	@ (80047e4 <HAL_GPIO_Init+0x2a8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d052      	beq.n	8004636 <HAL_GPIO_Init+0xfa>
 8004590:	4a94      	ldr	r2, [pc, #592]	@ (80047e4 <HAL_GPIO_Init+0x2a8>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d869      	bhi.n	800466a <HAL_GPIO_Init+0x12e>
 8004596:	4a94      	ldr	r2, [pc, #592]	@ (80047e8 <HAL_GPIO_Init+0x2ac>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d04c      	beq.n	8004636 <HAL_GPIO_Init+0xfa>
 800459c:	4a92      	ldr	r2, [pc, #584]	@ (80047e8 <HAL_GPIO_Init+0x2ac>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d863      	bhi.n	800466a <HAL_GPIO_Init+0x12e>
 80045a2:	4a92      	ldr	r2, [pc, #584]	@ (80047ec <HAL_GPIO_Init+0x2b0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d046      	beq.n	8004636 <HAL_GPIO_Init+0xfa>
 80045a8:	4a90      	ldr	r2, [pc, #576]	@ (80047ec <HAL_GPIO_Init+0x2b0>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d85d      	bhi.n	800466a <HAL_GPIO_Init+0x12e>
 80045ae:	2b12      	cmp	r3, #18
 80045b0:	d82a      	bhi.n	8004608 <HAL_GPIO_Init+0xcc>
 80045b2:	2b12      	cmp	r3, #18
 80045b4:	d859      	bhi.n	800466a <HAL_GPIO_Init+0x12e>
 80045b6:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <HAL_GPIO_Init+0x80>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	08004637 	.word	0x08004637
 80045c0:	08004611 	.word	0x08004611
 80045c4:	08004623 	.word	0x08004623
 80045c8:	08004665 	.word	0x08004665
 80045cc:	0800466b 	.word	0x0800466b
 80045d0:	0800466b 	.word	0x0800466b
 80045d4:	0800466b 	.word	0x0800466b
 80045d8:	0800466b 	.word	0x0800466b
 80045dc:	0800466b 	.word	0x0800466b
 80045e0:	0800466b 	.word	0x0800466b
 80045e4:	0800466b 	.word	0x0800466b
 80045e8:	0800466b 	.word	0x0800466b
 80045ec:	0800466b 	.word	0x0800466b
 80045f0:	0800466b 	.word	0x0800466b
 80045f4:	0800466b 	.word	0x0800466b
 80045f8:	0800466b 	.word	0x0800466b
 80045fc:	0800466b 	.word	0x0800466b
 8004600:	08004619 	.word	0x08004619
 8004604:	0800462d 	.word	0x0800462d
 8004608:	4a79      	ldr	r2, [pc, #484]	@ (80047f0 <HAL_GPIO_Init+0x2b4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800460e:	e02c      	b.n	800466a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	623b      	str	r3, [r7, #32]
          break;
 8004616:	e029      	b.n	800466c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	3304      	adds	r3, #4
 800461e:	623b      	str	r3, [r7, #32]
          break;
 8004620:	e024      	b.n	800466c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	3308      	adds	r3, #8
 8004628:	623b      	str	r3, [r7, #32]
          break;
 800462a:	e01f      	b.n	800466c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	330c      	adds	r3, #12
 8004632:	623b      	str	r3, [r7, #32]
          break;
 8004634:	e01a      	b.n	800466c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800463e:	2304      	movs	r3, #4
 8004640:	623b      	str	r3, [r7, #32]
          break;
 8004642:	e013      	b.n	800466c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800464c:	2308      	movs	r3, #8
 800464e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	611a      	str	r2, [r3, #16]
          break;
 8004656:	e009      	b.n	800466c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004658:	2308      	movs	r3, #8
 800465a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	615a      	str	r2, [r3, #20]
          break;
 8004662:	e003      	b.n	800466c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004664:	2300      	movs	r3, #0
 8004666:	623b      	str	r3, [r7, #32]
          break;
 8004668:	e000      	b.n	800466c <HAL_GPIO_Init+0x130>
          break;
 800466a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	2bff      	cmp	r3, #255	@ 0xff
 8004670:	d801      	bhi.n	8004676 <HAL_GPIO_Init+0x13a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	e001      	b.n	800467a <HAL_GPIO_Init+0x13e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3304      	adds	r3, #4
 800467a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2bff      	cmp	r3, #255	@ 0xff
 8004680:	d802      	bhi.n	8004688 <HAL_GPIO_Init+0x14c>
 8004682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	e002      	b.n	800468e <HAL_GPIO_Init+0x152>
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	3b08      	subs	r3, #8
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	210f      	movs	r1, #15
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	401a      	ands	r2, r3
 80046a0:	6a39      	ldr	r1, [r7, #32]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	431a      	orrs	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80b1 	beq.w	800481e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046bc:	4b4d      	ldr	r3, [pc, #308]	@ (80047f4 <HAL_GPIO_Init+0x2b8>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	4a4c      	ldr	r2, [pc, #304]	@ (80047f4 <HAL_GPIO_Init+0x2b8>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6193      	str	r3, [r2, #24]
 80046c8:	4b4a      	ldr	r3, [pc, #296]	@ (80047f4 <HAL_GPIO_Init+0x2b8>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046d4:	4a48      	ldr	r2, [pc, #288]	@ (80047f8 <HAL_GPIO_Init+0x2bc>)
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	3302      	adds	r3, #2
 80046dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	220f      	movs	r2, #15
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4013      	ands	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a40      	ldr	r2, [pc, #256]	@ (80047fc <HAL_GPIO_Init+0x2c0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d013      	beq.n	8004728 <HAL_GPIO_Init+0x1ec>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a3f      	ldr	r2, [pc, #252]	@ (8004800 <HAL_GPIO_Init+0x2c4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00d      	beq.n	8004724 <HAL_GPIO_Init+0x1e8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a3e      	ldr	r2, [pc, #248]	@ (8004804 <HAL_GPIO_Init+0x2c8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <HAL_GPIO_Init+0x1e4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3d      	ldr	r2, [pc, #244]	@ (8004808 <HAL_GPIO_Init+0x2cc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_GPIO_Init+0x1e0>
 8004718:	2303      	movs	r3, #3
 800471a:	e006      	b.n	800472a <HAL_GPIO_Init+0x1ee>
 800471c:	2304      	movs	r3, #4
 800471e:	e004      	b.n	800472a <HAL_GPIO_Init+0x1ee>
 8004720:	2302      	movs	r3, #2
 8004722:	e002      	b.n	800472a <HAL_GPIO_Init+0x1ee>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_GPIO_Init+0x1ee>
 8004728:	2300      	movs	r3, #0
 800472a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800472c:	f002 0203 	and.w	r2, r2, #3
 8004730:	0092      	lsls	r2, r2, #2
 8004732:	4093      	lsls	r3, r2
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800473a:	492f      	ldr	r1, [pc, #188]	@ (80047f8 <HAL_GPIO_Init+0x2bc>)
 800473c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	3302      	adds	r3, #2
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d006      	beq.n	8004762 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004754:	4b2d      	ldr	r3, [pc, #180]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	492c      	ldr	r1, [pc, #176]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	4313      	orrs	r3, r2
 800475e:	608b      	str	r3, [r1, #8]
 8004760:	e006      	b.n	8004770 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004762:	4b2a      	ldr	r3, [pc, #168]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	43db      	mvns	r3, r3
 800476a:	4928      	ldr	r1, [pc, #160]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 800476c:	4013      	ands	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d006      	beq.n	800478a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800477c:	4b23      	ldr	r3, [pc, #140]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	4922      	ldr	r1, [pc, #136]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	4313      	orrs	r3, r2
 8004786:	60cb      	str	r3, [r1, #12]
 8004788:	e006      	b.n	8004798 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	43db      	mvns	r3, r3
 8004792:	491e      	ldr	r1, [pc, #120]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 8004794:	4013      	ands	r3, r2
 8004796:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047a4:	4b19      	ldr	r3, [pc, #100]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4918      	ldr	r1, [pc, #96]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
 80047b0:	e006      	b.n	80047c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047b2:	4b16      	ldr	r3, [pc, #88]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	43db      	mvns	r3, r3
 80047ba:	4914      	ldr	r1, [pc, #80]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 80047bc:	4013      	ands	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d021      	beq.n	8004810 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047cc:	4b0f      	ldr	r3, [pc, #60]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	490e      	ldr	r1, [pc, #56]	@ (800480c <HAL_GPIO_Init+0x2d0>)
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	600b      	str	r3, [r1, #0]
 80047d8:	e021      	b.n	800481e <HAL_GPIO_Init+0x2e2>
 80047da:	bf00      	nop
 80047dc:	10320000 	.word	0x10320000
 80047e0:	10310000 	.word	0x10310000
 80047e4:	10220000 	.word	0x10220000
 80047e8:	10210000 	.word	0x10210000
 80047ec:	10120000 	.word	0x10120000
 80047f0:	10110000 	.word	0x10110000
 80047f4:	40021000 	.word	0x40021000
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40010800 	.word	0x40010800
 8004800:	40010c00 	.word	0x40010c00
 8004804:	40011000 	.word	0x40011000
 8004808:	40011400 	.word	0x40011400
 800480c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004810:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_GPIO_Init+0x304>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	43db      	mvns	r3, r3
 8004818:	4909      	ldr	r1, [pc, #36]	@ (8004840 <HAL_GPIO_Init+0x304>)
 800481a:	4013      	ands	r3, r2
 800481c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	3301      	adds	r3, #1
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	f47f ae8e 	bne.w	8004550 <HAL_GPIO_Init+0x14>
  }
}
 8004834:	bf00      	nop
 8004836:	bf00      	nop
 8004838:	372c      	adds	r7, #44	@ 0x2c
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	40010400 	.word	0x40010400

08004844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b02      	ldr	r3, [pc, #8]	@ (8004854 <HAL_RCC_GetHCLKFreq+0x10>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	200000c0 	.word	0x200000c0

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800485c:	f7ff fff2 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	@ (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	08009418 	.word	0x08009418

08004880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004884:	f7ff ffde 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	0adb      	lsrs	r3, r3, #11
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	@ (80048a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	08009418 	.word	0x08009418

080048a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e042      	b.n	8004940 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fa6c 	bl	8003dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	@ 0x24
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fd63 	bl	80053b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	695a      	ldr	r2, [r3, #20]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	@ 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	4613      	mov	r3, r2
 8004956:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b20      	cmp	r3, #32
 8004966:	d175      	bne.n	8004a54 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_UART_Transmit+0x2c>
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e06e      	b.n	8004a56 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2221      	movs	r2, #33	@ 0x21
 8004982:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004986:	f7ff fc0f 	bl	80041a8 <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a0:	d108      	bne.n	80049b4 <HAL_UART_Transmit+0x6c>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e003      	b.n	80049bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049bc:	e02e      	b.n	8004a1c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2180      	movs	r1, #128	@ 0x80
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fb01 	bl	8004fd0 <UART_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e03a      	b.n	8004a56 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	3302      	adds	r3, #2
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	e007      	b.n	8004a0e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	781a      	ldrb	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1cb      	bne.n	80049be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2140      	movs	r1, #64	@ 0x40
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 facd 	bl	8004fd0 <UART_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e006      	b.n	8004a56 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a50:	2300      	movs	r3, #0
 8004a52:	e000      	b.n	8004a56 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a54:	2302      	movs	r3, #2
  }
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b0ba      	sub	sp, #232	@ 0xe8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10f      	bne.n	8004ac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x66>
 8004ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 fbbc 	bl	800523c <UART_Receive_IT>
      return;
 8004ac4:	e25b      	b.n	8004f7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 80de 	beq.w	8004c8c <HAL_UART_IRQHandler+0x22c>
 8004ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80d1 	beq.w	8004c8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_UART_IRQHandler+0xae>
 8004af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b06:	f043 0201 	orr.w	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00b      	beq.n	8004b32 <HAL_UART_IRQHandler+0xd2>
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d005      	beq.n	8004b32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2a:	f043 0202 	orr.w	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00b      	beq.n	8004b56 <HAL_UART_IRQHandler+0xf6>
 8004b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4e:	f043 0204 	orr.w	r2, r3, #4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d011      	beq.n	8004b86 <HAL_UART_IRQHandler+0x126>
 8004b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7e:	f043 0208 	orr.w	r2, r3, #8
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 81f2 	beq.w	8004f74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d008      	beq.n	8004bae <HAL_UART_IRQHandler+0x14e>
 8004b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba0:	f003 0320 	and.w	r3, r3, #32
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fb47 	bl	800523c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bf14      	ite	ne
 8004bbc:	2301      	movne	r3, #1
 8004bbe:	2300      	moveq	r3, #0
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d103      	bne.n	8004bda <HAL_UART_IRQHandler+0x17a>
 8004bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d04f      	beq.n	8004c7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fa51 	bl	8005082 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d041      	beq.n	8004c72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3314      	adds	r3, #20
 8004c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c2a:	e841 2300 	strex	r3, r2, [r1]
 8004c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1d9      	bne.n	8004bee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d013      	beq.n	8004c6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	4a7e      	ldr	r2, [pc, #504]	@ (8004e40 <HAL_UART_IRQHandler+0x3e0>)
 8004c48:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fbfc 	bl	800444c <HAL_DMA_Abort_IT>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c64:	4610      	mov	r0, r2
 8004c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	e00e      	b.n	8004c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f99c 	bl	8004fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	e00a      	b.n	8004c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f998 	bl	8004fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c78:	e006      	b.n	8004c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f994 	bl	8004fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c86:	e175      	b.n	8004f74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	bf00      	nop
    return;
 8004c8a:	e173      	b.n	8004f74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	f040 814f 	bne.w	8004f34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8148 	beq.w	8004f34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8141 	beq.w	8004f34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80b6 	beq.w	8004e44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8145 	beq.w	8004f78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	f080 813e 	bcs.w	8004f78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	f000 8088 	beq.w	8004e20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d3c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d48:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1d9      	bne.n	8004d10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d66:	e853 3f00 	ldrex	r3, [r3]
 8004d6a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d6e:	f023 0301 	bic.w	r3, r3, #1
 8004d72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3314      	adds	r3, #20
 8004d7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d80:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d84:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e1      	bne.n	8004d5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004da8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004daa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3314      	adds	r3, #20
 8004db8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004dbc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dc2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dc4:	e841 2300 	strex	r3, r2, [r1]
 8004dc8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004dca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e3      	bne.n	8004d98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004dee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df0:	f023 0310 	bic.w	r3, r3, #16
 8004df4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	330c      	adds	r3, #12
 8004dfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e02:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e04:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e3      	bne.n	8004dde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fadb 	bl	80043d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	4619      	mov	r1, r3
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f8bf 	bl	8004fba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e3c:	e09c      	b.n	8004f78 <HAL_UART_IRQHandler+0x518>
 8004e3e:	bf00      	nop
 8004e40:	08005147 	.word	0x08005147
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 808e 	beq.w	8004f7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8089 	beq.w	8004f7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	e853 3f00 	ldrex	r3, [r3]
 8004e78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e3      	bne.n	8004e6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3314      	adds	r3, #20
 8004ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004ec6:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ecc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e3      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	e853 3f00 	ldrex	r3, [r3]
 8004ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0310 	bic.w	r3, r3, #16
 8004efe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f10:	69b9      	ldr	r1, [r7, #24]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	e841 2300 	strex	r3, r2, [r1]
 8004f18:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1e3      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f844 	bl	8004fba <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f32:	e023      	b.n	8004f7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d009      	beq.n	8004f54 <HAL_UART_IRQHandler+0x4f4>
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f90e 	bl	800516e <UART_Transmit_IT>
    return;
 8004f52:	e014      	b.n	8004f7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00e      	beq.n	8004f7e <HAL_UART_IRQHandler+0x51e>
 8004f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d008      	beq.n	8004f7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f000 f94d 	bl	800520c <UART_EndTransmit_IT>
    return;
 8004f72:	e004      	b.n	8004f7e <HAL_UART_IRQHandler+0x51e>
    return;
 8004f74:	bf00      	nop
 8004f76:	e002      	b.n	8004f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f78:	bf00      	nop
 8004f7a:	e000      	b.n	8004f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8004f7c:	bf00      	nop
  }
}
 8004f7e:	37e8      	adds	r7, #232	@ 0xe8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bc80      	pop	{r7}
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fe0:	e03b      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d037      	beq.n	800505a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fea:	f7ff f8dd 	bl	80041a8 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d302      	bcc.n	8005000 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e03a      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d023      	beq.n	800505a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	2b80      	cmp	r3, #128	@ 0x80
 8005016:	d020      	beq.n	800505a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	d01d      	beq.n	800505a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d116      	bne.n	800505a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f81d 	bl	8005082 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2208      	movs	r2, #8
 800504c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e00f      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4013      	ands	r3, r2
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	429a      	cmp	r2, r3
 8005068:	bf0c      	ite	eq
 800506a:	2301      	moveq	r3, #1
 800506c:	2300      	movne	r3, #0
 800506e:	b2db      	uxtb	r3, r3
 8005070:	461a      	mov	r2, r3
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	429a      	cmp	r2, r3
 8005076:	d0b4      	beq.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005082:	b480      	push	{r7}
 8005084:	b095      	sub	sp, #84	@ 0x54
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005094:	e853 3f00 	ldrex	r3, [r3]
 8005098:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	330c      	adds	r3, #12
 80050a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80050ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b2:	e841 2300 	strex	r3, r2, [r1]
 80050b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e5      	bne.n	800508a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3314      	adds	r3, #20
 80050dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e5      	bne.n	80050be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d119      	bne.n	800512e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	330c      	adds	r3, #12
 8005100:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	60bb      	str	r3, [r7, #8]
   return(result);
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f023 0310 	bic.w	r3, r3, #16
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	330c      	adds	r3, #12
 8005118:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800511a:	61ba      	str	r2, [r7, #24]
 800511c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511e:	6979      	ldr	r1, [r7, #20]
 8005120:	69ba      	ldr	r2, [r7, #24]
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	613b      	str	r3, [r7, #16]
   return(result);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800513c:	bf00      	nop
 800513e:	3754      	adds	r7, #84	@ 0x54
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f7ff ff21 	bl	8004fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005166:	bf00      	nop
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800516e:	b480      	push	{r7}
 8005170:	b085      	sub	sp, #20
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b21      	cmp	r3, #33	@ 0x21
 8005180:	d13e      	bne.n	8005200 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800518a:	d114      	bne.n	80051b6 <UART_Transmit_IT+0x48>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d110      	bne.n	80051b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	621a      	str	r2, [r3, #32]
 80051b4:	e008      	b.n	80051c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	1c59      	adds	r1, r3, #1
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6211      	str	r1, [r2, #32]
 80051c0:	781a      	ldrb	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	4619      	mov	r1, r3
 80051d6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10f      	bne.n	80051fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005222:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff fea9 	bl	8004f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	@ 0x30
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b22      	cmp	r3, #34	@ 0x22
 800524e:	f040 80ae 	bne.w	80053ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800525a:	d117      	bne.n	800528c <UART_Receive_IT+0x50>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d113      	bne.n	800528c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527a:	b29a      	uxth	r2, r3
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	629a      	str	r2, [r3, #40]	@ 0x28
 800528a:	e026      	b.n	80052da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529e:	d007      	beq.n	80052b0 <UART_Receive_IT+0x74>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10a      	bne.n	80052be <UART_Receive_IT+0x82>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d106      	bne.n	80052be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e008      	b.n	80052d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4619      	mov	r1, r3
 80052e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d15d      	bne.n	80053aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0220 	bic.w	r2, r2, #32
 80052fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800530c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695a      	ldr	r2, [r3, #20]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	2b01      	cmp	r3, #1
 8005332:	d135      	bne.n	80053a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	330c      	adds	r3, #12
 8005340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	e853 3f00 	ldrex	r3, [r3]
 8005348:	613b      	str	r3, [r7, #16]
   return(result);
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f023 0310 	bic.w	r3, r3, #16
 8005350:	627b      	str	r3, [r7, #36]	@ 0x24
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535a:	623a      	str	r2, [r7, #32]
 800535c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800535e:	69f9      	ldr	r1, [r7, #28]
 8005360:	6a3a      	ldr	r2, [r7, #32]
 8005362:	e841 2300 	strex	r3, r2, [r1]
 8005366:	61bb      	str	r3, [r7, #24]
   return(result);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d1e5      	bne.n	800533a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b10      	cmp	r3, #16
 800537a:	d10a      	bne.n	8005392 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fe0e 	bl	8004fba <HAL_UARTEx_RxEventCallback>
 800539e:	e002      	b.n	80053a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff fdf8 	bl	8004f96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053a6:	2300      	movs	r3, #0
 80053a8:	e002      	b.n	80053b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3730      	adds	r7, #48	@ 0x30
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80053f2:	f023 030c 	bic.w	r3, r3, #12
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	430b      	orrs	r3, r1
 80053fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2c      	ldr	r2, [pc, #176]	@ (80054cc <UART_SetConfig+0x114>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d103      	bne.n	8005428 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005420:	f7ff fa2e 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	e002      	b.n	800542e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005428:	f7ff fa16 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 800542c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009a      	lsls	r2, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	fbb2 f3f3 	udiv	r3, r2, r3
 8005444:	4a22      	ldr	r2, [pc, #136]	@ (80054d0 <UART_SetConfig+0x118>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	0119      	lsls	r1, r3, #4
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009a      	lsls	r2, r3, #2
 8005458:	441a      	add	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	fbb2 f2f3 	udiv	r2, r2, r3
 8005464:	4b1a      	ldr	r3, [pc, #104]	@ (80054d0 <UART_SetConfig+0x118>)
 8005466:	fba3 0302 	umull	r0, r3, r3, r2
 800546a:	095b      	lsrs	r3, r3, #5
 800546c:	2064      	movs	r0, #100	@ 0x64
 800546e:	fb00 f303 	mul.w	r3, r0, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	3332      	adds	r3, #50	@ 0x32
 8005478:	4a15      	ldr	r2, [pc, #84]	@ (80054d0 <UART_SetConfig+0x118>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005484:	4419      	add	r1, r3
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	fbb2 f2f3 	udiv	r2, r2, r3
 800549c:	4b0c      	ldr	r3, [pc, #48]	@ (80054d0 <UART_SetConfig+0x118>)
 800549e:	fba3 0302 	umull	r0, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	2064      	movs	r0, #100	@ 0x64
 80054a6:	fb00 f303 	mul.w	r3, r0, r3
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	3332      	adds	r3, #50	@ 0x32
 80054b0:	4a07      	ldr	r2, [pc, #28]	@ (80054d0 <UART_SetConfig+0x118>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	f003 020f 	and.w	r2, r3, #15
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	440a      	add	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40013800 	.word	0x40013800
 80054d0:	51eb851f 	.word	0x51eb851f

080054d4 <LL_ADC_REG_SetSequencerLength>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <LL_ADC_IsEnabled>:
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800552a:	4813      	ldr	r0, [pc, #76]	@ (8005578 <LL_ADC_CommonInit+0x5c>)
 800552c:	f7ff ffe4 	bl	80054f8 <LL_ADC_IsEnabled>
 8005530:	4604      	mov	r4, r0
 8005532:	4812      	ldr	r0, [pc, #72]	@ (800557c <LL_ADC_CommonInit+0x60>)
 8005534:	f7ff ffe0 	bl	80054f8 <LL_ADC_IsEnabled>
 8005538:	4603      	mov	r3, r0
 800553a:	4323      	orrs	r3, r4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d114      	bne.n	800556a <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	e008      	b.n	800556e <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	605a      	str	r2, [r3, #4]
 8005568:	e001      	b.n	800556e <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	bd90      	pop	{r4, r7, pc}
 8005578:	40012400 	.word	0x40012400
 800557c:	40012800 	.word	0x40012800

08005580 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff ffb2 	bl	80054f8 <LL_ADC_IsEnabled>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d112      	bne.n	80055c0 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	e001      	b.n	80055c4 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80055d8:	2300      	movs	r3, #0
 80055da:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7ff ff8b 	bl	80054f8 <LL_ADC_IsEnabled>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d131      	bne.n	800564c <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	430b      	orrs	r3, r1
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	e008      	b.n	800561c <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8005624:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	6811      	ldr	r1, [r2, #0]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	68d2      	ldr	r2, [r2, #12]
 8005630:	4311      	orrs	r1, r2
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	6912      	ldr	r2, [r2, #16]
 8005636:	430a      	orrs	r2, r1
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff ff45 	bl	80054d4 <LL_ADC_REG_SetSequencerLength>
 800564a:	e001      	b.n	8005650 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <LL_EXTI_EnableIT_0_31>:
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8005664:	4b05      	ldr	r3, [pc, #20]	@ (800567c <LL_EXTI_EnableIT_0_31+0x20>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4904      	ldr	r1, [pc, #16]	@ (800567c <LL_EXTI_EnableIT_0_31+0x20>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4313      	orrs	r3, r2
 800566e:	600b      	str	r3, [r1, #0]
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	bc80      	pop	{r7}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	40010400 	.word	0x40010400

08005680 <LL_EXTI_DisableIT_0_31>:
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005688:	4b05      	ldr	r3, [pc, #20]	@ (80056a0 <LL_EXTI_DisableIT_0_31+0x20>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	43db      	mvns	r3, r3
 8005690:	4903      	ldr	r1, [pc, #12]	@ (80056a0 <LL_EXTI_DisableIT_0_31+0x20>)
 8005692:	4013      	ands	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr
 80056a0:	40010400 	.word	0x40010400

080056a4 <LL_EXTI_EnableEvent_0_31>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80056ac:	4b05      	ldr	r3, [pc, #20]	@ (80056c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4904      	ldr	r1, [pc, #16]	@ (80056c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010400 	.word	0x40010400

080056c8 <LL_EXTI_DisableEvent_0_31>:
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80056d0:	4b05      	ldr	r3, [pc, #20]	@ (80056e8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	43db      	mvns	r3, r3
 80056d8:	4903      	ldr	r1, [pc, #12]	@ (80056e8 <LL_EXTI_DisableEvent_0_31+0x20>)
 80056da:	4013      	ands	r3, r2
 80056dc:	604b      	str	r3, [r1, #4]
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr
 80056e8:	40010400 	.word	0x40010400

080056ec <LL_EXTI_EnableRisingTrig_0_31>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80056f4:	4b05      	ldr	r3, [pc, #20]	@ (800570c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80056f6:	689a      	ldr	r2, [r3, #8]
 80056f8:	4904      	ldr	r1, [pc, #16]	@ (800570c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	608b      	str	r3, [r1, #8]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40010400 	.word	0x40010400

08005710 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005718:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	43db      	mvns	r3, r3
 8005720:	4903      	ldr	r1, [pc, #12]	@ (8005730 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8005722:	4013      	ands	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr
 8005730:	40010400 	.word	0x40010400

08005734 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 800573c:	4b05      	ldr	r3, [pc, #20]	@ (8005754 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800573e:	68da      	ldr	r2, [r3, #12]
 8005740:	4904      	ldr	r1, [pc, #16]	@ (8005754 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4313      	orrs	r3, r2
 8005746:	60cb      	str	r3, [r1, #12]
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40010400 	.word	0x40010400

08005758 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005760:	4b05      	ldr	r3, [pc, #20]	@ (8005778 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8005762:	68da      	ldr	r2, [r3, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	43db      	mvns	r3, r3
 8005768:	4903      	ldr	r1, [pc, #12]	@ (8005778 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800576a:	4013      	ands	r3, r2
 800576c:	60cb      	str	r3, [r1, #12]
}
 800576e:	bf00      	nop
 8005770:	370c      	adds	r7, #12
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr
 8005778:	40010400 	.word	0x40010400

0800577c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005784:	2300      	movs	r3, #0
 8005786:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	791b      	ldrb	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d065      	beq.n	800585c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d06b      	beq.n	8005870 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	795b      	ldrb	r3, [r3, #5]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d01c      	beq.n	80057da <LL_EXTI_Init+0x5e>
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	dc25      	bgt.n	80057f0 <LL_EXTI_Init+0x74>
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <LL_EXTI_Init+0x32>
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d00b      	beq.n	80057c4 <LL_EXTI_Init+0x48>
 80057ac:	e020      	b.n	80057f0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7ff ff88 	bl	80056c8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ff4d 	bl	800565c <LL_EXTI_EnableIT_0_31>
          break;
 80057c2:	e018      	b.n	80057f6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ff59 	bl	8005680 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff ff66 	bl	80056a4 <LL_EXTI_EnableEvent_0_31>
          break;
 80057d8:	e00d      	b.n	80057f6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff ff3c 	bl	800565c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff ff5b 	bl	80056a4 <LL_EXTI_EnableEvent_0_31>
          break;
 80057ee:	e002      	b.n	80057f6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
          break;
 80057f4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	799b      	ldrb	r3, [r3, #6]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d038      	beq.n	8005870 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	799b      	ldrb	r3, [r3, #6]
 8005802:	2b03      	cmp	r3, #3
 8005804:	d01c      	beq.n	8005840 <LL_EXTI_Init+0xc4>
 8005806:	2b03      	cmp	r3, #3
 8005808:	dc25      	bgt.n	8005856 <LL_EXTI_Init+0xda>
 800580a:	2b01      	cmp	r3, #1
 800580c:	d002      	beq.n	8005814 <LL_EXTI_Init+0x98>
 800580e:	2b02      	cmp	r3, #2
 8005810:	d00b      	beq.n	800582a <LL_EXTI_Init+0xae>
 8005812:	e020      	b.n	8005856 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff9d 	bl	8005758 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7ff ff62 	bl	80056ec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005828:	e022      	b.n	8005870 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff ff6e 	bl	8005710 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff ff7b 	bl	8005734 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800583e:	e017      	b.n	8005870 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff ff51 	bl	80056ec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff ff70 	bl	8005734 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005854:	e00c      	b.n	8005870 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
            break;
 800585a:	e009      	b.n	8005870 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff ff0d 	bl	8005680 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff ff2c 	bl	80056c8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <LL_GPIO_SetPinMode>:
{
 800587a:	b490      	push	{r4, r7}
 800587c:	b088      	sub	sp, #32
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	0e1b      	lsrs	r3, r3, #24
 800588e:	4413      	add	r3, r2
 8005890:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8005892:	6822      	ldr	r2, [r4, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	fa93 f3a3 	rbit	r3, r3
 800589e:	613b      	str	r3, [r7, #16]
  return result;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	fab3 f383 	clz	r3, r3
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	210f      	movs	r1, #15
 80058ac:	fa01 f303 	lsl.w	r3, r1, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	61bb      	str	r3, [r7, #24]
  return result;
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	4313      	orrs	r3, r2
 80058d2:	6023      	str	r3, [r4, #0]
}
 80058d4:	bf00      	nop
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bc90      	pop	{r4, r7}
 80058dc:	4770      	bx	lr

080058de <LL_GPIO_SetPinSpeed>:
{
 80058de:	b490      	push	{r4, r7}
 80058e0:	b088      	sub	sp, #32
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	60f8      	str	r0, [r7, #12]
 80058e6:	60b9      	str	r1, [r7, #8]
 80058e8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	461a      	mov	r2, r3
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	0e1b      	lsrs	r3, r3, #24
 80058f2:	4413      	add	r3, r2
 80058f4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	fa93 f3a3 	rbit	r3, r3
 8005902:	613b      	str	r3, [r7, #16]
  return result;
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	fab3 f383 	clz	r3, r3
 800590a:	b2db      	uxtb	r3, r3
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	2103      	movs	r1, #3
 8005910:	fa01 f303 	lsl.w	r3, r1, r3
 8005914:	43db      	mvns	r3, r3
 8005916:	401a      	ands	r2, r3
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	fa93 f3a3 	rbit	r3, r3
 8005922:	61bb      	str	r3, [r7, #24]
  return result;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	fab3 f383 	clz	r3, r3
 800592a:	b2db      	uxtb	r3, r3
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	fa01 f303 	lsl.w	r3, r1, r3
 8005934:	4313      	orrs	r3, r2
 8005936:	6023      	str	r3, [r4, #0]
}
 8005938:	bf00      	nop
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bc90      	pop	{r4, r7}
 8005940:	4770      	bx	lr

08005942 <LL_GPIO_SetPinOutputType>:
{
 8005942:	b490      	push	{r4, r7}
 8005944:	b088      	sub	sp, #32
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	461a      	mov	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	0e1b      	lsrs	r3, r3, #24
 8005956:	4413      	add	r3, r2
 8005958:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	fa93 f3a3 	rbit	r3, r3
 8005966:	613b      	str	r3, [r7, #16]
  return result;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	fab3 f383 	clz	r3, r3
 800596e:	b2db      	uxtb	r3, r3
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	2104      	movs	r1, #4
 8005974:	fa01 f303 	lsl.w	r3, r1, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	401a      	ands	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	fa93 f3a3 	rbit	r3, r3
 8005986:	61bb      	str	r3, [r7, #24]
  return result;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	fab3 f383 	clz	r3, r3
 800598e:	b2db      	uxtb	r3, r3
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	fa01 f303 	lsl.w	r3, r1, r3
 8005998:	4313      	orrs	r3, r2
 800599a:	6023      	str	r3, [r4, #0]
}
 800599c:	bf00      	nop
 800599e:	3720      	adds	r7, #32
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc90      	pop	{r4, r7}
 80059a4:	4770      	bx	lr

080059a6 <LL_GPIO_SetPinPull>:
{
 80059a6:	b480      	push	{r7}
 80059a8:	b087      	sub	sp, #28
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	0a1b      	lsrs	r3, r3, #8
 80059ba:	43db      	mvns	r3, r3
 80059bc:	401a      	ands	r2, r3
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	0a1b      	lsrs	r3, r3, #8
 80059c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	fa93 f3a3 	rbit	r3, r3
 80059ca:	613b      	str	r3, [r7, #16]
  return result;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	4619      	mov	r1, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	408b      	lsls	r3, r1
 80059da:	431a      	orrs	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	60da      	str	r2, [r3, #12]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b088      	sub	sp, #32
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
 80059f2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	fa93 f3a3 	rbit	r3, r3
 8005a08:	60fb      	str	r3, [r7, #12]
  return result;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8005a0c:	fab3 f383 	clz	r3, r3
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8005a14:	e044      	b.n	8005aa0 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8005a16:	2201      	movs	r2, #1
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d03a      	beq.n	8005a9a <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	2b07      	cmp	r3, #7
 8005a28:	d806      	bhi.n	8005a38 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8005a2a:	f240 1201 	movw	r2, #257	@ 0x101
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e008      	b.n	8005a4a <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3b08      	subs	r3, #8
 8005a3c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a48:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d106      	bne.n	8005a60 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	461a      	mov	r2, r3
 8005a58:	69b9      	ldr	r1, [r7, #24]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7ff ffa3 	bl	80059a6 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	461a      	mov	r2, r3
 8005a66:	69b9      	ldr	r1, [r7, #24]
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ff06 	bl	800587a <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d003      	beq.n	8005a7e <LL_GPIO_Init+0x94>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d10d      	bne.n	8005a9a <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	461a      	mov	r2, r3
 8005a84:	69b9      	ldr	r1, [r7, #24]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff ff29 	bl	80058de <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	461a      	mov	r2, r3
 8005a92:	69b9      	ldr	r1, [r7, #24]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff ff54 	bl	8005942 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1b4      	bne.n	8005a16 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <LL_RCC_GetSysClkSource>:
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005abc:	4b03      	ldr	r3, [pc, #12]	@ (8005acc <LL_RCC_GetSysClkSource+0x14>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 030c 	and.w	r3, r3, #12
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bc80      	pop	{r7}
 8005aca:	4770      	bx	lr
 8005acc:	40021000 	.word	0x40021000

08005ad0 <LL_RCC_GetAHBPrescaler>:
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005ad4:	4b03      	ldr	r3, [pc, #12]	@ (8005ae4 <LL_RCC_GetAHBPrescaler+0x14>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bc80      	pop	{r7}
 8005ae2:	4770      	bx	lr
 8005ae4:	40021000 	.word	0x40021000

08005ae8 <LL_RCC_GetAPB1Prescaler>:
{
 8005ae8:	b480      	push	{r7}
 8005aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005aec:	4b03      	ldr	r3, [pc, #12]	@ (8005afc <LL_RCC_GetAPB1Prescaler+0x14>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	40021000 	.word	0x40021000

08005b00 <LL_RCC_GetAPB2Prescaler>:
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005b04:	4b03      	ldr	r3, [pc, #12]	@ (8005b14 <LL_RCC_GetAPB2Prescaler+0x14>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr
 8005b14:	40021000 	.word	0x40021000

08005b18 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8005b1c:	4b03      	ldr	r3, [pc, #12]	@ (8005b2c <LL_RCC_PLL_GetMainSource+0x14>)
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	40021000 	.word	0x40021000

08005b30 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8005b34:	4b03      	ldr	r3, [pc, #12]	@ (8005b44 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bc80      	pop	{r7}
 8005b42:	4770      	bx	lr
 8005b44:	40021000 	.word	0x40021000

08005b48 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8005b4c:	4b04      	ldr	r3, [pc, #16]	@ (8005b60 <LL_RCC_PLL_GetPrediv+0x18>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	0c5b      	lsrs	r3, r3, #17
 8005b52:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000

08005b64 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8005b6c:	f000 f820 	bl	8005bb0 <RCC_GetSystemClockFreq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 f83e 	bl	8005bfc <RCC_GetHCLKClockFreq>
 8005b80:	4602      	mov	r2, r0
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 f84c 	bl	8005c28 <RCC_GetPCLK1ClockFreq>
 8005b90:	4602      	mov	r2, r0
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f858 	bl	8005c50 <RCC_GetPCLK2ClockFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]
}
 8005ba6:	bf00      	nop
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005bba:	f7ff ff7d 	bl	8005ab8 <LL_RCC_GetSysClkSource>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d00c      	beq.n	8005bde <RCC_GetSystemClockFreq+0x2e>
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d80e      	bhi.n	8005be6 <RCC_GetSystemClockFreq+0x36>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <RCC_GetSystemClockFreq+0x22>
 8005bcc:	2b04      	cmp	r3, #4
 8005bce:	d003      	beq.n	8005bd8 <RCC_GetSystemClockFreq+0x28>
 8005bd0:	e009      	b.n	8005be6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005bd2:	4b09      	ldr	r3, [pc, #36]	@ (8005bf8 <RCC_GetSystemClockFreq+0x48>)
 8005bd4:	607b      	str	r3, [r7, #4]
      break;
 8005bd6:	e009      	b.n	8005bec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005bd8:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <RCC_GetSystemClockFreq+0x48>)
 8005bda:	607b      	str	r3, [r7, #4]
      break;
 8005bdc:	e006      	b.n	8005bec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005bde:	f000 f84b 	bl	8005c78 <RCC_PLL_GetFreqDomain_SYS>
 8005be2:	6078      	str	r0, [r7, #4]
      break;
 8005be4:	e002      	b.n	8005bec <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005be6:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <RCC_GetSystemClockFreq+0x48>)
 8005be8:	607b      	str	r3, [r7, #4]
      break;
 8005bea:	bf00      	nop
  }

  return frequency;
 8005bec:	687b      	ldr	r3, [r7, #4]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	007a1200 	.word	0x007a1200

08005bfc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005c04:	f7ff ff64 	bl	8005ad0 <LL_RCC_GetAHBPrescaler>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	f003 030f 	and.w	r3, r3, #15
 8005c10:	4a04      	ldr	r2, [pc, #16]	@ (8005c24 <RCC_GetHCLKClockFreq+0x28>)
 8005c12:	5cd3      	ldrb	r3, [r2, r3]
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	40d3      	lsrs	r3, r2
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	08009408 	.word	0x08009408

08005c28 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005c30:	f7ff ff5a 	bl	8005ae8 <LL_RCC_GetAPB1Prescaler>
 8005c34:	4603      	mov	r3, r0
 8005c36:	0a1b      	lsrs	r3, r3, #8
 8005c38:	4a04      	ldr	r2, [pc, #16]	@ (8005c4c <RCC_GetPCLK1ClockFreq+0x24>)
 8005c3a:	5cd3      	ldrb	r3, [r2, r3]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	40d3      	lsrs	r3, r2
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08009418 	.word	0x08009418

08005c50 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005c58:	f7ff ff52 	bl	8005b00 <LL_RCC_GetAPB2Prescaler>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	0adb      	lsrs	r3, r3, #11
 8005c60:	4a04      	ldr	r2, [pc, #16]	@ (8005c74 <RCC_GetPCLK2ClockFreq+0x24>)
 8005c62:	5cd3      	ldrb	r3, [r2, r3]
 8005c64:	461a      	mov	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	40d3      	lsrs	r3, r2
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3708      	adds	r7, #8
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	08009418 	.word	0x08009418

08005c78 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	2300      	movs	r3, #0
 8005c84:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005c86:	f7ff ff47 	bl	8005b18 <LL_RCC_PLL_GetMainSource>
 8005c8a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c98:	d003      	beq.n	8005ca2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005c9a:	e00b      	b.n	8005cb4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8005cd4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8005c9e:	607b      	str	r3, [r7, #4]
      break;
 8005ca0:	e00b      	b.n	8005cba <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8005ca2:	f7ff ff51 	bl	8005b48 <LL_RCC_PLL_GetPrediv>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a0b      	ldr	r2, [pc, #44]	@ (8005cd8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	607b      	str	r3, [r7, #4]
      break;
 8005cb2:	e002      	b.n	8005cba <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8005cb4:	4b07      	ldr	r3, [pc, #28]	@ (8005cd4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8005cb6:	607b      	str	r3, [r7, #4]
      break;
 8005cb8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8005cba:	f7ff ff39 	bl	8005b30 <LL_RCC_PLL_GetMultiplicator>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	0c9b      	lsrs	r3, r3, #18
 8005cc2:	3302      	adds	r3, #2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	003d0900 	.word	0x003d0900
 8005cd8:	007a1200 	.word	0x007a1200

08005cdc <LL_TIM_SetPrescaler>:
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bc80      	pop	{r7}
 8005cf4:	4770      	bx	lr

08005cf6 <LL_TIM_SetAutoReload>:
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
 8005cfe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <LL_TIM_SetRepetitionCounter>:
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	683a      	ldr	r2, [r7, #0]
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr

08005d2a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f043 0201 	orr.w	r2, r3, #1
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	615a      	str	r2, [r3, #20]
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a27      	ldr	r2, [pc, #156]	@ (8005df8 <LL_TIM_Init+0xb0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00b      	beq.n	8005d78 <LL_TIM_Init+0x30>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d66:	d007      	beq.n	8005d78 <LL_TIM_Init+0x30>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a24      	ldr	r2, [pc, #144]	@ (8005dfc <LL_TIM_Init+0xb4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d003      	beq.n	8005d78 <LL_TIM_Init+0x30>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a23      	ldr	r2, [pc, #140]	@ (8005e00 <LL_TIM_Init+0xb8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d106      	bne.n	8005d86 <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a1b      	ldr	r2, [pc, #108]	@ (8005df8 <LL_TIM_Init+0xb0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00b      	beq.n	8005da6 <LL_TIM_Init+0x5e>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d94:	d007      	beq.n	8005da6 <LL_TIM_Init+0x5e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a18      	ldr	r2, [pc, #96]	@ (8005dfc <LL_TIM_Init+0xb4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d003      	beq.n	8005da6 <LL_TIM_Init+0x5e>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a17      	ldr	r2, [pc, #92]	@ (8005e00 <LL_TIM_Init+0xb8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d106      	bne.n	8005db4 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f7ff ff98 	bl	8005cf6 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ff85 	bl	8005cdc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a08      	ldr	r2, [pc, #32]	@ (8005df8 <LL_TIM_Init+0xb0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d105      	bne.n	8005de6 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff ff95 	bl	8005d10 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff ff9f 	bl	8005d2a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40012c00 	.word	0x40012c00
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800

08005e04 <LL_USART_IsEnabled>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e18:	bf0c      	ite	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	2300      	movne	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bc80      	pop	{r7}
 8005e28:	4770      	bx	lr

08005e2a <LL_USART_SetStopBitsLength>:
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	611a      	str	r2, [r3, #16]
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <LL_USART_SetHWFlowCtrl>:
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	615a      	str	r2, [r3, #20]
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr
	...

08005e74 <LL_USART_SetBaudRate>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009a      	lsls	r2, r3, #2
 8005e8a:	441a      	add	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	4a25      	ldr	r2, [pc, #148]	@ (8005f2c <LL_USART_SetBaudRate+0xb8>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	b299      	uxth	r1, r3
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	009a      	lsls	r2, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8005f2c <LL_USART_SetBaudRate+0xb8>)
 8005eb8:	fba3 0302 	umull	r0, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	2064      	movs	r0, #100	@ 0x64
 8005ec0:	fb00 f303 	mul.w	r3, r0, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	3332      	adds	r3, #50	@ 0x32
 8005eca:	4a18      	ldr	r2, [pc, #96]	@ (8005f2c <LL_USART_SetBaudRate+0xb8>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	095b      	lsrs	r3, r3, #5
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	440b      	add	r3, r1
 8005edc:	b299      	uxth	r1, r3
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009a      	lsls	r2, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8005f2c <LL_USART_SetBaudRate+0xb8>)
 8005ef4:	fba3 0302 	umull	r0, r3, r3, r2
 8005ef8:	095b      	lsrs	r3, r3, #5
 8005efa:	2064      	movs	r0, #100	@ 0x64
 8005efc:	fb00 f303 	mul.w	r3, r0, r3
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	3332      	adds	r3, #50	@ 0x32
 8005f06:	4a09      	ldr	r2, [pc, #36]	@ (8005f2c <LL_USART_SetBaudRate+0xb8>)
 8005f08:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0c:	095b      	lsrs	r3, r3, #5
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f003 030f 	and.w	r3, r3, #15
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	440b      	add	r3, r1
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	609a      	str	r2, [r3, #8]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bc80      	pop	{r7}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	51eb851f 	.word	0x51eb851f

08005f30 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff ff5e 	bl	8005e04 <LL_USART_IsEnabled>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d145      	bne.n	8005fda <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005f56:	f023 030c 	bic.w	r3, r3, #12
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	6851      	ldr	r1, [r2, #4]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68d2      	ldr	r2, [r2, #12]
 8005f62:	4311      	orrs	r1, r2
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	6912      	ldr	r2, [r2, #16]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff ff57 	bl	8005e2a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	4619      	mov	r1, r3
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff ff63 	bl	8005e4e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005f88:	f107 0308 	add.w	r3, r7, #8
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fde9 	bl	8005b64 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a13      	ldr	r2, [pc, #76]	@ (8005fe4 <LL_USART_Init+0xb4>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d102      	bne.n	8005fa0 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	61bb      	str	r3, [r7, #24]
 8005f9e:	e00c      	b.n	8005fba <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a11      	ldr	r2, [pc, #68]	@ (8005fe8 <LL_USART_Init+0xb8>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d102      	bne.n	8005fae <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	e005      	b.n	8005fba <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8005fec <LL_USART_Init+0xbc>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d101      	bne.n	8005fba <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d008      	beq.n	8005fda <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	69b9      	ldr	r1, [r7, #24]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff ff4d 	bl	8005e74 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005fda:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40013800 	.word	0x40013800
 8005fe8:	40004400 	.word	0x40004400
 8005fec:	40004800 	.word	0x40004800

08005ff0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8006034 <LL_mDelay+0x44>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005ffe:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d00c      	beq.n	8006022 <LL_mDelay+0x32>
  {
    Delay++;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3301      	adds	r3, #1
 800600c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800600e:	e008      	b.n	8006022 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8006010:	4b08      	ldr	r3, [pc, #32]	@ (8006034 <LL_mDelay+0x44>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <LL_mDelay+0x32>
    {
      Delay--;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3b01      	subs	r3, #1
 8006020:	607b      	str	r3, [r7, #4]
  while (Delay)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1f3      	bne.n	8006010 <LL_mDelay+0x20>
    }
  }
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr
 8006034:	e000e010 	.word	0xe000e010

08006038 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006040:	4a03      	ldr	r2, [pc, #12]	@ (8006050 <LL_SetSystemCoreClock+0x18>)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6013      	str	r3, [r2, #0]
}
 8006046:	bf00      	nop
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	200000c0 	.word	0x200000c0

08006054 <RING_BUFFER_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
RING_BUFFER_Init (ring_buffer_t *rb)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  rb->u32_out   = 0;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  rb->u32_count = 0;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr

0800607e <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  rb->u32_out   = 0;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  rb->u32_count = 0;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr

080060a8 <RING_BUFFER_Is_Empty>:
 * the count of elements in the ring buffer is 0, indicating that the buffer is
 * empty, and `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bf0c      	ite	eq
 80060ba:	2301      	moveq	r3, #1
 80060bc:	2300      	movne	r3, #0
 80060be:	b2db      	uxtb	r3, r3
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bc80      	pop	{r7}
 80060c8:	4770      	bx	lr

080060ca <RING_BUFFER_Is_Full>:
 * either `true` or `false`, based on whether the count of elements in the ring
 * buffer `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80060d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060dc:	bf0c      	ite	eq
 80060de:	2301      	moveq	r3, #1
 80060e0:	2300      	movne	r3, #0
 80060e2:	b2db      	uxtb	r3, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr

080060ee <RING_BUFFER_Push_Data>:
 * buffer. It is of type `char`, which means it can store a single character (1
 * byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
 80060f6:	460b      	mov	r3, r1
 80060f8:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff ffe5 	bl	80060ca <RING_BUFFER_Is_Full>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff ffb9 	bl	800607e <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006114:	4413      	add	r3, r2
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006120:	3301      	adds	r3, #1
 8006122:	b2da      	uxtb	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  rb->u32_count++;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data
 * value from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff ffad 	bl	80060a8 <RING_BUFFER_Is_Empty>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 8006154:	23ff      	movs	r3, #255	@ 0xff
 8006156:	e016      	b.n	8006186 <RING_BUFFER_Pull_Data+0x46>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006160:	4413      	add	r3, r2
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800616c:	3301      	adds	r3, #1
 800616e:	b2da      	uxtb	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  rb->u32_count--;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

  return data;
 8006184:	4623      	mov	r3, r4
}
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	bd90      	pop	{r4, r7, pc}
	...

08006190 <SCH_Initialize>:
 * scheduler context, including task and timer contexts, as well as soft timers.
 * It also initializes the SysTick timer for scheduler operations.
 */
void
SCH_Initialize (void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
  s_SystemTick         = RESET; /**< @brief Reset system tick counter. */
 8006194:	4b0d      	ldr	r3, [pc, #52]	@ (80061cc <SCH_Initialize+0x3c>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET; /**< @brief Reset number of scheduled tasks. */
 800619a:	4b0d      	ldr	r3, [pc, #52]	@ (80061d0 <SCH_Initialize+0x40>)
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers        = RESET; /**< @brief Reset number of timers. */
 80061a0:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <SCH_Initialize+0x44>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]

  /**< @brief Initialize Scheduler Context */

  /**< @brief Clear task context array. */
  memset((uint8_t *)&s_TaskContext[0],
 80061a6:	2248      	movs	r2, #72	@ 0x48
 80061a8:	2100      	movs	r1, #0
 80061aa:	480b      	ldr	r0, [pc, #44]	@ (80061d8 <SCH_Initialize+0x48>)
 80061ac:	f000 ff55 	bl	800705a <memset>
         RESET,
         (sizeof(SCH_TaskContextTypedef) * MAX_TASK));

  /**< @brief Clear timer context array. */
  memset((uint8_t *)&s_TimerContext[0],
 80061b0:	2224      	movs	r2, #36	@ 0x24
 80061b2:	2100      	movs	r1, #0
 80061b4:	4809      	ldr	r0, [pc, #36]	@ (80061dc <SCH_Initialize+0x4c>)
 80061b6:	f000 ff50 	bl	800705a <memset>
         RESET,
         (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));

  /**< @brief Clear soft timers array. */
  memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80061ba:	2208      	movs	r2, #8
 80061bc:	2100      	movs	r1, #0
 80061be:	4808      	ldr	r0, [pc, #32]	@ (80061e0 <SCH_Initialize+0x50>)
 80061c0:	f000 ff4b 	bl	800705a <memset>

  /**< @brief Initialize SysTick timer. */
  BSP_SYSTICK_TimerInit();
 80061c4:	f7fc fbe8 	bl	8002998 <BSP_SYSTICK_TimerInit>
}
 80061c8:	bf00      	nop
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000e00 	.word	0x20000e00
 80061d0:	20000dd4 	.word	0x20000dd4
 80061d4:	20000dfc 	.word	0x20000dfc
 80061d8:	20000d8c 	.word	0x20000d8c
 80061dc:	20000dd8 	.word	0x20000dd8
 80061e0:	20000e04 	.word	0x20000e04

080061e4 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  status_t status
 80061ee:	2301      	movs	r3, #1
 80061f0:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTaskProperty)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d029      	beq.n	800624c <SCH_TASK_CreateTask+0x68>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d026      	beq.n	800624c <SCH_TASK_CreateTask+0x68>
  {
    /**< @brief Check if there's room for more tasks */
    if (s_NumOfTaskScheduled < (MAX_TASK - 1))
 80061fe:	4b16      	ldr	r3, [pc, #88]	@ (8006258 <SCH_TASK_CreateTask+0x74>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b04      	cmp	r3, #4
 8006204:	d822      	bhi.n	800624c <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef *pTaskContext
          = &s_TaskContext[s_NumOfTaskScheduled];
 8006206:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <SCH_TASK_CreateTask+0x74>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	461a      	mov	r2, r3
      SCH_TaskContextTypedef *pTaskContext
 800620c:	4613      	mov	r3, r2
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	4413      	add	r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4a11      	ldr	r2, [pc, #68]	@ (800625c <SCH_TASK_CreateTask+0x78>)
 8006216:	4413      	add	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]

      /**< @brief Set task properties in task context */
      pTaskContext->pTaskProperty = pTaskProperty;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	609a      	str	r2, [r3, #8]
      pTaskContext->taskFlag      = FALSE;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2200      	movs	r2, #0
 8006224:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick      = pTaskProperty->taskTick;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	605a      	str	r2, [r3, #4]
      pTaskContext->taskState     = TASK_StateReady;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]

      /**< @brief Provide task handle to caller */
      *pHandle = s_NumOfTaskScheduled;
 8006234:	4b08      	ldr	r3, [pc, #32]	@ (8006258 <SCH_TASK_CreateTask+0x74>)
 8006236:	781a      	ldrb	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment task count */
      s_NumOfTaskScheduled++;
 800623c:	4b06      	ldr	r3, [pc, #24]	@ (8006258 <SCH_TASK_CreateTask+0x74>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	b2da      	uxtb	r2, r3
 8006244:	4b04      	ldr	r3, [pc, #16]	@ (8006258 <SCH_TASK_CreateTask+0x74>)
 8006246:	701a      	strb	r2, [r3, #0]

      /**< @brief Task registered successfully */
      status = STS_DONE;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	20000dd4 	.word	0x20000dd4
 800625c:	20000d8c 	.word	0x20000d8c

08006260 <SCH_TIM_CreateTimer>:
 * registered, otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_CreateTimer (SCH_TIMER_HANDLE         *pHandle,
                     SCH_TimerPropertyTypedef *pTimerProperty)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  status_t status
 800626a:	2301      	movs	r3, #1
 800626c:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTimerProperty)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d028      	beq.n	80062c6 <SCH_TIM_CreateTimer+0x66>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d025      	beq.n	80062c6 <SCH_TIM_CreateTimer+0x66>
  {
    /**< @brief Check if there's room for more timers */
    if (s_NumOfTimers < (MAX_TIMERS - 1))
 800627a:	4b16      	ldr	r3, [pc, #88]	@ (80062d4 <SCH_TIM_CreateTimer+0x74>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d821      	bhi.n	80062c6 <SCH_TIM_CreateTimer+0x66>
    {
      SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[s_NumOfTimers];
 8006282:	4b14      	ldr	r3, [pc, #80]	@ (80062d4 <SCH_TIM_CreateTimer+0x74>)
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	4613      	mov	r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4a11      	ldr	r2, [pc, #68]	@ (80062d8 <SCH_TIM_CreateTimer+0x78>)
 8006292:	4413      	add	r3, r2
 8006294:	60bb      	str	r3, [r7, #8]

      /**< @brief Set timer properties in timer context */
      pTimerContext->pTimerProperty = pTimerProperty;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	609a      	str	r2, [r3, #8]
      pTimerContext->timerState     = TIM_StateStop;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
      pTimerContext->timerFlag      = FALSE;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2200      	movs	r2, #0
 80062a6:	805a      	strh	r2, [r3, #2]
      pTimerContext->timerTick      = RESET;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]

      /**< @brief Provide timer handle to caller */
      *pHandle = s_NumOfTimers;
 80062ae:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <SCH_TIM_CreateTimer+0x74>)
 80062b0:	781a      	ldrb	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment timer count */
      s_NumOfTimers++;
 80062b6:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <SCH_TIM_CreateTimer+0x74>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <SCH_TIM_CreateTimer+0x74>)
 80062c0:	701a      	strb	r2, [r3, #0]

      /**< @brief Timer registered successfully */
      status = STS_DONE;
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bc80      	pop	{r7}
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	20000dfc 	.word	0x20000dfc
 80062d8:	20000dd8 	.word	0x20000dd8

080062dc <SCH_TIM_RestartTimer>:
 * @return Returns STS_DONE if the timer was successfully restarted,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_RestartTimer (SCH_TIMER_HANDLE timerIndex)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	4603      	mov	r3, r0
 80062e4:	71fb      	strb	r3, [r7, #7]
  status_t status
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 80062ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006320 <SCH_TIM_RestartTimer+0x44>)
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	79fa      	ldrb	r2, [r7, #7]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d20f      	bcs.n	8006314 <SCH_TIM_RestartTimer+0x38>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 80062f4:	79fa      	ldrb	r2, [r7, #7]
 80062f6:	4613      	mov	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4a09      	ldr	r2, [pc, #36]	@ (8006324 <SCH_TIM_RestartTimer+0x48>)
 8006300:	4413      	add	r3, r2
 8006302:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerTick               = RESET;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	605a      	str	r2, [r3, #4]
    pTimerContext->timerState              = TIM_StateRun;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	2201      	movs	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 8006310:	2300      	movs	r3, #0
 8006312:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr
 8006320:	20000dfc 	.word	0x20000dfc
 8006324:	20000dd8 	.word	0x20000dd8

08006328 <SCH_TIM_StopTimer>:
 * @return Returns STS_DONE if the timer was successfully stopped,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_StopTimer (SCH_TIMER_HANDLE timerIndex)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  status_t status
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 8006336:	4b0c      	ldr	r3, [pc, #48]	@ (8006368 <SCH_TIM_StopTimer+0x40>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	79fa      	ldrb	r2, [r7, #7]
 800633c:	429a      	cmp	r2, r3
 800633e:	d20c      	bcs.n	800635a <SCH_TIM_StopTimer+0x32>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 8006340:	79fa      	ldrb	r2, [r7, #7]
 8006342:	4613      	mov	r3, r2
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	4413      	add	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4a08      	ldr	r2, [pc, #32]	@ (800636c <SCH_TIM_StopTimer+0x44>)
 800634c:	4413      	add	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerState              = TIM_StateStop;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 8006356:	2300      	movs	r3, #0
 8006358:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	20000dfc 	.word	0x20000dfc
 800636c:	20000dd8 	.word	0x20000dd8

08006370 <SCH_RunSystemTickTimer>:
 * and timer ticks, checks if their periods have elapsed, and updates their
 * flags accordingly. Additionally, it decrements software timers.
 */
void
SCH_RunSystemTickTimer (void)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Increment System Tick counter */
  s_SystemTick++;
 8006376:	4b42      	ldr	r3, [pc, #264]	@ (8006480 <SCH_RunSystemTickTimer+0x110>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	4a40      	ldr	r2, [pc, #256]	@ (8006480 <SCH_RunSystemTickTimer+0x110>)
 800637e:	6013      	str	r3, [r2, #0]

  /**< @brief Check Status of periodic tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e025      	b.n	80063d2 <SCH_RunSystemTickTimer+0x62>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 8006386:	7bfa      	ldrb	r2, [r7, #15]
 8006388:	4613      	mov	r3, r2
 800638a:	005b      	lsls	r3, r3, #1
 800638c:	4413      	add	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4a3c      	ldr	r2, [pc, #240]	@ (8006484 <SCH_RunSystemTickTimer+0x114>)
 8006392:	4413      	add	r3, r2
 8006394:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d115      	bne.n	80063cc <SCH_RunSystemTickTimer+0x5c>
        && (TASK_StateReady == pTaskContext->taskState))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d111      	bne.n	80063cc <SCH_RunSystemTickTimer+0x5c>
    {
      /**< @brief Increment task tick */
      pTaskContext->taskTick += 1;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached task period */
      if (pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6892      	ldr	r2, [r2, #8]
 80063ba:	8852      	ldrh	r2, [r2, #2]
 80063bc:	4293      	cmp	r3, r2
 80063be:	d305      	bcc.n	80063cc <SCH_RunSystemTickTimer+0x5c>
      {
        /**< @brief Reset Task tick timer */
        pTaskContext->taskTick = RESET;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	605a      	str	r2, [r3, #4]
        /**< @brief Enable Flag */
        pTaskContext->taskFlag = TRUE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	805a      	strh	r2, [r3, #2]
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	3301      	adds	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
 80063d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006488 <SCH_RunSystemTickTimer+0x118>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	7bfa      	ldrb	r2, [r7, #15]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d3d4      	bcc.n	8006386 <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  /**< @brief Check Status of timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80063dc:	2300      	movs	r3, #0
 80063de:	73bb      	strb	r3, [r7, #14]
 80063e0:	e02b      	b.n	800643a <SCH_RunSystemTickTimer+0xca>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 80063e2:	7bba      	ldrb	r2, [r7, #14]
 80063e4:	4613      	mov	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4a27      	ldr	r2, [pc, #156]	@ (800648c <SCH_RunSystemTickTimer+0x11c>)
 80063ee:	4413      	add	r3, r2
 80063f0:	60bb      	str	r3, [r7, #8]

    /**< @brief Check type and State of the timer */
    if (TIM_StateRun == pTimerContext->timerState)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d11c      	bne.n	8006434 <SCH_RunSystemTickTimer+0xc4>
    {
      /**< @brief Increment timer tick */
      pTimerContext->timerTick += 1;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached timer period */
      if (pTimerContext->timerTick
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	685b      	ldr	r3, [r3, #4]
          >= pTimerContext->pTimerProperty->timerPeriodInMS)
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	6892      	ldr	r2, [r2, #8]
 800640c:	8852      	ldrh	r2, [r2, #2]
      if (pTimerContext->timerTick
 800640e:	4293      	cmp	r3, r2
 8006410:	d310      	bcc.n	8006434 <SCH_RunSystemTickTimer+0xc4>
      {
        /**< @brief Enable Flag */
        pTimerContext->timerFlag = TRUE;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2201      	movs	r2, #1
 8006416:	805a      	strh	r2, [r3, #2]
        /**< @brief Reset tick timer */
        pTimerContext->timerTick = RESET;
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2200      	movs	r2, #0
 800641c:	605a      	str	r2, [r3, #4]
        /**< @brief Check timer type and change the state */
        pTimerContext->timerState
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	781b      	ldrb	r3, [r3, #0]
                  ? TIM_StateRun
                  : TIM_StateStop;
 8006424:	2b02      	cmp	r3, #2
 8006426:	bf0c      	ite	eq
 8006428:	2301      	moveq	r3, #1
 800642a:	2300      	movne	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	461a      	mov	r2, r3
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	701a      	strb	r2, [r3, #0]
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8006434:	7bbb      	ldrb	r3, [r7, #14]
 8006436:	3301      	adds	r3, #1
 8006438:	73bb      	strb	r3, [r7, #14]
 800643a:	4b15      	ldr	r3, [pc, #84]	@ (8006490 <SCH_RunSystemTickTimer+0x120>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	7bba      	ldrb	r2, [r7, #14]
 8006440:	429a      	cmp	r2, r3
 8006442:	d3ce      	bcc.n	80063e2 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }

  /**< @brief Update software timers */
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8006444:	2300      	movs	r3, #0
 8006446:	73bb      	strb	r3, [r7, #14]
 8006448:	e010      	b.n	800646c <SCH_RunSystemTickTimer+0xfc>
  {
    if (s_SoftTimers[timerIndex] > 0)
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	4a11      	ldr	r2, [pc, #68]	@ (8006494 <SCH_RunSystemTickTimer+0x124>)
 800644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d007      	beq.n	8006466 <SCH_RunSystemTickTimer+0xf6>
    {
      s_SoftTimers[timerIndex]--;
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	4a0e      	ldr	r2, [pc, #56]	@ (8006494 <SCH_RunSystemTickTimer+0x124>)
 800645a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800645e:	3a01      	subs	r2, #1
 8006460:	490c      	ldr	r1, [pc, #48]	@ (8006494 <SCH_RunSystemTickTimer+0x124>)
 8006462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	3301      	adds	r3, #1
 800646a:	73bb      	strb	r3, [r7, #14]
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d9eb      	bls.n	800644a <SCH_RunSystemTickTimer+0xda>
    }
  }
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000e00 	.word	0x20000e00
 8006484:	20000d8c 	.word	0x20000d8c
 8006488:	20000dd4 	.word	0x20000dd4
 800648c:	20000dd8 	.word	0x20000dd8
 8006490:	20000dfc 	.word	0x20000dfc
 8006494:	20000e04 	.word	0x20000e04

08006498 <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 800649c:	f7fc fa6e 	bl	800297c <BSP_SYSTICK_TimerStart>
}
 80064a0:	bf00      	nop
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
 80064ae:	e01e      	b.n	80064ee <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 80064b0:	7bfa      	ldrb	r2, [r7, #15]
 80064b2:	4613      	mov	r3, r2
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4a23      	ldr	r2, [pc, #140]	@ (8006548 <SCH_HandleScheduledTask+0xa4>)
 80064bc:	4413      	add	r3, r2
 80064be:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	885b      	ldrh	r3, [r3, #2]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10f      	bne.n	80064e8 <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10b      	bne.n	80064e8 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	3301      	adds	r3, #1
 80064ec:	73fb      	strb	r3, [r7, #15]
 80064ee:	4b17      	ldr	r3, [pc, #92]	@ (800654c <SCH_HandleScheduledTask+0xa8>)
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	7bfa      	ldrb	r2, [r7, #15]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3db      	bcc.n	80064b0 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 80064f8:	2300      	movs	r3, #0
 80064fa:	73bb      	strb	r3, [r7, #14]
 80064fc:	e01a      	b.n	8006534 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 80064fe:	7bba      	ldrb	r2, [r7, #14]
 8006500:	4613      	mov	r3, r2
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4a11      	ldr	r2, [pc, #68]	@ (8006550 <SCH_HandleScheduledTask+0xac>)
 800650a:	4413      	add	r3, r2
 800650c:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	885b      	ldrh	r3, [r3, #2]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d10b      	bne.n	800652e <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2200      	movs	r2, #0
 800651a:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d003      	beq.n	800652e <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	3301      	adds	r3, #1
 8006532:	73bb      	strb	r3, [r7, #14]
 8006534:	4b07      	ldr	r3, [pc, #28]	@ (8006554 <SCH_HandleScheduledTask+0xb0>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	7bba      	ldrb	r2, [r7, #14]
 800653a:	429a      	cmp	r2, r3
 800653c:	d3df      	bcc.n	80064fe <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800653e:	bf00      	nop
 8006540:	bf00      	nop
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000d8c 	.word	0x20000d8c
 800654c:	20000dd4 	.word	0x20000dd4
 8006550:	20000dd8 	.word	0x20000dd8
 8006554:	20000dfc 	.word	0x20000dfc

08006558 <__cvt>:
 8006558:	2b00      	cmp	r3, #0
 800655a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800655e:	461d      	mov	r5, r3
 8006560:	bfbb      	ittet	lt
 8006562:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006566:	461d      	movlt	r5, r3
 8006568:	2300      	movge	r3, #0
 800656a:	232d      	movlt	r3, #45	@ 0x2d
 800656c:	b088      	sub	sp, #32
 800656e:	4614      	mov	r4, r2
 8006570:	bfb8      	it	lt
 8006572:	4614      	movlt	r4, r2
 8006574:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006576:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006578:	7013      	strb	r3, [r2, #0]
 800657a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800657c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006580:	f023 0820 	bic.w	r8, r3, #32
 8006584:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006588:	d005      	beq.n	8006596 <__cvt+0x3e>
 800658a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800658e:	d100      	bne.n	8006592 <__cvt+0x3a>
 8006590:	3601      	adds	r6, #1
 8006592:	2302      	movs	r3, #2
 8006594:	e000      	b.n	8006598 <__cvt+0x40>
 8006596:	2303      	movs	r3, #3
 8006598:	aa07      	add	r2, sp, #28
 800659a:	9204      	str	r2, [sp, #16]
 800659c:	aa06      	add	r2, sp, #24
 800659e:	e9cd a202 	strd	sl, r2, [sp, #8]
 80065a2:	e9cd 3600 	strd	r3, r6, [sp]
 80065a6:	4622      	mov	r2, r4
 80065a8:	462b      	mov	r3, r5
 80065aa:	f000 fe6d 	bl	8007288 <_dtoa_r>
 80065ae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065b2:	4607      	mov	r7, r0
 80065b4:	d119      	bne.n	80065ea <__cvt+0x92>
 80065b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80065b8:	07db      	lsls	r3, r3, #31
 80065ba:	d50e      	bpl.n	80065da <__cvt+0x82>
 80065bc:	eb00 0906 	add.w	r9, r0, r6
 80065c0:	2200      	movs	r2, #0
 80065c2:	2300      	movs	r3, #0
 80065c4:	4620      	mov	r0, r4
 80065c6:	4629      	mov	r1, r5
 80065c8:	f7fa f9f8 	bl	80009bc <__aeabi_dcmpeq>
 80065cc:	b108      	cbz	r0, 80065d2 <__cvt+0x7a>
 80065ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80065d2:	2230      	movs	r2, #48	@ 0x30
 80065d4:	9b07      	ldr	r3, [sp, #28]
 80065d6:	454b      	cmp	r3, r9
 80065d8:	d31e      	bcc.n	8006618 <__cvt+0xc0>
 80065da:	4638      	mov	r0, r7
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80065e0:	1bdb      	subs	r3, r3, r7
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	b008      	add	sp, #32
 80065e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065ee:	eb00 0906 	add.w	r9, r0, r6
 80065f2:	d1e5      	bne.n	80065c0 <__cvt+0x68>
 80065f4:	7803      	ldrb	r3, [r0, #0]
 80065f6:	2b30      	cmp	r3, #48	@ 0x30
 80065f8:	d10a      	bne.n	8006610 <__cvt+0xb8>
 80065fa:	2200      	movs	r2, #0
 80065fc:	2300      	movs	r3, #0
 80065fe:	4620      	mov	r0, r4
 8006600:	4629      	mov	r1, r5
 8006602:	f7fa f9db 	bl	80009bc <__aeabi_dcmpeq>
 8006606:	b918      	cbnz	r0, 8006610 <__cvt+0xb8>
 8006608:	f1c6 0601 	rsb	r6, r6, #1
 800660c:	f8ca 6000 	str.w	r6, [sl]
 8006610:	f8da 3000 	ldr.w	r3, [sl]
 8006614:	4499      	add	r9, r3
 8006616:	e7d3      	b.n	80065c0 <__cvt+0x68>
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	9107      	str	r1, [sp, #28]
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e7d9      	b.n	80065d4 <__cvt+0x7c>

08006620 <__exponent>:
 8006620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006622:	2900      	cmp	r1, #0
 8006624:	bfb6      	itet	lt
 8006626:	232d      	movlt	r3, #45	@ 0x2d
 8006628:	232b      	movge	r3, #43	@ 0x2b
 800662a:	4249      	neglt	r1, r1
 800662c:	2909      	cmp	r1, #9
 800662e:	7002      	strb	r2, [r0, #0]
 8006630:	7043      	strb	r3, [r0, #1]
 8006632:	dd29      	ble.n	8006688 <__exponent+0x68>
 8006634:	f10d 0307 	add.w	r3, sp, #7
 8006638:	461d      	mov	r5, r3
 800663a:	270a      	movs	r7, #10
 800663c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006640:	461a      	mov	r2, r3
 8006642:	fb07 1416 	mls	r4, r7, r6, r1
 8006646:	3430      	adds	r4, #48	@ 0x30
 8006648:	f802 4c01 	strb.w	r4, [r2, #-1]
 800664c:	460c      	mov	r4, r1
 800664e:	2c63      	cmp	r4, #99	@ 0x63
 8006650:	4631      	mov	r1, r6
 8006652:	f103 33ff 	add.w	r3, r3, #4294967295
 8006656:	dcf1      	bgt.n	800663c <__exponent+0x1c>
 8006658:	3130      	adds	r1, #48	@ 0x30
 800665a:	1e94      	subs	r4, r2, #2
 800665c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006660:	4623      	mov	r3, r4
 8006662:	1c41      	adds	r1, r0, #1
 8006664:	42ab      	cmp	r3, r5
 8006666:	d30a      	bcc.n	800667e <__exponent+0x5e>
 8006668:	f10d 0309 	add.w	r3, sp, #9
 800666c:	1a9b      	subs	r3, r3, r2
 800666e:	42ac      	cmp	r4, r5
 8006670:	bf88      	it	hi
 8006672:	2300      	movhi	r3, #0
 8006674:	3302      	adds	r3, #2
 8006676:	4403      	add	r3, r0
 8006678:	1a18      	subs	r0, r3, r0
 800667a:	b003      	add	sp, #12
 800667c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006682:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006686:	e7ed      	b.n	8006664 <__exponent+0x44>
 8006688:	2330      	movs	r3, #48	@ 0x30
 800668a:	3130      	adds	r1, #48	@ 0x30
 800668c:	7083      	strb	r3, [r0, #2]
 800668e:	70c1      	strb	r1, [r0, #3]
 8006690:	1d03      	adds	r3, r0, #4
 8006692:	e7f1      	b.n	8006678 <__exponent+0x58>

08006694 <_printf_float>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	b091      	sub	sp, #68	@ 0x44
 800669a:	460c      	mov	r4, r1
 800669c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80066a0:	4616      	mov	r6, r2
 80066a2:	461f      	mov	r7, r3
 80066a4:	4605      	mov	r5, r0
 80066a6:	f000 fce1 	bl	800706c <_localeconv_r>
 80066aa:	6803      	ldr	r3, [r0, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	9308      	str	r3, [sp, #32]
 80066b0:	f7f9 fd58 	bl	8000164 <strlen>
 80066b4:	2300      	movs	r3, #0
 80066b6:	930e      	str	r3, [sp, #56]	@ 0x38
 80066b8:	f8d8 3000 	ldr.w	r3, [r8]
 80066bc:	9009      	str	r0, [sp, #36]	@ 0x24
 80066be:	3307      	adds	r3, #7
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	f103 0208 	add.w	r2, r3, #8
 80066c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066cc:	f8d4 b000 	ldr.w	fp, [r4]
 80066d0:	f8c8 2000 	str.w	r2, [r8]
 80066d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066de:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295
 80066e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066ee:	4b9c      	ldr	r3, [pc, #624]	@ (8006960 <_printf_float+0x2cc>)
 80066f0:	f7fa f996 	bl	8000a20 <__aeabi_dcmpun>
 80066f4:	bb70      	cbnz	r0, 8006754 <_printf_float+0xc0>
 80066f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	4b98      	ldr	r3, [pc, #608]	@ (8006960 <_printf_float+0x2cc>)
 8006700:	f7fa f970 	bl	80009e4 <__aeabi_dcmple>
 8006704:	bb30      	cbnz	r0, 8006754 <_printf_float+0xc0>
 8006706:	2200      	movs	r2, #0
 8006708:	2300      	movs	r3, #0
 800670a:	4640      	mov	r0, r8
 800670c:	4649      	mov	r1, r9
 800670e:	f7fa f95f 	bl	80009d0 <__aeabi_dcmplt>
 8006712:	b110      	cbz	r0, 800671a <_printf_float+0x86>
 8006714:	232d      	movs	r3, #45	@ 0x2d
 8006716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800671a:	4a92      	ldr	r2, [pc, #584]	@ (8006964 <_printf_float+0x2d0>)
 800671c:	4b92      	ldr	r3, [pc, #584]	@ (8006968 <_printf_float+0x2d4>)
 800671e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006722:	bf94      	ite	ls
 8006724:	4690      	movls	r8, r2
 8006726:	4698      	movhi	r8, r3
 8006728:	2303      	movs	r3, #3
 800672a:	f04f 0900 	mov.w	r9, #0
 800672e:	6123      	str	r3, [r4, #16]
 8006730:	f02b 0304 	bic.w	r3, fp, #4
 8006734:	6023      	str	r3, [r4, #0]
 8006736:	4633      	mov	r3, r6
 8006738:	4621      	mov	r1, r4
 800673a:	4628      	mov	r0, r5
 800673c:	9700      	str	r7, [sp, #0]
 800673e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006740:	f000 f9d4 	bl	8006aec <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	f040 8090 	bne.w	800686a <_printf_float+0x1d6>
 800674a:	f04f 30ff 	mov.w	r0, #4294967295
 800674e:	b011      	add	sp, #68	@ 0x44
 8006750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	4640      	mov	r0, r8
 800675a:	4649      	mov	r1, r9
 800675c:	f7fa f960 	bl	8000a20 <__aeabi_dcmpun>
 8006760:	b148      	cbz	r0, 8006776 <_printf_float+0xe2>
 8006762:	464b      	mov	r3, r9
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfb8      	it	lt
 8006768:	232d      	movlt	r3, #45	@ 0x2d
 800676a:	4a80      	ldr	r2, [pc, #512]	@ (800696c <_printf_float+0x2d8>)
 800676c:	bfb8      	it	lt
 800676e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006772:	4b7f      	ldr	r3, [pc, #508]	@ (8006970 <_printf_float+0x2dc>)
 8006774:	e7d3      	b.n	800671e <_printf_float+0x8a>
 8006776:	6863      	ldr	r3, [r4, #4]
 8006778:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	d13f      	bne.n	8006800 <_printf_float+0x16c>
 8006780:	2306      	movs	r3, #6
 8006782:	6063      	str	r3, [r4, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800678a:	6023      	str	r3, [r4, #0]
 800678c:	9206      	str	r2, [sp, #24]
 800678e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006790:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006794:	aa0d      	add	r2, sp, #52	@ 0x34
 8006796:	9203      	str	r2, [sp, #12]
 8006798:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800679c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	4642      	mov	r2, r8
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	4628      	mov	r0, r5
 80067a8:	464b      	mov	r3, r9
 80067aa:	910a      	str	r1, [sp, #40]	@ 0x28
 80067ac:	f7ff fed4 	bl	8006558 <__cvt>
 80067b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067b2:	4680      	mov	r8, r0
 80067b4:	2947      	cmp	r1, #71	@ 0x47
 80067b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80067b8:	d128      	bne.n	800680c <_printf_float+0x178>
 80067ba:	1cc8      	adds	r0, r1, #3
 80067bc:	db02      	blt.n	80067c4 <_printf_float+0x130>
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	4299      	cmp	r1, r3
 80067c2:	dd40      	ble.n	8006846 <_printf_float+0x1b2>
 80067c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80067c8:	fa5f fa8a 	uxtb.w	sl, sl
 80067cc:	4652      	mov	r2, sl
 80067ce:	3901      	subs	r1, #1
 80067d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067d4:	910d      	str	r1, [sp, #52]	@ 0x34
 80067d6:	f7ff ff23 	bl	8006620 <__exponent>
 80067da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067dc:	4681      	mov	r9, r0
 80067de:	1813      	adds	r3, r2, r0
 80067e0:	2a01      	cmp	r2, #1
 80067e2:	6123      	str	r3, [r4, #16]
 80067e4:	dc02      	bgt.n	80067ec <_printf_float+0x158>
 80067e6:	6822      	ldr	r2, [r4, #0]
 80067e8:	07d2      	lsls	r2, r2, #31
 80067ea:	d501      	bpl.n	80067f0 <_printf_float+0x15c>
 80067ec:	3301      	adds	r3, #1
 80067ee:	6123      	str	r3, [r4, #16]
 80067f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d09e      	beq.n	8006736 <_printf_float+0xa2>
 80067f8:	232d      	movs	r3, #45	@ 0x2d
 80067fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067fe:	e79a      	b.n	8006736 <_printf_float+0xa2>
 8006800:	2947      	cmp	r1, #71	@ 0x47
 8006802:	d1bf      	bne.n	8006784 <_printf_float+0xf0>
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1bd      	bne.n	8006784 <_printf_float+0xf0>
 8006808:	2301      	movs	r3, #1
 800680a:	e7ba      	b.n	8006782 <_printf_float+0xee>
 800680c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006810:	d9dc      	bls.n	80067cc <_printf_float+0x138>
 8006812:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006816:	d118      	bne.n	800684a <_printf_float+0x1b6>
 8006818:	2900      	cmp	r1, #0
 800681a:	6863      	ldr	r3, [r4, #4]
 800681c:	dd0b      	ble.n	8006836 <_printf_float+0x1a2>
 800681e:	6121      	str	r1, [r4, #16]
 8006820:	b913      	cbnz	r3, 8006828 <_printf_float+0x194>
 8006822:	6822      	ldr	r2, [r4, #0]
 8006824:	07d0      	lsls	r0, r2, #31
 8006826:	d502      	bpl.n	800682e <_printf_float+0x19a>
 8006828:	3301      	adds	r3, #1
 800682a:	440b      	add	r3, r1
 800682c:	6123      	str	r3, [r4, #16]
 800682e:	f04f 0900 	mov.w	r9, #0
 8006832:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006834:	e7dc      	b.n	80067f0 <_printf_float+0x15c>
 8006836:	b913      	cbnz	r3, 800683e <_printf_float+0x1aa>
 8006838:	6822      	ldr	r2, [r4, #0]
 800683a:	07d2      	lsls	r2, r2, #31
 800683c:	d501      	bpl.n	8006842 <_printf_float+0x1ae>
 800683e:	3302      	adds	r3, #2
 8006840:	e7f4      	b.n	800682c <_printf_float+0x198>
 8006842:	2301      	movs	r3, #1
 8006844:	e7f2      	b.n	800682c <_printf_float+0x198>
 8006846:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800684a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800684c:	4299      	cmp	r1, r3
 800684e:	db05      	blt.n	800685c <_printf_float+0x1c8>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	6121      	str	r1, [r4, #16]
 8006854:	07d8      	lsls	r0, r3, #31
 8006856:	d5ea      	bpl.n	800682e <_printf_float+0x19a>
 8006858:	1c4b      	adds	r3, r1, #1
 800685a:	e7e7      	b.n	800682c <_printf_float+0x198>
 800685c:	2900      	cmp	r1, #0
 800685e:	bfcc      	ite	gt
 8006860:	2201      	movgt	r2, #1
 8006862:	f1c1 0202 	rsble	r2, r1, #2
 8006866:	4413      	add	r3, r2
 8006868:	e7e0      	b.n	800682c <_printf_float+0x198>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	055a      	lsls	r2, r3, #21
 800686e:	d407      	bmi.n	8006880 <_printf_float+0x1ec>
 8006870:	6923      	ldr	r3, [r4, #16]
 8006872:	4642      	mov	r2, r8
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	d12b      	bne.n	80068d6 <_printf_float+0x242>
 800687e:	e764      	b.n	800674a <_printf_float+0xb6>
 8006880:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006884:	f240 80dc 	bls.w	8006a40 <_printf_float+0x3ac>
 8006888:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800688c:	2200      	movs	r2, #0
 800688e:	2300      	movs	r3, #0
 8006890:	f7fa f894 	bl	80009bc <__aeabi_dcmpeq>
 8006894:	2800      	cmp	r0, #0
 8006896:	d033      	beq.n	8006900 <_printf_float+0x26c>
 8006898:	2301      	movs	r3, #1
 800689a:	4631      	mov	r1, r6
 800689c:	4628      	mov	r0, r5
 800689e:	4a35      	ldr	r2, [pc, #212]	@ (8006974 <_printf_float+0x2e0>)
 80068a0:	47b8      	blx	r7
 80068a2:	3001      	adds	r0, #1
 80068a4:	f43f af51 	beq.w	800674a <_printf_float+0xb6>
 80068a8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80068ac:	4543      	cmp	r3, r8
 80068ae:	db02      	blt.n	80068b6 <_printf_float+0x222>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	07d8      	lsls	r0, r3, #31
 80068b4:	d50f      	bpl.n	80068d6 <_printf_float+0x242>
 80068b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80068ba:	4631      	mov	r1, r6
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f af42 	beq.w	800674a <_printf_float+0xb6>
 80068c6:	f04f 0900 	mov.w	r9, #0
 80068ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80068ce:	f104 0a1a 	add.w	sl, r4, #26
 80068d2:	45c8      	cmp	r8, r9
 80068d4:	dc09      	bgt.n	80068ea <_printf_float+0x256>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	079b      	lsls	r3, r3, #30
 80068da:	f100 8102 	bmi.w	8006ae2 <_printf_float+0x44e>
 80068de:	68e0      	ldr	r0, [r4, #12]
 80068e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068e2:	4298      	cmp	r0, r3
 80068e4:	bfb8      	it	lt
 80068e6:	4618      	movlt	r0, r3
 80068e8:	e731      	b.n	800674e <_printf_float+0xba>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4652      	mov	r2, sl
 80068ee:	4631      	mov	r1, r6
 80068f0:	4628      	mov	r0, r5
 80068f2:	47b8      	blx	r7
 80068f4:	3001      	adds	r0, #1
 80068f6:	f43f af28 	beq.w	800674a <_printf_float+0xb6>
 80068fa:	f109 0901 	add.w	r9, r9, #1
 80068fe:	e7e8      	b.n	80068d2 <_printf_float+0x23e>
 8006900:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006902:	2b00      	cmp	r3, #0
 8006904:	dc38      	bgt.n	8006978 <_printf_float+0x2e4>
 8006906:	2301      	movs	r3, #1
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	4a19      	ldr	r2, [pc, #100]	@ (8006974 <_printf_float+0x2e0>)
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	f43f af1a 	beq.w	800674a <_printf_float+0xb6>
 8006916:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800691a:	ea59 0303 	orrs.w	r3, r9, r3
 800691e:	d102      	bne.n	8006926 <_printf_float+0x292>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	07d9      	lsls	r1, r3, #31
 8006924:	d5d7      	bpl.n	80068d6 <_printf_float+0x242>
 8006926:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800692a:	4631      	mov	r1, r6
 800692c:	4628      	mov	r0, r5
 800692e:	47b8      	blx	r7
 8006930:	3001      	adds	r0, #1
 8006932:	f43f af0a 	beq.w	800674a <_printf_float+0xb6>
 8006936:	f04f 0a00 	mov.w	sl, #0
 800693a:	f104 0b1a 	add.w	fp, r4, #26
 800693e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006940:	425b      	negs	r3, r3
 8006942:	4553      	cmp	r3, sl
 8006944:	dc01      	bgt.n	800694a <_printf_float+0x2b6>
 8006946:	464b      	mov	r3, r9
 8006948:	e793      	b.n	8006872 <_printf_float+0x1de>
 800694a:	2301      	movs	r3, #1
 800694c:	465a      	mov	r2, fp
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f aef8 	beq.w	800674a <_printf_float+0xb6>
 800695a:	f10a 0a01 	add.w	sl, sl, #1
 800695e:	e7ee      	b.n	800693e <_printf_float+0x2aa>
 8006960:	7fefffff 	.word	0x7fefffff
 8006964:	08009420 	.word	0x08009420
 8006968:	08009424 	.word	0x08009424
 800696c:	08009428 	.word	0x08009428
 8006970:	0800942c 	.word	0x0800942c
 8006974:	08009430 	.word	0x08009430
 8006978:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800697a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800697e:	4553      	cmp	r3, sl
 8006980:	bfa8      	it	ge
 8006982:	4653      	movge	r3, sl
 8006984:	2b00      	cmp	r3, #0
 8006986:	4699      	mov	r9, r3
 8006988:	dc36      	bgt.n	80069f8 <_printf_float+0x364>
 800698a:	f04f 0b00 	mov.w	fp, #0
 800698e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006992:	f104 021a 	add.w	r2, r4, #26
 8006996:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006998:	930a      	str	r3, [sp, #40]	@ 0x28
 800699a:	eba3 0309 	sub.w	r3, r3, r9
 800699e:	455b      	cmp	r3, fp
 80069a0:	dc31      	bgt.n	8006a06 <_printf_float+0x372>
 80069a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069a4:	459a      	cmp	sl, r3
 80069a6:	dc3a      	bgt.n	8006a1e <_printf_float+0x38a>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	07da      	lsls	r2, r3, #31
 80069ac:	d437      	bmi.n	8006a1e <_printf_float+0x38a>
 80069ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069b0:	ebaa 0903 	sub.w	r9, sl, r3
 80069b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069b6:	ebaa 0303 	sub.w	r3, sl, r3
 80069ba:	4599      	cmp	r9, r3
 80069bc:	bfa8      	it	ge
 80069be:	4699      	movge	r9, r3
 80069c0:	f1b9 0f00 	cmp.w	r9, #0
 80069c4:	dc33      	bgt.n	8006a2e <_printf_float+0x39a>
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ce:	f104 0b1a 	add.w	fp, r4, #26
 80069d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069d4:	ebaa 0303 	sub.w	r3, sl, r3
 80069d8:	eba3 0309 	sub.w	r3, r3, r9
 80069dc:	4543      	cmp	r3, r8
 80069de:	f77f af7a 	ble.w	80068d6 <_printf_float+0x242>
 80069e2:	2301      	movs	r3, #1
 80069e4:	465a      	mov	r2, fp
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	f43f aeac 	beq.w	800674a <_printf_float+0xb6>
 80069f2:	f108 0801 	add.w	r8, r8, #1
 80069f6:	e7ec      	b.n	80069d2 <_printf_float+0x33e>
 80069f8:	4642      	mov	r2, r8
 80069fa:	4631      	mov	r1, r6
 80069fc:	4628      	mov	r0, r5
 80069fe:	47b8      	blx	r7
 8006a00:	3001      	adds	r0, #1
 8006a02:	d1c2      	bne.n	800698a <_printf_float+0x2f6>
 8006a04:	e6a1      	b.n	800674a <_printf_float+0xb6>
 8006a06:	2301      	movs	r3, #1
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	920a      	str	r2, [sp, #40]	@ 0x28
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	f43f ae9a 	beq.w	800674a <_printf_float+0xb6>
 8006a16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a18:	f10b 0b01 	add.w	fp, fp, #1
 8006a1c:	e7bb      	b.n	8006996 <_printf_float+0x302>
 8006a1e:	4631      	mov	r1, r6
 8006a20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d1c0      	bne.n	80069ae <_printf_float+0x31a>
 8006a2c:	e68d      	b.n	800674a <_printf_float+0xb6>
 8006a2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a30:	464b      	mov	r3, r9
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	4442      	add	r2, r8
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d1c3      	bne.n	80069c6 <_printf_float+0x332>
 8006a3e:	e684      	b.n	800674a <_printf_float+0xb6>
 8006a40:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006a44:	f1ba 0f01 	cmp.w	sl, #1
 8006a48:	dc01      	bgt.n	8006a4e <_printf_float+0x3ba>
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d536      	bpl.n	8006abc <_printf_float+0x428>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4642      	mov	r2, r8
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f ae76 	beq.w	800674a <_printf_float+0xb6>
 8006a5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f ae6e 	beq.w	800674a <_printf_float+0xb6>
 8006a6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a72:	2200      	movs	r2, #0
 8006a74:	2300      	movs	r3, #0
 8006a76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a7a:	f7f9 ff9f 	bl	80009bc <__aeabi_dcmpeq>
 8006a7e:	b9c0      	cbnz	r0, 8006ab2 <_printf_float+0x41e>
 8006a80:	4653      	mov	r3, sl
 8006a82:	f108 0201 	add.w	r2, r8, #1
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d10c      	bne.n	8006aaa <_printf_float+0x416>
 8006a90:	e65b      	b.n	800674a <_printf_float+0xb6>
 8006a92:	2301      	movs	r3, #1
 8006a94:	465a      	mov	r2, fp
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae54 	beq.w	800674a <_printf_float+0xb6>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	45d0      	cmp	r8, sl
 8006aa8:	dbf3      	blt.n	8006a92 <_printf_float+0x3fe>
 8006aaa:	464b      	mov	r3, r9
 8006aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ab0:	e6e0      	b.n	8006874 <_printf_float+0x1e0>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	f104 0b1a 	add.w	fp, r4, #26
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x412>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4642      	mov	r2, r8
 8006ac0:	e7e1      	b.n	8006a86 <_printf_float+0x3f2>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	464a      	mov	r2, r9
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	f43f ae3c 	beq.w	800674a <_printf_float+0xb6>
 8006ad2:	f108 0801 	add.w	r8, r8, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	4543      	cmp	r3, r8
 8006ade:	dcf0      	bgt.n	8006ac2 <_printf_float+0x42e>
 8006ae0:	e6fd      	b.n	80068de <_printf_float+0x24a>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	f104 0919 	add.w	r9, r4, #25
 8006aea:	e7f4      	b.n	8006ad6 <_printf_float+0x442>

08006aec <_printf_common>:
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	4616      	mov	r6, r2
 8006af2:	4698      	mov	r8, r3
 8006af4:	688a      	ldr	r2, [r1, #8]
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	4607      	mov	r7, r0
 8006afa:	4293      	cmp	r3, r2
 8006afc:	bfb8      	it	lt
 8006afe:	4613      	movlt	r3, r2
 8006b00:	6033      	str	r3, [r6, #0]
 8006b02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b06:	460c      	mov	r4, r1
 8006b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b0c:	b10a      	cbz	r2, 8006b12 <_printf_common+0x26>
 8006b0e:	3301      	adds	r3, #1
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	0699      	lsls	r1, r3, #26
 8006b16:	bf42      	ittt	mi
 8006b18:	6833      	ldrmi	r3, [r6, #0]
 8006b1a:	3302      	addmi	r3, #2
 8006b1c:	6033      	strmi	r3, [r6, #0]
 8006b1e:	6825      	ldr	r5, [r4, #0]
 8006b20:	f015 0506 	ands.w	r5, r5, #6
 8006b24:	d106      	bne.n	8006b34 <_printf_common+0x48>
 8006b26:	f104 0a19 	add.w	sl, r4, #25
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	6832      	ldr	r2, [r6, #0]
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	dc2b      	bgt.n	8006b8c <_printf_common+0xa0>
 8006b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	3b00      	subs	r3, #0
 8006b3c:	bf18      	it	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	0692      	lsls	r2, r2, #26
 8006b42:	d430      	bmi.n	8006ba6 <_printf_common+0xba>
 8006b44:	4641      	mov	r1, r8
 8006b46:	4638      	mov	r0, r7
 8006b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b4c:	47c8      	blx	r9
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d023      	beq.n	8006b9a <_printf_common+0xae>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	6922      	ldr	r2, [r4, #16]
 8006b56:	f003 0306 	and.w	r3, r3, #6
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	bf14      	ite	ne
 8006b5e:	2500      	movne	r5, #0
 8006b60:	6833      	ldreq	r3, [r6, #0]
 8006b62:	f04f 0600 	mov.w	r6, #0
 8006b66:	bf08      	it	eq
 8006b68:	68e5      	ldreq	r5, [r4, #12]
 8006b6a:	f104 041a 	add.w	r4, r4, #26
 8006b6e:	bf08      	it	eq
 8006b70:	1aed      	subeq	r5, r5, r3
 8006b72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006b76:	bf08      	it	eq
 8006b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	bfc4      	itt	gt
 8006b80:	1a9b      	subgt	r3, r3, r2
 8006b82:	18ed      	addgt	r5, r5, r3
 8006b84:	42b5      	cmp	r5, r6
 8006b86:	d11a      	bne.n	8006bbe <_printf_common+0xd2>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e008      	b.n	8006b9e <_printf_common+0xb2>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4652      	mov	r2, sl
 8006b90:	4641      	mov	r1, r8
 8006b92:	4638      	mov	r0, r7
 8006b94:	47c8      	blx	r9
 8006b96:	3001      	adds	r0, #1
 8006b98:	d103      	bne.n	8006ba2 <_printf_common+0xb6>
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	e7c1      	b.n	8006b2a <_printf_common+0x3e>
 8006ba6:	2030      	movs	r0, #48	@ 0x30
 8006ba8:	18e1      	adds	r1, r4, r3
 8006baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bb4:	4422      	add	r2, r4
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bbc:	e7c2      	b.n	8006b44 <_printf_common+0x58>
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	4622      	mov	r2, r4
 8006bc2:	4641      	mov	r1, r8
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	47c8      	blx	r9
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d0e6      	beq.n	8006b9a <_printf_common+0xae>
 8006bcc:	3601      	adds	r6, #1
 8006bce:	e7d9      	b.n	8006b84 <_printf_common+0x98>

08006bd0 <_printf_i>:
 8006bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd4:	7e0f      	ldrb	r7, [r1, #24]
 8006bd6:	4691      	mov	r9, r2
 8006bd8:	2f78      	cmp	r7, #120	@ 0x78
 8006bda:	4680      	mov	r8, r0
 8006bdc:	460c      	mov	r4, r1
 8006bde:	469a      	mov	sl, r3
 8006be0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006be6:	d807      	bhi.n	8006bf8 <_printf_i+0x28>
 8006be8:	2f62      	cmp	r7, #98	@ 0x62
 8006bea:	d80a      	bhi.n	8006c02 <_printf_i+0x32>
 8006bec:	2f00      	cmp	r7, #0
 8006bee:	f000 80d3 	beq.w	8006d98 <_printf_i+0x1c8>
 8006bf2:	2f58      	cmp	r7, #88	@ 0x58
 8006bf4:	f000 80ba 	beq.w	8006d6c <_printf_i+0x19c>
 8006bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c00:	e03a      	b.n	8006c78 <_printf_i+0xa8>
 8006c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c06:	2b15      	cmp	r3, #21
 8006c08:	d8f6      	bhi.n	8006bf8 <_printf_i+0x28>
 8006c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c10 <_printf_i+0x40>)
 8006c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c10:	08006c69 	.word	0x08006c69
 8006c14:	08006c7d 	.word	0x08006c7d
 8006c18:	08006bf9 	.word	0x08006bf9
 8006c1c:	08006bf9 	.word	0x08006bf9
 8006c20:	08006bf9 	.word	0x08006bf9
 8006c24:	08006bf9 	.word	0x08006bf9
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006bf9 	.word	0x08006bf9
 8006c30:	08006bf9 	.word	0x08006bf9
 8006c34:	08006bf9 	.word	0x08006bf9
 8006c38:	08006bf9 	.word	0x08006bf9
 8006c3c:	08006d7f 	.word	0x08006d7f
 8006c40:	08006ca7 	.word	0x08006ca7
 8006c44:	08006d39 	.word	0x08006d39
 8006c48:	08006bf9 	.word	0x08006bf9
 8006c4c:	08006bf9 	.word	0x08006bf9
 8006c50:	08006da1 	.word	0x08006da1
 8006c54:	08006bf9 	.word	0x08006bf9
 8006c58:	08006ca7 	.word	0x08006ca7
 8006c5c:	08006bf9 	.word	0x08006bf9
 8006c60:	08006bf9 	.word	0x08006bf9
 8006c64:	08006d41 	.word	0x08006d41
 8006c68:	6833      	ldr	r3, [r6, #0]
 8006c6a:	1d1a      	adds	r2, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6032      	str	r2, [r6, #0]
 8006c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e09e      	b.n	8006dba <_printf_i+0x1ea>
 8006c7c:	6833      	ldr	r3, [r6, #0]
 8006c7e:	6820      	ldr	r0, [r4, #0]
 8006c80:	1d19      	adds	r1, r3, #4
 8006c82:	6031      	str	r1, [r6, #0]
 8006c84:	0606      	lsls	r6, r0, #24
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0xbc>
 8006c88:	681d      	ldr	r5, [r3, #0]
 8006c8a:	e003      	b.n	8006c94 <_printf_i+0xc4>
 8006c8c:	0645      	lsls	r5, r0, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0xb8>
 8006c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	da03      	bge.n	8006ca0 <_printf_i+0xd0>
 8006c98:	232d      	movs	r3, #45	@ 0x2d
 8006c9a:	426d      	negs	r5, r5
 8006c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ca0:	230a      	movs	r3, #10
 8006ca2:	4859      	ldr	r0, [pc, #356]	@ (8006e08 <_printf_i+0x238>)
 8006ca4:	e011      	b.n	8006cca <_printf_i+0xfa>
 8006ca6:	6821      	ldr	r1, [r4, #0]
 8006ca8:	6833      	ldr	r3, [r6, #0]
 8006caa:	0608      	lsls	r0, r1, #24
 8006cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cb0:	d402      	bmi.n	8006cb8 <_printf_i+0xe8>
 8006cb2:	0649      	lsls	r1, r1, #25
 8006cb4:	bf48      	it	mi
 8006cb6:	b2ad      	uxthmi	r5, r5
 8006cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	bf14      	ite	ne
 8006cbe:	230a      	movne	r3, #10
 8006cc0:	2308      	moveq	r3, #8
 8006cc2:	4851      	ldr	r0, [pc, #324]	@ (8006e08 <_printf_i+0x238>)
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cca:	6866      	ldr	r6, [r4, #4]
 8006ccc:	2e00      	cmp	r6, #0
 8006cce:	bfa8      	it	ge
 8006cd0:	6821      	ldrge	r1, [r4, #0]
 8006cd2:	60a6      	str	r6, [r4, #8]
 8006cd4:	bfa4      	itt	ge
 8006cd6:	f021 0104 	bicge.w	r1, r1, #4
 8006cda:	6021      	strge	r1, [r4, #0]
 8006cdc:	b90d      	cbnz	r5, 8006ce2 <_printf_i+0x112>
 8006cde:	2e00      	cmp	r6, #0
 8006ce0:	d04b      	beq.n	8006d7a <_printf_i+0x1aa>
 8006ce2:	4616      	mov	r6, r2
 8006ce4:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ce8:	fb03 5711 	mls	r7, r3, r1, r5
 8006cec:	5dc7      	ldrb	r7, [r0, r7]
 8006cee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cf2:	462f      	mov	r7, r5
 8006cf4:	42bb      	cmp	r3, r7
 8006cf6:	460d      	mov	r5, r1
 8006cf8:	d9f4      	bls.n	8006ce4 <_printf_i+0x114>
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d10b      	bne.n	8006d16 <_printf_i+0x146>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	07df      	lsls	r7, r3, #31
 8006d02:	d508      	bpl.n	8006d16 <_printf_i+0x146>
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	6861      	ldr	r1, [r4, #4]
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	bfde      	ittt	le
 8006d0c:	2330      	movle	r3, #48	@ 0x30
 8006d0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d16:	1b92      	subs	r2, r2, r6
 8006d18:	6122      	str	r2, [r4, #16]
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f8cd a000 	str.w	sl, [sp]
 8006d24:	aa03      	add	r2, sp, #12
 8006d26:	f7ff fee1 	bl	8006aec <_printf_common>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d14a      	bne.n	8006dc4 <_printf_i+0x1f4>
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	b004      	add	sp, #16
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	f043 0320 	orr.w	r3, r3, #32
 8006d3e:	6023      	str	r3, [r4, #0]
 8006d40:	2778      	movs	r7, #120	@ 0x78
 8006d42:	4832      	ldr	r0, [pc, #200]	@ (8006e0c <_printf_i+0x23c>)
 8006d44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	6831      	ldr	r1, [r6, #0]
 8006d4c:	061f      	lsls	r7, r3, #24
 8006d4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d52:	d402      	bmi.n	8006d5a <_printf_i+0x18a>
 8006d54:	065f      	lsls	r7, r3, #25
 8006d56:	bf48      	it	mi
 8006d58:	b2ad      	uxthmi	r5, r5
 8006d5a:	6031      	str	r1, [r6, #0]
 8006d5c:	07d9      	lsls	r1, r3, #31
 8006d5e:	bf44      	itt	mi
 8006d60:	f043 0320 	orrmi.w	r3, r3, #32
 8006d64:	6023      	strmi	r3, [r4, #0]
 8006d66:	b11d      	cbz	r5, 8006d70 <_printf_i+0x1a0>
 8006d68:	2310      	movs	r3, #16
 8006d6a:	e7ab      	b.n	8006cc4 <_printf_i+0xf4>
 8006d6c:	4826      	ldr	r0, [pc, #152]	@ (8006e08 <_printf_i+0x238>)
 8006d6e:	e7e9      	b.n	8006d44 <_printf_i+0x174>
 8006d70:	6823      	ldr	r3, [r4, #0]
 8006d72:	f023 0320 	bic.w	r3, r3, #32
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	e7f6      	b.n	8006d68 <_printf_i+0x198>
 8006d7a:	4616      	mov	r6, r2
 8006d7c:	e7bd      	b.n	8006cfa <_printf_i+0x12a>
 8006d7e:	6833      	ldr	r3, [r6, #0]
 8006d80:	6825      	ldr	r5, [r4, #0]
 8006d82:	1d18      	adds	r0, r3, #4
 8006d84:	6961      	ldr	r1, [r4, #20]
 8006d86:	6030      	str	r0, [r6, #0]
 8006d88:	062e      	lsls	r6, r5, #24
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	d501      	bpl.n	8006d92 <_printf_i+0x1c2>
 8006d8e:	6019      	str	r1, [r3, #0]
 8006d90:	e002      	b.n	8006d98 <_printf_i+0x1c8>
 8006d92:	0668      	lsls	r0, r5, #25
 8006d94:	d5fb      	bpl.n	8006d8e <_printf_i+0x1be>
 8006d96:	8019      	strh	r1, [r3, #0]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4616      	mov	r6, r2
 8006d9c:	6123      	str	r3, [r4, #16]
 8006d9e:	e7bc      	b.n	8006d1a <_printf_i+0x14a>
 8006da0:	6833      	ldr	r3, [r6, #0]
 8006da2:	2100      	movs	r1, #0
 8006da4:	1d1a      	adds	r2, r3, #4
 8006da6:	6032      	str	r2, [r6, #0]
 8006da8:	681e      	ldr	r6, [r3, #0]
 8006daa:	6862      	ldr	r2, [r4, #4]
 8006dac:	4630      	mov	r0, r6
 8006dae:	f000 f9d4 	bl	800715a <memchr>
 8006db2:	b108      	cbz	r0, 8006db8 <_printf_i+0x1e8>
 8006db4:	1b80      	subs	r0, r0, r6
 8006db6:	6060      	str	r0, [r4, #4]
 8006db8:	6863      	ldr	r3, [r4, #4]
 8006dba:	6123      	str	r3, [r4, #16]
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dc2:	e7aa      	b.n	8006d1a <_printf_i+0x14a>
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4640      	mov	r0, r8
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	47d0      	blx	sl
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d0ad      	beq.n	8006d2e <_printf_i+0x15e>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	079b      	lsls	r3, r3, #30
 8006dd6:	d413      	bmi.n	8006e00 <_printf_i+0x230>
 8006dd8:	68e0      	ldr	r0, [r4, #12]
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	4298      	cmp	r0, r3
 8006dde:	bfb8      	it	lt
 8006de0:	4618      	movlt	r0, r3
 8006de2:	e7a6      	b.n	8006d32 <_printf_i+0x162>
 8006de4:	2301      	movs	r3, #1
 8006de6:	4632      	mov	r2, r6
 8006de8:	4649      	mov	r1, r9
 8006dea:	4640      	mov	r0, r8
 8006dec:	47d0      	blx	sl
 8006dee:	3001      	adds	r0, #1
 8006df0:	d09d      	beq.n	8006d2e <_printf_i+0x15e>
 8006df2:	3501      	adds	r5, #1
 8006df4:	68e3      	ldr	r3, [r4, #12]
 8006df6:	9903      	ldr	r1, [sp, #12]
 8006df8:	1a5b      	subs	r3, r3, r1
 8006dfa:	42ab      	cmp	r3, r5
 8006dfc:	dcf2      	bgt.n	8006de4 <_printf_i+0x214>
 8006dfe:	e7eb      	b.n	8006dd8 <_printf_i+0x208>
 8006e00:	2500      	movs	r5, #0
 8006e02:	f104 0619 	add.w	r6, r4, #25
 8006e06:	e7f5      	b.n	8006df4 <_printf_i+0x224>
 8006e08:	08009432 	.word	0x08009432
 8006e0c:	08009443 	.word	0x08009443

08006e10 <std>:
 8006e10:	2300      	movs	r3, #0
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e1e:	6083      	str	r3, [r0, #8]
 8006e20:	8181      	strh	r1, [r0, #12]
 8006e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e24:	81c2      	strh	r2, [r0, #14]
 8006e26:	6183      	str	r3, [r0, #24]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	305c      	adds	r0, #92	@ 0x5c
 8006e2e:	f000 f914 	bl	800705a <memset>
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <std+0x58>)
 8006e34:	6224      	str	r4, [r4, #32]
 8006e36:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e38:	4b0c      	ldr	r3, [pc, #48]	@ (8006e6c <std+0x5c>)
 8006e3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006e70 <std+0x60>)
 8006e3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e40:	4b0c      	ldr	r3, [pc, #48]	@ (8006e74 <std+0x64>)
 8006e42:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e44:	4b0c      	ldr	r3, [pc, #48]	@ (8006e78 <std+0x68>)
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d006      	beq.n	8006e58 <std+0x48>
 8006e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e4e:	4294      	cmp	r4, r2
 8006e50:	d002      	beq.n	8006e58 <std+0x48>
 8006e52:	33d0      	adds	r3, #208	@ 0xd0
 8006e54:	429c      	cmp	r4, r3
 8006e56:	d105      	bne.n	8006e64 <std+0x54>
 8006e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e60:	f000 b978 	b.w	8007154 <__retarget_lock_init_recursive>
 8006e64:	bd10      	pop	{r4, pc}
 8006e66:	bf00      	nop
 8006e68:	08006fd5 	.word	0x08006fd5
 8006e6c:	08006ff7 	.word	0x08006ff7
 8006e70:	0800702f 	.word	0x0800702f
 8006e74:	08007053 	.word	0x08007053
 8006e78:	20000e0c 	.word	0x20000e0c

08006e7c <stdio_exit_handler>:
 8006e7c:	4a02      	ldr	r2, [pc, #8]	@ (8006e88 <stdio_exit_handler+0xc>)
 8006e7e:	4903      	ldr	r1, [pc, #12]	@ (8006e8c <stdio_exit_handler+0x10>)
 8006e80:	4803      	ldr	r0, [pc, #12]	@ (8006e90 <stdio_exit_handler+0x14>)
 8006e82:	f000 b869 	b.w	8006f58 <_fwalk_sglue>
 8006e86:	bf00      	nop
 8006e88:	200000cc 	.word	0x200000cc
 8006e8c:	08008ac5 	.word	0x08008ac5
 8006e90:	200000dc 	.word	0x200000dc

08006e94 <cleanup_stdio>:
 8006e94:	6841      	ldr	r1, [r0, #4]
 8006e96:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec8 <cleanup_stdio+0x34>)
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	4299      	cmp	r1, r3
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	d001      	beq.n	8006ea4 <cleanup_stdio+0x10>
 8006ea0:	f001 fe10 	bl	8008ac4 <_fflush_r>
 8006ea4:	68a1      	ldr	r1, [r4, #8]
 8006ea6:	4b09      	ldr	r3, [pc, #36]	@ (8006ecc <cleanup_stdio+0x38>)
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	d002      	beq.n	8006eb2 <cleanup_stdio+0x1e>
 8006eac:	4620      	mov	r0, r4
 8006eae:	f001 fe09 	bl	8008ac4 <_fflush_r>
 8006eb2:	68e1      	ldr	r1, [r4, #12]
 8006eb4:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <cleanup_stdio+0x3c>)
 8006eb6:	4299      	cmp	r1, r3
 8006eb8:	d004      	beq.n	8006ec4 <cleanup_stdio+0x30>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec0:	f001 be00 	b.w	8008ac4 <_fflush_r>
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000e0c 	.word	0x20000e0c
 8006ecc:	20000e74 	.word	0x20000e74
 8006ed0:	20000edc 	.word	0x20000edc

08006ed4 <global_stdio_init.part.0>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <global_stdio_init.part.0+0x30>)
 8006ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8006f08 <global_stdio_init.part.0+0x34>)
 8006eda:	4a0c      	ldr	r2, [pc, #48]	@ (8006f0c <global_stdio_init.part.0+0x38>)
 8006edc:	4620      	mov	r0, r4
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	2104      	movs	r1, #4
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f7ff ff94 	bl	8006e10 <std>
 8006ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006eec:	2201      	movs	r2, #1
 8006eee:	2109      	movs	r1, #9
 8006ef0:	f7ff ff8e 	bl	8006e10 <std>
 8006ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ef8:	2202      	movs	r2, #2
 8006efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efe:	2112      	movs	r1, #18
 8006f00:	f7ff bf86 	b.w	8006e10 <std>
 8006f04:	20000f44 	.word	0x20000f44
 8006f08:	20000e0c 	.word	0x20000e0c
 8006f0c:	08006e7d 	.word	0x08006e7d

08006f10 <__sfp_lock_acquire>:
 8006f10:	4801      	ldr	r0, [pc, #4]	@ (8006f18 <__sfp_lock_acquire+0x8>)
 8006f12:	f000 b920 	b.w	8007156 <__retarget_lock_acquire_recursive>
 8006f16:	bf00      	nop
 8006f18:	20000f4d 	.word	0x20000f4d

08006f1c <__sfp_lock_release>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	@ (8006f24 <__sfp_lock_release+0x8>)
 8006f1e:	f000 b91b 	b.w	8007158 <__retarget_lock_release_recursive>
 8006f22:	bf00      	nop
 8006f24:	20000f4d 	.word	0x20000f4d

08006f28 <__sinit>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	f7ff fff0 	bl	8006f10 <__sfp_lock_acquire>
 8006f30:	6a23      	ldr	r3, [r4, #32]
 8006f32:	b11b      	cbz	r3, 8006f3c <__sinit+0x14>
 8006f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f38:	f7ff bff0 	b.w	8006f1c <__sfp_lock_release>
 8006f3c:	4b04      	ldr	r3, [pc, #16]	@ (8006f50 <__sinit+0x28>)
 8006f3e:	6223      	str	r3, [r4, #32]
 8006f40:	4b04      	ldr	r3, [pc, #16]	@ (8006f54 <__sinit+0x2c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f5      	bne.n	8006f34 <__sinit+0xc>
 8006f48:	f7ff ffc4 	bl	8006ed4 <global_stdio_init.part.0>
 8006f4c:	e7f2      	b.n	8006f34 <__sinit+0xc>
 8006f4e:	bf00      	nop
 8006f50:	08006e95 	.word	0x08006e95
 8006f54:	20000f44 	.word	0x20000f44

08006f58 <_fwalk_sglue>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4688      	mov	r8, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	2600      	movs	r6, #0
 8006f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f68:	f1b9 0901 	subs.w	r9, r9, #1
 8006f6c:	d505      	bpl.n	8006f7a <_fwalk_sglue+0x22>
 8006f6e:	6824      	ldr	r4, [r4, #0]
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	d1f7      	bne.n	8006f64 <_fwalk_sglue+0xc>
 8006f74:	4630      	mov	r0, r6
 8006f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d907      	bls.n	8006f90 <_fwalk_sglue+0x38>
 8006f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f84:	3301      	adds	r3, #1
 8006f86:	d003      	beq.n	8006f90 <_fwalk_sglue+0x38>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	47c0      	blx	r8
 8006f8e:	4306      	orrs	r6, r0
 8006f90:	3568      	adds	r5, #104	@ 0x68
 8006f92:	e7e9      	b.n	8006f68 <_fwalk_sglue+0x10>

08006f94 <siprintf>:
 8006f94:	b40e      	push	{r1, r2, r3}
 8006f96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006f9a:	b500      	push	{lr}
 8006f9c:	b09c      	sub	sp, #112	@ 0x70
 8006f9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006fa0:	9002      	str	r0, [sp, #8]
 8006fa2:	9006      	str	r0, [sp, #24]
 8006fa4:	9107      	str	r1, [sp, #28]
 8006fa6:	9104      	str	r1, [sp, #16]
 8006fa8:	4808      	ldr	r0, [pc, #32]	@ (8006fcc <siprintf+0x38>)
 8006faa:	4909      	ldr	r1, [pc, #36]	@ (8006fd0 <siprintf+0x3c>)
 8006fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb0:	9105      	str	r1, [sp, #20]
 8006fb2:	6800      	ldr	r0, [r0, #0]
 8006fb4:	a902      	add	r1, sp, #8
 8006fb6:	9301      	str	r3, [sp, #4]
 8006fb8:	f001 fc08 	bl	80087cc <_svfiprintf_r>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	9b02      	ldr	r3, [sp, #8]
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	b01c      	add	sp, #112	@ 0x70
 8006fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc8:	b003      	add	sp, #12
 8006fca:	4770      	bx	lr
 8006fcc:	200000d8 	.word	0x200000d8
 8006fd0:	ffff0208 	.word	0xffff0208

08006fd4 <__sread>:
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fdc:	f000 f86c 	bl	80070b8 <_read_r>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	bfab      	itete	ge
 8006fe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fe8:	181b      	addge	r3, r3, r0
 8006fea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fee:	bfac      	ite	ge
 8006ff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ff2:	81a3      	strhlt	r3, [r4, #12]
 8006ff4:	bd10      	pop	{r4, pc}

08006ff6 <__swrite>:
 8006ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	461f      	mov	r7, r3
 8006ffc:	898b      	ldrh	r3, [r1, #12]
 8006ffe:	4605      	mov	r5, r0
 8007000:	05db      	lsls	r3, r3, #23
 8007002:	460c      	mov	r4, r1
 8007004:	4616      	mov	r6, r2
 8007006:	d505      	bpl.n	8007014 <__swrite+0x1e>
 8007008:	2302      	movs	r3, #2
 800700a:	2200      	movs	r2, #0
 800700c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007010:	f000 f840 	bl	8007094 <_lseek_r>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	4632      	mov	r2, r6
 8007018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	4628      	mov	r0, r5
 8007020:	463b      	mov	r3, r7
 8007022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800702a:	f000 b857 	b.w	80070dc <_write_r>

0800702e <__sseek>:
 800702e:	b510      	push	{r4, lr}
 8007030:	460c      	mov	r4, r1
 8007032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007036:	f000 f82d 	bl	8007094 <_lseek_r>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	bf15      	itete	ne
 8007040:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800704a:	81a3      	strheq	r3, [r4, #12]
 800704c:	bf18      	it	ne
 800704e:	81a3      	strhne	r3, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}

08007052 <__sclose>:
 8007052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007056:	f000 b80d 	b.w	8007074 <_close_r>

0800705a <memset>:
 800705a:	4603      	mov	r3, r0
 800705c:	4402      	add	r2, r0
 800705e:	4293      	cmp	r3, r2
 8007060:	d100      	bne.n	8007064 <memset+0xa>
 8007062:	4770      	bx	lr
 8007064:	f803 1b01 	strb.w	r1, [r3], #1
 8007068:	e7f9      	b.n	800705e <memset+0x4>
	...

0800706c <_localeconv_r>:
 800706c:	4800      	ldr	r0, [pc, #0]	@ (8007070 <_localeconv_r+0x4>)
 800706e:	4770      	bx	lr
 8007070:	20000218 	.word	0x20000218

08007074 <_close_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	2300      	movs	r3, #0
 8007078:	4d05      	ldr	r5, [pc, #20]	@ (8007090 <_close_r+0x1c>)
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fc ffa7 	bl	8003fd2 <_close>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_close_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_close_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000f48 	.word	0x20000f48

08007094 <_lseek_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	2200      	movs	r2, #0
 800709e:	4d05      	ldr	r5, [pc, #20]	@ (80070b4 <_lseek_r+0x20>)
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fc ffb9 	bl	800401a <_lseek>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_lseek_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_lseek_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20000f48 	.word	0x20000f48

080070b8 <_read_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	2200      	movs	r2, #0
 80070c2:	4d05      	ldr	r5, [pc, #20]	@ (80070d8 <_read_r+0x20>)
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fc ff4a 	bl	8003f60 <_read>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_read_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_read_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000f48 	.word	0x20000f48

080070dc <_write_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4604      	mov	r4, r0
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	2200      	movs	r2, #0
 80070e6:	4d05      	ldr	r5, [pc, #20]	@ (80070fc <_write_r+0x20>)
 80070e8:	602a      	str	r2, [r5, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f7fc ff55 	bl	8003f9a <_write>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_write_r+0x1e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_write_r+0x1e>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20000f48 	.word	0x20000f48

08007100 <__errno>:
 8007100:	4b01      	ldr	r3, [pc, #4]	@ (8007108 <__errno+0x8>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200000d8 	.word	0x200000d8

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	2600      	movs	r6, #0
 8007110:	4d0c      	ldr	r5, [pc, #48]	@ (8007144 <__libc_init_array+0x38>)
 8007112:	4c0d      	ldr	r4, [pc, #52]	@ (8007148 <__libc_init_array+0x3c>)
 8007114:	1b64      	subs	r4, r4, r5
 8007116:	10a4      	asrs	r4, r4, #2
 8007118:	42a6      	cmp	r6, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	f002 f86e 	bl	80091fc <_init>
 8007120:	2600      	movs	r6, #0
 8007122:	4d0a      	ldr	r5, [pc, #40]	@ (800714c <__libc_init_array+0x40>)
 8007124:	4c0a      	ldr	r4, [pc, #40]	@ (8007150 <__libc_init_array+0x44>)
 8007126:	1b64      	subs	r4, r4, r5
 8007128:	10a4      	asrs	r4, r4, #2
 800712a:	42a6      	cmp	r6, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f855 3b04 	ldr.w	r3, [r5], #4
 8007134:	4798      	blx	r3
 8007136:	3601      	adds	r6, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f855 3b04 	ldr.w	r3, [r5], #4
 800713e:	4798      	blx	r3
 8007140:	3601      	adds	r6, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	08009798 	.word	0x08009798
 8007148:	08009798 	.word	0x08009798
 800714c:	08009798 	.word	0x08009798
 8007150:	0800979c 	.word	0x0800979c

08007154 <__retarget_lock_init_recursive>:
 8007154:	4770      	bx	lr

08007156 <__retarget_lock_acquire_recursive>:
 8007156:	4770      	bx	lr

08007158 <__retarget_lock_release_recursive>:
 8007158:	4770      	bx	lr

0800715a <memchr>:
 800715a:	4603      	mov	r3, r0
 800715c:	b510      	push	{r4, lr}
 800715e:	b2c9      	uxtb	r1, r1
 8007160:	4402      	add	r2, r0
 8007162:	4293      	cmp	r3, r2
 8007164:	4618      	mov	r0, r3
 8007166:	d101      	bne.n	800716c <memchr+0x12>
 8007168:	2000      	movs	r0, #0
 800716a:	e003      	b.n	8007174 <memchr+0x1a>
 800716c:	7804      	ldrb	r4, [r0, #0]
 800716e:	3301      	adds	r3, #1
 8007170:	428c      	cmp	r4, r1
 8007172:	d1f6      	bne.n	8007162 <memchr+0x8>
 8007174:	bd10      	pop	{r4, pc}

08007176 <quorem>:
 8007176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	6903      	ldr	r3, [r0, #16]
 800717c:	690c      	ldr	r4, [r1, #16]
 800717e:	4607      	mov	r7, r0
 8007180:	42a3      	cmp	r3, r4
 8007182:	db7e      	blt.n	8007282 <quorem+0x10c>
 8007184:	3c01      	subs	r4, #1
 8007186:	00a3      	lsls	r3, r4, #2
 8007188:	f100 0514 	add.w	r5, r0, #20
 800718c:	f101 0814 	add.w	r8, r1, #20
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800719c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071a0:	3301      	adds	r3, #1
 80071a2:	429a      	cmp	r2, r3
 80071a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80071a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071ac:	d32e      	bcc.n	800720c <quorem+0x96>
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	46c4      	mov	ip, r8
 80071b4:	46ae      	mov	lr, r5
 80071b6:	46d3      	mov	fp, sl
 80071b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071bc:	b298      	uxth	r0, r3
 80071be:	fb06 a000 	mla	r0, r6, r0, sl
 80071c2:	0c1b      	lsrs	r3, r3, #16
 80071c4:	0c02      	lsrs	r2, r0, #16
 80071c6:	fb06 2303 	mla	r3, r6, r3, r2
 80071ca:	f8de 2000 	ldr.w	r2, [lr]
 80071ce:	b280      	uxth	r0, r0
 80071d0:	b292      	uxth	r2, r2
 80071d2:	1a12      	subs	r2, r2, r0
 80071d4:	445a      	add	r2, fp
 80071d6:	f8de 0000 	ldr.w	r0, [lr]
 80071da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071de:	b29b      	uxth	r3, r3
 80071e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071e8:	b292      	uxth	r2, r2
 80071ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071ee:	45e1      	cmp	r9, ip
 80071f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071f4:	f84e 2b04 	str.w	r2, [lr], #4
 80071f8:	d2de      	bcs.n	80071b8 <quorem+0x42>
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	58eb      	ldr	r3, [r5, r3]
 80071fe:	b92b      	cbnz	r3, 800720c <quorem+0x96>
 8007200:	9b01      	ldr	r3, [sp, #4]
 8007202:	3b04      	subs	r3, #4
 8007204:	429d      	cmp	r5, r3
 8007206:	461a      	mov	r2, r3
 8007208:	d32f      	bcc.n	800726a <quorem+0xf4>
 800720a:	613c      	str	r4, [r7, #16]
 800720c:	4638      	mov	r0, r7
 800720e:	f001 f979 	bl	8008504 <__mcmp>
 8007212:	2800      	cmp	r0, #0
 8007214:	db25      	blt.n	8007262 <quorem+0xec>
 8007216:	4629      	mov	r1, r5
 8007218:	2000      	movs	r0, #0
 800721a:	f858 2b04 	ldr.w	r2, [r8], #4
 800721e:	f8d1 c000 	ldr.w	ip, [r1]
 8007222:	fa1f fe82 	uxth.w	lr, r2
 8007226:	fa1f f38c 	uxth.w	r3, ip
 800722a:	eba3 030e 	sub.w	r3, r3, lr
 800722e:	4403      	add	r3, r0
 8007230:	0c12      	lsrs	r2, r2, #16
 8007232:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007236:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007240:	45c1      	cmp	r9, r8
 8007242:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007246:	f841 3b04 	str.w	r3, [r1], #4
 800724a:	d2e6      	bcs.n	800721a <quorem+0xa4>
 800724c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007254:	b922      	cbnz	r2, 8007260 <quorem+0xea>
 8007256:	3b04      	subs	r3, #4
 8007258:	429d      	cmp	r5, r3
 800725a:	461a      	mov	r2, r3
 800725c:	d30b      	bcc.n	8007276 <quorem+0x100>
 800725e:	613c      	str	r4, [r7, #16]
 8007260:	3601      	adds	r6, #1
 8007262:	4630      	mov	r0, r6
 8007264:	b003      	add	sp, #12
 8007266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	3b04      	subs	r3, #4
 800726e:	2a00      	cmp	r2, #0
 8007270:	d1cb      	bne.n	800720a <quorem+0x94>
 8007272:	3c01      	subs	r4, #1
 8007274:	e7c6      	b.n	8007204 <quorem+0x8e>
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	3b04      	subs	r3, #4
 800727a:	2a00      	cmp	r2, #0
 800727c:	d1ef      	bne.n	800725e <quorem+0xe8>
 800727e:	3c01      	subs	r4, #1
 8007280:	e7ea      	b.n	8007258 <quorem+0xe2>
 8007282:	2000      	movs	r0, #0
 8007284:	e7ee      	b.n	8007264 <quorem+0xee>
	...

08007288 <_dtoa_r>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	4614      	mov	r4, r2
 800728e:	461d      	mov	r5, r3
 8007290:	69c7      	ldr	r7, [r0, #28]
 8007292:	b097      	sub	sp, #92	@ 0x5c
 8007294:	4683      	mov	fp, r0
 8007296:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800729a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800729c:	b97f      	cbnz	r7, 80072be <_dtoa_r+0x36>
 800729e:	2010      	movs	r0, #16
 80072a0:	f000 fe02 	bl	8007ea8 <malloc>
 80072a4:	4602      	mov	r2, r0
 80072a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80072aa:	b920      	cbnz	r0, 80072b6 <_dtoa_r+0x2e>
 80072ac:	21ef      	movs	r1, #239	@ 0xef
 80072ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007550 <_dtoa_r+0x2c8>)
 80072b0:	48a8      	ldr	r0, [pc, #672]	@ (8007554 <_dtoa_r+0x2cc>)
 80072b2:	f001 fc67 	bl	8008b84 <__assert_func>
 80072b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072ba:	6007      	str	r7, [r0, #0]
 80072bc:	60c7      	str	r7, [r0, #12]
 80072be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072c2:	6819      	ldr	r1, [r3, #0]
 80072c4:	b159      	cbz	r1, 80072de <_dtoa_r+0x56>
 80072c6:	685a      	ldr	r2, [r3, #4]
 80072c8:	2301      	movs	r3, #1
 80072ca:	4093      	lsls	r3, r2
 80072cc:	604a      	str	r2, [r1, #4]
 80072ce:	608b      	str	r3, [r1, #8]
 80072d0:	4658      	mov	r0, fp
 80072d2:	f000 fedf 	bl	8008094 <_Bfree>
 80072d6:	2200      	movs	r2, #0
 80072d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072dc:	601a      	str	r2, [r3, #0]
 80072de:	1e2b      	subs	r3, r5, #0
 80072e0:	bfaf      	iteee	ge
 80072e2:	2300      	movge	r3, #0
 80072e4:	2201      	movlt	r2, #1
 80072e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072ea:	9303      	strlt	r3, [sp, #12]
 80072ec:	bfa8      	it	ge
 80072ee:	6033      	strge	r3, [r6, #0]
 80072f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072f4:	4b98      	ldr	r3, [pc, #608]	@ (8007558 <_dtoa_r+0x2d0>)
 80072f6:	bfb8      	it	lt
 80072f8:	6032      	strlt	r2, [r6, #0]
 80072fa:	ea33 0308 	bics.w	r3, r3, r8
 80072fe:	d112      	bne.n	8007326 <_dtoa_r+0x9e>
 8007300:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007304:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800730c:	4323      	orrs	r3, r4
 800730e:	f000 8550 	beq.w	8007db2 <_dtoa_r+0xb2a>
 8007312:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007314:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800755c <_dtoa_r+0x2d4>
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8552 	beq.w	8007dc2 <_dtoa_r+0xb3a>
 800731e:	f10a 0303 	add.w	r3, sl, #3
 8007322:	f000 bd4c 	b.w	8007dbe <_dtoa_r+0xb36>
 8007326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800732a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800732e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007332:	2200      	movs	r2, #0
 8007334:	2300      	movs	r3, #0
 8007336:	f7f9 fb41 	bl	80009bc <__aeabi_dcmpeq>
 800733a:	4607      	mov	r7, r0
 800733c:	b158      	cbz	r0, 8007356 <_dtoa_r+0xce>
 800733e:	2301      	movs	r3, #1
 8007340:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007346:	b113      	cbz	r3, 800734e <_dtoa_r+0xc6>
 8007348:	4b85      	ldr	r3, [pc, #532]	@ (8007560 <_dtoa_r+0x2d8>)
 800734a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007564 <_dtoa_r+0x2dc>
 8007352:	f000 bd36 	b.w	8007dc2 <_dtoa_r+0xb3a>
 8007356:	ab14      	add	r3, sp, #80	@ 0x50
 8007358:	9301      	str	r3, [sp, #4]
 800735a:	ab15      	add	r3, sp, #84	@ 0x54
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	4658      	mov	r0, fp
 8007360:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007364:	f001 f97e 	bl	8008664 <__d2b>
 8007368:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800736c:	4681      	mov	r9, r0
 800736e:	2e00      	cmp	r6, #0
 8007370:	d077      	beq.n	8007462 <_dtoa_r+0x1da>
 8007372:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007376:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007378:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800737c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007380:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007384:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007388:	9712      	str	r7, [sp, #72]	@ 0x48
 800738a:	4619      	mov	r1, r3
 800738c:	2200      	movs	r2, #0
 800738e:	4b76      	ldr	r3, [pc, #472]	@ (8007568 <_dtoa_r+0x2e0>)
 8007390:	f7f8 fef4 	bl	800017c <__aeabi_dsub>
 8007394:	a368      	add	r3, pc, #416	@ (adr r3, 8007538 <_dtoa_r+0x2b0>)
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f7f9 f8a7 	bl	80004ec <__aeabi_dmul>
 800739e:	a368      	add	r3, pc, #416	@ (adr r3, 8007540 <_dtoa_r+0x2b8>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 feec 	bl	8000180 <__adddf3>
 80073a8:	4604      	mov	r4, r0
 80073aa:	4630      	mov	r0, r6
 80073ac:	460d      	mov	r5, r1
 80073ae:	f7f9 f833 	bl	8000418 <__aeabi_i2d>
 80073b2:	a365      	add	r3, pc, #404	@ (adr r3, 8007548 <_dtoa_r+0x2c0>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f7f9 f898 	bl	80004ec <__aeabi_dmul>
 80073bc:	4602      	mov	r2, r0
 80073be:	460b      	mov	r3, r1
 80073c0:	4620      	mov	r0, r4
 80073c2:	4629      	mov	r1, r5
 80073c4:	f7f8 fedc 	bl	8000180 <__adddf3>
 80073c8:	4604      	mov	r4, r0
 80073ca:	460d      	mov	r5, r1
 80073cc:	f7f9 fb3e 	bl	8000a4c <__aeabi_d2iz>
 80073d0:	2200      	movs	r2, #0
 80073d2:	4607      	mov	r7, r0
 80073d4:	2300      	movs	r3, #0
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f9 faf9 	bl	80009d0 <__aeabi_dcmplt>
 80073de:	b140      	cbz	r0, 80073f2 <_dtoa_r+0x16a>
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7f9 f819 	bl	8000418 <__aeabi_i2d>
 80073e6:	4622      	mov	r2, r4
 80073e8:	462b      	mov	r3, r5
 80073ea:	f7f9 fae7 	bl	80009bc <__aeabi_dcmpeq>
 80073ee:	b900      	cbnz	r0, 80073f2 <_dtoa_r+0x16a>
 80073f0:	3f01      	subs	r7, #1
 80073f2:	2f16      	cmp	r7, #22
 80073f4:	d853      	bhi.n	800749e <_dtoa_r+0x216>
 80073f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073fa:	4b5c      	ldr	r3, [pc, #368]	@ (800756c <_dtoa_r+0x2e4>)
 80073fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f9 fae4 	bl	80009d0 <__aeabi_dcmplt>
 8007408:	2800      	cmp	r0, #0
 800740a:	d04a      	beq.n	80074a2 <_dtoa_r+0x21a>
 800740c:	2300      	movs	r3, #0
 800740e:	3f01      	subs	r7, #1
 8007410:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007412:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007414:	1b9b      	subs	r3, r3, r6
 8007416:	1e5a      	subs	r2, r3, #1
 8007418:	bf46      	itte	mi
 800741a:	f1c3 0801 	rsbmi	r8, r3, #1
 800741e:	2300      	movmi	r3, #0
 8007420:	f04f 0800 	movpl.w	r8, #0
 8007424:	9209      	str	r2, [sp, #36]	@ 0x24
 8007426:	bf48      	it	mi
 8007428:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800742a:	2f00      	cmp	r7, #0
 800742c:	db3b      	blt.n	80074a6 <_dtoa_r+0x21e>
 800742e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007430:	970e      	str	r7, [sp, #56]	@ 0x38
 8007432:	443b      	add	r3, r7
 8007434:	9309      	str	r3, [sp, #36]	@ 0x24
 8007436:	2300      	movs	r3, #0
 8007438:	930a      	str	r3, [sp, #40]	@ 0x28
 800743a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800743c:	2b09      	cmp	r3, #9
 800743e:	d866      	bhi.n	800750e <_dtoa_r+0x286>
 8007440:	2b05      	cmp	r3, #5
 8007442:	bfc4      	itt	gt
 8007444:	3b04      	subgt	r3, #4
 8007446:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007448:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800744a:	bfc8      	it	gt
 800744c:	2400      	movgt	r4, #0
 800744e:	f1a3 0302 	sub.w	r3, r3, #2
 8007452:	bfd8      	it	le
 8007454:	2401      	movle	r4, #1
 8007456:	2b03      	cmp	r3, #3
 8007458:	d864      	bhi.n	8007524 <_dtoa_r+0x29c>
 800745a:	e8df f003 	tbb	[pc, r3]
 800745e:	382b      	.short	0x382b
 8007460:	5636      	.short	0x5636
 8007462:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007466:	441e      	add	r6, r3
 8007468:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800746c:	2b20      	cmp	r3, #32
 800746e:	bfc1      	itttt	gt
 8007470:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007474:	fa08 f803 	lslgt.w	r8, r8, r3
 8007478:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800747c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007480:	bfd6      	itet	le
 8007482:	f1c3 0320 	rsble	r3, r3, #32
 8007486:	ea48 0003 	orrgt.w	r0, r8, r3
 800748a:	fa04 f003 	lslle.w	r0, r4, r3
 800748e:	f7f8 ffb3 	bl	80003f8 <__aeabi_ui2d>
 8007492:	2201      	movs	r2, #1
 8007494:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007498:	3e01      	subs	r6, #1
 800749a:	9212      	str	r2, [sp, #72]	@ 0x48
 800749c:	e775      	b.n	800738a <_dtoa_r+0x102>
 800749e:	2301      	movs	r3, #1
 80074a0:	e7b6      	b.n	8007410 <_dtoa_r+0x188>
 80074a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80074a4:	e7b5      	b.n	8007412 <_dtoa_r+0x18a>
 80074a6:	427b      	negs	r3, r7
 80074a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80074aa:	2300      	movs	r3, #0
 80074ac:	eba8 0807 	sub.w	r8, r8, r7
 80074b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80074b2:	e7c2      	b.n	800743a <_dtoa_r+0x1b2>
 80074b4:	2300      	movs	r3, #0
 80074b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	dc35      	bgt.n	800752a <_dtoa_r+0x2a2>
 80074be:	2301      	movs	r3, #1
 80074c0:	461a      	mov	r2, r3
 80074c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80074c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80074c8:	e00b      	b.n	80074e2 <_dtoa_r+0x25a>
 80074ca:	2301      	movs	r3, #1
 80074cc:	e7f3      	b.n	80074b6 <_dtoa_r+0x22e>
 80074ce:	2300      	movs	r3, #0
 80074d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	9308      	str	r3, [sp, #32]
 80074d8:	3301      	adds	r3, #1
 80074da:	2b01      	cmp	r3, #1
 80074dc:	9307      	str	r3, [sp, #28]
 80074de:	bfb8      	it	lt
 80074e0:	2301      	movlt	r3, #1
 80074e2:	2100      	movs	r1, #0
 80074e4:	2204      	movs	r2, #4
 80074e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074ea:	f102 0514 	add.w	r5, r2, #20
 80074ee:	429d      	cmp	r5, r3
 80074f0:	d91f      	bls.n	8007532 <_dtoa_r+0x2aa>
 80074f2:	6041      	str	r1, [r0, #4]
 80074f4:	4658      	mov	r0, fp
 80074f6:	f000 fd8d 	bl	8008014 <_Balloc>
 80074fa:	4682      	mov	sl, r0
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d139      	bne.n	8007574 <_dtoa_r+0x2ec>
 8007500:	4602      	mov	r2, r0
 8007502:	f240 11af 	movw	r1, #431	@ 0x1af
 8007506:	4b1a      	ldr	r3, [pc, #104]	@ (8007570 <_dtoa_r+0x2e8>)
 8007508:	e6d2      	b.n	80072b0 <_dtoa_r+0x28>
 800750a:	2301      	movs	r3, #1
 800750c:	e7e0      	b.n	80074d0 <_dtoa_r+0x248>
 800750e:	2401      	movs	r4, #1
 8007510:	2300      	movs	r3, #0
 8007512:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007514:	9320      	str	r3, [sp, #128]	@ 0x80
 8007516:	f04f 33ff 	mov.w	r3, #4294967295
 800751a:	2200      	movs	r2, #0
 800751c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007520:	2312      	movs	r3, #18
 8007522:	e7d0      	b.n	80074c6 <_dtoa_r+0x23e>
 8007524:	2301      	movs	r3, #1
 8007526:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007528:	e7f5      	b.n	8007516 <_dtoa_r+0x28e>
 800752a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800752c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007530:	e7d7      	b.n	80074e2 <_dtoa_r+0x25a>
 8007532:	3101      	adds	r1, #1
 8007534:	0052      	lsls	r2, r2, #1
 8007536:	e7d8      	b.n	80074ea <_dtoa_r+0x262>
 8007538:	636f4361 	.word	0x636f4361
 800753c:	3fd287a7 	.word	0x3fd287a7
 8007540:	8b60c8b3 	.word	0x8b60c8b3
 8007544:	3fc68a28 	.word	0x3fc68a28
 8007548:	509f79fb 	.word	0x509f79fb
 800754c:	3fd34413 	.word	0x3fd34413
 8007550:	08009461 	.word	0x08009461
 8007554:	08009478 	.word	0x08009478
 8007558:	7ff00000 	.word	0x7ff00000
 800755c:	0800945d 	.word	0x0800945d
 8007560:	08009431 	.word	0x08009431
 8007564:	08009430 	.word	0x08009430
 8007568:	3ff80000 	.word	0x3ff80000
 800756c:	08009570 	.word	0x08009570
 8007570:	080094d0 	.word	0x080094d0
 8007574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007578:	6018      	str	r0, [r3, #0]
 800757a:	9b07      	ldr	r3, [sp, #28]
 800757c:	2b0e      	cmp	r3, #14
 800757e:	f200 80a4 	bhi.w	80076ca <_dtoa_r+0x442>
 8007582:	2c00      	cmp	r4, #0
 8007584:	f000 80a1 	beq.w	80076ca <_dtoa_r+0x442>
 8007588:	2f00      	cmp	r7, #0
 800758a:	dd33      	ble.n	80075f4 <_dtoa_r+0x36c>
 800758c:	4b86      	ldr	r3, [pc, #536]	@ (80077a8 <_dtoa_r+0x520>)
 800758e:	f007 020f 	and.w	r2, r7, #15
 8007592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007596:	05f8      	lsls	r0, r7, #23
 8007598:	e9d3 3400 	ldrd	r3, r4, [r3]
 800759c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075a4:	d516      	bpl.n	80075d4 <_dtoa_r+0x34c>
 80075a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075aa:	4b80      	ldr	r3, [pc, #512]	@ (80077ac <_dtoa_r+0x524>)
 80075ac:	2603      	movs	r6, #3
 80075ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075b2:	f7f9 f8c5 	bl	8000740 <__aeabi_ddiv>
 80075b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ba:	f004 040f 	and.w	r4, r4, #15
 80075be:	4d7b      	ldr	r5, [pc, #492]	@ (80077ac <_dtoa_r+0x524>)
 80075c0:	b954      	cbnz	r4, 80075d8 <_dtoa_r+0x350>
 80075c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ca:	f7f9 f8b9 	bl	8000740 <__aeabi_ddiv>
 80075ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d2:	e028      	b.n	8007626 <_dtoa_r+0x39e>
 80075d4:	2602      	movs	r6, #2
 80075d6:	e7f2      	b.n	80075be <_dtoa_r+0x336>
 80075d8:	07e1      	lsls	r1, r4, #31
 80075da:	d508      	bpl.n	80075ee <_dtoa_r+0x366>
 80075dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075e4:	f7f8 ff82 	bl	80004ec <__aeabi_dmul>
 80075e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ec:	3601      	adds	r6, #1
 80075ee:	1064      	asrs	r4, r4, #1
 80075f0:	3508      	adds	r5, #8
 80075f2:	e7e5      	b.n	80075c0 <_dtoa_r+0x338>
 80075f4:	f000 80d2 	beq.w	800779c <_dtoa_r+0x514>
 80075f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075fc:	427c      	negs	r4, r7
 80075fe:	4b6a      	ldr	r3, [pc, #424]	@ (80077a8 <_dtoa_r+0x520>)
 8007600:	f004 020f 	and.w	r2, r4, #15
 8007604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f7f8 ff6e 	bl	80004ec <__aeabi_dmul>
 8007610:	2602      	movs	r6, #2
 8007612:	2300      	movs	r3, #0
 8007614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007618:	4d64      	ldr	r5, [pc, #400]	@ (80077ac <_dtoa_r+0x524>)
 800761a:	1124      	asrs	r4, r4, #4
 800761c:	2c00      	cmp	r4, #0
 800761e:	f040 80b2 	bne.w	8007786 <_dtoa_r+0x4fe>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1d3      	bne.n	80075ce <_dtoa_r+0x346>
 8007626:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800762a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80b7 	beq.w	80077a0 <_dtoa_r+0x518>
 8007632:	2200      	movs	r2, #0
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	4b5d      	ldr	r3, [pc, #372]	@ (80077b0 <_dtoa_r+0x528>)
 800763a:	f7f9 f9c9 	bl	80009d0 <__aeabi_dcmplt>
 800763e:	2800      	cmp	r0, #0
 8007640:	f000 80ae 	beq.w	80077a0 <_dtoa_r+0x518>
 8007644:	9b07      	ldr	r3, [sp, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80aa 	beq.w	80077a0 <_dtoa_r+0x518>
 800764c:	9b08      	ldr	r3, [sp, #32]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dd37      	ble.n	80076c2 <_dtoa_r+0x43a>
 8007652:	1e7b      	subs	r3, r7, #1
 8007654:	4620      	mov	r0, r4
 8007656:	9304      	str	r3, [sp, #16]
 8007658:	2200      	movs	r2, #0
 800765a:	4629      	mov	r1, r5
 800765c:	4b55      	ldr	r3, [pc, #340]	@ (80077b4 <_dtoa_r+0x52c>)
 800765e:	f7f8 ff45 	bl	80004ec <__aeabi_dmul>
 8007662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007666:	9c08      	ldr	r4, [sp, #32]
 8007668:	3601      	adds	r6, #1
 800766a:	4630      	mov	r0, r6
 800766c:	f7f8 fed4 	bl	8000418 <__aeabi_i2d>
 8007670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007674:	f7f8 ff3a 	bl	80004ec <__aeabi_dmul>
 8007678:	2200      	movs	r2, #0
 800767a:	4b4f      	ldr	r3, [pc, #316]	@ (80077b8 <_dtoa_r+0x530>)
 800767c:	f7f8 fd80 	bl	8000180 <__adddf3>
 8007680:	4605      	mov	r5, r0
 8007682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007686:	2c00      	cmp	r4, #0
 8007688:	f040 809a 	bne.w	80077c0 <_dtoa_r+0x538>
 800768c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007690:	2200      	movs	r2, #0
 8007692:	4b4a      	ldr	r3, [pc, #296]	@ (80077bc <_dtoa_r+0x534>)
 8007694:	f7f8 fd72 	bl	800017c <__aeabi_dsub>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076a0:	462a      	mov	r2, r5
 80076a2:	4633      	mov	r3, r6
 80076a4:	f7f9 f9b2 	bl	8000a0c <__aeabi_dcmpgt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f040 828e 	bne.w	8007bca <_dtoa_r+0x942>
 80076ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b2:	462a      	mov	r2, r5
 80076b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076b8:	f7f9 f98a 	bl	80009d0 <__aeabi_dcmplt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 8127 	bne.w	8007910 <_dtoa_r+0x688>
 80076c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f2c0 8163 	blt.w	8007998 <_dtoa_r+0x710>
 80076d2:	2f0e      	cmp	r7, #14
 80076d4:	f300 8160 	bgt.w	8007998 <_dtoa_r+0x710>
 80076d8:	4b33      	ldr	r3, [pc, #204]	@ (80077a8 <_dtoa_r+0x520>)
 80076da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	da03      	bge.n	80076f4 <_dtoa_r+0x46c>
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f340 8100 	ble.w	80078f4 <_dtoa_r+0x66c>
 80076f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076f8:	4656      	mov	r6, sl
 80076fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7f9 f81d 	bl	8000740 <__aeabi_ddiv>
 8007706:	f7f9 f9a1 	bl	8000a4c <__aeabi_d2iz>
 800770a:	4680      	mov	r8, r0
 800770c:	f7f8 fe84 	bl	8000418 <__aeabi_i2d>
 8007710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007714:	f7f8 feea 	bl	80004ec <__aeabi_dmul>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	f7f8 fd2c 	bl	800017c <__aeabi_dsub>
 8007724:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007728:	9d07      	ldr	r5, [sp, #28]
 800772a:	f806 4b01 	strb.w	r4, [r6], #1
 800772e:	eba6 040a 	sub.w	r4, r6, sl
 8007732:	42a5      	cmp	r5, r4
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	f040 8116 	bne.w	8007968 <_dtoa_r+0x6e0>
 800773c:	f7f8 fd20 	bl	8000180 <__adddf3>
 8007740:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	f7f9 f960 	bl	8000a0c <__aeabi_dcmpgt>
 800774c:	2800      	cmp	r0, #0
 800774e:	f040 80f8 	bne.w	8007942 <_dtoa_r+0x6ba>
 8007752:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f9 f92f 	bl	80009bc <__aeabi_dcmpeq>
 800775e:	b118      	cbz	r0, 8007768 <_dtoa_r+0x4e0>
 8007760:	f018 0f01 	tst.w	r8, #1
 8007764:	f040 80ed 	bne.w	8007942 <_dtoa_r+0x6ba>
 8007768:	4649      	mov	r1, r9
 800776a:	4658      	mov	r0, fp
 800776c:	f000 fc92 	bl	8008094 <_Bfree>
 8007770:	2300      	movs	r3, #0
 8007772:	7033      	strb	r3, [r6, #0]
 8007774:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007776:	3701      	adds	r7, #1
 8007778:	601f      	str	r7, [r3, #0]
 800777a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 8320 	beq.w	8007dc2 <_dtoa_r+0xb3a>
 8007782:	601e      	str	r6, [r3, #0]
 8007784:	e31d      	b.n	8007dc2 <_dtoa_r+0xb3a>
 8007786:	07e2      	lsls	r2, r4, #31
 8007788:	d505      	bpl.n	8007796 <_dtoa_r+0x50e>
 800778a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800778e:	f7f8 fead 	bl	80004ec <__aeabi_dmul>
 8007792:	2301      	movs	r3, #1
 8007794:	3601      	adds	r6, #1
 8007796:	1064      	asrs	r4, r4, #1
 8007798:	3508      	adds	r5, #8
 800779a:	e73f      	b.n	800761c <_dtoa_r+0x394>
 800779c:	2602      	movs	r6, #2
 800779e:	e742      	b.n	8007626 <_dtoa_r+0x39e>
 80077a0:	9c07      	ldr	r4, [sp, #28]
 80077a2:	9704      	str	r7, [sp, #16]
 80077a4:	e761      	b.n	800766a <_dtoa_r+0x3e2>
 80077a6:	bf00      	nop
 80077a8:	08009570 	.word	0x08009570
 80077ac:	08009548 	.word	0x08009548
 80077b0:	3ff00000 	.word	0x3ff00000
 80077b4:	40240000 	.word	0x40240000
 80077b8:	401c0000 	.word	0x401c0000
 80077bc:	40140000 	.word	0x40140000
 80077c0:	4b70      	ldr	r3, [pc, #448]	@ (8007984 <_dtoa_r+0x6fc>)
 80077c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077cc:	4454      	add	r4, sl
 80077ce:	2900      	cmp	r1, #0
 80077d0:	d045      	beq.n	800785e <_dtoa_r+0x5d6>
 80077d2:	2000      	movs	r0, #0
 80077d4:	496c      	ldr	r1, [pc, #432]	@ (8007988 <_dtoa_r+0x700>)
 80077d6:	f7f8 ffb3 	bl	8000740 <__aeabi_ddiv>
 80077da:	4633      	mov	r3, r6
 80077dc:	462a      	mov	r2, r5
 80077de:	f7f8 fccd 	bl	800017c <__aeabi_dsub>
 80077e2:	4656      	mov	r6, sl
 80077e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ec:	f7f9 f92e 	bl	8000a4c <__aeabi_d2iz>
 80077f0:	4605      	mov	r5, r0
 80077f2:	f7f8 fe11 	bl	8000418 <__aeabi_i2d>
 80077f6:	4602      	mov	r2, r0
 80077f8:	460b      	mov	r3, r1
 80077fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077fe:	f7f8 fcbd 	bl	800017c <__aeabi_dsub>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	3530      	adds	r5, #48	@ 0x30
 8007808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800780c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007810:	f806 5b01 	strb.w	r5, [r6], #1
 8007814:	f7f9 f8dc 	bl	80009d0 <__aeabi_dcmplt>
 8007818:	2800      	cmp	r0, #0
 800781a:	d163      	bne.n	80078e4 <_dtoa_r+0x65c>
 800781c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007820:	2000      	movs	r0, #0
 8007822:	495a      	ldr	r1, [pc, #360]	@ (800798c <_dtoa_r+0x704>)
 8007824:	f7f8 fcaa 	bl	800017c <__aeabi_dsub>
 8007828:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800782c:	f7f9 f8d0 	bl	80009d0 <__aeabi_dcmplt>
 8007830:	2800      	cmp	r0, #0
 8007832:	f040 8087 	bne.w	8007944 <_dtoa_r+0x6bc>
 8007836:	42a6      	cmp	r6, r4
 8007838:	f43f af43 	beq.w	80076c2 <_dtoa_r+0x43a>
 800783c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007840:	2200      	movs	r2, #0
 8007842:	4b53      	ldr	r3, [pc, #332]	@ (8007990 <_dtoa_r+0x708>)
 8007844:	f7f8 fe52 	bl	80004ec <__aeabi_dmul>
 8007848:	2200      	movs	r2, #0
 800784a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800784e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007852:	4b4f      	ldr	r3, [pc, #316]	@ (8007990 <_dtoa_r+0x708>)
 8007854:	f7f8 fe4a 	bl	80004ec <__aeabi_dmul>
 8007858:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800785c:	e7c4      	b.n	80077e8 <_dtoa_r+0x560>
 800785e:	4631      	mov	r1, r6
 8007860:	4628      	mov	r0, r5
 8007862:	f7f8 fe43 	bl	80004ec <__aeabi_dmul>
 8007866:	4656      	mov	r6, sl
 8007868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800786c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800786e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007872:	f7f9 f8eb 	bl	8000a4c <__aeabi_d2iz>
 8007876:	4605      	mov	r5, r0
 8007878:	f7f8 fdce 	bl	8000418 <__aeabi_i2d>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007884:	f7f8 fc7a 	bl	800017c <__aeabi_dsub>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	3530      	adds	r5, #48	@ 0x30
 800788e:	f806 5b01 	strb.w	r5, [r6], #1
 8007892:	42a6      	cmp	r6, r4
 8007894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	d124      	bne.n	80078e8 <_dtoa_r+0x660>
 800789e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078a2:	4b39      	ldr	r3, [pc, #228]	@ (8007988 <_dtoa_r+0x700>)
 80078a4:	f7f8 fc6c 	bl	8000180 <__adddf3>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078b0:	f7f9 f8ac 	bl	8000a0c <__aeabi_dcmpgt>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d145      	bne.n	8007944 <_dtoa_r+0x6bc>
 80078b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078bc:	2000      	movs	r0, #0
 80078be:	4932      	ldr	r1, [pc, #200]	@ (8007988 <_dtoa_r+0x700>)
 80078c0:	f7f8 fc5c 	bl	800017c <__aeabi_dsub>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078cc:	f7f9 f880 	bl	80009d0 <__aeabi_dcmplt>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f43f aef6 	beq.w	80076c2 <_dtoa_r+0x43a>
 80078d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80078d8:	1e73      	subs	r3, r6, #1
 80078da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078e0:	2b30      	cmp	r3, #48	@ 0x30
 80078e2:	d0f8      	beq.n	80078d6 <_dtoa_r+0x64e>
 80078e4:	9f04      	ldr	r7, [sp, #16]
 80078e6:	e73f      	b.n	8007768 <_dtoa_r+0x4e0>
 80078e8:	4b29      	ldr	r3, [pc, #164]	@ (8007990 <_dtoa_r+0x708>)
 80078ea:	f7f8 fdff 	bl	80004ec <__aeabi_dmul>
 80078ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f2:	e7bc      	b.n	800786e <_dtoa_r+0x5e6>
 80078f4:	d10c      	bne.n	8007910 <_dtoa_r+0x688>
 80078f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078fa:	2200      	movs	r2, #0
 80078fc:	4b25      	ldr	r3, [pc, #148]	@ (8007994 <_dtoa_r+0x70c>)
 80078fe:	f7f8 fdf5 	bl	80004ec <__aeabi_dmul>
 8007902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007906:	f7f9 f877 	bl	80009f8 <__aeabi_dcmpge>
 800790a:	2800      	cmp	r0, #0
 800790c:	f000 815b 	beq.w	8007bc6 <_dtoa_r+0x93e>
 8007910:	2400      	movs	r4, #0
 8007912:	4625      	mov	r5, r4
 8007914:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007916:	4656      	mov	r6, sl
 8007918:	43db      	mvns	r3, r3
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	2700      	movs	r7, #0
 800791e:	4621      	mov	r1, r4
 8007920:	4658      	mov	r0, fp
 8007922:	f000 fbb7 	bl	8008094 <_Bfree>
 8007926:	2d00      	cmp	r5, #0
 8007928:	d0dc      	beq.n	80078e4 <_dtoa_r+0x65c>
 800792a:	b12f      	cbz	r7, 8007938 <_dtoa_r+0x6b0>
 800792c:	42af      	cmp	r7, r5
 800792e:	d003      	beq.n	8007938 <_dtoa_r+0x6b0>
 8007930:	4639      	mov	r1, r7
 8007932:	4658      	mov	r0, fp
 8007934:	f000 fbae 	bl	8008094 <_Bfree>
 8007938:	4629      	mov	r1, r5
 800793a:	4658      	mov	r0, fp
 800793c:	f000 fbaa 	bl	8008094 <_Bfree>
 8007940:	e7d0      	b.n	80078e4 <_dtoa_r+0x65c>
 8007942:	9704      	str	r7, [sp, #16]
 8007944:	4633      	mov	r3, r6
 8007946:	461e      	mov	r6, r3
 8007948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800794c:	2a39      	cmp	r2, #57	@ 0x39
 800794e:	d107      	bne.n	8007960 <_dtoa_r+0x6d8>
 8007950:	459a      	cmp	sl, r3
 8007952:	d1f8      	bne.n	8007946 <_dtoa_r+0x6be>
 8007954:	9a04      	ldr	r2, [sp, #16]
 8007956:	3201      	adds	r2, #1
 8007958:	9204      	str	r2, [sp, #16]
 800795a:	2230      	movs	r2, #48	@ 0x30
 800795c:	f88a 2000 	strb.w	r2, [sl]
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	3201      	adds	r2, #1
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e7bd      	b.n	80078e4 <_dtoa_r+0x65c>
 8007968:	2200      	movs	r2, #0
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <_dtoa_r+0x708>)
 800796c:	f7f8 fdbe 	bl	80004ec <__aeabi_dmul>
 8007970:	2200      	movs	r2, #0
 8007972:	2300      	movs	r3, #0
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	f7f9 f820 	bl	80009bc <__aeabi_dcmpeq>
 800797c:	2800      	cmp	r0, #0
 800797e:	f43f aebc 	beq.w	80076fa <_dtoa_r+0x472>
 8007982:	e6f1      	b.n	8007768 <_dtoa_r+0x4e0>
 8007984:	08009570 	.word	0x08009570
 8007988:	3fe00000 	.word	0x3fe00000
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	40240000 	.word	0x40240000
 8007994:	40140000 	.word	0x40140000
 8007998:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800799a:	2a00      	cmp	r2, #0
 800799c:	f000 80db 	beq.w	8007b56 <_dtoa_r+0x8ce>
 80079a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079a2:	2a01      	cmp	r2, #1
 80079a4:	f300 80bf 	bgt.w	8007b26 <_dtoa_r+0x89e>
 80079a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	f000 80b7 	beq.w	8007b1e <_dtoa_r+0x896>
 80079b0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079b4:	4646      	mov	r6, r8
 80079b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079ba:	2101      	movs	r1, #1
 80079bc:	441a      	add	r2, r3
 80079be:	4658      	mov	r0, fp
 80079c0:	4498      	add	r8, r3
 80079c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80079c4:	f000 fc1a 	bl	80081fc <__i2b>
 80079c8:	4605      	mov	r5, r0
 80079ca:	b15e      	cbz	r6, 80079e4 <_dtoa_r+0x75c>
 80079cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd08      	ble.n	80079e4 <_dtoa_r+0x75c>
 80079d2:	42b3      	cmp	r3, r6
 80079d4:	bfa8      	it	ge
 80079d6:	4633      	movge	r3, r6
 80079d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079da:	eba8 0803 	sub.w	r8, r8, r3
 80079de:	1af6      	subs	r6, r6, r3
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80079e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079e6:	b1f3      	cbz	r3, 8007a26 <_dtoa_r+0x79e>
 80079e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 80b7 	beq.w	8007b5e <_dtoa_r+0x8d6>
 80079f0:	b18c      	cbz	r4, 8007a16 <_dtoa_r+0x78e>
 80079f2:	4629      	mov	r1, r5
 80079f4:	4622      	mov	r2, r4
 80079f6:	4658      	mov	r0, fp
 80079f8:	f000 fcbe 	bl	8008378 <__pow5mult>
 80079fc:	464a      	mov	r2, r9
 80079fe:	4601      	mov	r1, r0
 8007a00:	4605      	mov	r5, r0
 8007a02:	4658      	mov	r0, fp
 8007a04:	f000 fc10 	bl	8008228 <__multiply>
 8007a08:	4649      	mov	r1, r9
 8007a0a:	9004      	str	r0, [sp, #16]
 8007a0c:	4658      	mov	r0, fp
 8007a0e:	f000 fb41 	bl	8008094 <_Bfree>
 8007a12:	9b04      	ldr	r3, [sp, #16]
 8007a14:	4699      	mov	r9, r3
 8007a16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a18:	1b1a      	subs	r2, r3, r4
 8007a1a:	d004      	beq.n	8007a26 <_dtoa_r+0x79e>
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	4658      	mov	r0, fp
 8007a20:	f000 fcaa 	bl	8008378 <__pow5mult>
 8007a24:	4681      	mov	r9, r0
 8007a26:	2101      	movs	r1, #1
 8007a28:	4658      	mov	r0, fp
 8007a2a:	f000 fbe7 	bl	80081fc <__i2b>
 8007a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a30:	4604      	mov	r4, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 81c9 	beq.w	8007dca <_dtoa_r+0xb42>
 8007a38:	461a      	mov	r2, r3
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4658      	mov	r0, fp
 8007a3e:	f000 fc9b 	bl	8008378 <__pow5mult>
 8007a42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a44:	4604      	mov	r4, r0
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	f300 808f 	bgt.w	8007b6a <_dtoa_r+0x8e2>
 8007a4c:	9b02      	ldr	r3, [sp, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 8087 	bne.w	8007b62 <_dtoa_r+0x8da>
 8007a54:	9b03      	ldr	r3, [sp, #12]
 8007a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 8083 	bne.w	8007b66 <_dtoa_r+0x8de>
 8007a60:	9b03      	ldr	r3, [sp, #12]
 8007a62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a66:	0d1b      	lsrs	r3, r3, #20
 8007a68:	051b      	lsls	r3, r3, #20
 8007a6a:	b12b      	cbz	r3, 8007a78 <_dtoa_r+0x7f0>
 8007a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6e:	f108 0801 	add.w	r8, r8, #1
 8007a72:	3301      	adds	r3, #1
 8007a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a76:	2301      	movs	r3, #1
 8007a78:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 81aa 	beq.w	8007dd6 <_dtoa_r+0xb4e>
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a88:	6918      	ldr	r0, [r3, #16]
 8007a8a:	f000 fb6b 	bl	8008164 <__hi0bits>
 8007a8e:	f1c0 0020 	rsb	r0, r0, #32
 8007a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a94:	4418      	add	r0, r3
 8007a96:	f010 001f 	ands.w	r0, r0, #31
 8007a9a:	d071      	beq.n	8007b80 <_dtoa_r+0x8f8>
 8007a9c:	f1c0 0320 	rsb	r3, r0, #32
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	dd65      	ble.n	8007b70 <_dtoa_r+0x8e8>
 8007aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa6:	f1c0 001c 	rsb	r0, r0, #28
 8007aaa:	4403      	add	r3, r0
 8007aac:	4480      	add	r8, r0
 8007aae:	4406      	add	r6, r0
 8007ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ab2:	f1b8 0f00 	cmp.w	r8, #0
 8007ab6:	dd05      	ble.n	8007ac4 <_dtoa_r+0x83c>
 8007ab8:	4649      	mov	r1, r9
 8007aba:	4642      	mov	r2, r8
 8007abc:	4658      	mov	r0, fp
 8007abe:	f000 fcb5 	bl	800842c <__lshift>
 8007ac2:	4681      	mov	r9, r0
 8007ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	dd05      	ble.n	8007ad6 <_dtoa_r+0x84e>
 8007aca:	4621      	mov	r1, r4
 8007acc:	461a      	mov	r2, r3
 8007ace:	4658      	mov	r0, fp
 8007ad0:	f000 fcac 	bl	800842c <__lshift>
 8007ad4:	4604      	mov	r4, r0
 8007ad6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d053      	beq.n	8007b84 <_dtoa_r+0x8fc>
 8007adc:	4621      	mov	r1, r4
 8007ade:	4648      	mov	r0, r9
 8007ae0:	f000 fd10 	bl	8008504 <__mcmp>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	da4d      	bge.n	8007b84 <_dtoa_r+0x8fc>
 8007ae8:	1e7b      	subs	r3, r7, #1
 8007aea:	4649      	mov	r1, r9
 8007aec:	9304      	str	r3, [sp, #16]
 8007aee:	220a      	movs	r2, #10
 8007af0:	2300      	movs	r3, #0
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 faf0 	bl	80080d8 <__multadd>
 8007af8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007afa:	4681      	mov	r9, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 816c 	beq.w	8007dda <_dtoa_r+0xb52>
 8007b02:	2300      	movs	r3, #0
 8007b04:	4629      	mov	r1, r5
 8007b06:	220a      	movs	r2, #10
 8007b08:	4658      	mov	r0, fp
 8007b0a:	f000 fae5 	bl	80080d8 <__multadd>
 8007b0e:	9b08      	ldr	r3, [sp, #32]
 8007b10:	4605      	mov	r5, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dc61      	bgt.n	8007bda <_dtoa_r+0x952>
 8007b16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	dc3b      	bgt.n	8007b94 <_dtoa_r+0x90c>
 8007b1c:	e05d      	b.n	8007bda <_dtoa_r+0x952>
 8007b1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b24:	e746      	b.n	80079b4 <_dtoa_r+0x72c>
 8007b26:	9b07      	ldr	r3, [sp, #28]
 8007b28:	1e5c      	subs	r4, r3, #1
 8007b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b2c:	42a3      	cmp	r3, r4
 8007b2e:	bfbf      	itttt	lt
 8007b30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007b34:	1ae3      	sublt	r3, r4, r3
 8007b36:	18d2      	addlt	r2, r2, r3
 8007b38:	bfa8      	it	ge
 8007b3a:	1b1c      	subge	r4, r3, r4
 8007b3c:	9b07      	ldr	r3, [sp, #28]
 8007b3e:	bfbe      	ittt	lt
 8007b40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007b44:	2400      	movlt	r4, #0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bfb5      	itete	lt
 8007b4a:	eba8 0603 	sublt.w	r6, r8, r3
 8007b4e:	4646      	movge	r6, r8
 8007b50:	2300      	movlt	r3, #0
 8007b52:	9b07      	ldrge	r3, [sp, #28]
 8007b54:	e730      	b.n	80079b8 <_dtoa_r+0x730>
 8007b56:	4646      	mov	r6, r8
 8007b58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b5c:	e735      	b.n	80079ca <_dtoa_r+0x742>
 8007b5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b60:	e75c      	b.n	8007a1c <_dtoa_r+0x794>
 8007b62:	2300      	movs	r3, #0
 8007b64:	e788      	b.n	8007a78 <_dtoa_r+0x7f0>
 8007b66:	9b02      	ldr	r3, [sp, #8]
 8007b68:	e786      	b.n	8007a78 <_dtoa_r+0x7f0>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b6e:	e788      	b.n	8007a82 <_dtoa_r+0x7fa>
 8007b70:	d09f      	beq.n	8007ab2 <_dtoa_r+0x82a>
 8007b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b74:	331c      	adds	r3, #28
 8007b76:	441a      	add	r2, r3
 8007b78:	4498      	add	r8, r3
 8007b7a:	441e      	add	r6, r3
 8007b7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b7e:	e798      	b.n	8007ab2 <_dtoa_r+0x82a>
 8007b80:	4603      	mov	r3, r0
 8007b82:	e7f6      	b.n	8007b72 <_dtoa_r+0x8ea>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	9704      	str	r7, [sp, #16]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dc20      	bgt.n	8007bce <_dtoa_r+0x946>
 8007b8c:	9308      	str	r3, [sp, #32]
 8007b8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	dd1e      	ble.n	8007bd2 <_dtoa_r+0x94a>
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f47f aebc 	bne.w	8007914 <_dtoa_r+0x68c>
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	2205      	movs	r2, #5
 8007ba0:	4658      	mov	r0, fp
 8007ba2:	f000 fa99 	bl	80080d8 <__multadd>
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4604      	mov	r4, r0
 8007baa:	4648      	mov	r0, r9
 8007bac:	f000 fcaa 	bl	8008504 <__mcmp>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f77f aeaf 	ble.w	8007914 <_dtoa_r+0x68c>
 8007bb6:	2331      	movs	r3, #49	@ 0x31
 8007bb8:	4656      	mov	r6, sl
 8007bba:	f806 3b01 	strb.w	r3, [r6], #1
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	e6aa      	b.n	800791c <_dtoa_r+0x694>
 8007bc6:	9c07      	ldr	r4, [sp, #28]
 8007bc8:	9704      	str	r7, [sp, #16]
 8007bca:	4625      	mov	r5, r4
 8007bcc:	e7f3      	b.n	8007bb6 <_dtoa_r+0x92e>
 8007bce:	9b07      	ldr	r3, [sp, #28]
 8007bd0:	9308      	str	r3, [sp, #32]
 8007bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 8104 	beq.w	8007de2 <_dtoa_r+0xb5a>
 8007bda:	2e00      	cmp	r6, #0
 8007bdc:	dd05      	ble.n	8007bea <_dtoa_r+0x962>
 8007bde:	4629      	mov	r1, r5
 8007be0:	4632      	mov	r2, r6
 8007be2:	4658      	mov	r0, fp
 8007be4:	f000 fc22 	bl	800842c <__lshift>
 8007be8:	4605      	mov	r5, r0
 8007bea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d05a      	beq.n	8007ca6 <_dtoa_r+0xa1e>
 8007bf0:	4658      	mov	r0, fp
 8007bf2:	6869      	ldr	r1, [r5, #4]
 8007bf4:	f000 fa0e 	bl	8008014 <_Balloc>
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	b928      	cbnz	r0, 8007c08 <_dtoa_r+0x980>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c02:	4b83      	ldr	r3, [pc, #524]	@ (8007e10 <_dtoa_r+0xb88>)
 8007c04:	f7ff bb54 	b.w	80072b0 <_dtoa_r+0x28>
 8007c08:	692a      	ldr	r2, [r5, #16]
 8007c0a:	f105 010c 	add.w	r1, r5, #12
 8007c0e:	3202      	adds	r2, #2
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	300c      	adds	r0, #12
 8007c14:	f000 ffa8 	bl	8008b68 <memcpy>
 8007c18:	2201      	movs	r2, #1
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4658      	mov	r0, fp
 8007c1e:	f000 fc05 	bl	800842c <__lshift>
 8007c22:	462f      	mov	r7, r5
 8007c24:	4605      	mov	r5, r0
 8007c26:	f10a 0301 	add.w	r3, sl, #1
 8007c2a:	9307      	str	r3, [sp, #28]
 8007c2c:	9b08      	ldr	r3, [sp, #32]
 8007c2e:	4453      	add	r3, sl
 8007c30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3a:	9b07      	ldr	r3, [sp, #28]
 8007c3c:	4621      	mov	r1, r4
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	4648      	mov	r0, r9
 8007c42:	9302      	str	r3, [sp, #8]
 8007c44:	f7ff fa97 	bl	8007176 <quorem>
 8007c48:	4639      	mov	r1, r7
 8007c4a:	9008      	str	r0, [sp, #32]
 8007c4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c50:	4648      	mov	r0, r9
 8007c52:	f000 fc57 	bl	8008504 <__mcmp>
 8007c56:	462a      	mov	r2, r5
 8007c58:	9009      	str	r0, [sp, #36]	@ 0x24
 8007c5a:	4621      	mov	r1, r4
 8007c5c:	4658      	mov	r0, fp
 8007c5e:	f000 fc6d 	bl	800853c <__mdiff>
 8007c62:	68c2      	ldr	r2, [r0, #12]
 8007c64:	4606      	mov	r6, r0
 8007c66:	bb02      	cbnz	r2, 8007caa <_dtoa_r+0xa22>
 8007c68:	4601      	mov	r1, r0
 8007c6a:	4648      	mov	r0, r9
 8007c6c:	f000 fc4a 	bl	8008504 <__mcmp>
 8007c70:	4602      	mov	r2, r0
 8007c72:	4631      	mov	r1, r6
 8007c74:	4658      	mov	r0, fp
 8007c76:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c78:	f000 fa0c 	bl	8008094 <_Bfree>
 8007c7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c80:	9e07      	ldr	r6, [sp, #28]
 8007c82:	ea43 0102 	orr.w	r1, r3, r2
 8007c86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c88:	4319      	orrs	r1, r3
 8007c8a:	d110      	bne.n	8007cae <_dtoa_r+0xa26>
 8007c8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c90:	d029      	beq.n	8007ce6 <_dtoa_r+0xa5e>
 8007c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dd02      	ble.n	8007c9e <_dtoa_r+0xa16>
 8007c98:	9b08      	ldr	r3, [sp, #32]
 8007c9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	f883 8000 	strb.w	r8, [r3]
 8007ca4:	e63b      	b.n	800791e <_dtoa_r+0x696>
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	e7bb      	b.n	8007c22 <_dtoa_r+0x99a>
 8007caa:	2201      	movs	r2, #1
 8007cac:	e7e1      	b.n	8007c72 <_dtoa_r+0x9ea>
 8007cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	db04      	blt.n	8007cbe <_dtoa_r+0xa36>
 8007cb4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007cb6:	430b      	orrs	r3, r1
 8007cb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	d120      	bne.n	8007d00 <_dtoa_r+0xa78>
 8007cbe:	2a00      	cmp	r2, #0
 8007cc0:	dded      	ble.n	8007c9e <_dtoa_r+0xa16>
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	f000 fbb0 	bl	800842c <__lshift>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4681      	mov	r9, r0
 8007cd0:	f000 fc18 	bl	8008504 <__mcmp>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	dc03      	bgt.n	8007ce0 <_dtoa_r+0xa58>
 8007cd8:	d1e1      	bne.n	8007c9e <_dtoa_r+0xa16>
 8007cda:	f018 0f01 	tst.w	r8, #1
 8007cde:	d0de      	beq.n	8007c9e <_dtoa_r+0xa16>
 8007ce0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ce4:	d1d8      	bne.n	8007c98 <_dtoa_r+0xa10>
 8007ce6:	2339      	movs	r3, #57	@ 0x39
 8007ce8:	9a02      	ldr	r2, [sp, #8]
 8007cea:	7013      	strb	r3, [r2, #0]
 8007cec:	4633      	mov	r3, r6
 8007cee:	461e      	mov	r6, r3
 8007cf0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	2a39      	cmp	r2, #57	@ 0x39
 8007cf8:	d052      	beq.n	8007da0 <_dtoa_r+0xb18>
 8007cfa:	3201      	adds	r2, #1
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	e60e      	b.n	800791e <_dtoa_r+0x696>
 8007d00:	2a00      	cmp	r2, #0
 8007d02:	dd07      	ble.n	8007d14 <_dtoa_r+0xa8c>
 8007d04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d08:	d0ed      	beq.n	8007ce6 <_dtoa_r+0xa5e>
 8007d0a:	9a02      	ldr	r2, [sp, #8]
 8007d0c:	f108 0301 	add.w	r3, r8, #1
 8007d10:	7013      	strb	r3, [r2, #0]
 8007d12:	e604      	b.n	800791e <_dtoa_r+0x696>
 8007d14:	9b07      	ldr	r3, [sp, #28]
 8007d16:	9a07      	ldr	r2, [sp, #28]
 8007d18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d028      	beq.n	8007d74 <_dtoa_r+0xaec>
 8007d22:	4649      	mov	r1, r9
 8007d24:	2300      	movs	r3, #0
 8007d26:	220a      	movs	r2, #10
 8007d28:	4658      	mov	r0, fp
 8007d2a:	f000 f9d5 	bl	80080d8 <__multadd>
 8007d2e:	42af      	cmp	r7, r5
 8007d30:	4681      	mov	r9, r0
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	f04f 020a 	mov.w	r2, #10
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	4658      	mov	r0, fp
 8007d3e:	d107      	bne.n	8007d50 <_dtoa_r+0xac8>
 8007d40:	f000 f9ca 	bl	80080d8 <__multadd>
 8007d44:	4607      	mov	r7, r0
 8007d46:	4605      	mov	r5, r0
 8007d48:	9b07      	ldr	r3, [sp, #28]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	9307      	str	r3, [sp, #28]
 8007d4e:	e774      	b.n	8007c3a <_dtoa_r+0x9b2>
 8007d50:	f000 f9c2 	bl	80080d8 <__multadd>
 8007d54:	4629      	mov	r1, r5
 8007d56:	4607      	mov	r7, r0
 8007d58:	2300      	movs	r3, #0
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	4658      	mov	r0, fp
 8007d5e:	f000 f9bb 	bl	80080d8 <__multadd>
 8007d62:	4605      	mov	r5, r0
 8007d64:	e7f0      	b.n	8007d48 <_dtoa_r+0xac0>
 8007d66:	9b08      	ldr	r3, [sp, #32]
 8007d68:	2700      	movs	r7, #0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bfcc      	ite	gt
 8007d6e:	461e      	movgt	r6, r3
 8007d70:	2601      	movle	r6, #1
 8007d72:	4456      	add	r6, sl
 8007d74:	4649      	mov	r1, r9
 8007d76:	2201      	movs	r2, #1
 8007d78:	4658      	mov	r0, fp
 8007d7a:	f000 fb57 	bl	800842c <__lshift>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4681      	mov	r9, r0
 8007d82:	f000 fbbf 	bl	8008504 <__mcmp>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	dcb0      	bgt.n	8007cec <_dtoa_r+0xa64>
 8007d8a:	d102      	bne.n	8007d92 <_dtoa_r+0xb0a>
 8007d8c:	f018 0f01 	tst.w	r8, #1
 8007d90:	d1ac      	bne.n	8007cec <_dtoa_r+0xa64>
 8007d92:	4633      	mov	r3, r6
 8007d94:	461e      	mov	r6, r3
 8007d96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d9a:	2a30      	cmp	r2, #48	@ 0x30
 8007d9c:	d0fa      	beq.n	8007d94 <_dtoa_r+0xb0c>
 8007d9e:	e5be      	b.n	800791e <_dtoa_r+0x696>
 8007da0:	459a      	cmp	sl, r3
 8007da2:	d1a4      	bne.n	8007cee <_dtoa_r+0xa66>
 8007da4:	9b04      	ldr	r3, [sp, #16]
 8007da6:	3301      	adds	r3, #1
 8007da8:	9304      	str	r3, [sp, #16]
 8007daa:	2331      	movs	r3, #49	@ 0x31
 8007dac:	f88a 3000 	strb.w	r3, [sl]
 8007db0:	e5b5      	b.n	800791e <_dtoa_r+0x696>
 8007db2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007db4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e14 <_dtoa_r+0xb8c>
 8007db8:	b11b      	cbz	r3, 8007dc2 <_dtoa_r+0xb3a>
 8007dba:	f10a 0308 	add.w	r3, sl, #8
 8007dbe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	4650      	mov	r0, sl
 8007dc4:	b017      	add	sp, #92	@ 0x5c
 8007dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	f77f ae3d 	ble.w	8007a4c <_dtoa_r+0x7c4>
 8007dd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dd4:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	e65b      	b.n	8007a92 <_dtoa_r+0x80a>
 8007dda:	9b08      	ldr	r3, [sp, #32]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f77f aed6 	ble.w	8007b8e <_dtoa_r+0x906>
 8007de2:	4656      	mov	r6, sl
 8007de4:	4621      	mov	r1, r4
 8007de6:	4648      	mov	r0, r9
 8007de8:	f7ff f9c5 	bl	8007176 <quorem>
 8007dec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007df0:	9b08      	ldr	r3, [sp, #32]
 8007df2:	f806 8b01 	strb.w	r8, [r6], #1
 8007df6:	eba6 020a 	sub.w	r2, r6, sl
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	ddb3      	ble.n	8007d66 <_dtoa_r+0xade>
 8007dfe:	4649      	mov	r1, r9
 8007e00:	2300      	movs	r3, #0
 8007e02:	220a      	movs	r2, #10
 8007e04:	4658      	mov	r0, fp
 8007e06:	f000 f967 	bl	80080d8 <__multadd>
 8007e0a:	4681      	mov	r9, r0
 8007e0c:	e7ea      	b.n	8007de4 <_dtoa_r+0xb5c>
 8007e0e:	bf00      	nop
 8007e10:	080094d0 	.word	0x080094d0
 8007e14:	08009454 	.word	0x08009454

08007e18 <_free_r>:
 8007e18:	b538      	push	{r3, r4, r5, lr}
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d040      	beq.n	8007ea2 <_free_r+0x8a>
 8007e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e24:	1f0c      	subs	r4, r1, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bfb8      	it	lt
 8007e2a:	18e4      	addlt	r4, r4, r3
 8007e2c:	f000 f8e6 	bl	8007ffc <__malloc_lock>
 8007e30:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea4 <_free_r+0x8c>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	b933      	cbnz	r3, 8007e44 <_free_r+0x2c>
 8007e36:	6063      	str	r3, [r4, #4]
 8007e38:	6014      	str	r4, [r2, #0]
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e40:	f000 b8e2 	b.w	8008008 <__malloc_unlock>
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	d908      	bls.n	8007e5a <_free_r+0x42>
 8007e48:	6820      	ldr	r0, [r4, #0]
 8007e4a:	1821      	adds	r1, r4, r0
 8007e4c:	428b      	cmp	r3, r1
 8007e4e:	bf01      	itttt	eq
 8007e50:	6819      	ldreq	r1, [r3, #0]
 8007e52:	685b      	ldreq	r3, [r3, #4]
 8007e54:	1809      	addeq	r1, r1, r0
 8007e56:	6021      	streq	r1, [r4, #0]
 8007e58:	e7ed      	b.n	8007e36 <_free_r+0x1e>
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	b10b      	cbz	r3, 8007e64 <_free_r+0x4c>
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	d9fa      	bls.n	8007e5a <_free_r+0x42>
 8007e64:	6811      	ldr	r1, [r2, #0]
 8007e66:	1850      	adds	r0, r2, r1
 8007e68:	42a0      	cmp	r0, r4
 8007e6a:	d10b      	bne.n	8007e84 <_free_r+0x6c>
 8007e6c:	6820      	ldr	r0, [r4, #0]
 8007e6e:	4401      	add	r1, r0
 8007e70:	1850      	adds	r0, r2, r1
 8007e72:	4283      	cmp	r3, r0
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	d1e0      	bne.n	8007e3a <_free_r+0x22>
 8007e78:	6818      	ldr	r0, [r3, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	4408      	add	r0, r1
 8007e7e:	6010      	str	r0, [r2, #0]
 8007e80:	6053      	str	r3, [r2, #4]
 8007e82:	e7da      	b.n	8007e3a <_free_r+0x22>
 8007e84:	d902      	bls.n	8007e8c <_free_r+0x74>
 8007e86:	230c      	movs	r3, #12
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	e7d6      	b.n	8007e3a <_free_r+0x22>
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	1821      	adds	r1, r4, r0
 8007e90:	428b      	cmp	r3, r1
 8007e92:	bf01      	itttt	eq
 8007e94:	6819      	ldreq	r1, [r3, #0]
 8007e96:	685b      	ldreq	r3, [r3, #4]
 8007e98:	1809      	addeq	r1, r1, r0
 8007e9a:	6021      	streq	r1, [r4, #0]
 8007e9c:	6063      	str	r3, [r4, #4]
 8007e9e:	6054      	str	r4, [r2, #4]
 8007ea0:	e7cb      	b.n	8007e3a <_free_r+0x22>
 8007ea2:	bd38      	pop	{r3, r4, r5, pc}
 8007ea4:	20000f54 	.word	0x20000f54

08007ea8 <malloc>:
 8007ea8:	4b02      	ldr	r3, [pc, #8]	@ (8007eb4 <malloc+0xc>)
 8007eaa:	4601      	mov	r1, r0
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	f000 b825 	b.w	8007efc <_malloc_r>
 8007eb2:	bf00      	nop
 8007eb4:	200000d8 	.word	0x200000d8

08007eb8 <sbrk_aligned>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	4e0f      	ldr	r6, [pc, #60]	@ (8007ef8 <sbrk_aligned+0x40>)
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	6831      	ldr	r1, [r6, #0]
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	b911      	cbnz	r1, 8007eca <sbrk_aligned+0x12>
 8007ec4:	f000 fe40 	bl	8008b48 <_sbrk_r>
 8007ec8:	6030      	str	r0, [r6, #0]
 8007eca:	4621      	mov	r1, r4
 8007ecc:	4628      	mov	r0, r5
 8007ece:	f000 fe3b 	bl	8008b48 <_sbrk_r>
 8007ed2:	1c43      	adds	r3, r0, #1
 8007ed4:	d103      	bne.n	8007ede <sbrk_aligned+0x26>
 8007ed6:	f04f 34ff 	mov.w	r4, #4294967295
 8007eda:	4620      	mov	r0, r4
 8007edc:	bd70      	pop	{r4, r5, r6, pc}
 8007ede:	1cc4      	adds	r4, r0, #3
 8007ee0:	f024 0403 	bic.w	r4, r4, #3
 8007ee4:	42a0      	cmp	r0, r4
 8007ee6:	d0f8      	beq.n	8007eda <sbrk_aligned+0x22>
 8007ee8:	1a21      	subs	r1, r4, r0
 8007eea:	4628      	mov	r0, r5
 8007eec:	f000 fe2c 	bl	8008b48 <_sbrk_r>
 8007ef0:	3001      	adds	r0, #1
 8007ef2:	d1f2      	bne.n	8007eda <sbrk_aligned+0x22>
 8007ef4:	e7ef      	b.n	8007ed6 <sbrk_aligned+0x1e>
 8007ef6:	bf00      	nop
 8007ef8:	20000f50 	.word	0x20000f50

08007efc <_malloc_r>:
 8007efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f00:	1ccd      	adds	r5, r1, #3
 8007f02:	f025 0503 	bic.w	r5, r5, #3
 8007f06:	3508      	adds	r5, #8
 8007f08:	2d0c      	cmp	r5, #12
 8007f0a:	bf38      	it	cc
 8007f0c:	250c      	movcc	r5, #12
 8007f0e:	2d00      	cmp	r5, #0
 8007f10:	4606      	mov	r6, r0
 8007f12:	db01      	blt.n	8007f18 <_malloc_r+0x1c>
 8007f14:	42a9      	cmp	r1, r5
 8007f16:	d904      	bls.n	8007f22 <_malloc_r+0x26>
 8007f18:	230c      	movs	r3, #12
 8007f1a:	6033      	str	r3, [r6, #0]
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ff8 <_malloc_r+0xfc>
 8007f26:	f000 f869 	bl	8007ffc <__malloc_lock>
 8007f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2e:	461c      	mov	r4, r3
 8007f30:	bb44      	cbnz	r4, 8007f84 <_malloc_r+0x88>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4630      	mov	r0, r6
 8007f36:	f7ff ffbf 	bl	8007eb8 <sbrk_aligned>
 8007f3a:	1c43      	adds	r3, r0, #1
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	d158      	bne.n	8007ff2 <_malloc_r+0xf6>
 8007f40:	f8d8 4000 	ldr.w	r4, [r8]
 8007f44:	4627      	mov	r7, r4
 8007f46:	2f00      	cmp	r7, #0
 8007f48:	d143      	bne.n	8007fd2 <_malloc_r+0xd6>
 8007f4a:	2c00      	cmp	r4, #0
 8007f4c:	d04b      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	4639      	mov	r1, r7
 8007f52:	4630      	mov	r0, r6
 8007f54:	eb04 0903 	add.w	r9, r4, r3
 8007f58:	f000 fdf6 	bl	8008b48 <_sbrk_r>
 8007f5c:	4581      	cmp	r9, r0
 8007f5e:	d142      	bne.n	8007fe6 <_malloc_r+0xea>
 8007f60:	6821      	ldr	r1, [r4, #0]
 8007f62:	4630      	mov	r0, r6
 8007f64:	1a6d      	subs	r5, r5, r1
 8007f66:	4629      	mov	r1, r5
 8007f68:	f7ff ffa6 	bl	8007eb8 <sbrk_aligned>
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d03a      	beq.n	8007fe6 <_malloc_r+0xea>
 8007f70:	6823      	ldr	r3, [r4, #0]
 8007f72:	442b      	add	r3, r5
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	f8d8 3000 	ldr.w	r3, [r8]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	bb62      	cbnz	r2, 8007fd8 <_malloc_r+0xdc>
 8007f7e:	f8c8 7000 	str.w	r7, [r8]
 8007f82:	e00f      	b.n	8007fa4 <_malloc_r+0xa8>
 8007f84:	6822      	ldr	r2, [r4, #0]
 8007f86:	1b52      	subs	r2, r2, r5
 8007f88:	d420      	bmi.n	8007fcc <_malloc_r+0xd0>
 8007f8a:	2a0b      	cmp	r2, #11
 8007f8c:	d917      	bls.n	8007fbe <_malloc_r+0xc2>
 8007f8e:	1961      	adds	r1, r4, r5
 8007f90:	42a3      	cmp	r3, r4
 8007f92:	6025      	str	r5, [r4, #0]
 8007f94:	bf18      	it	ne
 8007f96:	6059      	strne	r1, [r3, #4]
 8007f98:	6863      	ldr	r3, [r4, #4]
 8007f9a:	bf08      	it	eq
 8007f9c:	f8c8 1000 	streq.w	r1, [r8]
 8007fa0:	5162      	str	r2, [r4, r5]
 8007fa2:	604b      	str	r3, [r1, #4]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f82f 	bl	8008008 <__malloc_unlock>
 8007faa:	f104 000b 	add.w	r0, r4, #11
 8007fae:	1d23      	adds	r3, r4, #4
 8007fb0:	f020 0007 	bic.w	r0, r0, #7
 8007fb4:	1ac2      	subs	r2, r0, r3
 8007fb6:	bf1c      	itt	ne
 8007fb8:	1a1b      	subne	r3, r3, r0
 8007fba:	50a3      	strne	r3, [r4, r2]
 8007fbc:	e7af      	b.n	8007f1e <_malloc_r+0x22>
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	42a3      	cmp	r3, r4
 8007fc2:	bf0c      	ite	eq
 8007fc4:	f8c8 2000 	streq.w	r2, [r8]
 8007fc8:	605a      	strne	r2, [r3, #4]
 8007fca:	e7eb      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fcc:	4623      	mov	r3, r4
 8007fce:	6864      	ldr	r4, [r4, #4]
 8007fd0:	e7ae      	b.n	8007f30 <_malloc_r+0x34>
 8007fd2:	463c      	mov	r4, r7
 8007fd4:	687f      	ldr	r7, [r7, #4]
 8007fd6:	e7b6      	b.n	8007f46 <_malloc_r+0x4a>
 8007fd8:	461a      	mov	r2, r3
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d1fb      	bne.n	8007fd8 <_malloc_r+0xdc>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	6053      	str	r3, [r2, #4]
 8007fe4:	e7de      	b.n	8007fa4 <_malloc_r+0xa8>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	4630      	mov	r0, r6
 8007fea:	6033      	str	r3, [r6, #0]
 8007fec:	f000 f80c 	bl	8008008 <__malloc_unlock>
 8007ff0:	e794      	b.n	8007f1c <_malloc_r+0x20>
 8007ff2:	6005      	str	r5, [r0, #0]
 8007ff4:	e7d6      	b.n	8007fa4 <_malloc_r+0xa8>
 8007ff6:	bf00      	nop
 8007ff8:	20000f54 	.word	0x20000f54

08007ffc <__malloc_lock>:
 8007ffc:	4801      	ldr	r0, [pc, #4]	@ (8008004 <__malloc_lock+0x8>)
 8007ffe:	f7ff b8aa 	b.w	8007156 <__retarget_lock_acquire_recursive>
 8008002:	bf00      	nop
 8008004:	20000f4c 	.word	0x20000f4c

08008008 <__malloc_unlock>:
 8008008:	4801      	ldr	r0, [pc, #4]	@ (8008010 <__malloc_unlock+0x8>)
 800800a:	f7ff b8a5 	b.w	8007158 <__retarget_lock_release_recursive>
 800800e:	bf00      	nop
 8008010:	20000f4c 	.word	0x20000f4c

08008014 <_Balloc>:
 8008014:	b570      	push	{r4, r5, r6, lr}
 8008016:	69c6      	ldr	r6, [r0, #28]
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	b976      	cbnz	r6, 800803c <_Balloc+0x28>
 800801e:	2010      	movs	r0, #16
 8008020:	f7ff ff42 	bl	8007ea8 <malloc>
 8008024:	4602      	mov	r2, r0
 8008026:	61e0      	str	r0, [r4, #28]
 8008028:	b920      	cbnz	r0, 8008034 <_Balloc+0x20>
 800802a:	216b      	movs	r1, #107	@ 0x6b
 800802c:	4b17      	ldr	r3, [pc, #92]	@ (800808c <_Balloc+0x78>)
 800802e:	4818      	ldr	r0, [pc, #96]	@ (8008090 <_Balloc+0x7c>)
 8008030:	f000 fda8 	bl	8008b84 <__assert_func>
 8008034:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008038:	6006      	str	r6, [r0, #0]
 800803a:	60c6      	str	r6, [r0, #12]
 800803c:	69e6      	ldr	r6, [r4, #28]
 800803e:	68f3      	ldr	r3, [r6, #12]
 8008040:	b183      	cbz	r3, 8008064 <_Balloc+0x50>
 8008042:	69e3      	ldr	r3, [r4, #28]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800804a:	b9b8      	cbnz	r0, 800807c <_Balloc+0x68>
 800804c:	2101      	movs	r1, #1
 800804e:	fa01 f605 	lsl.w	r6, r1, r5
 8008052:	1d72      	adds	r2, r6, #5
 8008054:	4620      	mov	r0, r4
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	f000 fdb2 	bl	8008bc0 <_calloc_r>
 800805c:	b160      	cbz	r0, 8008078 <_Balloc+0x64>
 800805e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008062:	e00e      	b.n	8008082 <_Balloc+0x6e>
 8008064:	2221      	movs	r2, #33	@ 0x21
 8008066:	2104      	movs	r1, #4
 8008068:	4620      	mov	r0, r4
 800806a:	f000 fda9 	bl	8008bc0 <_calloc_r>
 800806e:	69e3      	ldr	r3, [r4, #28]
 8008070:	60f0      	str	r0, [r6, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d1e4      	bne.n	8008042 <_Balloc+0x2e>
 8008078:	2000      	movs	r0, #0
 800807a:	bd70      	pop	{r4, r5, r6, pc}
 800807c:	6802      	ldr	r2, [r0, #0]
 800807e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008082:	2300      	movs	r3, #0
 8008084:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008088:	e7f7      	b.n	800807a <_Balloc+0x66>
 800808a:	bf00      	nop
 800808c:	08009461 	.word	0x08009461
 8008090:	080094e1 	.word	0x080094e1

08008094 <_Bfree>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	69c6      	ldr	r6, [r0, #28]
 8008098:	4605      	mov	r5, r0
 800809a:	460c      	mov	r4, r1
 800809c:	b976      	cbnz	r6, 80080bc <_Bfree+0x28>
 800809e:	2010      	movs	r0, #16
 80080a0:	f7ff ff02 	bl	8007ea8 <malloc>
 80080a4:	4602      	mov	r2, r0
 80080a6:	61e8      	str	r0, [r5, #28]
 80080a8:	b920      	cbnz	r0, 80080b4 <_Bfree+0x20>
 80080aa:	218f      	movs	r1, #143	@ 0x8f
 80080ac:	4b08      	ldr	r3, [pc, #32]	@ (80080d0 <_Bfree+0x3c>)
 80080ae:	4809      	ldr	r0, [pc, #36]	@ (80080d4 <_Bfree+0x40>)
 80080b0:	f000 fd68 	bl	8008b84 <__assert_func>
 80080b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b8:	6006      	str	r6, [r0, #0]
 80080ba:	60c6      	str	r6, [r0, #12]
 80080bc:	b13c      	cbz	r4, 80080ce <_Bfree+0x3a>
 80080be:	69eb      	ldr	r3, [r5, #28]
 80080c0:	6862      	ldr	r2, [r4, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080c8:	6021      	str	r1, [r4, #0]
 80080ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	08009461 	.word	0x08009461
 80080d4:	080094e1 	.word	0x080094e1

080080d8 <__multadd>:
 80080d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080dc:	4607      	mov	r7, r0
 80080de:	460c      	mov	r4, r1
 80080e0:	461e      	mov	r6, r3
 80080e2:	2000      	movs	r0, #0
 80080e4:	690d      	ldr	r5, [r1, #16]
 80080e6:	f101 0c14 	add.w	ip, r1, #20
 80080ea:	f8dc 3000 	ldr.w	r3, [ip]
 80080ee:	3001      	adds	r0, #1
 80080f0:	b299      	uxth	r1, r3
 80080f2:	fb02 6101 	mla	r1, r2, r1, r6
 80080f6:	0c1e      	lsrs	r6, r3, #16
 80080f8:	0c0b      	lsrs	r3, r1, #16
 80080fa:	fb02 3306 	mla	r3, r2, r6, r3
 80080fe:	b289      	uxth	r1, r1
 8008100:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008104:	4285      	cmp	r5, r0
 8008106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800810a:	f84c 1b04 	str.w	r1, [ip], #4
 800810e:	dcec      	bgt.n	80080ea <__multadd+0x12>
 8008110:	b30e      	cbz	r6, 8008156 <__multadd+0x7e>
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	42ab      	cmp	r3, r5
 8008116:	dc19      	bgt.n	800814c <__multadd+0x74>
 8008118:	6861      	ldr	r1, [r4, #4]
 800811a:	4638      	mov	r0, r7
 800811c:	3101      	adds	r1, #1
 800811e:	f7ff ff79 	bl	8008014 <_Balloc>
 8008122:	4680      	mov	r8, r0
 8008124:	b928      	cbnz	r0, 8008132 <__multadd+0x5a>
 8008126:	4602      	mov	r2, r0
 8008128:	21ba      	movs	r1, #186	@ 0xba
 800812a:	4b0c      	ldr	r3, [pc, #48]	@ (800815c <__multadd+0x84>)
 800812c:	480c      	ldr	r0, [pc, #48]	@ (8008160 <__multadd+0x88>)
 800812e:	f000 fd29 	bl	8008b84 <__assert_func>
 8008132:	6922      	ldr	r2, [r4, #16]
 8008134:	f104 010c 	add.w	r1, r4, #12
 8008138:	3202      	adds	r2, #2
 800813a:	0092      	lsls	r2, r2, #2
 800813c:	300c      	adds	r0, #12
 800813e:	f000 fd13 	bl	8008b68 <memcpy>
 8008142:	4621      	mov	r1, r4
 8008144:	4638      	mov	r0, r7
 8008146:	f7ff ffa5 	bl	8008094 <_Bfree>
 800814a:	4644      	mov	r4, r8
 800814c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008150:	3501      	adds	r5, #1
 8008152:	615e      	str	r6, [r3, #20]
 8008154:	6125      	str	r5, [r4, #16]
 8008156:	4620      	mov	r0, r4
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	080094d0 	.word	0x080094d0
 8008160:	080094e1 	.word	0x080094e1

08008164 <__hi0bits>:
 8008164:	4603      	mov	r3, r0
 8008166:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800816a:	bf3a      	itte	cc
 800816c:	0403      	lslcc	r3, r0, #16
 800816e:	2010      	movcc	r0, #16
 8008170:	2000      	movcs	r0, #0
 8008172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008176:	bf3c      	itt	cc
 8008178:	021b      	lslcc	r3, r3, #8
 800817a:	3008      	addcc	r0, #8
 800817c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008180:	bf3c      	itt	cc
 8008182:	011b      	lslcc	r3, r3, #4
 8008184:	3004      	addcc	r0, #4
 8008186:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800818a:	bf3c      	itt	cc
 800818c:	009b      	lslcc	r3, r3, #2
 800818e:	3002      	addcc	r0, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	db05      	blt.n	80081a0 <__hi0bits+0x3c>
 8008194:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008198:	f100 0001 	add.w	r0, r0, #1
 800819c:	bf08      	it	eq
 800819e:	2020      	moveq	r0, #32
 80081a0:	4770      	bx	lr

080081a2 <__lo0bits>:
 80081a2:	6803      	ldr	r3, [r0, #0]
 80081a4:	4602      	mov	r2, r0
 80081a6:	f013 0007 	ands.w	r0, r3, #7
 80081aa:	d00b      	beq.n	80081c4 <__lo0bits+0x22>
 80081ac:	07d9      	lsls	r1, r3, #31
 80081ae:	d421      	bmi.n	80081f4 <__lo0bits+0x52>
 80081b0:	0798      	lsls	r0, r3, #30
 80081b2:	bf49      	itett	mi
 80081b4:	085b      	lsrmi	r3, r3, #1
 80081b6:	089b      	lsrpl	r3, r3, #2
 80081b8:	2001      	movmi	r0, #1
 80081ba:	6013      	strmi	r3, [r2, #0]
 80081bc:	bf5c      	itt	pl
 80081be:	2002      	movpl	r0, #2
 80081c0:	6013      	strpl	r3, [r2, #0]
 80081c2:	4770      	bx	lr
 80081c4:	b299      	uxth	r1, r3
 80081c6:	b909      	cbnz	r1, 80081cc <__lo0bits+0x2a>
 80081c8:	2010      	movs	r0, #16
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	b2d9      	uxtb	r1, r3
 80081ce:	b909      	cbnz	r1, 80081d4 <__lo0bits+0x32>
 80081d0:	3008      	adds	r0, #8
 80081d2:	0a1b      	lsrs	r3, r3, #8
 80081d4:	0719      	lsls	r1, r3, #28
 80081d6:	bf04      	itt	eq
 80081d8:	091b      	lsreq	r3, r3, #4
 80081da:	3004      	addeq	r0, #4
 80081dc:	0799      	lsls	r1, r3, #30
 80081de:	bf04      	itt	eq
 80081e0:	089b      	lsreq	r3, r3, #2
 80081e2:	3002      	addeq	r0, #2
 80081e4:	07d9      	lsls	r1, r3, #31
 80081e6:	d403      	bmi.n	80081f0 <__lo0bits+0x4e>
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	f100 0001 	add.w	r0, r0, #1
 80081ee:	d003      	beq.n	80081f8 <__lo0bits+0x56>
 80081f0:	6013      	str	r3, [r2, #0]
 80081f2:	4770      	bx	lr
 80081f4:	2000      	movs	r0, #0
 80081f6:	4770      	bx	lr
 80081f8:	2020      	movs	r0, #32
 80081fa:	4770      	bx	lr

080081fc <__i2b>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	460c      	mov	r4, r1
 8008200:	2101      	movs	r1, #1
 8008202:	f7ff ff07 	bl	8008014 <_Balloc>
 8008206:	4602      	mov	r2, r0
 8008208:	b928      	cbnz	r0, 8008216 <__i2b+0x1a>
 800820a:	f240 1145 	movw	r1, #325	@ 0x145
 800820e:	4b04      	ldr	r3, [pc, #16]	@ (8008220 <__i2b+0x24>)
 8008210:	4804      	ldr	r0, [pc, #16]	@ (8008224 <__i2b+0x28>)
 8008212:	f000 fcb7 	bl	8008b84 <__assert_func>
 8008216:	2301      	movs	r3, #1
 8008218:	6144      	str	r4, [r0, #20]
 800821a:	6103      	str	r3, [r0, #16]
 800821c:	bd10      	pop	{r4, pc}
 800821e:	bf00      	nop
 8008220:	080094d0 	.word	0x080094d0
 8008224:	080094e1 	.word	0x080094e1

08008228 <__multiply>:
 8008228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822c:	4614      	mov	r4, r2
 800822e:	690a      	ldr	r2, [r1, #16]
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	460f      	mov	r7, r1
 8008234:	429a      	cmp	r2, r3
 8008236:	bfa2      	ittt	ge
 8008238:	4623      	movge	r3, r4
 800823a:	460c      	movge	r4, r1
 800823c:	461f      	movge	r7, r3
 800823e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008242:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	6861      	ldr	r1, [r4, #4]
 800824a:	eb0a 0609 	add.w	r6, sl, r9
 800824e:	42b3      	cmp	r3, r6
 8008250:	b085      	sub	sp, #20
 8008252:	bfb8      	it	lt
 8008254:	3101      	addlt	r1, #1
 8008256:	f7ff fedd 	bl	8008014 <_Balloc>
 800825a:	b930      	cbnz	r0, 800826a <__multiply+0x42>
 800825c:	4602      	mov	r2, r0
 800825e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008262:	4b43      	ldr	r3, [pc, #268]	@ (8008370 <__multiply+0x148>)
 8008264:	4843      	ldr	r0, [pc, #268]	@ (8008374 <__multiply+0x14c>)
 8008266:	f000 fc8d 	bl	8008b84 <__assert_func>
 800826a:	f100 0514 	add.w	r5, r0, #20
 800826e:	462b      	mov	r3, r5
 8008270:	2200      	movs	r2, #0
 8008272:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008276:	4543      	cmp	r3, r8
 8008278:	d321      	bcc.n	80082be <__multiply+0x96>
 800827a:	f107 0114 	add.w	r1, r7, #20
 800827e:	f104 0214 	add.w	r2, r4, #20
 8008282:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008286:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800828a:	9302      	str	r3, [sp, #8]
 800828c:	1b13      	subs	r3, r2, r4
 800828e:	3b15      	subs	r3, #21
 8008290:	f023 0303 	bic.w	r3, r3, #3
 8008294:	3304      	adds	r3, #4
 8008296:	f104 0715 	add.w	r7, r4, #21
 800829a:	42ba      	cmp	r2, r7
 800829c:	bf38      	it	cc
 800829e:	2304      	movcc	r3, #4
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	9b02      	ldr	r3, [sp, #8]
 80082a4:	9103      	str	r1, [sp, #12]
 80082a6:	428b      	cmp	r3, r1
 80082a8:	d80c      	bhi.n	80082c4 <__multiply+0x9c>
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	dd03      	ble.n	80082b6 <__multiply+0x8e>
 80082ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d05a      	beq.n	800836c <__multiply+0x144>
 80082b6:	6106      	str	r6, [r0, #16]
 80082b8:	b005      	add	sp, #20
 80082ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082be:	f843 2b04 	str.w	r2, [r3], #4
 80082c2:	e7d8      	b.n	8008276 <__multiply+0x4e>
 80082c4:	f8b1 a000 	ldrh.w	sl, [r1]
 80082c8:	f1ba 0f00 	cmp.w	sl, #0
 80082cc:	d023      	beq.n	8008316 <__multiply+0xee>
 80082ce:	46a9      	mov	r9, r5
 80082d0:	f04f 0c00 	mov.w	ip, #0
 80082d4:	f104 0e14 	add.w	lr, r4, #20
 80082d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082dc:	f8d9 3000 	ldr.w	r3, [r9]
 80082e0:	fa1f fb87 	uxth.w	fp, r7
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	fb0a 330b 	mla	r3, sl, fp, r3
 80082ea:	4463      	add	r3, ip
 80082ec:	f8d9 c000 	ldr.w	ip, [r9]
 80082f0:	0c3f      	lsrs	r7, r7, #16
 80082f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80082f6:	fb0a c707 	mla	r7, sl, r7, ip
 80082fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80082fe:	b29b      	uxth	r3, r3
 8008300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008304:	4572      	cmp	r2, lr
 8008306:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800830a:	f849 3b04 	str.w	r3, [r9], #4
 800830e:	d8e3      	bhi.n	80082d8 <__multiply+0xb0>
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	f845 c003 	str.w	ip, [r5, r3]
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	3104      	adds	r1, #4
 800831a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	d021      	beq.n	8008368 <__multiply+0x140>
 8008324:	46ae      	mov	lr, r5
 8008326:	f04f 0a00 	mov.w	sl, #0
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	f104 0c14 	add.w	ip, r4, #20
 8008330:	f8bc b000 	ldrh.w	fp, [ip]
 8008334:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008338:	b29b      	uxth	r3, r3
 800833a:	fb09 770b 	mla	r7, r9, fp, r7
 800833e:	4457      	add	r7, sl
 8008340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008344:	f84e 3b04 	str.w	r3, [lr], #4
 8008348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800834c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008350:	f8be 3000 	ldrh.w	r3, [lr]
 8008354:	4562      	cmp	r2, ip
 8008356:	fb09 330a 	mla	r3, r9, sl, r3
 800835a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800835e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008362:	d8e5      	bhi.n	8008330 <__multiply+0x108>
 8008364:	9f01      	ldr	r7, [sp, #4]
 8008366:	51eb      	str	r3, [r5, r7]
 8008368:	3504      	adds	r5, #4
 800836a:	e79a      	b.n	80082a2 <__multiply+0x7a>
 800836c:	3e01      	subs	r6, #1
 800836e:	e79c      	b.n	80082aa <__multiply+0x82>
 8008370:	080094d0 	.word	0x080094d0
 8008374:	080094e1 	.word	0x080094e1

08008378 <__pow5mult>:
 8008378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4615      	mov	r5, r2
 800837e:	f012 0203 	ands.w	r2, r2, #3
 8008382:	4607      	mov	r7, r0
 8008384:	460e      	mov	r6, r1
 8008386:	d007      	beq.n	8008398 <__pow5mult+0x20>
 8008388:	4c25      	ldr	r4, [pc, #148]	@ (8008420 <__pow5mult+0xa8>)
 800838a:	3a01      	subs	r2, #1
 800838c:	2300      	movs	r3, #0
 800838e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008392:	f7ff fea1 	bl	80080d8 <__multadd>
 8008396:	4606      	mov	r6, r0
 8008398:	10ad      	asrs	r5, r5, #2
 800839a:	d03d      	beq.n	8008418 <__pow5mult+0xa0>
 800839c:	69fc      	ldr	r4, [r7, #28]
 800839e:	b97c      	cbnz	r4, 80083c0 <__pow5mult+0x48>
 80083a0:	2010      	movs	r0, #16
 80083a2:	f7ff fd81 	bl	8007ea8 <malloc>
 80083a6:	4602      	mov	r2, r0
 80083a8:	61f8      	str	r0, [r7, #28]
 80083aa:	b928      	cbnz	r0, 80083b8 <__pow5mult+0x40>
 80083ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008424 <__pow5mult+0xac>)
 80083b2:	481d      	ldr	r0, [pc, #116]	@ (8008428 <__pow5mult+0xb0>)
 80083b4:	f000 fbe6 	bl	8008b84 <__assert_func>
 80083b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083bc:	6004      	str	r4, [r0, #0]
 80083be:	60c4      	str	r4, [r0, #12]
 80083c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083c8:	b94c      	cbnz	r4, 80083de <__pow5mult+0x66>
 80083ca:	f240 2171 	movw	r1, #625	@ 0x271
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff ff14 	bl	80081fc <__i2b>
 80083d4:	2300      	movs	r3, #0
 80083d6:	4604      	mov	r4, r0
 80083d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	07eb      	lsls	r3, r5, #31
 80083e4:	d50a      	bpl.n	80083fc <__pow5mult+0x84>
 80083e6:	4631      	mov	r1, r6
 80083e8:	4622      	mov	r2, r4
 80083ea:	4638      	mov	r0, r7
 80083ec:	f7ff ff1c 	bl	8008228 <__multiply>
 80083f0:	4680      	mov	r8, r0
 80083f2:	4631      	mov	r1, r6
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff fe4d 	bl	8008094 <_Bfree>
 80083fa:	4646      	mov	r6, r8
 80083fc:	106d      	asrs	r5, r5, #1
 80083fe:	d00b      	beq.n	8008418 <__pow5mult+0xa0>
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	b938      	cbnz	r0, 8008414 <__pow5mult+0x9c>
 8008404:	4622      	mov	r2, r4
 8008406:	4621      	mov	r1, r4
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff ff0d 	bl	8008228 <__multiply>
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	f8c0 9000 	str.w	r9, [r0]
 8008414:	4604      	mov	r4, r0
 8008416:	e7e4      	b.n	80083e2 <__pow5mult+0x6a>
 8008418:	4630      	mov	r0, r6
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	bf00      	nop
 8008420:	0800953c 	.word	0x0800953c
 8008424:	08009461 	.word	0x08009461
 8008428:	080094e1 	.word	0x080094e1

0800842c <__lshift>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	4607      	mov	r7, r0
 8008434:	4691      	mov	r9, r2
 8008436:	6923      	ldr	r3, [r4, #16]
 8008438:	6849      	ldr	r1, [r1, #4]
 800843a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800843e:	68a3      	ldr	r3, [r4, #8]
 8008440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008444:	f108 0601 	add.w	r6, r8, #1
 8008448:	42b3      	cmp	r3, r6
 800844a:	db0b      	blt.n	8008464 <__lshift+0x38>
 800844c:	4638      	mov	r0, r7
 800844e:	f7ff fde1 	bl	8008014 <_Balloc>
 8008452:	4605      	mov	r5, r0
 8008454:	b948      	cbnz	r0, 800846a <__lshift+0x3e>
 8008456:	4602      	mov	r2, r0
 8008458:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800845c:	4b27      	ldr	r3, [pc, #156]	@ (80084fc <__lshift+0xd0>)
 800845e:	4828      	ldr	r0, [pc, #160]	@ (8008500 <__lshift+0xd4>)
 8008460:	f000 fb90 	bl	8008b84 <__assert_func>
 8008464:	3101      	adds	r1, #1
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	e7ee      	b.n	8008448 <__lshift+0x1c>
 800846a:	2300      	movs	r3, #0
 800846c:	f100 0114 	add.w	r1, r0, #20
 8008470:	f100 0210 	add.w	r2, r0, #16
 8008474:	4618      	mov	r0, r3
 8008476:	4553      	cmp	r3, sl
 8008478:	db33      	blt.n	80084e2 <__lshift+0xb6>
 800847a:	6920      	ldr	r0, [r4, #16]
 800847c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008480:	f104 0314 	add.w	r3, r4, #20
 8008484:	f019 091f 	ands.w	r9, r9, #31
 8008488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800848c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008490:	d02b      	beq.n	80084ea <__lshift+0xbe>
 8008492:	468a      	mov	sl, r1
 8008494:	2200      	movs	r2, #0
 8008496:	f1c9 0e20 	rsb	lr, r9, #32
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	fa00 f009 	lsl.w	r0, r0, r9
 80084a0:	4310      	orrs	r0, r2
 80084a2:	f84a 0b04 	str.w	r0, [sl], #4
 80084a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084aa:	459c      	cmp	ip, r3
 80084ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80084b0:	d8f3      	bhi.n	800849a <__lshift+0x6e>
 80084b2:	ebac 0304 	sub.w	r3, ip, r4
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	f104 0015 	add.w	r0, r4, #21
 80084c2:	4584      	cmp	ip, r0
 80084c4:	bf38      	it	cc
 80084c6:	2304      	movcc	r3, #4
 80084c8:	50ca      	str	r2, [r1, r3]
 80084ca:	b10a      	cbz	r2, 80084d0 <__lshift+0xa4>
 80084cc:	f108 0602 	add.w	r6, r8, #2
 80084d0:	3e01      	subs	r6, #1
 80084d2:	4638      	mov	r0, r7
 80084d4:	4621      	mov	r1, r4
 80084d6:	612e      	str	r6, [r5, #16]
 80084d8:	f7ff fddc 	bl	8008094 <_Bfree>
 80084dc:	4628      	mov	r0, r5
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084e6:	3301      	adds	r3, #1
 80084e8:	e7c5      	b.n	8008476 <__lshift+0x4a>
 80084ea:	3904      	subs	r1, #4
 80084ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f0:	459c      	cmp	ip, r3
 80084f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80084f6:	d8f9      	bhi.n	80084ec <__lshift+0xc0>
 80084f8:	e7ea      	b.n	80084d0 <__lshift+0xa4>
 80084fa:	bf00      	nop
 80084fc:	080094d0 	.word	0x080094d0
 8008500:	080094e1 	.word	0x080094e1

08008504 <__mcmp>:
 8008504:	4603      	mov	r3, r0
 8008506:	690a      	ldr	r2, [r1, #16]
 8008508:	6900      	ldr	r0, [r0, #16]
 800850a:	b530      	push	{r4, r5, lr}
 800850c:	1a80      	subs	r0, r0, r2
 800850e:	d10e      	bne.n	800852e <__mcmp+0x2a>
 8008510:	3314      	adds	r3, #20
 8008512:	3114      	adds	r1, #20
 8008514:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008518:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800851c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008520:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008524:	4295      	cmp	r5, r2
 8008526:	d003      	beq.n	8008530 <__mcmp+0x2c>
 8008528:	d205      	bcs.n	8008536 <__mcmp+0x32>
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	bd30      	pop	{r4, r5, pc}
 8008530:	42a3      	cmp	r3, r4
 8008532:	d3f3      	bcc.n	800851c <__mcmp+0x18>
 8008534:	e7fb      	b.n	800852e <__mcmp+0x2a>
 8008536:	2001      	movs	r0, #1
 8008538:	e7f9      	b.n	800852e <__mcmp+0x2a>
	...

0800853c <__mdiff>:
 800853c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	4689      	mov	r9, r1
 8008542:	4606      	mov	r6, r0
 8008544:	4611      	mov	r1, r2
 8008546:	4648      	mov	r0, r9
 8008548:	4614      	mov	r4, r2
 800854a:	f7ff ffdb 	bl	8008504 <__mcmp>
 800854e:	1e05      	subs	r5, r0, #0
 8008550:	d112      	bne.n	8008578 <__mdiff+0x3c>
 8008552:	4629      	mov	r1, r5
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fd5d 	bl	8008014 <_Balloc>
 800855a:	4602      	mov	r2, r0
 800855c:	b928      	cbnz	r0, 800856a <__mdiff+0x2e>
 800855e:	f240 2137 	movw	r1, #567	@ 0x237
 8008562:	4b3e      	ldr	r3, [pc, #248]	@ (800865c <__mdiff+0x120>)
 8008564:	483e      	ldr	r0, [pc, #248]	@ (8008660 <__mdiff+0x124>)
 8008566:	f000 fb0d 	bl	8008b84 <__assert_func>
 800856a:	2301      	movs	r3, #1
 800856c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008570:	4610      	mov	r0, r2
 8008572:	b003      	add	sp, #12
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	bfbc      	itt	lt
 800857a:	464b      	movlt	r3, r9
 800857c:	46a1      	movlt	r9, r4
 800857e:	4630      	mov	r0, r6
 8008580:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008584:	bfba      	itte	lt
 8008586:	461c      	movlt	r4, r3
 8008588:	2501      	movlt	r5, #1
 800858a:	2500      	movge	r5, #0
 800858c:	f7ff fd42 	bl	8008014 <_Balloc>
 8008590:	4602      	mov	r2, r0
 8008592:	b918      	cbnz	r0, 800859c <__mdiff+0x60>
 8008594:	f240 2145 	movw	r1, #581	@ 0x245
 8008598:	4b30      	ldr	r3, [pc, #192]	@ (800865c <__mdiff+0x120>)
 800859a:	e7e3      	b.n	8008564 <__mdiff+0x28>
 800859c:	f100 0b14 	add.w	fp, r0, #20
 80085a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085a4:	f109 0310 	add.w	r3, r9, #16
 80085a8:	60c5      	str	r5, [r0, #12]
 80085aa:	f04f 0c00 	mov.w	ip, #0
 80085ae:	f109 0514 	add.w	r5, r9, #20
 80085b2:	46d9      	mov	r9, fp
 80085b4:	6926      	ldr	r6, [r4, #16]
 80085b6:	f104 0e14 	add.w	lr, r4, #20
 80085ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085c2:	9301      	str	r3, [sp, #4]
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085ce:	b281      	uxth	r1, r0
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	fa1f f38a 	uxth.w	r3, sl
 80085d6:	1a5b      	subs	r3, r3, r1
 80085d8:	0c00      	lsrs	r0, r0, #16
 80085da:	4463      	add	r3, ip
 80085dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085ea:	4576      	cmp	r6, lr
 80085ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085f0:	f849 3b04 	str.w	r3, [r9], #4
 80085f4:	d8e6      	bhi.n	80085c4 <__mdiff+0x88>
 80085f6:	1b33      	subs	r3, r6, r4
 80085f8:	3b15      	subs	r3, #21
 80085fa:	f023 0303 	bic.w	r3, r3, #3
 80085fe:	3415      	adds	r4, #21
 8008600:	3304      	adds	r3, #4
 8008602:	42a6      	cmp	r6, r4
 8008604:	bf38      	it	cc
 8008606:	2304      	movcc	r3, #4
 8008608:	441d      	add	r5, r3
 800860a:	445b      	add	r3, fp
 800860c:	461e      	mov	r6, r3
 800860e:	462c      	mov	r4, r5
 8008610:	4544      	cmp	r4, r8
 8008612:	d30e      	bcc.n	8008632 <__mdiff+0xf6>
 8008614:	f108 0103 	add.w	r1, r8, #3
 8008618:	1b49      	subs	r1, r1, r5
 800861a:	f021 0103 	bic.w	r1, r1, #3
 800861e:	3d03      	subs	r5, #3
 8008620:	45a8      	cmp	r8, r5
 8008622:	bf38      	it	cc
 8008624:	2100      	movcc	r1, #0
 8008626:	440b      	add	r3, r1
 8008628:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800862c:	b199      	cbz	r1, 8008656 <__mdiff+0x11a>
 800862e:	6117      	str	r7, [r2, #16]
 8008630:	e79e      	b.n	8008570 <__mdiff+0x34>
 8008632:	46e6      	mov	lr, ip
 8008634:	f854 1b04 	ldr.w	r1, [r4], #4
 8008638:	fa1f fc81 	uxth.w	ip, r1
 800863c:	44f4      	add	ip, lr
 800863e:	0c08      	lsrs	r0, r1, #16
 8008640:	4471      	add	r1, lr
 8008642:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008646:	b289      	uxth	r1, r1
 8008648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800864c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008650:	f846 1b04 	str.w	r1, [r6], #4
 8008654:	e7dc      	b.n	8008610 <__mdiff+0xd4>
 8008656:	3f01      	subs	r7, #1
 8008658:	e7e6      	b.n	8008628 <__mdiff+0xec>
 800865a:	bf00      	nop
 800865c:	080094d0 	.word	0x080094d0
 8008660:	080094e1 	.word	0x080094e1

08008664 <__d2b>:
 8008664:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008668:	2101      	movs	r1, #1
 800866a:	4690      	mov	r8, r2
 800866c:	4699      	mov	r9, r3
 800866e:	9e08      	ldr	r6, [sp, #32]
 8008670:	f7ff fcd0 	bl	8008014 <_Balloc>
 8008674:	4604      	mov	r4, r0
 8008676:	b930      	cbnz	r0, 8008686 <__d2b+0x22>
 8008678:	4602      	mov	r2, r0
 800867a:	f240 310f 	movw	r1, #783	@ 0x30f
 800867e:	4b23      	ldr	r3, [pc, #140]	@ (800870c <__d2b+0xa8>)
 8008680:	4823      	ldr	r0, [pc, #140]	@ (8008710 <__d2b+0xac>)
 8008682:	f000 fa7f 	bl	8008b84 <__assert_func>
 8008686:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800868a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800868e:	b10d      	cbz	r5, 8008694 <__d2b+0x30>
 8008690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	f1b8 0300 	subs.w	r3, r8, #0
 800869a:	d024      	beq.n	80086e6 <__d2b+0x82>
 800869c:	4668      	mov	r0, sp
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	f7ff fd7f 	bl	80081a2 <__lo0bits>
 80086a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086a8:	b1d8      	cbz	r0, 80086e2 <__d2b+0x7e>
 80086aa:	f1c0 0320 	rsb	r3, r0, #32
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	430b      	orrs	r3, r1
 80086b4:	40c2      	lsrs	r2, r0
 80086b6:	6163      	str	r3, [r4, #20]
 80086b8:	9201      	str	r2, [sp, #4]
 80086ba:	9b01      	ldr	r3, [sp, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	bf0c      	ite	eq
 80086c0:	2201      	moveq	r2, #1
 80086c2:	2202      	movne	r2, #2
 80086c4:	61a3      	str	r3, [r4, #24]
 80086c6:	6122      	str	r2, [r4, #16]
 80086c8:	b1ad      	cbz	r5, 80086f6 <__d2b+0x92>
 80086ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086ce:	4405      	add	r5, r0
 80086d0:	6035      	str	r5, [r6, #0]
 80086d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086d8:	6018      	str	r0, [r3, #0]
 80086da:	4620      	mov	r0, r4
 80086dc:	b002      	add	sp, #8
 80086de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80086e2:	6161      	str	r1, [r4, #20]
 80086e4:	e7e9      	b.n	80086ba <__d2b+0x56>
 80086e6:	a801      	add	r0, sp, #4
 80086e8:	f7ff fd5b 	bl	80081a2 <__lo0bits>
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	6163      	str	r3, [r4, #20]
 80086f2:	3020      	adds	r0, #32
 80086f4:	e7e7      	b.n	80086c6 <__d2b+0x62>
 80086f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086fe:	6030      	str	r0, [r6, #0]
 8008700:	6918      	ldr	r0, [r3, #16]
 8008702:	f7ff fd2f 	bl	8008164 <__hi0bits>
 8008706:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800870a:	e7e4      	b.n	80086d6 <__d2b+0x72>
 800870c:	080094d0 	.word	0x080094d0
 8008710:	080094e1 	.word	0x080094e1

08008714 <__ssputs_r>:
 8008714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	461f      	mov	r7, r3
 800871a:	688e      	ldr	r6, [r1, #8]
 800871c:	4682      	mov	sl, r0
 800871e:	42be      	cmp	r6, r7
 8008720:	460c      	mov	r4, r1
 8008722:	4690      	mov	r8, r2
 8008724:	680b      	ldr	r3, [r1, #0]
 8008726:	d82d      	bhi.n	8008784 <__ssputs_r+0x70>
 8008728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800872c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008730:	d026      	beq.n	8008780 <__ssputs_r+0x6c>
 8008732:	6965      	ldr	r5, [r4, #20]
 8008734:	6909      	ldr	r1, [r1, #16]
 8008736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800873a:	eba3 0901 	sub.w	r9, r3, r1
 800873e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008742:	1c7b      	adds	r3, r7, #1
 8008744:	444b      	add	r3, r9
 8008746:	106d      	asrs	r5, r5, #1
 8008748:	429d      	cmp	r5, r3
 800874a:	bf38      	it	cc
 800874c:	461d      	movcc	r5, r3
 800874e:	0553      	lsls	r3, r2, #21
 8008750:	d527      	bpl.n	80087a2 <__ssputs_r+0x8e>
 8008752:	4629      	mov	r1, r5
 8008754:	f7ff fbd2 	bl	8007efc <_malloc_r>
 8008758:	4606      	mov	r6, r0
 800875a:	b360      	cbz	r0, 80087b6 <__ssputs_r+0xa2>
 800875c:	464a      	mov	r2, r9
 800875e:	6921      	ldr	r1, [r4, #16]
 8008760:	f000 fa02 	bl	8008b68 <memcpy>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800876a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	6126      	str	r6, [r4, #16]
 8008772:	444e      	add	r6, r9
 8008774:	6026      	str	r6, [r4, #0]
 8008776:	463e      	mov	r6, r7
 8008778:	6165      	str	r5, [r4, #20]
 800877a:	eba5 0509 	sub.w	r5, r5, r9
 800877e:	60a5      	str	r5, [r4, #8]
 8008780:	42be      	cmp	r6, r7
 8008782:	d900      	bls.n	8008786 <__ssputs_r+0x72>
 8008784:	463e      	mov	r6, r7
 8008786:	4632      	mov	r2, r6
 8008788:	4641      	mov	r1, r8
 800878a:	6820      	ldr	r0, [r4, #0]
 800878c:	f000 f9c2 	bl	8008b14 <memmove>
 8008790:	2000      	movs	r0, #0
 8008792:	68a3      	ldr	r3, [r4, #8]
 8008794:	1b9b      	subs	r3, r3, r6
 8008796:	60a3      	str	r3, [r4, #8]
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	4433      	add	r3, r6
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a2:	462a      	mov	r2, r5
 80087a4:	f000 fa32 	bl	8008c0c <_realloc_r>
 80087a8:	4606      	mov	r6, r0
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d1e0      	bne.n	8008770 <__ssputs_r+0x5c>
 80087ae:	4650      	mov	r0, sl
 80087b0:	6921      	ldr	r1, [r4, #16]
 80087b2:	f7ff fb31 	bl	8007e18 <_free_r>
 80087b6:	230c      	movs	r3, #12
 80087b8:	f8ca 3000 	str.w	r3, [sl]
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	f04f 30ff 	mov.w	r0, #4294967295
 80087c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c6:	81a3      	strh	r3, [r4, #12]
 80087c8:	e7e9      	b.n	800879e <__ssputs_r+0x8a>
	...

080087cc <_svfiprintf_r>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	4698      	mov	r8, r3
 80087d2:	898b      	ldrh	r3, [r1, #12]
 80087d4:	4607      	mov	r7, r0
 80087d6:	061b      	lsls	r3, r3, #24
 80087d8:	460d      	mov	r5, r1
 80087da:	4614      	mov	r4, r2
 80087dc:	b09d      	sub	sp, #116	@ 0x74
 80087de:	d510      	bpl.n	8008802 <_svfiprintf_r+0x36>
 80087e0:	690b      	ldr	r3, [r1, #16]
 80087e2:	b973      	cbnz	r3, 8008802 <_svfiprintf_r+0x36>
 80087e4:	2140      	movs	r1, #64	@ 0x40
 80087e6:	f7ff fb89 	bl	8007efc <_malloc_r>
 80087ea:	6028      	str	r0, [r5, #0]
 80087ec:	6128      	str	r0, [r5, #16]
 80087ee:	b930      	cbnz	r0, 80087fe <_svfiprintf_r+0x32>
 80087f0:	230c      	movs	r3, #12
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	b01d      	add	sp, #116	@ 0x74
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	2340      	movs	r3, #64	@ 0x40
 8008800:	616b      	str	r3, [r5, #20]
 8008802:	2300      	movs	r3, #0
 8008804:	9309      	str	r3, [sp, #36]	@ 0x24
 8008806:	2320      	movs	r3, #32
 8008808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800880c:	2330      	movs	r3, #48	@ 0x30
 800880e:	f04f 0901 	mov.w	r9, #1
 8008812:	f8cd 800c 	str.w	r8, [sp, #12]
 8008816:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80089b0 <_svfiprintf_r+0x1e4>
 800881a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800881e:	4623      	mov	r3, r4
 8008820:	469a      	mov	sl, r3
 8008822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008826:	b10a      	cbz	r2, 800882c <_svfiprintf_r+0x60>
 8008828:	2a25      	cmp	r2, #37	@ 0x25
 800882a:	d1f9      	bne.n	8008820 <_svfiprintf_r+0x54>
 800882c:	ebba 0b04 	subs.w	fp, sl, r4
 8008830:	d00b      	beq.n	800884a <_svfiprintf_r+0x7e>
 8008832:	465b      	mov	r3, fp
 8008834:	4622      	mov	r2, r4
 8008836:	4629      	mov	r1, r5
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff ff6b 	bl	8008714 <__ssputs_r>
 800883e:	3001      	adds	r0, #1
 8008840:	f000 80a7 	beq.w	8008992 <_svfiprintf_r+0x1c6>
 8008844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008846:	445a      	add	r2, fp
 8008848:	9209      	str	r2, [sp, #36]	@ 0x24
 800884a:	f89a 3000 	ldrb.w	r3, [sl]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 809f 	beq.w	8008992 <_svfiprintf_r+0x1c6>
 8008854:	2300      	movs	r3, #0
 8008856:	f04f 32ff 	mov.w	r2, #4294967295
 800885a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885e:	f10a 0a01 	add.w	sl, sl, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	9307      	str	r3, [sp, #28]
 8008866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800886a:	931a      	str	r3, [sp, #104]	@ 0x68
 800886c:	4654      	mov	r4, sl
 800886e:	2205      	movs	r2, #5
 8008870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008874:	484e      	ldr	r0, [pc, #312]	@ (80089b0 <_svfiprintf_r+0x1e4>)
 8008876:	f7fe fc70 	bl	800715a <memchr>
 800887a:	9a04      	ldr	r2, [sp, #16]
 800887c:	b9d8      	cbnz	r0, 80088b6 <_svfiprintf_r+0xea>
 800887e:	06d0      	lsls	r0, r2, #27
 8008880:	bf44      	itt	mi
 8008882:	2320      	movmi	r3, #32
 8008884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008888:	0711      	lsls	r1, r2, #28
 800888a:	bf44      	itt	mi
 800888c:	232b      	movmi	r3, #43	@ 0x2b
 800888e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008892:	f89a 3000 	ldrb.w	r3, [sl]
 8008896:	2b2a      	cmp	r3, #42	@ 0x2a
 8008898:	d015      	beq.n	80088c6 <_svfiprintf_r+0xfa>
 800889a:	4654      	mov	r4, sl
 800889c:	2000      	movs	r0, #0
 800889e:	f04f 0c0a 	mov.w	ip, #10
 80088a2:	9a07      	ldr	r2, [sp, #28]
 80088a4:	4621      	mov	r1, r4
 80088a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088aa:	3b30      	subs	r3, #48	@ 0x30
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	d94b      	bls.n	8008948 <_svfiprintf_r+0x17c>
 80088b0:	b1b0      	cbz	r0, 80088e0 <_svfiprintf_r+0x114>
 80088b2:	9207      	str	r2, [sp, #28]
 80088b4:	e014      	b.n	80088e0 <_svfiprintf_r+0x114>
 80088b6:	eba0 0308 	sub.w	r3, r0, r8
 80088ba:	fa09 f303 	lsl.w	r3, r9, r3
 80088be:	4313      	orrs	r3, r2
 80088c0:	46a2      	mov	sl, r4
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	e7d2      	b.n	800886c <_svfiprintf_r+0xa0>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	1d19      	adds	r1, r3, #4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	9103      	str	r1, [sp, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bfbb      	ittet	lt
 80088d2:	425b      	neglt	r3, r3
 80088d4:	f042 0202 	orrlt.w	r2, r2, #2
 80088d8:	9307      	strge	r3, [sp, #28]
 80088da:	9307      	strlt	r3, [sp, #28]
 80088dc:	bfb8      	it	lt
 80088de:	9204      	strlt	r2, [sp, #16]
 80088e0:	7823      	ldrb	r3, [r4, #0]
 80088e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088e4:	d10a      	bne.n	80088fc <_svfiprintf_r+0x130>
 80088e6:	7863      	ldrb	r3, [r4, #1]
 80088e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ea:	d132      	bne.n	8008952 <_svfiprintf_r+0x186>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	3402      	adds	r4, #2
 80088f0:	1d1a      	adds	r2, r3, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	9203      	str	r2, [sp, #12]
 80088f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088fa:	9305      	str	r3, [sp, #20]
 80088fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80089b4 <_svfiprintf_r+0x1e8>
 8008900:	2203      	movs	r2, #3
 8008902:	4650      	mov	r0, sl
 8008904:	7821      	ldrb	r1, [r4, #0]
 8008906:	f7fe fc28 	bl	800715a <memchr>
 800890a:	b138      	cbz	r0, 800891c <_svfiprintf_r+0x150>
 800890c:	2240      	movs	r2, #64	@ 0x40
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	eba0 000a 	sub.w	r0, r0, sl
 8008914:	4082      	lsls	r2, r0
 8008916:	4313      	orrs	r3, r2
 8008918:	3401      	adds	r4, #1
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008920:	2206      	movs	r2, #6
 8008922:	4825      	ldr	r0, [pc, #148]	@ (80089b8 <_svfiprintf_r+0x1ec>)
 8008924:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008928:	f7fe fc17 	bl	800715a <memchr>
 800892c:	2800      	cmp	r0, #0
 800892e:	d036      	beq.n	800899e <_svfiprintf_r+0x1d2>
 8008930:	4b22      	ldr	r3, [pc, #136]	@ (80089bc <_svfiprintf_r+0x1f0>)
 8008932:	bb1b      	cbnz	r3, 800897c <_svfiprintf_r+0x1b0>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	3307      	adds	r3, #7
 8008938:	f023 0307 	bic.w	r3, r3, #7
 800893c:	3308      	adds	r3, #8
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008942:	4433      	add	r3, r6
 8008944:	9309      	str	r3, [sp, #36]	@ 0x24
 8008946:	e76a      	b.n	800881e <_svfiprintf_r+0x52>
 8008948:	460c      	mov	r4, r1
 800894a:	2001      	movs	r0, #1
 800894c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008950:	e7a8      	b.n	80088a4 <_svfiprintf_r+0xd8>
 8008952:	2300      	movs	r3, #0
 8008954:	f04f 0c0a 	mov.w	ip, #10
 8008958:	4619      	mov	r1, r3
 800895a:	3401      	adds	r4, #1
 800895c:	9305      	str	r3, [sp, #20]
 800895e:	4620      	mov	r0, r4
 8008960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008964:	3a30      	subs	r2, #48	@ 0x30
 8008966:	2a09      	cmp	r2, #9
 8008968:	d903      	bls.n	8008972 <_svfiprintf_r+0x1a6>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0c6      	beq.n	80088fc <_svfiprintf_r+0x130>
 800896e:	9105      	str	r1, [sp, #20]
 8008970:	e7c4      	b.n	80088fc <_svfiprintf_r+0x130>
 8008972:	4604      	mov	r4, r0
 8008974:	2301      	movs	r3, #1
 8008976:	fb0c 2101 	mla	r1, ip, r1, r2
 800897a:	e7f0      	b.n	800895e <_svfiprintf_r+0x192>
 800897c:	ab03      	add	r3, sp, #12
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	462a      	mov	r2, r5
 8008982:	4638      	mov	r0, r7
 8008984:	4b0e      	ldr	r3, [pc, #56]	@ (80089c0 <_svfiprintf_r+0x1f4>)
 8008986:	a904      	add	r1, sp, #16
 8008988:	f7fd fe84 	bl	8006694 <_printf_float>
 800898c:	1c42      	adds	r2, r0, #1
 800898e:	4606      	mov	r6, r0
 8008990:	d1d6      	bne.n	8008940 <_svfiprintf_r+0x174>
 8008992:	89ab      	ldrh	r3, [r5, #12]
 8008994:	065b      	lsls	r3, r3, #25
 8008996:	f53f af2d 	bmi.w	80087f4 <_svfiprintf_r+0x28>
 800899a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800899c:	e72c      	b.n	80087f8 <_svfiprintf_r+0x2c>
 800899e:	ab03      	add	r3, sp, #12
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	462a      	mov	r2, r5
 80089a4:	4638      	mov	r0, r7
 80089a6:	4b06      	ldr	r3, [pc, #24]	@ (80089c0 <_svfiprintf_r+0x1f4>)
 80089a8:	a904      	add	r1, sp, #16
 80089aa:	f7fe f911 	bl	8006bd0 <_printf_i>
 80089ae:	e7ed      	b.n	800898c <_svfiprintf_r+0x1c0>
 80089b0:	08009638 	.word	0x08009638
 80089b4:	0800963e 	.word	0x0800963e
 80089b8:	08009642 	.word	0x08009642
 80089bc:	08006695 	.word	0x08006695
 80089c0:	08008715 	.word	0x08008715

080089c4 <__sflush_r>:
 80089c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	0716      	lsls	r6, r2, #28
 80089cc:	4605      	mov	r5, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	d454      	bmi.n	8008a7c <__sflush_r+0xb8>
 80089d2:	684b      	ldr	r3, [r1, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dc02      	bgt.n	80089de <__sflush_r+0x1a>
 80089d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089da:	2b00      	cmp	r3, #0
 80089dc:	dd48      	ble.n	8008a70 <__sflush_r+0xac>
 80089de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089e0:	2e00      	cmp	r6, #0
 80089e2:	d045      	beq.n	8008a70 <__sflush_r+0xac>
 80089e4:	2300      	movs	r3, #0
 80089e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089ea:	682f      	ldr	r7, [r5, #0]
 80089ec:	6a21      	ldr	r1, [r4, #32]
 80089ee:	602b      	str	r3, [r5, #0]
 80089f0:	d030      	beq.n	8008a54 <__sflush_r+0x90>
 80089f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	0759      	lsls	r1, r3, #29
 80089f8:	d505      	bpl.n	8008a06 <__sflush_r+0x42>
 80089fa:	6863      	ldr	r3, [r4, #4]
 80089fc:	1ad2      	subs	r2, r2, r3
 80089fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a00:	b10b      	cbz	r3, 8008a06 <__sflush_r+0x42>
 8008a02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a04:	1ad2      	subs	r2, r2, r3
 8008a06:	2300      	movs	r3, #0
 8008a08:	4628      	mov	r0, r5
 8008a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a0c:	6a21      	ldr	r1, [r4, #32]
 8008a0e:	47b0      	blx	r6
 8008a10:	1c43      	adds	r3, r0, #1
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	d106      	bne.n	8008a24 <__sflush_r+0x60>
 8008a16:	6829      	ldr	r1, [r5, #0]
 8008a18:	291d      	cmp	r1, #29
 8008a1a:	d82b      	bhi.n	8008a74 <__sflush_r+0xb0>
 8008a1c:	4a28      	ldr	r2, [pc, #160]	@ (8008ac0 <__sflush_r+0xfc>)
 8008a1e:	410a      	asrs	r2, r1
 8008a20:	07d6      	lsls	r6, r2, #31
 8008a22:	d427      	bmi.n	8008a74 <__sflush_r+0xb0>
 8008a24:	2200      	movs	r2, #0
 8008a26:	6062      	str	r2, [r4, #4]
 8008a28:	6922      	ldr	r2, [r4, #16]
 8008a2a:	04d9      	lsls	r1, r3, #19
 8008a2c:	6022      	str	r2, [r4, #0]
 8008a2e:	d504      	bpl.n	8008a3a <__sflush_r+0x76>
 8008a30:	1c42      	adds	r2, r0, #1
 8008a32:	d101      	bne.n	8008a38 <__sflush_r+0x74>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b903      	cbnz	r3, 8008a3a <__sflush_r+0x76>
 8008a38:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a3c:	602f      	str	r7, [r5, #0]
 8008a3e:	b1b9      	cbz	r1, 8008a70 <__sflush_r+0xac>
 8008a40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a44:	4299      	cmp	r1, r3
 8008a46:	d002      	beq.n	8008a4e <__sflush_r+0x8a>
 8008a48:	4628      	mov	r0, r5
 8008a4a:	f7ff f9e5 	bl	8007e18 <_free_r>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a52:	e00d      	b.n	8008a70 <__sflush_r+0xac>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b0      	blx	r6
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	1c50      	adds	r0, r2, #1
 8008a5e:	d1c9      	bne.n	80089f4 <__sflush_r+0x30>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d0c6      	beq.n	80089f4 <__sflush_r+0x30>
 8008a66:	2b1d      	cmp	r3, #29
 8008a68:	d001      	beq.n	8008a6e <__sflush_r+0xaa>
 8008a6a:	2b16      	cmp	r3, #22
 8008a6c:	d11d      	bne.n	8008aaa <__sflush_r+0xe6>
 8008a6e:	602f      	str	r7, [r5, #0]
 8008a70:	2000      	movs	r0, #0
 8008a72:	e021      	b.n	8008ab8 <__sflush_r+0xf4>
 8008a74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a78:	b21b      	sxth	r3, r3
 8008a7a:	e01a      	b.n	8008ab2 <__sflush_r+0xee>
 8008a7c:	690f      	ldr	r7, [r1, #16]
 8008a7e:	2f00      	cmp	r7, #0
 8008a80:	d0f6      	beq.n	8008a70 <__sflush_r+0xac>
 8008a82:	0793      	lsls	r3, r2, #30
 8008a84:	bf18      	it	ne
 8008a86:	2300      	movne	r3, #0
 8008a88:	680e      	ldr	r6, [r1, #0]
 8008a8a:	bf08      	it	eq
 8008a8c:	694b      	ldreq	r3, [r1, #20]
 8008a8e:	1bf6      	subs	r6, r6, r7
 8008a90:	600f      	str	r7, [r1, #0]
 8008a92:	608b      	str	r3, [r1, #8]
 8008a94:	2e00      	cmp	r6, #0
 8008a96:	ddeb      	ble.n	8008a70 <__sflush_r+0xac>
 8008a98:	4633      	mov	r3, r6
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	6a21      	ldr	r1, [r4, #32]
 8008aa0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008aa4:	47e0      	blx	ip
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	dc07      	bgt.n	8008aba <__sflush_r+0xf6>
 8008aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008aba:	4407      	add	r7, r0
 8008abc:	1a36      	subs	r6, r6, r0
 8008abe:	e7e9      	b.n	8008a94 <__sflush_r+0xd0>
 8008ac0:	dfbffffe 	.word	0xdfbffffe

08008ac4 <_fflush_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	690b      	ldr	r3, [r1, #16]
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b913      	cbnz	r3, 8008ad4 <_fflush_r+0x10>
 8008ace:	2500      	movs	r5, #0
 8008ad0:	4628      	mov	r0, r5
 8008ad2:	bd38      	pop	{r3, r4, r5, pc}
 8008ad4:	b118      	cbz	r0, 8008ade <_fflush_r+0x1a>
 8008ad6:	6a03      	ldr	r3, [r0, #32]
 8008ad8:	b90b      	cbnz	r3, 8008ade <_fflush_r+0x1a>
 8008ada:	f7fe fa25 	bl	8006f28 <__sinit>
 8008ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d0f3      	beq.n	8008ace <_fflush_r+0xa>
 8008ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ae8:	07d0      	lsls	r0, r2, #31
 8008aea:	d404      	bmi.n	8008af6 <_fflush_r+0x32>
 8008aec:	0599      	lsls	r1, r3, #22
 8008aee:	d402      	bmi.n	8008af6 <_fflush_r+0x32>
 8008af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008af2:	f7fe fb30 	bl	8007156 <__retarget_lock_acquire_recursive>
 8008af6:	4628      	mov	r0, r5
 8008af8:	4621      	mov	r1, r4
 8008afa:	f7ff ff63 	bl	80089c4 <__sflush_r>
 8008afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b00:	4605      	mov	r5, r0
 8008b02:	07da      	lsls	r2, r3, #31
 8008b04:	d4e4      	bmi.n	8008ad0 <_fflush_r+0xc>
 8008b06:	89a3      	ldrh	r3, [r4, #12]
 8008b08:	059b      	lsls	r3, r3, #22
 8008b0a:	d4e1      	bmi.n	8008ad0 <_fflush_r+0xc>
 8008b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b0e:	f7fe fb23 	bl	8007158 <__retarget_lock_release_recursive>
 8008b12:	e7dd      	b.n	8008ad0 <_fflush_r+0xc>

08008b14 <memmove>:
 8008b14:	4288      	cmp	r0, r1
 8008b16:	b510      	push	{r4, lr}
 8008b18:	eb01 0402 	add.w	r4, r1, r2
 8008b1c:	d902      	bls.n	8008b24 <memmove+0x10>
 8008b1e:	4284      	cmp	r4, r0
 8008b20:	4623      	mov	r3, r4
 8008b22:	d807      	bhi.n	8008b34 <memmove+0x20>
 8008b24:	1e43      	subs	r3, r0, #1
 8008b26:	42a1      	cmp	r1, r4
 8008b28:	d008      	beq.n	8008b3c <memmove+0x28>
 8008b2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b32:	e7f8      	b.n	8008b26 <memmove+0x12>
 8008b34:	4601      	mov	r1, r0
 8008b36:	4402      	add	r2, r0
 8008b38:	428a      	cmp	r2, r1
 8008b3a:	d100      	bne.n	8008b3e <memmove+0x2a>
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b46:	e7f7      	b.n	8008b38 <memmove+0x24>

08008b48 <_sbrk_r>:
 8008b48:	b538      	push	{r3, r4, r5, lr}
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	4d05      	ldr	r5, [pc, #20]	@ (8008b64 <_sbrk_r+0x1c>)
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	602b      	str	r3, [r5, #0]
 8008b54:	f7fb fa6e 	bl	8004034 <_sbrk>
 8008b58:	1c43      	adds	r3, r0, #1
 8008b5a:	d102      	bne.n	8008b62 <_sbrk_r+0x1a>
 8008b5c:	682b      	ldr	r3, [r5, #0]
 8008b5e:	b103      	cbz	r3, 8008b62 <_sbrk_r+0x1a>
 8008b60:	6023      	str	r3, [r4, #0]
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	20000f48 	.word	0x20000f48

08008b68 <memcpy>:
 8008b68:	440a      	add	r2, r1
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b70:	d100      	bne.n	8008b74 <memcpy+0xc>
 8008b72:	4770      	bx	lr
 8008b74:	b510      	push	{r4, lr}
 8008b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b7a:	4291      	cmp	r1, r2
 8008b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b80:	d1f9      	bne.n	8008b76 <memcpy+0xe>
 8008b82:	bd10      	pop	{r4, pc}

08008b84 <__assert_func>:
 8008b84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b86:	4614      	mov	r4, r2
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b09      	ldr	r3, [pc, #36]	@ (8008bb0 <__assert_func+0x2c>)
 8008b8c:	4605      	mov	r5, r0
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68d8      	ldr	r0, [r3, #12]
 8008b92:	b954      	cbnz	r4, 8008baa <__assert_func+0x26>
 8008b94:	4b07      	ldr	r3, [pc, #28]	@ (8008bb4 <__assert_func+0x30>)
 8008b96:	461c      	mov	r4, r3
 8008b98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b9c:	9100      	str	r1, [sp, #0]
 8008b9e:	462b      	mov	r3, r5
 8008ba0:	4905      	ldr	r1, [pc, #20]	@ (8008bb8 <__assert_func+0x34>)
 8008ba2:	f000 f86f 	bl	8008c84 <fiprintf>
 8008ba6:	f000 f87f 	bl	8008ca8 <abort>
 8008baa:	4b04      	ldr	r3, [pc, #16]	@ (8008bbc <__assert_func+0x38>)
 8008bac:	e7f4      	b.n	8008b98 <__assert_func+0x14>
 8008bae:	bf00      	nop
 8008bb0:	200000d8 	.word	0x200000d8
 8008bb4:	0800968e 	.word	0x0800968e
 8008bb8:	08009660 	.word	0x08009660
 8008bbc:	08009653 	.word	0x08009653

08008bc0 <_calloc_r>:
 8008bc0:	b570      	push	{r4, r5, r6, lr}
 8008bc2:	fba1 5402 	umull	r5, r4, r1, r2
 8008bc6:	b93c      	cbnz	r4, 8008bd8 <_calloc_r+0x18>
 8008bc8:	4629      	mov	r1, r5
 8008bca:	f7ff f997 	bl	8007efc <_malloc_r>
 8008bce:	4606      	mov	r6, r0
 8008bd0:	b928      	cbnz	r0, 8008bde <_calloc_r+0x1e>
 8008bd2:	2600      	movs	r6, #0
 8008bd4:	4630      	mov	r0, r6
 8008bd6:	bd70      	pop	{r4, r5, r6, pc}
 8008bd8:	220c      	movs	r2, #12
 8008bda:	6002      	str	r2, [r0, #0]
 8008bdc:	e7f9      	b.n	8008bd2 <_calloc_r+0x12>
 8008bde:	462a      	mov	r2, r5
 8008be0:	4621      	mov	r1, r4
 8008be2:	f7fe fa3a 	bl	800705a <memset>
 8008be6:	e7f5      	b.n	8008bd4 <_calloc_r+0x14>

08008be8 <__ascii_mbtowc>:
 8008be8:	b082      	sub	sp, #8
 8008bea:	b901      	cbnz	r1, 8008bee <__ascii_mbtowc+0x6>
 8008bec:	a901      	add	r1, sp, #4
 8008bee:	b142      	cbz	r2, 8008c02 <__ascii_mbtowc+0x1a>
 8008bf0:	b14b      	cbz	r3, 8008c06 <__ascii_mbtowc+0x1e>
 8008bf2:	7813      	ldrb	r3, [r2, #0]
 8008bf4:	600b      	str	r3, [r1, #0]
 8008bf6:	7812      	ldrb	r2, [r2, #0]
 8008bf8:	1e10      	subs	r0, r2, #0
 8008bfa:	bf18      	it	ne
 8008bfc:	2001      	movne	r0, #1
 8008bfe:	b002      	add	sp, #8
 8008c00:	4770      	bx	lr
 8008c02:	4610      	mov	r0, r2
 8008c04:	e7fb      	b.n	8008bfe <__ascii_mbtowc+0x16>
 8008c06:	f06f 0001 	mvn.w	r0, #1
 8008c0a:	e7f8      	b.n	8008bfe <__ascii_mbtowc+0x16>

08008c0c <_realloc_r>:
 8008c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c10:	4680      	mov	r8, r0
 8008c12:	4615      	mov	r5, r2
 8008c14:	460c      	mov	r4, r1
 8008c16:	b921      	cbnz	r1, 8008c22 <_realloc_r+0x16>
 8008c18:	4611      	mov	r1, r2
 8008c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1e:	f7ff b96d 	b.w	8007efc <_malloc_r>
 8008c22:	b92a      	cbnz	r2, 8008c30 <_realloc_r+0x24>
 8008c24:	f7ff f8f8 	bl	8007e18 <_free_r>
 8008c28:	2400      	movs	r4, #0
 8008c2a:	4620      	mov	r0, r4
 8008c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c30:	f000 f841 	bl	8008cb6 <_malloc_usable_size_r>
 8008c34:	4285      	cmp	r5, r0
 8008c36:	4606      	mov	r6, r0
 8008c38:	d802      	bhi.n	8008c40 <_realloc_r+0x34>
 8008c3a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c3e:	d8f4      	bhi.n	8008c2a <_realloc_r+0x1e>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4640      	mov	r0, r8
 8008c44:	f7ff f95a 	bl	8007efc <_malloc_r>
 8008c48:	4607      	mov	r7, r0
 8008c4a:	2800      	cmp	r0, #0
 8008c4c:	d0ec      	beq.n	8008c28 <_realloc_r+0x1c>
 8008c4e:	42b5      	cmp	r5, r6
 8008c50:	462a      	mov	r2, r5
 8008c52:	4621      	mov	r1, r4
 8008c54:	bf28      	it	cs
 8008c56:	4632      	movcs	r2, r6
 8008c58:	f7ff ff86 	bl	8008b68 <memcpy>
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	4640      	mov	r0, r8
 8008c60:	f7ff f8da 	bl	8007e18 <_free_r>
 8008c64:	463c      	mov	r4, r7
 8008c66:	e7e0      	b.n	8008c2a <_realloc_r+0x1e>

08008c68 <__ascii_wctomb>:
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	b141      	cbz	r1, 8008c80 <__ascii_wctomb+0x18>
 8008c6e:	2aff      	cmp	r2, #255	@ 0xff
 8008c70:	d904      	bls.n	8008c7c <__ascii_wctomb+0x14>
 8008c72:	228a      	movs	r2, #138	@ 0x8a
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	4770      	bx	lr
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	700a      	strb	r2, [r1, #0]
 8008c80:	4770      	bx	lr
	...

08008c84 <fiprintf>:
 8008c84:	b40e      	push	{r1, r2, r3}
 8008c86:	b503      	push	{r0, r1, lr}
 8008c88:	4601      	mov	r1, r0
 8008c8a:	ab03      	add	r3, sp, #12
 8008c8c:	4805      	ldr	r0, [pc, #20]	@ (8008ca4 <fiprintf+0x20>)
 8008c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c92:	6800      	ldr	r0, [r0, #0]
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	f000 f83d 	bl	8008d14 <_vfiprintf_r>
 8008c9a:	b002      	add	sp, #8
 8008c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ca0:	b003      	add	sp, #12
 8008ca2:	4770      	bx	lr
 8008ca4:	200000d8 	.word	0x200000d8

08008ca8 <abort>:
 8008ca8:	2006      	movs	r0, #6
 8008caa:	b508      	push	{r3, lr}
 8008cac:	f000 fa06 	bl	80090bc <raise>
 8008cb0:	2001      	movs	r0, #1
 8008cb2:	f7fb f94a 	bl	8003f4a <_exit>

08008cb6 <_malloc_usable_size_r>:
 8008cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cba:	1f18      	subs	r0, r3, #4
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	bfbc      	itt	lt
 8008cc0:	580b      	ldrlt	r3, [r1, r0]
 8008cc2:	18c0      	addlt	r0, r0, r3
 8008cc4:	4770      	bx	lr

08008cc6 <__sfputc_r>:
 8008cc6:	6893      	ldr	r3, [r2, #8]
 8008cc8:	b410      	push	{r4}
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	6093      	str	r3, [r2, #8]
 8008cd0:	da07      	bge.n	8008ce2 <__sfputc_r+0x1c>
 8008cd2:	6994      	ldr	r4, [r2, #24]
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	db01      	blt.n	8008cdc <__sfputc_r+0x16>
 8008cd8:	290a      	cmp	r1, #10
 8008cda:	d102      	bne.n	8008ce2 <__sfputc_r+0x1c>
 8008cdc:	bc10      	pop	{r4}
 8008cde:	f000 b931 	b.w	8008f44 <__swbuf_r>
 8008ce2:	6813      	ldr	r3, [r2, #0]
 8008ce4:	1c58      	adds	r0, r3, #1
 8008ce6:	6010      	str	r0, [r2, #0]
 8008ce8:	7019      	strb	r1, [r3, #0]
 8008cea:	4608      	mov	r0, r1
 8008cec:	bc10      	pop	{r4}
 8008cee:	4770      	bx	lr

08008cf0 <__sfputs_r>:
 8008cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	460f      	mov	r7, r1
 8008cf6:	4614      	mov	r4, r2
 8008cf8:	18d5      	adds	r5, r2, r3
 8008cfa:	42ac      	cmp	r4, r5
 8008cfc:	d101      	bne.n	8008d02 <__sfputs_r+0x12>
 8008cfe:	2000      	movs	r0, #0
 8008d00:	e007      	b.n	8008d12 <__sfputs_r+0x22>
 8008d02:	463a      	mov	r2, r7
 8008d04:	4630      	mov	r0, r6
 8008d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d0a:	f7ff ffdc 	bl	8008cc6 <__sfputc_r>
 8008d0e:	1c43      	adds	r3, r0, #1
 8008d10:	d1f3      	bne.n	8008cfa <__sfputs_r+0xa>
 8008d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d14 <_vfiprintf_r>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	460d      	mov	r5, r1
 8008d1a:	4614      	mov	r4, r2
 8008d1c:	4698      	mov	r8, r3
 8008d1e:	4606      	mov	r6, r0
 8008d20:	b09d      	sub	sp, #116	@ 0x74
 8008d22:	b118      	cbz	r0, 8008d2c <_vfiprintf_r+0x18>
 8008d24:	6a03      	ldr	r3, [r0, #32]
 8008d26:	b90b      	cbnz	r3, 8008d2c <_vfiprintf_r+0x18>
 8008d28:	f7fe f8fe 	bl	8006f28 <__sinit>
 8008d2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d2e:	07d9      	lsls	r1, r3, #31
 8008d30:	d405      	bmi.n	8008d3e <_vfiprintf_r+0x2a>
 8008d32:	89ab      	ldrh	r3, [r5, #12]
 8008d34:	059a      	lsls	r2, r3, #22
 8008d36:	d402      	bmi.n	8008d3e <_vfiprintf_r+0x2a>
 8008d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d3a:	f7fe fa0c 	bl	8007156 <__retarget_lock_acquire_recursive>
 8008d3e:	89ab      	ldrh	r3, [r5, #12]
 8008d40:	071b      	lsls	r3, r3, #28
 8008d42:	d501      	bpl.n	8008d48 <_vfiprintf_r+0x34>
 8008d44:	692b      	ldr	r3, [r5, #16]
 8008d46:	b99b      	cbnz	r3, 8008d70 <_vfiprintf_r+0x5c>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f000 f938 	bl	8008fc0 <__swsetup_r>
 8008d50:	b170      	cbz	r0, 8008d70 <_vfiprintf_r+0x5c>
 8008d52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d54:	07dc      	lsls	r4, r3, #31
 8008d56:	d504      	bpl.n	8008d62 <_vfiprintf_r+0x4e>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	b01d      	add	sp, #116	@ 0x74
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d62:	89ab      	ldrh	r3, [r5, #12]
 8008d64:	0598      	lsls	r0, r3, #22
 8008d66:	d4f7      	bmi.n	8008d58 <_vfiprintf_r+0x44>
 8008d68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d6a:	f7fe f9f5 	bl	8007158 <__retarget_lock_release_recursive>
 8008d6e:	e7f3      	b.n	8008d58 <_vfiprintf_r+0x44>
 8008d70:	2300      	movs	r3, #0
 8008d72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d74:	2320      	movs	r3, #32
 8008d76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d7a:	2330      	movs	r3, #48	@ 0x30
 8008d7c:	f04f 0901 	mov.w	r9, #1
 8008d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008f30 <_vfiprintf_r+0x21c>
 8008d88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	469a      	mov	sl, r3
 8008d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d94:	b10a      	cbz	r2, 8008d9a <_vfiprintf_r+0x86>
 8008d96:	2a25      	cmp	r2, #37	@ 0x25
 8008d98:	d1f9      	bne.n	8008d8e <_vfiprintf_r+0x7a>
 8008d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d9e:	d00b      	beq.n	8008db8 <_vfiprintf_r+0xa4>
 8008da0:	465b      	mov	r3, fp
 8008da2:	4622      	mov	r2, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7ff ffa2 	bl	8008cf0 <__sfputs_r>
 8008dac:	3001      	adds	r0, #1
 8008dae:	f000 80a7 	beq.w	8008f00 <_vfiprintf_r+0x1ec>
 8008db2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008db4:	445a      	add	r2, fp
 8008db6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008db8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 809f 	beq.w	8008f00 <_vfiprintf_r+0x1ec>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dcc:	f10a 0a01 	add.w	sl, sl, #1
 8008dd0:	9304      	str	r3, [sp, #16]
 8008dd2:	9307      	str	r3, [sp, #28]
 8008dd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dda:	4654      	mov	r4, sl
 8008ddc:	2205      	movs	r2, #5
 8008dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de2:	4853      	ldr	r0, [pc, #332]	@ (8008f30 <_vfiprintf_r+0x21c>)
 8008de4:	f7fe f9b9 	bl	800715a <memchr>
 8008de8:	9a04      	ldr	r2, [sp, #16]
 8008dea:	b9d8      	cbnz	r0, 8008e24 <_vfiprintf_r+0x110>
 8008dec:	06d1      	lsls	r1, r2, #27
 8008dee:	bf44      	itt	mi
 8008df0:	2320      	movmi	r3, #32
 8008df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df6:	0713      	lsls	r3, r2, #28
 8008df8:	bf44      	itt	mi
 8008dfa:	232b      	movmi	r3, #43	@ 0x2b
 8008dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e00:	f89a 3000 	ldrb.w	r3, [sl]
 8008e04:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e06:	d015      	beq.n	8008e34 <_vfiprintf_r+0x120>
 8008e08:	4654      	mov	r4, sl
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	f04f 0c0a 	mov.w	ip, #10
 8008e10:	9a07      	ldr	r2, [sp, #28]
 8008e12:	4621      	mov	r1, r4
 8008e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e18:	3b30      	subs	r3, #48	@ 0x30
 8008e1a:	2b09      	cmp	r3, #9
 8008e1c:	d94b      	bls.n	8008eb6 <_vfiprintf_r+0x1a2>
 8008e1e:	b1b0      	cbz	r0, 8008e4e <_vfiprintf_r+0x13a>
 8008e20:	9207      	str	r2, [sp, #28]
 8008e22:	e014      	b.n	8008e4e <_vfiprintf_r+0x13a>
 8008e24:	eba0 0308 	sub.w	r3, r0, r8
 8008e28:	fa09 f303 	lsl.w	r3, r9, r3
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	46a2      	mov	sl, r4
 8008e30:	9304      	str	r3, [sp, #16]
 8008e32:	e7d2      	b.n	8008dda <_vfiprintf_r+0xc6>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	1d19      	adds	r1, r3, #4
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	9103      	str	r1, [sp, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	bfbb      	ittet	lt
 8008e40:	425b      	neglt	r3, r3
 8008e42:	f042 0202 	orrlt.w	r2, r2, #2
 8008e46:	9307      	strge	r3, [sp, #28]
 8008e48:	9307      	strlt	r3, [sp, #28]
 8008e4a:	bfb8      	it	lt
 8008e4c:	9204      	strlt	r2, [sp, #16]
 8008e4e:	7823      	ldrb	r3, [r4, #0]
 8008e50:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e52:	d10a      	bne.n	8008e6a <_vfiprintf_r+0x156>
 8008e54:	7863      	ldrb	r3, [r4, #1]
 8008e56:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e58:	d132      	bne.n	8008ec0 <_vfiprintf_r+0x1ac>
 8008e5a:	9b03      	ldr	r3, [sp, #12]
 8008e5c:	3402      	adds	r4, #2
 8008e5e:	1d1a      	adds	r2, r3, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	9203      	str	r2, [sp, #12]
 8008e64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008f34 <_vfiprintf_r+0x220>
 8008e6e:	2203      	movs	r2, #3
 8008e70:	4650      	mov	r0, sl
 8008e72:	7821      	ldrb	r1, [r4, #0]
 8008e74:	f7fe f971 	bl	800715a <memchr>
 8008e78:	b138      	cbz	r0, 8008e8a <_vfiprintf_r+0x176>
 8008e7a:	2240      	movs	r2, #64	@ 0x40
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	eba0 000a 	sub.w	r0, r0, sl
 8008e82:	4082      	lsls	r2, r0
 8008e84:	4313      	orrs	r3, r2
 8008e86:	3401      	adds	r4, #1
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8e:	2206      	movs	r2, #6
 8008e90:	4829      	ldr	r0, [pc, #164]	@ (8008f38 <_vfiprintf_r+0x224>)
 8008e92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e96:	f7fe f960 	bl	800715a <memchr>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d03f      	beq.n	8008f1e <_vfiprintf_r+0x20a>
 8008e9e:	4b27      	ldr	r3, [pc, #156]	@ (8008f3c <_vfiprintf_r+0x228>)
 8008ea0:	bb1b      	cbnz	r3, 8008eea <_vfiprintf_r+0x1d6>
 8008ea2:	9b03      	ldr	r3, [sp, #12]
 8008ea4:	3307      	adds	r3, #7
 8008ea6:	f023 0307 	bic.w	r3, r3, #7
 8008eaa:	3308      	adds	r3, #8
 8008eac:	9303      	str	r3, [sp, #12]
 8008eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb0:	443b      	add	r3, r7
 8008eb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eb4:	e76a      	b.n	8008d8c <_vfiprintf_r+0x78>
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	2001      	movs	r0, #1
 8008eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ebe:	e7a8      	b.n	8008e12 <_vfiprintf_r+0xfe>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f04f 0c0a 	mov.w	ip, #10
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	3401      	adds	r4, #1
 8008eca:	9305      	str	r3, [sp, #20]
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ed2:	3a30      	subs	r2, #48	@ 0x30
 8008ed4:	2a09      	cmp	r2, #9
 8008ed6:	d903      	bls.n	8008ee0 <_vfiprintf_r+0x1cc>
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d0c6      	beq.n	8008e6a <_vfiprintf_r+0x156>
 8008edc:	9105      	str	r1, [sp, #20]
 8008ede:	e7c4      	b.n	8008e6a <_vfiprintf_r+0x156>
 8008ee0:	4604      	mov	r4, r0
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ee8:	e7f0      	b.n	8008ecc <_vfiprintf_r+0x1b8>
 8008eea:	ab03      	add	r3, sp, #12
 8008eec:	9300      	str	r3, [sp, #0]
 8008eee:	462a      	mov	r2, r5
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	4b13      	ldr	r3, [pc, #76]	@ (8008f40 <_vfiprintf_r+0x22c>)
 8008ef4:	a904      	add	r1, sp, #16
 8008ef6:	f7fd fbcd 	bl	8006694 <_printf_float>
 8008efa:	4607      	mov	r7, r0
 8008efc:	1c78      	adds	r0, r7, #1
 8008efe:	d1d6      	bne.n	8008eae <_vfiprintf_r+0x19a>
 8008f00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f02:	07d9      	lsls	r1, r3, #31
 8008f04:	d405      	bmi.n	8008f12 <_vfiprintf_r+0x1fe>
 8008f06:	89ab      	ldrh	r3, [r5, #12]
 8008f08:	059a      	lsls	r2, r3, #22
 8008f0a:	d402      	bmi.n	8008f12 <_vfiprintf_r+0x1fe>
 8008f0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f0e:	f7fe f923 	bl	8007158 <__retarget_lock_release_recursive>
 8008f12:	89ab      	ldrh	r3, [r5, #12]
 8008f14:	065b      	lsls	r3, r3, #25
 8008f16:	f53f af1f 	bmi.w	8008d58 <_vfiprintf_r+0x44>
 8008f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f1c:	e71e      	b.n	8008d5c <_vfiprintf_r+0x48>
 8008f1e:	ab03      	add	r3, sp, #12
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	462a      	mov	r2, r5
 8008f24:	4630      	mov	r0, r6
 8008f26:	4b06      	ldr	r3, [pc, #24]	@ (8008f40 <_vfiprintf_r+0x22c>)
 8008f28:	a904      	add	r1, sp, #16
 8008f2a:	f7fd fe51 	bl	8006bd0 <_printf_i>
 8008f2e:	e7e4      	b.n	8008efa <_vfiprintf_r+0x1e6>
 8008f30:	08009638 	.word	0x08009638
 8008f34:	0800963e 	.word	0x0800963e
 8008f38:	08009642 	.word	0x08009642
 8008f3c:	08006695 	.word	0x08006695
 8008f40:	08008cf1 	.word	0x08008cf1

08008f44 <__swbuf_r>:
 8008f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f46:	460e      	mov	r6, r1
 8008f48:	4614      	mov	r4, r2
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	b118      	cbz	r0, 8008f56 <__swbuf_r+0x12>
 8008f4e:	6a03      	ldr	r3, [r0, #32]
 8008f50:	b90b      	cbnz	r3, 8008f56 <__swbuf_r+0x12>
 8008f52:	f7fd ffe9 	bl	8006f28 <__sinit>
 8008f56:	69a3      	ldr	r3, [r4, #24]
 8008f58:	60a3      	str	r3, [r4, #8]
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	071a      	lsls	r2, r3, #28
 8008f5e:	d501      	bpl.n	8008f64 <__swbuf_r+0x20>
 8008f60:	6923      	ldr	r3, [r4, #16]
 8008f62:	b943      	cbnz	r3, 8008f76 <__swbuf_r+0x32>
 8008f64:	4621      	mov	r1, r4
 8008f66:	4628      	mov	r0, r5
 8008f68:	f000 f82a 	bl	8008fc0 <__swsetup_r>
 8008f6c:	b118      	cbz	r0, 8008f76 <__swbuf_r+0x32>
 8008f6e:	f04f 37ff 	mov.w	r7, #4294967295
 8008f72:	4638      	mov	r0, r7
 8008f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	6922      	ldr	r2, [r4, #16]
 8008f7a:	b2f6      	uxtb	r6, r6
 8008f7c:	1a98      	subs	r0, r3, r2
 8008f7e:	6963      	ldr	r3, [r4, #20]
 8008f80:	4637      	mov	r7, r6
 8008f82:	4283      	cmp	r3, r0
 8008f84:	dc05      	bgt.n	8008f92 <__swbuf_r+0x4e>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f7ff fd9b 	bl	8008ac4 <_fflush_r>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d1ed      	bne.n	8008f6e <__swbuf_r+0x2a>
 8008f92:	68a3      	ldr	r3, [r4, #8]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	60a3      	str	r3, [r4, #8]
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	1c5a      	adds	r2, r3, #1
 8008f9c:	6022      	str	r2, [r4, #0]
 8008f9e:	701e      	strb	r6, [r3, #0]
 8008fa0:	6962      	ldr	r2, [r4, #20]
 8008fa2:	1c43      	adds	r3, r0, #1
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d004      	beq.n	8008fb2 <__swbuf_r+0x6e>
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	07db      	lsls	r3, r3, #31
 8008fac:	d5e1      	bpl.n	8008f72 <__swbuf_r+0x2e>
 8008fae:	2e0a      	cmp	r6, #10
 8008fb0:	d1df      	bne.n	8008f72 <__swbuf_r+0x2e>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	f7ff fd85 	bl	8008ac4 <_fflush_r>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d0d9      	beq.n	8008f72 <__swbuf_r+0x2e>
 8008fbe:	e7d6      	b.n	8008f6e <__swbuf_r+0x2a>

08008fc0 <__swsetup_r>:
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4b29      	ldr	r3, [pc, #164]	@ (8009068 <__swsetup_r+0xa8>)
 8008fc4:	4605      	mov	r5, r0
 8008fc6:	6818      	ldr	r0, [r3, #0]
 8008fc8:	460c      	mov	r4, r1
 8008fca:	b118      	cbz	r0, 8008fd4 <__swsetup_r+0x14>
 8008fcc:	6a03      	ldr	r3, [r0, #32]
 8008fce:	b90b      	cbnz	r3, 8008fd4 <__swsetup_r+0x14>
 8008fd0:	f7fd ffaa 	bl	8006f28 <__sinit>
 8008fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fd8:	0719      	lsls	r1, r3, #28
 8008fda:	d422      	bmi.n	8009022 <__swsetup_r+0x62>
 8008fdc:	06da      	lsls	r2, r3, #27
 8008fde:	d407      	bmi.n	8008ff0 <__swsetup_r+0x30>
 8008fe0:	2209      	movs	r2, #9
 8008fe2:	602a      	str	r2, [r5, #0]
 8008fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fec:	81a3      	strh	r3, [r4, #12]
 8008fee:	e033      	b.n	8009058 <__swsetup_r+0x98>
 8008ff0:	0758      	lsls	r0, r3, #29
 8008ff2:	d512      	bpl.n	800901a <__swsetup_r+0x5a>
 8008ff4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ff6:	b141      	cbz	r1, 800900a <__swsetup_r+0x4a>
 8008ff8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ffc:	4299      	cmp	r1, r3
 8008ffe:	d002      	beq.n	8009006 <__swsetup_r+0x46>
 8009000:	4628      	mov	r0, r5
 8009002:	f7fe ff09 	bl	8007e18 <_free_r>
 8009006:	2300      	movs	r3, #0
 8009008:	6363      	str	r3, [r4, #52]	@ 0x34
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	2300      	movs	r3, #0
 8009014:	6063      	str	r3, [r4, #4]
 8009016:	6923      	ldr	r3, [r4, #16]
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	f043 0308 	orr.w	r3, r3, #8
 8009020:	81a3      	strh	r3, [r4, #12]
 8009022:	6923      	ldr	r3, [r4, #16]
 8009024:	b94b      	cbnz	r3, 800903a <__swsetup_r+0x7a>
 8009026:	89a3      	ldrh	r3, [r4, #12]
 8009028:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800902c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009030:	d003      	beq.n	800903a <__swsetup_r+0x7a>
 8009032:	4621      	mov	r1, r4
 8009034:	4628      	mov	r0, r5
 8009036:	f000 f882 	bl	800913e <__smakebuf_r>
 800903a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903e:	f013 0201 	ands.w	r2, r3, #1
 8009042:	d00a      	beq.n	800905a <__swsetup_r+0x9a>
 8009044:	2200      	movs	r2, #0
 8009046:	60a2      	str	r2, [r4, #8]
 8009048:	6962      	ldr	r2, [r4, #20]
 800904a:	4252      	negs	r2, r2
 800904c:	61a2      	str	r2, [r4, #24]
 800904e:	6922      	ldr	r2, [r4, #16]
 8009050:	b942      	cbnz	r2, 8009064 <__swsetup_r+0xa4>
 8009052:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009056:	d1c5      	bne.n	8008fe4 <__swsetup_r+0x24>
 8009058:	bd38      	pop	{r3, r4, r5, pc}
 800905a:	0799      	lsls	r1, r3, #30
 800905c:	bf58      	it	pl
 800905e:	6962      	ldrpl	r2, [r4, #20]
 8009060:	60a2      	str	r2, [r4, #8]
 8009062:	e7f4      	b.n	800904e <__swsetup_r+0x8e>
 8009064:	2000      	movs	r0, #0
 8009066:	e7f7      	b.n	8009058 <__swsetup_r+0x98>
 8009068:	200000d8 	.word	0x200000d8

0800906c <_raise_r>:
 800906c:	291f      	cmp	r1, #31
 800906e:	b538      	push	{r3, r4, r5, lr}
 8009070:	4605      	mov	r5, r0
 8009072:	460c      	mov	r4, r1
 8009074:	d904      	bls.n	8009080 <_raise_r+0x14>
 8009076:	2316      	movs	r3, #22
 8009078:	6003      	str	r3, [r0, #0]
 800907a:	f04f 30ff 	mov.w	r0, #4294967295
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009082:	b112      	cbz	r2, 800908a <_raise_r+0x1e>
 8009084:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009088:	b94b      	cbnz	r3, 800909e <_raise_r+0x32>
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f830 	bl	80090f0 <_getpid_r>
 8009090:	4622      	mov	r2, r4
 8009092:	4601      	mov	r1, r0
 8009094:	4628      	mov	r0, r5
 8009096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800909a:	f000 b817 	b.w	80090cc <_kill_r>
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d00a      	beq.n	80090b8 <_raise_r+0x4c>
 80090a2:	1c59      	adds	r1, r3, #1
 80090a4:	d103      	bne.n	80090ae <_raise_r+0x42>
 80090a6:	2316      	movs	r3, #22
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	2001      	movs	r0, #1
 80090ac:	e7e7      	b.n	800907e <_raise_r+0x12>
 80090ae:	2100      	movs	r1, #0
 80090b0:	4620      	mov	r0, r4
 80090b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090b6:	4798      	blx	r3
 80090b8:	2000      	movs	r0, #0
 80090ba:	e7e0      	b.n	800907e <_raise_r+0x12>

080090bc <raise>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	@ (80090c8 <raise+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f7ff bfd3 	b.w	800906c <_raise_r>
 80090c6:	bf00      	nop
 80090c8:	200000d8 	.word	0x200000d8

080090cc <_kill_r>:
 80090cc:	b538      	push	{r3, r4, r5, lr}
 80090ce:	2300      	movs	r3, #0
 80090d0:	4d06      	ldr	r5, [pc, #24]	@ (80090ec <_kill_r+0x20>)
 80090d2:	4604      	mov	r4, r0
 80090d4:	4608      	mov	r0, r1
 80090d6:	4611      	mov	r1, r2
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	f7fa ff26 	bl	8003f2a <_kill>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	d102      	bne.n	80090e8 <_kill_r+0x1c>
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	b103      	cbz	r3, 80090e8 <_kill_r+0x1c>
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	bd38      	pop	{r3, r4, r5, pc}
 80090ea:	bf00      	nop
 80090ec:	20000f48 	.word	0x20000f48

080090f0 <_getpid_r>:
 80090f0:	f7fa bf14 	b.w	8003f1c <_getpid>

080090f4 <__swhatbuf_r>:
 80090f4:	b570      	push	{r4, r5, r6, lr}
 80090f6:	460c      	mov	r4, r1
 80090f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fc:	4615      	mov	r5, r2
 80090fe:	2900      	cmp	r1, #0
 8009100:	461e      	mov	r6, r3
 8009102:	b096      	sub	sp, #88	@ 0x58
 8009104:	da0c      	bge.n	8009120 <__swhatbuf_r+0x2c>
 8009106:	89a3      	ldrh	r3, [r4, #12]
 8009108:	2100      	movs	r1, #0
 800910a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800910e:	bf14      	ite	ne
 8009110:	2340      	movne	r3, #64	@ 0x40
 8009112:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009116:	2000      	movs	r0, #0
 8009118:	6031      	str	r1, [r6, #0]
 800911a:	602b      	str	r3, [r5, #0]
 800911c:	b016      	add	sp, #88	@ 0x58
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	466a      	mov	r2, sp
 8009122:	f000 f849 	bl	80091b8 <_fstat_r>
 8009126:	2800      	cmp	r0, #0
 8009128:	dbed      	blt.n	8009106 <__swhatbuf_r+0x12>
 800912a:	9901      	ldr	r1, [sp, #4]
 800912c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009130:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009134:	4259      	negs	r1, r3
 8009136:	4159      	adcs	r1, r3
 8009138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800913c:	e7eb      	b.n	8009116 <__swhatbuf_r+0x22>

0800913e <__smakebuf_r>:
 800913e:	898b      	ldrh	r3, [r1, #12]
 8009140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009142:	079d      	lsls	r5, r3, #30
 8009144:	4606      	mov	r6, r0
 8009146:	460c      	mov	r4, r1
 8009148:	d507      	bpl.n	800915a <__smakebuf_r+0x1c>
 800914a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	2301      	movs	r3, #1
 8009154:	6163      	str	r3, [r4, #20]
 8009156:	b003      	add	sp, #12
 8009158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800915a:	466a      	mov	r2, sp
 800915c:	ab01      	add	r3, sp, #4
 800915e:	f7ff ffc9 	bl	80090f4 <__swhatbuf_r>
 8009162:	9f00      	ldr	r7, [sp, #0]
 8009164:	4605      	mov	r5, r0
 8009166:	4639      	mov	r1, r7
 8009168:	4630      	mov	r0, r6
 800916a:	f7fe fec7 	bl	8007efc <_malloc_r>
 800916e:	b948      	cbnz	r0, 8009184 <__smakebuf_r+0x46>
 8009170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009174:	059a      	lsls	r2, r3, #22
 8009176:	d4ee      	bmi.n	8009156 <__smakebuf_r+0x18>
 8009178:	f023 0303 	bic.w	r3, r3, #3
 800917c:	f043 0302 	orr.w	r3, r3, #2
 8009180:	81a3      	strh	r3, [r4, #12]
 8009182:	e7e2      	b.n	800914a <__smakebuf_r+0xc>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800918a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800918e:	81a3      	strh	r3, [r4, #12]
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	6020      	str	r0, [r4, #0]
 8009194:	b15b      	cbz	r3, 80091ae <__smakebuf_r+0x70>
 8009196:	4630      	mov	r0, r6
 8009198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800919c:	f000 f81e 	bl	80091dc <_isatty_r>
 80091a0:	b128      	cbz	r0, 80091ae <__smakebuf_r+0x70>
 80091a2:	89a3      	ldrh	r3, [r4, #12]
 80091a4:	f023 0303 	bic.w	r3, r3, #3
 80091a8:	f043 0301 	orr.w	r3, r3, #1
 80091ac:	81a3      	strh	r3, [r4, #12]
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	431d      	orrs	r5, r3
 80091b2:	81a5      	strh	r5, [r4, #12]
 80091b4:	e7cf      	b.n	8009156 <__smakebuf_r+0x18>
	...

080091b8 <_fstat_r>:
 80091b8:	b538      	push	{r3, r4, r5, lr}
 80091ba:	2300      	movs	r3, #0
 80091bc:	4d06      	ldr	r5, [pc, #24]	@ (80091d8 <_fstat_r+0x20>)
 80091be:	4604      	mov	r4, r0
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	602b      	str	r3, [r5, #0]
 80091c6:	f7fa ff0f 	bl	8003fe8 <_fstat>
 80091ca:	1c43      	adds	r3, r0, #1
 80091cc:	d102      	bne.n	80091d4 <_fstat_r+0x1c>
 80091ce:	682b      	ldr	r3, [r5, #0]
 80091d0:	b103      	cbz	r3, 80091d4 <_fstat_r+0x1c>
 80091d2:	6023      	str	r3, [r4, #0]
 80091d4:	bd38      	pop	{r3, r4, r5, pc}
 80091d6:	bf00      	nop
 80091d8:	20000f48 	.word	0x20000f48

080091dc <_isatty_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	2300      	movs	r3, #0
 80091e0:	4d05      	ldr	r5, [pc, #20]	@ (80091f8 <_isatty_r+0x1c>)
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7fa ff0d 	bl	8004006 <_isatty>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_isatty_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_isatty_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	20000f48 	.word	0x20000f48

080091fc <_init>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	bf00      	nop
 8009200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009202:	bc08      	pop	{r3}
 8009204:	469e      	mov	lr, r3
 8009206:	4770      	bx	lr

08009208 <_fini>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr
