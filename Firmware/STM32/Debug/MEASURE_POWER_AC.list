
MEASURE_POWER_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  08007a08  08007a08  00008a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f78  08007f78  00009270  2**0
                  CONTENTS
  4 .ARM          00000008  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f80  08007f80  00009270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f80  08007f80  00008f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f84  08007f84  00008f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  08007f88  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ec  20000270  080081f8  00009270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000085c  080081f8  0000985c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afad  00000000  00000000  00009299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee8  00000000  00000000  00014246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00017130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000979  00000000  00000000  00017e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b25  00000000  00000000  000187d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c98b  00000000  00000000  0002f2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ecd0  00000000  00000000  0003bc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa951  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004654  00000000  00000000  000aa994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000aefe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000270 	.word	0x20000270
 800012c:	00000000 	.word	0x00000000
 8000130:	080079ec 	.word	0x080079ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000274 	.word	0x20000274
 800014c:	080079ec 	.word	0x080079ec

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2uiz>:
 80010e4:	0042      	lsls	r2, r0, #1
 80010e6:	d20e      	bcs.n	8001106 <__aeabi_f2uiz+0x22>
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010ec:	d30b      	bcc.n	8001106 <__aeabi_f2uiz+0x22>
 80010ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d409      	bmi.n	800110c <__aeabi_f2uiz+0x28>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001100:	fa23 f002 	lsr.w	r0, r3, r2
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr
 800110c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001110:	d101      	bne.n	8001116 <__aeabi_f2uiz+0x32>
 8001112:	0242      	lsls	r2, r0, #9
 8001114:	d102      	bne.n	800111c <__aeabi_f2uiz+0x38>
 8001116:	f04f 30ff 	mov.w	r0, #4294967295
 800111a:	4770      	bx	lr
 800111c:	f04f 0000 	mov.w	r0, #0
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  char          *pcChar;
  uint_fast8_t   ui8Argc;
  bool           bFindArg = true;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]

  /**
   * Initialize the argument counter, and point to the beginning of the
   * command line string.
   */
  ui8Argc = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  pcChar  = pcCmdLine;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	617b      	str	r3, [r7, #20]

  /**
   * Advance through the command line until a zero character is found.
   */
  while (*pcChar)
 8001138:	e01f      	b.n	800117a <CmdLineProcess+0x56>
  {
    /**
     * If there is a space, then replace it with a zero, and set the flag
     * to search for the next argument.
     */
    if (*pcChar == ' ')
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b20      	cmp	r3, #32
 8001140:	d105      	bne.n	800114e <CmdLineProcess+0x2a>
    {
      *pcChar  = 0;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
      bFindArg = true;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e012      	b.n	8001174 <CmdLineProcess+0x50>
    {
      /**
       * If bFindArg is set, then that means we are looking for the start
       * of the next argument.
       */
      if (bFindArg)
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00f      	beq.n	8001174 <CmdLineProcess+0x50>
        /**
         * As long as the maximum number of arguments has not been
         * reached, then save the pointer to the start of this new arg
         * in the argv array, and increment the count of args, argc.
         */
        if (ui8Argc < CMDLINE_MAX_ARGS)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	2b07      	cmp	r3, #7
 8001158:	d80a      	bhi.n	8001170 <CmdLineProcess+0x4c>
        {
          g_ppcArgv[ui8Argc] = pcChar;
 800115a:	491d      	ldr	r1, [pc, #116]	@ (80011d0 <CmdLineProcess+0xac>)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          ui8Argc++;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	3301      	adds	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
          bFindArg = false;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]
 800116e:	e001      	b.n	8001174 <CmdLineProcess+0x50>
         * The maximum number of arguments has been reached so return
         * the error.
         */
        else
        {
          return (CMDLINE_TOO_MANY_ARGS);
 8001170:	2302      	movs	r3, #2
 8001172:	e028      	b.n	80011c6 <CmdLineProcess+0xa2>
      }
    }
    /**
     * Advance to the next character in the command line.
     */
    pcChar++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (*pcChar)
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1db      	bne.n	800113a <CmdLineProcess+0x16>
  }

  /**
   * If one or more arguments was found, then process the command.
   */
  if (ui8Argc)
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d01d      	beq.n	80011c4 <CmdLineProcess+0xa0>
  {
    /**
     * Start at the beginning of the command table, to look for a matching
     * command.
     */
    psCmdEntry = &g_psCmdTable[0];
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <CmdLineProcess+0xb0>)
 800118a:	60bb      	str	r3, [r7, #8]

    /**
     * Search through the command table until a null command string is
     * found, which marks the end of the table.
     */
    while (psCmdEntry->pcCmd)
 800118c:	e016      	b.n	80011bc <CmdLineProcess+0x98>
      /**
       * If this command entry command string matches argv[0], then call
       * the function for this command, passing the command line
       * arguments.
       */
      if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <CmdLineProcess+0xac>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4619      	mov	r1, r3
 8001198:	4610      	mov	r0, r2
 800119a:	f7fe ffd9 	bl	8000150 <strcmp>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d108      	bne.n	80011b6 <CmdLineProcess+0x92>
      {
        return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4909      	ldr	r1, [pc, #36]	@ (80011d0 <CmdLineProcess+0xac>)
 80011ac:	4610      	mov	r0, r2
 80011ae:	4798      	blx	r3
 80011b0:	4603      	mov	r3, r0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	e007      	b.n	80011c6 <CmdLineProcess+0xa2>
      }
      /**
       * Not found, so advance to the next entry.
       */
      psCmdEntry++;
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	330c      	adds	r3, #12
 80011ba:	60bb      	str	r3, [r7, #8]
    while (psCmdEntry->pcCmd)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1e4      	bne.n	800118e <CmdLineProcess+0x6a>

  /**
   * Fall through to here means that no matching command was found, so return
   * an error.
   */
  return (CMDLINE_BAD_CMD);
 80011c4:	2301      	movs	r3, #1
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000028c 	.word	0x2000028c
 80011d4:	20000028 	.word	0x20000028

080011d8 <APP_COMMAND_Init>:
 * The function `APP_COMMAND_Init` initializes UART configuration and sends a
 * string message for LLC control firmware.
 */
void
APP_COMMAND_Init (void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uart_cfg_cml = (uart_cfg_t *)&s_data_system.s_uart_cmd;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011de:	4a0b      	ldr	r2, [pc, #44]	@ (800120c <APP_COMMAND_Init+0x34>)
 80011e0:	601a      	str	r2, [r3, #0]
  BSP_UART_Config(uart_cfg_cml, USART3, USART3_IRQn);
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2227      	movs	r2, #39	@ 0x27
 80011e8:	4909      	ldr	r1, [pc, #36]	@ (8001210 <APP_COMMAND_Init+0x38>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fd56 	bl	8002c9c <BSP_UART_Config>
  BSP_UART_SendString(uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <APP_COMMAND_Init+0x30>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4907      	ldr	r1, [pc, #28]	@ (8001214 <APP_COMMAND_Init+0x3c>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fdba 	bl	8002d70 <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <APP_COMMAND_Init+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200003b0 	.word	0x200003b0
 800120c:	20000594 	.word	0x20000594
 8001210:	40004800 	.word	0x40004800
 8001214:	08007b4c 	.word	0x08007b4c
 8001218:	200003af 	.word	0x200003af

0800121c <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 8001220:	4902      	ldr	r1, [pc, #8]	@ (800122c <APP_COMMAND_CreateTask+0x10>)
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <APP_COMMAND_CreateTask+0x14>)
 8001224:	f003 fd20 	bl	8004c68 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	2000001c 	.word	0x2000001c
 8001230:	20000018 	.word	0x20000018

08001234 <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(uart_cfg_cml, "\nAvailable commands\r\n");
 800123e:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4918      	ldr	r1, [pc, #96]	@ (80012a4 <APP_COMMAND_Help+0x70>)
 8001244:	4618      	mov	r0, r3
 8001246:	f001 fd93 	bl	8002d70 <BSP_UART_SendString>
  BSP_UART_SendString(uart_cfg_cml, "------------------\r\n");
 800124a:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4916      	ldr	r1, [pc, #88]	@ (80012a8 <APP_COMMAND_Help+0x74>)
 8001250:	4618      	mov	r0, r3
 8001252:	f001 fd8d 	bl	8002d70 <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <APP_COMMAND_Help+0x78>)
 8001258:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 800125a:	e018      	b.n	800128e <APP_COMMAND_Help+0x5a>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcCmd);
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f001 fd82 	bl	8002d70 <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcHelp);
 800126c:	4b0c      	ldr	r3, [pc, #48]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f001 fd7a 	bl	8002d70 <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, "\r\n");
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <APP_COMMAND_Help+0x6c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	490b      	ldr	r1, [pc, #44]	@ (80012b0 <APP_COMMAND_Help+0x7c>)
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fd74 	bl	8002d70 <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	330c      	adds	r3, #12
 800128c:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1e2      	bne.n	800125c <APP_COMMAND_Help+0x28>
  }

  return (CMDLINE_OK);
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200003b0 	.word	0x200003b0
 80012a4:	08007b68 	.word	0x08007b68
 80012a8:	08007b80 	.word	0x08007b80
 80012ac:	20000028 	.word	0x20000028
 80012b0:	08007b98 	.word	0x08007b98

080012b4 <APP_COMMAND_ReadVoltage>:

int
APP_COMMAND_ReadVoltage (int argc, char *argv[])
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	@ 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dc01      	bgt.n	80012c8 <APP_COMMAND_ReadVoltage+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e01a      	b.n	80012fe <APP_COMMAND_ReadVoltage+0x4a>
  }
  if (argc > 1)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	dd01      	ble.n	80012d2 <APP_COMMAND_ReadVoltage+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80012ce:	2302      	movs	r3, #2
 80012d0:	e015      	b.n	80012fe <APP_COMMAND_ReadVoltage+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "Voltage: %.2f\n\r", s_data_system.f_voltage);
 80012d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001308 <APP_COMMAND_ReadVoltage+0x54>)
 80012d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	@ 0x270
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8af 	bl	800043c <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	f107 0008 	add.w	r0, r7, #8
 80012e6:	4909      	ldr	r1, [pc, #36]	@ (800130c <APP_COMMAND_ReadVoltage+0x58>)
 80012e8:	f004 fa4a 	bl	8005780 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <APP_COMMAND_ReadVoltage+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f107 0208 	add.w	r2, r7, #8
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fd3a 	bl	8002d70 <BSP_UART_SendString>

  return (CMDLINE_OK);
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3728      	adds	r7, #40	@ 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200003c4 	.word	0x200003c4
 800130c:	08007b9c 	.word	0x08007b9c
 8001310:	200003b0 	.word	0x200003b0

08001314 <APP_COMMAND_ReadCurrent>:

int
APP_COMMAND_ReadCurrent (int argc, char *argv[])
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dc01      	bgt.n	8001328 <APP_COMMAND_ReadCurrent+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001324:	2303      	movs	r3, #3
 8001326:	e01a      	b.n	800135e <APP_COMMAND_ReadCurrent+0x4a>
  }
  if (argc > 1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b01      	cmp	r3, #1
 800132c:	dd01      	ble.n	8001332 <APP_COMMAND_ReadCurrent+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800132e:	2302      	movs	r3, #2
 8001330:	e015      	b.n	800135e <APP_COMMAND_ReadCurrent+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "Current: %.2f\n\r", s_data_system.f_current);
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <APP_COMMAND_ReadCurrent+0x54>)
 8001334:	f8d3 3274 	ldr.w	r3, [r3, #628]	@ 0x274
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f87f 	bl	800043c <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	f107 0008 	add.w	r0, r7, #8
 8001346:	4909      	ldr	r1, [pc, #36]	@ (800136c <APP_COMMAND_ReadCurrent+0x58>)
 8001348:	f004 fa1a 	bl	8005780 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 800134c:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <APP_COMMAND_ReadCurrent+0x5c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f107 0208 	add.w	r2, r7, #8
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fd0a 	bl	8002d70 <BSP_UART_SendString>

  return (CMDLINE_OK);
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3728      	adds	r7, #40	@ 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200003c4 	.word	0x200003c4
 800136c:	08007bac 	.word	0x08007bac
 8001370:	200003b0 	.word	0x200003b0

08001374 <APP_COMMAND_ReadPF>:

int
APP_COMMAND_ReadPF (int argc, char *argv[])
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	@ 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dc01      	bgt.n	8001388 <APP_COMMAND_ReadPF+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 8001384:	2303      	movs	r3, #3
 8001386:	e01a      	b.n	80013be <APP_COMMAND_ReadPF+0x4a>
  }
  if (argc > 1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b01      	cmp	r3, #1
 800138c:	dd01      	ble.n	8001392 <APP_COMMAND_ReadPF+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 800138e:	2302      	movs	r3, #2
 8001390:	e015      	b.n	80013be <APP_COMMAND_ReadPF+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "POWER FACTOR: %.2f\n\r", s_data_system.f_delta_T_PF);
 8001392:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <APP_COMMAND_ReadPF+0x54>)
 8001394:	f8d3 3278 	ldr.w	r3, [r3, #632]	@ 0x278
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff f84f 	bl	800043c <__aeabi_f2d>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	f107 0008 	add.w	r0, r7, #8
 80013a6:	4909      	ldr	r1, [pc, #36]	@ (80013cc <APP_COMMAND_ReadPF+0x58>)
 80013a8:	f004 f9ea 	bl	8005780 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <APP_COMMAND_ReadPF+0x5c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f107 0208 	add.w	r2, r7, #8
 80013b4:	4611      	mov	r1, r2
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 fcda 	bl	8002d70 <BSP_UART_SendString>

  return (CMDLINE_OK);
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3728      	adds	r7, #40	@ 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200003c4 	.word	0x200003c4
 80013cc:	08007bbc 	.word	0x08007bbc
 80013d0:	200003b0 	.word	0x200003b0

080013d4 <APP_COMMAND_TaskUpdate>:
 * processes commands based on the received data, and sends responses back
 * through UART.
 */
static void
APP_COMMAND_TaskUpdate (void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80013da:	e067      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
  {
    rxData = BSP_UART_ReadChar(uart_cfg_cml);
 80013dc:	4b3a      	ldr	r3, [pc, #232]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f001 fcdc 	bl	8002d9e <BSP_UART_ReadChar>
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(uart_cfg_cml, rxData);
 80013ea:	4b37      	ldr	r3, [pc, #220]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	79fa      	ldrb	r2, [r7, #7]
 80013f0:	4611      	mov	r1, r2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fc86 	bl	8002d04 <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b0d      	cmp	r3, #13
 80013fc:	d002      	beq.n	8001404 <APP_COMMAND_TaskUpdate+0x30>
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b0a      	cmp	r3, #10
 8001402:	d136      	bne.n	8001472 <APP_COMMAND_TaskUpdate+0x9e>
    {
      if (s_commandBufferIndex > 0)
 8001404:	4b31      	ldr	r3, [pc, #196]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d02b      	beq.n	8001464 <APP_COMMAND_TaskUpdate+0x90>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <APP_COMMAND_TaskUpdate+0xfc>)
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]
        s_commandBufferIndex++;
 8001418:	4b2c      	ldr	r3, [pc, #176]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001422:	701a      	strb	r2, [r3, #0]
        retVal               = CmdLineProcess(s_commandBuffer);
 8001424:	482a      	ldr	r0, [pc, #168]	@ (80014d0 <APP_COMMAND_TaskUpdate+0xfc>)
 8001426:	f7ff fe7d 	bl	8001124 <CmdLineProcess>
 800142a:	4603      	mov	r3, r0
 800142c:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 800142e:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

        // Send status command in terminal.
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4926      	ldr	r1, [pc, #152]	@ (80014d4 <APP_COMMAND_TaskUpdate+0x100>)
 800143a:	4618      	mov	r0, r3
 800143c:	f001 fc98 	bl	8002d70 <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, ErrorCode[retVal]);
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001448:	4923      	ldr	r1, [pc, #140]	@ (80014d8 <APP_COMMAND_TaskUpdate+0x104>)
 800144a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f001 fc8d 	bl	8002d70 <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, "> ");
 8001456:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4920      	ldr	r1, [pc, #128]	@ (80014dc <APP_COMMAND_TaskUpdate+0x108>)
 800145c:	4618      	mov	r0, r3
 800145e:	f001 fc87 	bl	8002d70 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001462:	e023      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      }
      else
      {
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	491a      	ldr	r1, [pc, #104]	@ (80014d4 <APP_COMMAND_TaskUpdate+0x100>)
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fc80 	bl	8002d70 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001470:	e01c      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      }
    }
    else if ((rxData == 8)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d002      	beq.n	800147e <APP_COMMAND_TaskUpdate+0xaa>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b7f      	cmp	r3, #127	@ 0x7f
 800147c:	d10a      	bne.n	8001494 <APP_COMMAND_TaskUpdate+0xc0>
    {
      if (s_commandBufferIndex > 0)
 800147e:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d012      	beq.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      {
        s_commandBufferIndex--;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3b01      	subs	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001490:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 8001492:	e00b      	b.n	80014ac <APP_COMMAND_TaskUpdate+0xd8>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 8001494:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	4619      	mov	r1, r3
 800149a:	4a0d      	ldr	r2, [pc, #52]	@ (80014d0 <APP_COMMAND_TaskUpdate+0xfc>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	3301      	adds	r3, #1
 80014a6:	b2da      	uxtb	r2, r3
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <APP_COMMAND_TaskUpdate+0xf8>)
 80014aa:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <APP_COMMAND_TaskUpdate+0xf4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fc15 	bl	8002ce0 <BSP_UART_IsAvailableDataReceive>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d18f      	bne.n	80013dc <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200003b0 	.word	0x200003b0
 80014cc:	200003af 	.word	0x200003af
 80014d0:	200002b0 	.word	0x200002b0
 80014d4:	08007bd4 	.word	0x08007bd4
 80014d8:	20000000 	.word	0x20000000
 80014dc:	08007bdc 	.word	0x08007bdc

080014e0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80014e8:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	bf0c      	ite	eq
 80014f6:	2301      	moveq	r3, #1
 80014f8:	2300      	movne	r3, #0
 80014fa:	b2db      	uxtb	r3, r3
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40010400 	.word	0x40010400

0800150c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001514:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6153      	str	r3, [r2, #20]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f043 0201 	orr.w	r2, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 0201 	bic.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <LL_TIM_IsEnabledCounter+0x18>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <LL_TIM_IsEnabledCounter+0x1a>
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <APP_CALCULATOR_PF_CreateTask>:
 * The function APP_CALCULATOR_PF_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_CALCULATOR_PF_CreateTask (void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 80015bc:	4902      	ldr	r1, [pc, #8]	@ (80015c8 <APP_CALCULATOR_PF_CreateTask+0x10>)
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <APP_CALCULATOR_PF_CreateTask+0x14>)
 80015c0:	f003 fb52 	bl	8004c68 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000005c 	.word	0x2000005c
 80015cc:	20000058 	.word	0x20000058

080015d0 <APP_CALCULATOR_PF_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_CALCULATOR_PF_Init (void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_calculator_pf.p_PF_buffer     = &s_data_system.s_PF_buffer;
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <APP_CALCULATOR_PF_Init+0x34>)
 80015d8:	605a      	str	r2, [r3, #4]
  s_calculator_pf.p_PF_buffer_irq = &s_data_system.s_PF_buffer_irq;
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <APP_CALCULATOR_PF_Init+0x38>)
 80015de:	601a      	str	r2, [r3, #0]
  s_calculator_pf.p_delta_T       = &s_data_system.f_delta_T_PF;
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <APP_CALCULATOR_PF_Init+0x3c>)
 80015e4:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer);
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fa94 	bl	8004b18 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 80015f0:	4b03      	ldr	r3, [pc, #12]	@ (8001600 <APP_CALCULATOR_PF_Init+0x30>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fa8f 	bl	8004b18 <RING_BUFFER_Init>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200003b4 	.word	0x200003b4
 8001604:	20000410 	.word	0x20000410
 8001608:	200003c4 	.word	0x200003c4
 800160c:	2000063c 	.word	0x2000063c

08001610 <APP_CALCULATOR_PF_EXTI_IRQHandler>:
 * The function `APP_CALCULATOR_PF_EXTI_IRQHandler` handles EXTI interrupts for
 * lines 5 and 6, updating a buffer with timer values.
 */
void
APP_CALCULATOR_PF_EXTI_IRQHandler (void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001614:	2020      	movs	r0, #32
 8001616:	f7ff ff63 	bl	80014e0 <LL_EXTI_IsActiveFlag_0_31>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03a      	beq.n	8001696 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x86>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001620:	2020      	movs	r0, #32
 8001622:	f7ff ff73 	bl	800150c <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 8001626:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800162a:	f7ff ff9b 	bl	8001564 <LL_TIM_IsEnabledCounter>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d027      	beq.n	8001684 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x74>
    {
      LL_TIM_DisableCounter(TIM2);
 8001634:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001638:	f7ff ff85 	bl	8001546 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)(LL_TIM_GetCounter(TIM2) >> 8);
 800163c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001640:	f7ff ffaf 	bl	80015a2 <LL_TIM_GetCounter>
 8001644:	4603      	mov	r3, r0
 8001646:	0a1b      	lsrs	r3, r3, #8
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 800164c:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)LL_TIM_GetCounter(TIM2);
 800164e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001652:	f7ff ffa6 	bl	80015a2 <LL_TIM_GetCounter>
 8001656:	4603      	mov	r3, r0
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4b32      	ldr	r3, [pc, #200]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 800165c:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800165e:	4b31      	ldr	r3, [pc, #196]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001660:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 8001662:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001664:	7a12      	ldrb	r2, [r2, #8]
 8001666:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fa98 	bl	8004ba0 <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001670:	4b2c      	ldr	r3, [pc, #176]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001672:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 8001674:	4a2b      	ldr	r2, [pc, #172]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001676:	7a52      	ldrb	r2, [r2, #9]
 8001678:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f003 fa8f 	bl	8004ba0 <RING_BUFFER_Push_Data>
 8001682:	e008      	b.n	8001696 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x86>
    }
    else
    {
      START_COUNTER(TIM2)
 8001684:	2100      	movs	r1, #0
 8001686:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800168a:	f7ff ff7d 	bl	8001588 <LL_TIM_SetCounter>
 800168e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001692:	f7ff ff49 	bl	8001528 <LL_TIM_EnableCounter>
    }
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001696:	2040      	movs	r0, #64	@ 0x40
 8001698:	f7ff ff22 	bl	80014e0 <LL_EXTI_IsActiveFlag_0_31>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03d      	beq.n	800171e <APP_CALCULATOR_PF_EXTI_IRQHandler+0x10e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 80016a2:	2040      	movs	r0, #64	@ 0x40
 80016a4:	f7ff ff32 	bl	800150c <LL_EXTI_ClearFlag_0_31>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80016a8:	2020      	movs	r0, #32
 80016aa:	f7ff ff2f 	bl	800150c <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 80016ae:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016b2:	f7ff ff57 	bl	8001564 <LL_TIM_IsEnabledCounter>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d027      	beq.n	800170c <APP_CALCULATOR_PF_EXTI_IRQHandler+0xfc>
    {
      LL_TIM_DisableCounter(TIM2);
 80016bc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016c0:	f7ff ff41 	bl	8001546 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)(LL_TIM_GetCounter(TIM2) >> 8);
 80016c4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016c8:	f7ff ff6b 	bl	80015a2 <LL_TIM_GetCounter>
 80016cc:	4603      	mov	r3, r0
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016d4:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)LL_TIM_GetCounter(TIM2);
 80016d6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80016da:	f7ff ff62 	bl	80015a2 <LL_TIM_GetCounter>
 80016de:	4603      	mov	r3, r0
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016e4:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80016e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016e8:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 80016ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016ec:	7a12      	ldrb	r2, [r2, #8]
 80016ee:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fa54 	bl	8004ba0 <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016fa:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 80016fc:	4a09      	ldr	r2, [pc, #36]	@ (8001724 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80016fe:	7a52      	ldrb	r2, [r2, #9]
 8001700:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fa4b 	bl	8004ba0 <RING_BUFFER_Push_Data>
    else
    {
      START_COUNTER(TIM2)
    }
  }
}
 800170a:	e008      	b.n	800171e <APP_CALCULATOR_PF_EXTI_IRQHandler+0x10e>
      START_COUNTER(TIM2)
 800170c:	2100      	movs	r1, #0
 800170e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001712:	f7ff ff39 	bl	8001588 <LL_TIM_SetCounter>
 8001716:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800171a:	f7ff ff05 	bl	8001528 <LL_TIM_EnableCounter>
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200003b4 	.word	0x200003b4

08001728 <APP_CALCULATOR_PF_TaskUpdate>:
 * APP_CALCULATOR_PF_TaskUpdate will return without performing any further
 * operations.
 */
static void
APP_CALCULATOR_PF_TaskUpdate (void)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq))
 800172e:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fa14 	bl	8004b60 <RING_BUFFER_Is_Empty>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d155      	bne.n	80017ea <APP_CALCULATOR_PF_TaskUpdate+0xc2>
  uint16_t  u16_value_temp;
  uint8_t   u8_value[2];

  // u8_value[0] 8 bit high of delta_T
  u8_value[0]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 800173e:	4b2d      	ldr	r3, [pc, #180]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 fa51 	bl	8004bea <RING_BUFFER_Pull_Data>
 8001748:	4603      	mov	r3, r0
 800174a:	713b      	strb	r3, [r7, #4]

  // u8_value[1] 8 bit low of delta_T
  u8_value[1]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 800174c:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 fa4a 	bl	8004bea <RING_BUFFER_Pull_Data>
 8001756:	4603      	mov	r3, r0
 8001758:	717b      	strb	r3, [r7, #5]

  u16_value_temp = (uint16_t)((u8_value[0] << 8) | (u8_value[1]));
 800175a:	793b      	ldrb	r3, [r7, #4]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	b21a      	sxth	r2, r3
 8001760:	797b      	ldrb	r3, [r7, #5]
 8001762:	b21b      	sxth	r3, r3
 8001764:	4313      	orrs	r3, r2
 8001766:	b21b      	sxth	r3, r3
 8001768:	81fb      	strh	r3, [r7, #14]

  *s_calculator_pf.p_delta_T = (float)u16_value_temp / FREQUENCY_TIMER;
 800176a:	89fb      	ldrh	r3, [r7, #14]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fa9b 	bl	8000ca8 <__aeabi_ui2f>
 8001772:	4603      	mov	r3, r0
 8001774:	4a1f      	ldr	r2, [pc, #124]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001776:	68d4      	ldr	r4, [r2, #12]
 8001778:	491f      	ldr	r1, [pc, #124]	@ (80017f8 <APP_CALCULATOR_PF_TaskUpdate+0xd0>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fba0 	bl	8000ec0 <__aeabi_fdiv>
 8001780:	4603      	mov	r3, r0
 8001782:	6023      	str	r3, [r4, #0]

  // Transmission Data to app_data_transmission
  p_value_temp = (uint32_t *)s_calculator_pf.p_delta_T;
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	0e1b      	lsrs	r3, r3, #24
 8001790:	b2db      	uxtb	r3, r3
 8001792:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1b      	lsrs	r3, r3, #16
 800179a:	b2db      	uxtb	r3, r3
 800179c:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017b0:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017b2:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 80017b4:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017b6:	4611      	mov	r1, r2
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 f9f1 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017c0:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 80017c2:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017c4:	4611      	mov	r1, r2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 f9ea 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017cc:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017ce:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 80017d0:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 f9e3 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <APP_CALCULATOR_PF_TaskUpdate+0xcc>)
 80017dc:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 80017de:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 f9dc 	bl	8004ba0 <RING_BUFFER_Push_Data>
 80017e8:	e000      	b.n	80017ec <APP_CALCULATOR_PF_TaskUpdate+0xc4>
    return;
 80017ea:	bf00      	nop
}
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200003b4 	.word	0x200003b4
 80017f8:	42600000 	.word	0x42600000

080017fc <APP_DATA_TRANS_REC_CreateTask>:
 * The function APP_DATA_TRANS_REC_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_DATA_TRANS_REC_CreateTask (void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001800:	4902      	ldr	r1, [pc, #8]	@ (800180c <APP_DATA_TRANS_REC_CreateTask+0x10>)
 8001802:	4803      	ldr	r0, [pc, #12]	@ (8001810 <APP_DATA_TRANS_REC_CreateTask+0x14>)
 8001804:	f003 fa30 	bl	8004c68 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000006c 	.word	0x2000006c
 8001810:	20000068 	.word	0x20000068

08001814 <APP_DATA_TRANS_REC_Init>:

void
APP_DATA_TRANS_REC_Init (void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_data_trans.p_PF_buffer       = &s_data_system.s_PF_buffer;
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <APP_DATA_TRANS_REC_Init+0x48>)
 800181a:	4a11      	ldr	r2, [pc, #68]	@ (8001860 <APP_DATA_TRANS_REC_Init+0x4c>)
 800181c:	601a      	str	r2, [r3, #0]
  s_data_trans.p_vol_cur_buffer  = &s_data_system.s_vol_cur_buffer;
 800181e:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <APP_DATA_TRANS_REC_Init+0x48>)
 8001820:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <APP_DATA_TRANS_REC_Init+0x50>)
 8001822:	605a      	str	r2, [r3, #4]
  s_data_trans.p_uart_data_trans = &s_data_system.s_uart_data_trans;
 8001824:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <APP_DATA_TRANS_REC_Init+0x48>)
 8001826:	4a10      	ldr	r2, [pc, #64]	@ (8001868 <APP_DATA_TRANS_REC_Init+0x54>)
 8001828:	609a      	str	r2, [r3, #8]

  // Reset data filed of variable s_data_trans
  s_data_trans.flag_update_PF      = FLAG_NOT_UPDATED;
 800182a:	4a0c      	ldr	r2, [pc, #48]	@ (800185c <APP_DATA_TRANS_REC_Init+0x48>)
 800182c:	7f13      	ldrb	r3, [r2, #28]
 800182e:	f36f 0300 	bfc	r3, #0, #1
 8001832:	7713      	strb	r3, [r2, #28]
  s_data_trans.flag_update_vol_cur = FLAG_NOT_UPDATED;
 8001834:	4a09      	ldr	r2, [pc, #36]	@ (800185c <APP_DATA_TRANS_REC_Init+0x48>)
 8001836:	7f13      	ldrb	r3, [r2, #28]
 8001838:	f36f 0341 	bfc	r3, #1, #1
 800183c:	7713      	strb	r3, [r2, #28]
  memset((uint8_t *)s_data_trans.u8_data_transmission,
 800183e:	2210      	movs	r2, #16
 8001840:	2100      	movs	r1, #0
 8001842:	480a      	ldr	r0, [pc, #40]	@ (800186c <APP_DATA_TRANS_REC_Init+0x58>)
 8001844:	f003 ffff 	bl	8005846 <memset>
         0,
         sizeof(s_data_trans.u8_data_transmission));

  // Config UART
  BSP_UART_Config(
      (uart_cfg_t *)s_data_trans.p_uart_data_trans, USART1, USART1_IRQn);
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <APP_DATA_TRANS_REC_Init+0x48>)
 800184a:	689b      	ldr	r3, [r3, #8]
  BSP_UART_Config(
 800184c:	2225      	movs	r2, #37	@ 0x25
 800184e:	4908      	ldr	r1, [pc, #32]	@ (8001870 <APP_DATA_TRANS_REC_Init+0x5c>)
 8001850:	4618      	mov	r0, r3
 8001852:	f001 fa23 	bl	8002c9c <BSP_UART_Config>
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000648 	.word	0x20000648
 8001860:	20000410 	.word	0x20000410
 8001864:	200004a8 	.word	0x200004a8
 8001868:	200004f4 	.word	0x200004f4
 800186c:	20000654 	.word	0x20000654
 8001870:	40013800 	.word	0x40013800

08001874 <APP_DATA_TRANS_REC_TaskUpdate>:
 * data. It constructs a transmission packet and sends it via UART when data is
 * ready.
 */
static void
APP_DATA_TRANS_REC_TaskUpdate (void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
   * @details
   * - Check if the voltage and current buffer is not empty.
   * - Read 4 bytes of voltage data and append '\r'.
   * - Read 4 bytes of current data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans.p_vol_cur_buffer))
 8001878:	4b5a      	ldr	r3, [pc, #360]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	f003 f96f 	bl	8004b60 <RING_BUFFER_Is_Empty>
 8001882:	4603      	mov	r3, r0
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d052      	beq.n	8001934 <APP_DATA_TRANS_REC_TaskUpdate+0xc0>
  {
    // Read voltage
    s_data_trans.u8_data_transmission[0]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 800188e:	4b55      	ldr	r3, [pc, #340]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 f9a9 	bl	8004bea <RING_BUFFER_Pull_Data>
 8001898:	4603      	mov	r3, r0
 800189a:	461a      	mov	r2, r3
 800189c:	4b51      	ldr	r3, [pc, #324]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800189e:	731a      	strb	r2, [r3, #12]
    s_data_trans.u8_data_transmission[1]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 80018a0:	4b50      	ldr	r3, [pc, #320]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 f9a0 	bl	8004bea <RING_BUFFER_Pull_Data>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b4d      	ldr	r3, [pc, #308]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018b0:	735a      	strb	r2, [r3, #13]
    s_data_trans.u8_data_transmission[2]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 80018b2:	4b4c      	ldr	r3, [pc, #304]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 f997 	bl	8004bea <RING_BUFFER_Pull_Data>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	4b48      	ldr	r3, [pc, #288]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018c2:	739a      	strb	r2, [r3, #14]
    s_data_trans.u8_data_transmission[3]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 80018c4:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f003 f98e 	bl	8004bea <RING_BUFFER_Pull_Data>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b44      	ldr	r3, [pc, #272]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018d4:	73da      	strb	r2, [r3, #15]
    s_data_trans.u8_data_transmission[4] = '\r';
 80018d6:	4b43      	ldr	r3, [pc, #268]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018d8:	220d      	movs	r2, #13
 80018da:	741a      	strb	r2, [r3, #16]

    // Read current
    s_data_trans.u8_data_transmission[5]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 80018dc:	4b41      	ldr	r3, [pc, #260]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 f982 	bl	8004bea <RING_BUFFER_Pull_Data>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b3e      	ldr	r3, [pc, #248]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018ec:	745a      	strb	r2, [r3, #17]
    s_data_trans.u8_data_transmission[6]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 80018ee:	4b3d      	ldr	r3, [pc, #244]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f003 f979 	bl	8004bea <RING_BUFFER_Pull_Data>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80018fe:	749a      	strb	r2, [r3, #18]
    s_data_trans.u8_data_transmission[7]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 8001900:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 f970 	bl	8004bea <RING_BUFFER_Pull_Data>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4b35      	ldr	r3, [pc, #212]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001910:	74da      	strb	r2, [r3, #19]
    s_data_trans.u8_data_transmission[8]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 8001912:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f967 	bl	8004bea <RING_BUFFER_Pull_Data>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001922:	751a      	strb	r2, [r3, #20]
    s_data_trans.u8_data_transmission[9] = '\r';
 8001924:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001926:	220d      	movs	r2, #13
 8001928:	755a      	strb	r2, [r3, #21]
    s_data_trans.flag_update_vol_cur     = FLAG_UPDATED;
 800192a:	4a2e      	ldr	r2, [pc, #184]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800192c:	7f13      	ldrb	r3, [r2, #28]
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	7713      	strb	r3, [r2, #28]
  /**
   * @details
   * - Check if the power factor (PF) buffer is not empty.
   * - Read 4 bytes of PF data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans.p_PF_buffer))
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f003 f911 	bl	8004b60 <RING_BUFFER_Is_Empty>
 800193e:	4603      	mov	r3, r0
 8001940:	f083 0301 	eor.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d02b      	beq.n	80019a2 <APP_DATA_TRANS_REC_TaskUpdate+0x12e>
  {
    // Read PF
    s_data_trans.u8_data_transmission[10]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 800194a:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 f94b 	bl	8004bea <RING_BUFFER_Pull_Data>
 8001954:	4603      	mov	r3, r0
 8001956:	461a      	mov	r2, r3
 8001958:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800195a:	759a      	strb	r2, [r3, #22]
    s_data_trans.u8_data_transmission[11]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 800195c:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f003 f942 	bl	8004bea <RING_BUFFER_Pull_Data>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800196c:	75da      	strb	r2, [r3, #23]
    s_data_trans.u8_data_transmission[12]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f939 	bl	8004bea <RING_BUFFER_Pull_Data>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800197e:	761a      	strb	r2, [r3, #24]
    s_data_trans.u8_data_transmission[13]
        = RING_BUFFER_Pull_Data((ring_buffer_t *)s_data_trans.p_vol_cur_buffer);
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4618      	mov	r0, r3
 8001986:	f003 f930 	bl	8004bea <RING_BUFFER_Pull_Data>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001990:	765a      	strb	r2, [r3, #25]
    s_data_trans.u8_data_transmission[14] = '\r';
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 8001994:	220d      	movs	r2, #13
 8001996:	769a      	strb	r2, [r3, #26]
    s_data_trans.flag_update_PF           = FLAG_UPDATED;
 8001998:	4a12      	ldr	r2, [pc, #72]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 800199a:	7f13      	ldrb	r3, [r2, #28]
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	7713      	strb	r3, [r2, #28]
   * @details
   * - If both voltage/current and PF data have been updated,
   *   transmit the combined data packet via UART.
   * - Reset the update flags after transmission.
   */
  if ((s_data_trans.flag_update_PF == FLAG_UPDATED)
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80019a4:	7f1b      	ldrb	r3, [r3, #28]
 80019a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d116      	bne.n	80019de <APP_DATA_TRANS_REC_TaskUpdate+0x16a>
      && (s_data_trans.flag_update_vol_cur == FLAG_UPDATED))
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80019b2:	7f1b      	ldrb	r3, [r3, #28]
 80019b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10f      	bne.n	80019de <APP_DATA_TRANS_REC_TaskUpdate+0x16a>
  {
    BSP_UART_SendString((uart_cfg_t *)s_data_trans.p_uart_data_trans,
 80019be:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4909      	ldr	r1, [pc, #36]	@ (80019e8 <APP_DATA_TRANS_REC_TaskUpdate+0x174>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 f9d3 	bl	8002d70 <BSP_UART_SendString>
                        (char *)s_data_trans.u8_data_transmission);
    s_data_trans.flag_update_PF      = FLAG_NOT_UPDATED;
 80019ca:	4a06      	ldr	r2, [pc, #24]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80019cc:	7f13      	ldrb	r3, [r2, #28]
 80019ce:	f36f 0300 	bfc	r3, #0, #1
 80019d2:	7713      	strb	r3, [r2, #28]
    s_data_trans.flag_update_vol_cur = FLAG_NOT_UPDATED;
 80019d4:	4a03      	ldr	r2, [pc, #12]	@ (80019e4 <APP_DATA_TRANS_REC_TaskUpdate+0x170>)
 80019d6:	7f13      	ldrb	r3, [r2, #28]
 80019d8:	f36f 0341 	bfc	r3, #1, #1
 80019dc:	7713      	strb	r3, [r2, #28]
  }
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000648 	.word	0x20000648
 80019e8:	20000654 	.word	0x20000654

080019ec <BSP_GPIO_SetState>:
   * should be set to a low state (`GPIO_LOW`) or a high state (`GPIO_HIGH`).
   */
  static inline void BSP_GPIO_SetState (GPIO_TypeDef *gpio_port,
                                        uint32_t      gpio_pin,
                                        gpio_state_t  state)
  {
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	4613      	mov	r3, r2
 80019f8:	71fb      	strb	r3, [r7, #7]
    if (state == GPIO_LOW)
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <BSP_GPIO_SetState+0x1c>
    {
      gpio_port->BSRR = gpio_pin;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	611a      	str	r2, [r3, #16]
    }
    else
    {
      gpio_port->BSRR = gpio_pin << 16;
    }
  }
 8001a06:	e003      	b.n	8001a10 <BSP_GPIO_SetState+0x24>
      gpio_port->BSRR = gpio_pin << 16;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	041a      	lsls	r2, r3, #16
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  }
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
	...

08001a1c <APP_LED_7_SEG_Init>:
 * The function initializes the LED 7-segment display by assigning port and pin
 * values and linking a pointer to a system power variable.
 */
void
APP_LED_7_SEG_Init (void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_LED_7SEG.p_power = &s_data_system.f_power;
 8001a20:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a22:	4a36      	ldr	r2, [pc, #216]	@ (8001afc <APP_LED_7_SEG_Init+0xe0>)
 8001a24:	669a      	str	r2, [r3, #104]	@ 0x68

  // Reset data filed of s_LED_7SEG
  s_LED_7SEG.p_port_led[0] = PORT_LED_A;
 8001a26:	4b34      	ldr	r3, [pc, #208]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a28:	4a35      	ldr	r2, [pc, #212]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a2a:	635a      	str	r2, [r3, #52]	@ 0x34
  s_LED_7SEG.p_port_led[1] = PORT_LED_B;
 8001a2c:	4b32      	ldr	r3, [pc, #200]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a2e:	4a34      	ldr	r2, [pc, #208]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a30:	639a      	str	r2, [r3, #56]	@ 0x38
  s_LED_7SEG.p_port_led[2] = PORT_LED_C;
 8001a32:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a34:	4a32      	ldr	r2, [pc, #200]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a36:	63da      	str	r2, [r3, #60]	@ 0x3c
  s_LED_7SEG.p_port_led[3] = PORT_LED_D;
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a3a:	4a31      	ldr	r2, [pc, #196]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  s_LED_7SEG.p_port_led[4] = PORT_LED_E;
 8001a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a40:	4a2f      	ldr	r2, [pc, #188]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a42:	645a      	str	r2, [r3, #68]	@ 0x44
  s_LED_7SEG.p_port_led[5] = PORT_LED_F;
 8001a44:	4b2c      	ldr	r3, [pc, #176]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a46:	4a2e      	ldr	r2, [pc, #184]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a48:	649a      	str	r2, [r3, #72]	@ 0x48
  s_LED_7SEG.p_port_led[6] = PORT_LED_G;
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  s_LED_7SEG.p_port_led[7] = PORT_LED_DP;
 8001a50:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a52:	4a2b      	ldr	r2, [pc, #172]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a54:	651a      	str	r2, [r3, #80]	@ 0x50

  s_LED_7SEG.u32_pin_led[0] = PIN_LED_A;
 8001a56:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a58:	f240 1201 	movw	r2, #257	@ 0x101
 8001a5c:	601a      	str	r2, [r3, #0]
  s_LED_7SEG.u32_pin_led[1] = PIN_LED_B;
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a60:	f240 1201 	movw	r2, #257	@ 0x101
 8001a64:	605a      	str	r2, [r3, #4]
  s_LED_7SEG.u32_pin_led[2] = PIN_LED_C;
 8001a66:	4b24      	ldr	r3, [pc, #144]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a68:	f240 1201 	movw	r2, #257	@ 0x101
 8001a6c:	609a      	str	r2, [r3, #8]
  s_LED_7SEG.u32_pin_led[3] = PIN_LED_D;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a70:	f240 1201 	movw	r2, #257	@ 0x101
 8001a74:	60da      	str	r2, [r3, #12]
  s_LED_7SEG.u32_pin_led[4] = PIN_LED_E;
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a78:	f240 1201 	movw	r2, #257	@ 0x101
 8001a7c:	611a      	str	r2, [r3, #16]
  s_LED_7SEG.u32_pin_led[5] = PIN_LED_F;
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a80:	f240 1201 	movw	r2, #257	@ 0x101
 8001a84:	615a      	str	r2, [r3, #20]
  s_LED_7SEG.u32_pin_led[6] = PIN_LED_G;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a88:	f240 1201 	movw	r2, #257	@ 0x101
 8001a8c:	619a      	str	r2, [r3, #24]
  s_LED_7SEG.u32_pin_led[7] = PIN_LED_DP;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a90:	f240 1201 	movw	r2, #257	@ 0x101
 8001a94:	61da      	str	r2, [r3, #28]

  s_LED_7SEG.p_port_control[0] = PORT_CONTROL_0;
 8001a96:	4b18      	ldr	r3, [pc, #96]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a98:	4a19      	ldr	r2, [pc, #100]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  s_LED_7SEG.p_port_control[1] = PORT_CONTROL_0;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001a9e:	4a18      	ldr	r2, [pc, #96]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001aa0:	659a      	str	r2, [r3, #88]	@ 0x58
  s_LED_7SEG.p_port_control[2] = PORT_CONTROL_0;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001aa4:	4a16      	ldr	r2, [pc, #88]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
  s_LED_7SEG.p_port_control[3] = PORT_CONTROL_0;
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001aaa:	4a15      	ldr	r2, [pc, #84]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001aac:	661a      	str	r2, [r3, #96]	@ 0x60
  s_LED_7SEG.p_port_control[4] = PORT_CONTROL_0;
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001ab0:	4a13      	ldr	r2, [pc, #76]	@ (8001b00 <APP_LED_7_SEG_Init+0xe4>)
 8001ab2:	665a      	str	r2, [r3, #100]	@ 0x64

  s_LED_7SEG.u32_pin_control[0] = PIN_CONTROL_0;
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001ab6:	f240 1201 	movw	r2, #257	@ 0x101
 8001aba:	621a      	str	r2, [r3, #32]
  s_LED_7SEG.u32_pin_control[1] = PIN_CONTROL_0;
 8001abc:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001abe:	f240 1201 	movw	r2, #257	@ 0x101
 8001ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  s_LED_7SEG.u32_pin_control[2] = PIN_CONTROL_0;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001ac6:	f240 1201 	movw	r2, #257	@ 0x101
 8001aca:	629a      	str	r2, [r3, #40]	@ 0x28
  s_LED_7SEG.u32_pin_control[3] = PIN_CONTROL_0;
 8001acc:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001ace:	f240 1201 	movw	r2, #257	@ 0x101
 8001ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  s_LED_7SEG.u32_pin_control[4] = PIN_CONTROL_0;
 8001ad4:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001ad6:	f240 1201 	movw	r2, #257	@ 0x101
 8001ada:	631a      	str	r2, [r3, #48]	@ 0x30

  s_LED_7SEG.u8_position_led = 0;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  *s_LED_7SEG.p_power = 0;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <APP_LED_7_SEG_Init+0xdc>)
 8001ae6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	20000668 	.word	0x20000668
 8001afc:	20000640 	.word	0x20000640
 8001b00:	40010c00 	.word	0x40010c00

08001b04 <APP_LED_7_SEG_CreateTask>:
 * The function `APP_LED_7_SEG_CreateTask` creates a task using the
 * `SCH_TASK_CreateTask` function.
 */
void
APP_LED_7_SEG_CreateTask (void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001b08:	4902      	ldr	r1, [pc, #8]	@ (8001b14 <APP_LED_7_SEG_CreateTask+0x10>)
 8001b0a:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <APP_LED_7_SEG_CreateTask+0x14>)
 8001b0c:	f003 f8ac 	bl	8004c68 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000088 	.word	0x20000088
 8001b18:	20000084 	.word	0x20000084

08001b1c <APP_LED_7SEG_TaskUpdate>:
 *  PRIVATE FUNCTION
 *****************************************************************************/

static void
APP_LED_7SEG_TaskUpdate (void)
{
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
  if (s_LED_7SEG.u8_position_led >= NUMBER_OF_LED)
 8001b22:	4ba3      	ldr	r3, [pc, #652]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b24:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d903      	bls.n	8001b36 <APP_LED_7SEG_TaskUpdate+0x1a>
  {
    s_LED_7SEG.u8_position_led = 0;
 8001b2e:	4ba0      	ldr	r3, [pc, #640]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  }

  if (*s_LED_7SEG.p_power >= 1000)
 8001b36:	4b9e      	ldr	r3, [pc, #632]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	499d      	ldr	r1, [pc, #628]	@ (8001db4 <APP_LED_7SEG_TaskUpdate+0x298>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff fabc 	bl	80010bc <__aeabi_fcmpge>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06f      	beq.n	8001c2a <APP_LED_7SEG_TaskUpdate+0x10e>
  {
    uint16_t u16_integer = (uint16_t)(*s_LED_7SEG.p_power);
 8001b4a:	4b99      	ldr	r3, [pc, #612]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b4c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fac7 	bl	80010e4 <__aeabi_f2uiz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
    uint8_t  u8_decimal  = (uint8_t)((*s_LED_7SEG.p_power - u16_integer) * 100);
 8001b5a:	4b95      	ldr	r3, [pc, #596]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f8a4 	bl	8000cb0 <__aeabi_i2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7fe ffe9 	bl	8000b44 <__aeabi_fsub>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4990      	ldr	r1, [pc, #576]	@ (8001db8 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8ee 	bl	8000d58 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fab0 	bl	80010e4 <__aeabi_f2uiz>
 8001b84:	4603      	mov	r3, r0
 8001b86:	717b      	strb	r3, [r7, #5]
    uint8_t  u8_number   = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	75fb      	strb	r3, [r7, #23]

    if (s_LED_7SEG.u8_position_led < 1)
 8001b8c:	4b88      	ldr	r3, [pc, #544]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b8e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d117      	bne.n	8001bc8 <APP_LED_7SEG_TaskUpdate+0xac>
    {
      u8_number
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001b98:	797c      	ldrb	r4, [r7, #5]
 8001b9a:	4b85      	ldr	r3, [pc, #532]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b9c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	200a      	movs	r0, #10
 8001ba6:	f000 fa2f 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001baa:	4603      	mov	r3, r0
 8001bac:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001bb0:	4b82      	ldr	r3, [pc, #520]	@ (8001dbc <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	1aca      	subs	r2, r1, r3
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	75fb      	strb	r3, [r7, #23]
 8001bc6:	e018      	b.n	8001bfa <APP_LED_7SEG_TaskUpdate+0xde>
    }
    else
    {
      u8_number = (u16_integer
                   / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 1))
 8001bc8:	88fc      	ldrh	r4, [r7, #6]
 8001bca:	4b79      	ldr	r3, [pc, #484]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001bcc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	200a      	movs	r0, #10
 8001bda:	f000 fa15 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001bde:	4603      	mov	r3, r0
 8001be0:	fbb4 f1f3 	udiv	r1, r4, r3
                  % 10;
 8001be4:	4b75      	ldr	r3, [pc, #468]	@ (8001dbc <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001be6:	fba3 2301 	umull	r2, r3, r3, r1
 8001bea:	08da      	lsrs	r2, r3, #3
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	1aca      	subs	r2, r1, r3
      u8_number = (u16_integer
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	75fb      	strb	r3, [r7, #23]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 f999 	bl	8001f34 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 1)
 8001c02:	4b6b      	ldr	r3, [pc, #428]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c04:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f040 817a 	bne.w	8001f04 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001c10:	4b67      	ldr	r3, [pc, #412]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c12:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001c14:	4b66      	ldr	r3, [pc, #408]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c16:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	4a69      	ldr	r2, [pc, #420]	@ (8001dc0 <APP_LED_7SEG_TaskUpdate+0x2a4>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001c1e:	09db      	lsrs	r3, r3, #7
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	f7ff fee2 	bl	80019ec <BSP_GPIO_SetState>
 8001c28:	e16c      	b.n	8001f04 <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else if (*s_LED_7SEG.p_power >= 100)
 8001c2a:	4b61      	ldr	r3, [pc, #388]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4961      	ldr	r1, [pc, #388]	@ (8001db8 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fa42 	bl	80010bc <__aeabi_fcmpge>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d06f      	beq.n	8001d1e <APP_LED_7SEG_TaskUpdate+0x202>
  {
    uint16_t u16_integer = (uint16_t)(*s_LED_7SEG.p_power);
 8001c3e:	4b5c      	ldr	r3, [pc, #368]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fa4d 	bl	80010e4 <__aeabi_f2uiz>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	817b      	strh	r3, [r7, #10]
    uint8_t  u8_decimal  = (uint8_t)((*s_LED_7SEG.p_power - u16_integer) * 100);
 8001c4e:	4b58      	ldr	r3, [pc, #352]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c52:	681c      	ldr	r4, [r3, #0]
 8001c54:	897b      	ldrh	r3, [r7, #10]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f82a 	bl	8000cb0 <__aeabi_i2f>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7fe ff6f 	bl	8000b44 <__aeabi_fsub>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4953      	ldr	r1, [pc, #332]	@ (8001db8 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f874 	bl	8000d58 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fa36 	bl	80010e4 <__aeabi_f2uiz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	727b      	strb	r3, [r7, #9]
    uint8_t  u8_number   = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	75bb      	strb	r3, [r7, #22]

    if (s_LED_7SEG.u8_position_led < 2)
 8001c80:	4b4b      	ldr	r3, [pc, #300]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c82:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d817      	bhi.n	8001cbc <APP_LED_7SEG_TaskUpdate+0x1a0>
    {
      u8_number
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001c8c:	7a7c      	ldrb	r4, [r7, #9]
 8001c8e:	4b48      	ldr	r3, [pc, #288]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c90:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	200a      	movs	r0, #10
 8001c9a:	f000 f9b5 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001ca4:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	1aca      	subs	r2, r1, r3
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	75bb      	strb	r3, [r7, #22]
 8001cba:	e018      	b.n	8001cee <APP_LED_7SEG_TaskUpdate+0x1d2>
    }
    else
    {
      u8_number = (u16_integer
                   / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001cbc:	897c      	ldrh	r4, [r7, #10]
 8001cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cc0:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3b02      	subs	r3, #2
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	4619      	mov	r1, r3
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f000 f99b 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	fbb4 f1f3 	udiv	r1, r4, r3
                  % 10;
 8001cd8:	4b38      	ldr	r3, [pc, #224]	@ (8001dbc <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001cda:	fba3 2301 	umull	r2, r3, r3, r1
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4413      	add	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	1aca      	subs	r2, r1, r3
      u8_number = (u16_integer
 8001cea:	4613      	mov	r3, r2
 8001cec:	75bb      	strb	r3, [r7, #22]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001cee:	7dbb      	ldrb	r3, [r7, #22]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f000 f91f 	bl	8001f34 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 2)
 8001cf6:	4b2e      	ldr	r3, [pc, #184]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cf8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	f040 8100 	bne.w	8001f04 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001d04:	4b2a      	ldr	r3, [pc, #168]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d06:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001d08:	4b29      	ldr	r3, [pc, #164]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d0a:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001d0c:	7dbb      	ldrb	r3, [r7, #22]
 8001d0e:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc0 <APP_LED_7SEG_TaskUpdate+0x2a4>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001d12:	09db      	lsrs	r3, r3, #7
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	f7ff fe68 	bl	80019ec <BSP_GPIO_SetState>
 8001d1c:	e0f2      	b.n	8001f04 <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else if (*s_LED_7SEG.p_power >= 10)
 8001d1e:	4b24      	ldr	r3, [pc, #144]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4927      	ldr	r1, [pc, #156]	@ (8001dc4 <APP_LED_7SEG_TaskUpdate+0x2a8>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f9c8 	bl	80010bc <__aeabi_fcmpge>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d07a      	beq.n	8001e28 <APP_LED_7SEG_TaskUpdate+0x30c>
  {
    uint8_t  u8_integer  = (uint8_t)(*s_LED_7SEG.p_power);
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f9d3 	bl	80010e4 <__aeabi_f2uiz>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
    uint16_t u16_decimal = (uint16_t)((*s_LED_7SEG.p_power - u8_integer) * 100);
 8001d42:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d46:	681c      	ldr	r4, [r3, #0]
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ffb0 	bl	8000cb0 <__aeabi_i2f>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4620      	mov	r0, r4
 8001d56:	f7fe fef5 	bl	8000b44 <__aeabi_fsub>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fffa 	bl	8000d58 <__aeabi_fmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9bc 	bl	80010e4 <__aeabi_f2uiz>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	81bb      	strh	r3, [r7, #12]
    uint8_t  u8_number   = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	757b      	strb	r3, [r7, #21]

    if (s_LED_7SEG.u8_position_led < 3)
 8001d74:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d76:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d823      	bhi.n	8001dc8 <APP_LED_7SEG_TaskUpdate+0x2ac>
    {
      u8_number
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001d80:	89bc      	ldrh	r4, [r7, #12]
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d84:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	200a      	movs	r0, #10
 8001d8e:	f000 f93b 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001d92:	4603      	mov	r3, r0
 8001d94:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	1aca      	subs	r2, r1, r3
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001daa:	4613      	mov	r3, r2
 8001dac:	757b      	strb	r3, [r7, #21]
 8001dae:	e024      	b.n	8001dfa <APP_LED_7SEG_TaskUpdate+0x2de>
 8001db0:	20000668 	.word	0x20000668
 8001db4:	447a0000 	.word	0x447a0000
 8001db8:	42c80000 	.word	0x42c80000
 8001dbc:	cccccccd 	.word	0xcccccccd
 8001dc0:	20000078 	.word	0x20000078
 8001dc4:	41200000 	.word	0x41200000
    }
    else
    {
      u8_number
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001dc8:	7bfc      	ldrb	r4, [r7, #15]
 8001dca:	4b56      	ldr	r3, [pc, #344]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001dcc:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	3b02      	subs	r3, #2
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	200a      	movs	r0, #10
 8001dda:	f000 f915 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001dde:	4603      	mov	r3, r0
 8001de0:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001de4:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001de6:	fba3 2301 	umull	r2, r3, r3, r1
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	4613      	mov	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	1aca      	subs	r2, r1, r3
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001df6:	4613      	mov	r3, r2
 8001df8:	757b      	strb	r3, [r7, #21]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001dfa:	7d7b      	ldrb	r3, [r7, #21]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f899 	bl	8001f34 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 3)
 8001e02:	4b48      	ldr	r3, [pc, #288]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e04:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d17a      	bne.n	8001f04 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001e0e:	4b45      	ldr	r3, [pc, #276]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e10:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001e12:	4b44      	ldr	r3, [pc, #272]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e14:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001e16:	7d7b      	ldrb	r3, [r7, #21]
 8001e18:	4a44      	ldr	r2, [pc, #272]	@ (8001f2c <APP_LED_7SEG_TaskUpdate+0x410>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001e1c:	09db      	lsrs	r3, r3, #7
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	f7ff fde3 	bl	80019ec <BSP_GPIO_SetState>
 8001e26:	e06d      	b.n	8001f04 <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else
  {
    uint8_t  u8_integer  = (uint8_t)(*s_LED_7SEG.p_power);
 8001e28:	4b3e      	ldr	r3, [pc, #248]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f958 	bl	80010e4 <__aeabi_f2uiz>
 8001e34:	4603      	mov	r3, r0
 8001e36:	74fb      	strb	r3, [r7, #19]
    uint16_t u16_decimal = (uint16_t)((*s_LED_7SEG.p_power - u8_integer) * 100);
 8001e38:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e3c:	681c      	ldr	r4, [r3, #0]
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe ff35 	bl	8000cb0 <__aeabi_i2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe fe7a 	bl	8000b44 <__aeabi_fsub>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4937      	ldr	r1, [pc, #220]	@ (8001f30 <APP_LED_7SEG_TaskUpdate+0x414>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe ff7f 	bl	8000d58 <__aeabi_fmul>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff f941 	bl	80010e4 <__aeabi_f2uiz>
 8001e62:	4603      	mov	r3, r0
 8001e64:	823b      	strh	r3, [r7, #16]
    uint8_t  u8_number   = 0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	753b      	strb	r3, [r7, #20]

    if (s_LED_7SEG.u8_position_led < 4)
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e6c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d817      	bhi.n	8001ea6 <APP_LED_7SEG_TaskUpdate+0x38a>
    {
      u8_number
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001e76:	8a3c      	ldrh	r4, [r7, #16]
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e7a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	4619      	mov	r1, r3
 8001e82:	200a      	movs	r0, #10
 8001e84:	f000 f8c0 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001e8e:	4b26      	ldr	r3, [pc, #152]	@ (8001f28 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001e90:	fba3 2301 	umull	r2, r3, r3, r1
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	1aca      	subs	r2, r1, r3
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	753b      	strb	r3, [r7, #20]
 8001ea4:	e018      	b.n	8001ed8 <APP_LED_7SEG_TaskUpdate+0x3bc>
    }
    else
    {
      u8_number
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001ea6:	7cfc      	ldrb	r4, [r7, #19]
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001eaa:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	3b02      	subs	r3, #2
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	200a      	movs	r0, #10
 8001eb8:	f000 f8a6 	bl	8002008 <APP_LED_7_SEG_Pow>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001ec2:	4b19      	ldr	r3, [pc, #100]	@ (8001f28 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001ec4:	fba3 2301 	umull	r2, r3, r3, r1
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	4613      	mov	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4413      	add	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	1aca      	subs	r2, r1, r3
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	753b      	strb	r3, [r7, #20]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001ed8:	7d3b      	ldrb	r3, [r7, #20]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f82a 	bl	8001f34 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 4)
 8001ee0:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001ee2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d10b      	bne.n	8001f04 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001eec:	4b0d      	ldr	r3, [pc, #52]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001eee:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001ef2:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001ef4:	7d3b      	ldrb	r3, [r7, #20]
 8001ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f2c <APP_LED_7SEG_TaskUpdate+0x410>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001efa:	09db      	lsrs	r3, r3, #7
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	f7ff fd74 	bl	80019ec <BSP_GPIO_SetState>
    }
  }
  
  APP_LED_7SEG_ScanLed();
 8001f04:	f000 f846 	bl	8001f94 <APP_LED_7SEG_ScanLed>
  s_LED_7SEG.u8_position_led++;
 8001f08:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f0a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	3301      	adds	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b03      	ldr	r3, [pc, #12]	@ (8001f24 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001f16:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
}
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd90      	pop	{r4, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000668 	.word	0x20000668
 8001f28:	cccccccd 	.word	0xcccccccd
 8001f2c:	20000078 	.word	0x20000078
 8001f30:	42c80000 	.word	0x42c80000

08001f34 <APP_LED_7SEG_DisplayLed>:

static void
APP_LED_7SEG_DisplayLed (uint8_t u8_number)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
 8001f42:	e01a      	b.n	8001f7a <APP_LED_7SEG_DisplayLed+0x46>
  {
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[i],
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	4a11      	ldr	r2, [pc, #68]	@ (8001f8c <APP_LED_7SEG_DisplayLed+0x58>)
 8001f48:	330c      	adds	r3, #12
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	6858      	ldr	r0, [r3, #4]
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
                      s_LED_7SEG.u32_pin_led[i],
 8001f52:	4a0e      	ldr	r2, [pc, #56]	@ (8001f8c <APP_LED_7SEG_DisplayLed+0x58>)
 8001f54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                      (u8_data_mask_led[u8_number] >> i) & 0x01);
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <APP_LED_7SEG_DisplayLed+0x5c>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	fa42 f303 	asr.w	r3, r2, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	b2db      	uxtb	r3, r3
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[i],
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f7ff fd3c 	bl	80019ec <BSP_GPIO_SetState>
  for (uint8_t i = 0; i < 8; i++)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b07      	cmp	r3, #7
 8001f7e:	d9e1      	bls.n	8001f44 <APP_LED_7SEG_DisplayLed+0x10>
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000668 	.word	0x20000668
 8001f90:	20000078 	.word	0x20000078

08001f94 <APP_LED_7SEG_ScanLed>:

static void
APP_LED_7SEG_ScanLed (void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < NUMBER_OF_LED; i++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	71fb      	strb	r3, [r7, #7]
 8001f9e:	e028      	b.n	8001ff2 <APP_LED_7SEG_ScanLed+0x5e>
  {
    if (s_LED_7SEG.u8_position_led == i)
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <APP_LED_7SEG_ScanLed+0x70>)
 8001fa2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	79fa      	ldrb	r2, [r7, #7]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10f      	bne.n	8001fce <APP_LED_7SEG_ScanLed+0x3a>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4a14      	ldr	r2, [pc, #80]	@ (8002004 <APP_LED_7SEG_ScanLed+0x70>)
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	6858      	ldr	r0, [r3, #4]
 8001fba:	79fb      	ldrb	r3, [r7, #7]
                        s_LED_7SEG.u32_pin_control[i],
 8001fbc:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <APP_LED_7SEG_ScanLed+0x70>)
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f7ff fd10 	bl	80019ec <BSP_GPIO_SetState>
                        1);
      continue;
 8001fcc:	e00e      	b.n	8001fec <APP_LED_7SEG_ScanLed+0x58>
    }
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002004 <APP_LED_7SEG_ScanLed+0x70>)
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	6858      	ldr	r0, [r3, #4]
 8001fda:	79fb      	ldrb	r3, [r7, #7]
                      s_LED_7SEG.u32_pin_control[i],
 8001fdc:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <APP_LED_7SEG_ScanLed+0x70>)
 8001fde:	3308      	adds	r3, #8
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7ff fd00 	bl	80019ec <BSP_GPIO_SetState>
  for (uint8_t i = 0; i < NUMBER_OF_LED; i++)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	71fb      	strb	r3, [r7, #7]
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d9d3      	bls.n	8001fa0 <APP_LED_7SEG_ScanLed+0xc>
                      0);
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000668 	.word	0x20000668

08002008 <APP_LED_7_SEG_Pow>:

static uint32_t
APP_LED_7_SEG_Pow (uint8_t u8_x, uint8_t u8_y)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	460a      	mov	r2, r1
 8002012:	71fb      	strb	r3, [r7, #7]
 8002014:	4613      	mov	r3, r2
 8002016:	71bb      	strb	r3, [r7, #6]
  uint32_t u32_ret = 1;
 8002018:	2301      	movs	r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 1; i <= u8_y; i++)
 800201c:	2301      	movs	r3, #1
 800201e:	72fb      	strb	r3, [r7, #11]
 8002020:	e007      	b.n	8002032 <APP_LED_7_SEG_Pow+0x2a>
  {
    u32_ret *= u8_x;
 8002022:	79fa      	ldrb	r2, [r7, #7]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	fb02 f303 	mul.w	r3, r2, r3
 800202a:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 1; i <= u8_y; i++)
 800202c:	7afb      	ldrb	r3, [r7, #11]
 800202e:	3301      	adds	r3, #1
 8002030:	72fb      	strb	r3, [r7, #11]
 8002032:	7afa      	ldrb	r2, [r7, #11]
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	429a      	cmp	r2, r3
 8002038:	d9f3      	bls.n	8002022 <APP_LED_7_SEG_Pow+0x1a>
  }
  return u32_ret;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
	...

08002048 <ACS712_VoltageConverterCurrent>:
   *   PUBLIC FUNCTIONS
   **********************/

// Unit Voltage mV
  static inline float ACS712_VoltageConverterCurrent(float f_mVoltage)
  {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
#if  ACS712_0_30A
	  return (f_mVoltage - 30) / 66.0;
 8002050:	4906      	ldr	r1, [pc, #24]	@ (800206c <ACS712_VoltageConverterCurrent+0x24>)
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fd76 	bl	8000b44 <__aeabi_fsub>
 8002058:	4603      	mov	r3, r0
 800205a:	4905      	ldr	r1, [pc, #20]	@ (8002070 <ACS712_VoltageConverterCurrent+0x28>)
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe ff2f 	bl	8000ec0 <__aeabi_fdiv>
 8002062:	4603      	mov	r3, r0
	  return f_mVoltage / 100.0;
#endif
#if  ACS712_0_5A
	  return f_mVoltage / 185.0;
#endif
  }
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	41f00000 	.word	0x41f00000
 8002070:	42840000 	.word	0x42840000

08002074 <APP_READ_DATA_CreateTask>:
 * The function APP_READ_DATA_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_READ_DATA_CreateTask (void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8002078:	4902      	ldr	r1, [pc, #8]	@ (8002084 <APP_READ_DATA_CreateTask+0x10>)
 800207a:	4803      	ldr	r0, [pc, #12]	@ (8002088 <APP_READ_DATA_CreateTask+0x14>)
 800207c:	f002 fdf4 	bl	8004c68 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000098 	.word	0x20000098
 8002088:	20000094 	.word	0x20000094

0800208c <APP_READ_DATA_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_READ_DATA_Init (void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_read_data.p_vol_cur_buffer     = &s_data_system.s_vol_cur_buffer;
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <APP_READ_DATA_Init+0x34>)
 8002092:	4a0c      	ldr	r2, [pc, #48]	@ (80020c4 <APP_READ_DATA_Init+0x38>)
 8002094:	605a      	str	r2, [r3, #4]
  s_read_data.p_vol_cur_buffer_irq = &s_data_system.s_vol_cur_buffer_irq;
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <APP_READ_DATA_Init+0x34>)
 8002098:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <APP_READ_DATA_Init+0x3c>)
 800209a:	601a      	str	r2, [r3, #0]
  s_read_data.p_voltage            = &s_data_system.f_voltage;
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <APP_READ_DATA_Init+0x34>)
 800209e:	4a0b      	ldr	r2, [pc, #44]	@ (80020cc <APP_READ_DATA_Init+0x40>)
 80020a0:	609a      	str	r2, [r3, #8]
  s_read_data.p_current            = &s_data_system.f_current;
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <APP_READ_DATA_Init+0x34>)
 80020a4:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <APP_READ_DATA_Init+0x44>)
 80020a6:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer);
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <APP_READ_DATA_Init+0x34>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f002 fd33 	bl	8004b18 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80020b2:	4b03      	ldr	r3, [pc, #12]	@ (80020c0 <APP_READ_DATA_Init+0x34>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 fd2e 	bl	8004b18 <RING_BUFFER_Init>
}
 80020bc:	bf00      	nop
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200006d8 	.word	0x200006d8
 80020c4:	200004a8 	.word	0x200004a8
 80020c8:	2000045c 	.word	0x2000045c
 80020cc:	20000634 	.word	0x20000634
 80020d0:	20000638 	.word	0x20000638

080020d4 <APP_READ_DATA_HandleDMA_IRQ>:

void
APP_READ_DATA_HandleDMA_IRQ (flagIRQ_dma_t status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if (status == FLAG_TRANSFER_COMPLETE)
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d143      	bne.n	800216c <APP_READ_DATA_HandleDMA_IRQ+0x98>
  {
    s_read_data.value_temp_irq[0]
        = (uint8_t)(s_data_system.u16_adc_value[0] >> 8);
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80020e6:	f8b3 3280 	ldrh.w	r3, [r3, #640]	@ 0x280
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 80020f4:	741a      	strb	r2, [r3, #16]
    s_read_data.value_temp_irq[1] = (uint8_t)(s_data_system.u16_adc_value[0]);
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80020f8:	f8b3 3280 	ldrh.w	r3, [r3, #640]	@ 0x280
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	4b1d      	ldr	r3, [pc, #116]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002102:	745a      	strb	r2, [r3, #17]

    s_read_data.value_temp_irq[2]
        = (uint8_t)(s_data_system.u16_adc_value[1] >> 8);
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 8002106:	f8b3 3282 	ldrh.w	r3, [r3, #642]	@ 0x282
 800210a:	b29b      	uxth	r3, r3
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	b29b      	uxth	r3, r3
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002114:	749a      	strb	r2, [r3, #18]
    s_read_data.value_temp_irq[3] = (uint8_t)(s_data_system.u16_adc_value[0]);
 8002116:	4b17      	ldr	r3, [pc, #92]	@ (8002174 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 8002118:	f8b3 3280 	ldrh.w	r3, [r3, #640]	@ 0x280
 800211c:	b29b      	uxth	r3, r3
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002122:	74da      	strb	r2, [r3, #19]

    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002124:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002126:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[0]);
 8002128:	4a13      	ldr	r2, [pc, #76]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800212a:	7c12      	ldrb	r2, [r2, #16]
 800212c:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f002 fd35 	bl	8004ba0 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002138:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[1]);
 800213a:	4a0f      	ldr	r2, [pc, #60]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800213c:	7c52      	ldrb	r2, [r2, #17]
 800213e:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fd2c 	bl	8004ba0 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800214a:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[2]);
 800214c:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800214e:	7c92      	ldrb	r2, [r2, #18]
 8002150:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fd23 	bl	8004ba0 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800215c:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[3]);
 800215e:	4a06      	ldr	r2, [pc, #24]	@ (8002178 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002160:	7cd2      	ldrb	r2, [r2, #19]
 8002162:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fd1a 	bl	8004ba0 <RING_BUFFER_Push_Data>
  }
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200003c4 	.word	0x200003c4
 8002178:	200006d8 	.word	0x200006d8

0800217c <APP_READ_DATA_TaskUpdate>:
 * @return If the ring buffer is empty, the function `APP_READ_DATA_TaskUpdate`
 * will return without performing any further operations.
 */
static void
APP_READ_DATA_TaskUpdate (void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq))
 8002182:	4b59      	ldr	r3, [pc, #356]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fcea 	bl	8004b60 <RING_BUFFER_Is_Empty>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 80a5 	bne.w	80022de <APP_READ_DATA_TaskUpdate+0x162>
  uint16_t  u16_value_temp;
  uint8_t   u8_value[4];

  // u8_value[0] 8 bit high of adc-channel 1
  u8_value[0] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 8002194:	4b54      	ldr	r3, [pc, #336]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002196:	681b      	ldr	r3, [r3, #0]
  u8_value[0] = RING_BUFFER_Pull_Data(
 8002198:	4618      	mov	r0, r3
 800219a:	f002 fd26 	bl	8004bea <RING_BUFFER_Pull_Data>
 800219e:	4603      	mov	r3, r0
 80021a0:	713b      	strb	r3, [r7, #4]

  // u8_value[1] 8 bit low of adc-channel 1
  u8_value[1] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80021a2:	4b51      	ldr	r3, [pc, #324]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
  u8_value[1] = RING_BUFFER_Pull_Data(
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 fd1f 	bl	8004bea <RING_BUFFER_Pull_Data>
 80021ac:	4603      	mov	r3, r0
 80021ae:	717b      	strb	r3, [r7, #5]

  // u8_value[2] 8 bit high of adc-channel 2
  u8_value[2] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80021b0:	4b4d      	ldr	r3, [pc, #308]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
  u8_value[2] = RING_BUFFER_Pull_Data(
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 fd18 	bl	8004bea <RING_BUFFER_Pull_Data>
 80021ba:	4603      	mov	r3, r0
 80021bc:	71bb      	strb	r3, [r7, #6]

  // u8_value[3] 8 bit low of adc-channel 2
  u8_value[3] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80021be:	4b4a      	ldr	r3, [pc, #296]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
  u8_value[3] = RING_BUFFER_Pull_Data(
 80021c2:	4618      	mov	r0, r3
 80021c4:	f002 fd11 	bl	8004bea <RING_BUFFER_Pull_Data>
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]

  u16_value_temp = (uint16_t)((u8_value[0] << 8) | (u8_value[1]));
 80021cc:	793b      	ldrb	r3, [r7, #4]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	797b      	ldrb	r3, [r7, #5]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	81fb      	strh	r3, [r7, #14]
  APP_READ_DATA_ConvertVoltage(u16_value_temp);
 80021dc:	89fb      	ldrh	r3, [r7, #14]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f884 	bl	80022ec <APP_READ_DATA_ConvertVoltage>

  u16_value_temp = (uint16_t)((u8_value[2] << 8) | (u8_value[3]));
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	b21a      	sxth	r2, r3
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	81fb      	strh	r3, [r7, #14]
  APP_READ_DATA_ConvertCurrent(u16_value_temp);
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f8b6 	bl	8002368 <APP_READ_DATA_ConvertCurrent>

  // Transmission Data to app_data_transmission
  p_value_temp = (uint32_t *)s_read_data.p_voltage;
 80021fc:	4b3a      	ldr	r3, [pc, #232]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0e1b      	lsrs	r3, r3, #24
 8002208:	b2db      	uxtb	r3, r3
 800220a:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0c1b      	lsrs	r3, r3, #16
 8002212:	b2db      	uxtb	r3, r3
 8002214:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	b2db      	uxtb	r3, r3
 800221e:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002228:	4b2f      	ldr	r3, [pc, #188]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 800222a:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 800222c:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800222e:	4611      	mov	r1, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f002 fcb5 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002236:	4b2c      	ldr	r3, [pc, #176]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002238:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 800223a:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fcae 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002244:	4b28      	ldr	r3, [pc, #160]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002246:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 8002248:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fca7 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002252:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002254:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 8002256:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002258:	4611      	mov	r1, r2
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fca0 	bl	8004ba0 <RING_BUFFER_Push_Data>

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer, '\r');
 8002260:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	210d      	movs	r1, #13
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fc9a 	bl	8004ba0 <RING_BUFFER_Push_Data>

  p_value_temp = (uint32_t *)s_read_data.p_current;
 800226c:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e1b      	lsrs	r3, r3, #24
 8002278:	b2db      	uxtb	r3, r3
 800227a:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0c1b      	lsrs	r3, r3, #16
 8002282:	b2db      	uxtb	r3, r3
 8002284:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b2db      	uxtb	r3, r3
 800228e:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002298:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 800229a:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 800229c:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fc7d 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80022a8:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 80022aa:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fc76 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 80022b8:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 fc6f 	bl	8004ba0 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80022c4:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 80022c6:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fc68 	bl	8004ba0 <RING_BUFFER_Push_Data>

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer, '\r');
 80022d0:	4b05      	ldr	r3, [pc, #20]	@ (80022e8 <APP_READ_DATA_TaskUpdate+0x16c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	210d      	movs	r1, #13
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fc62 	bl	8004ba0 <RING_BUFFER_Push_Data>
 80022dc:	e000      	b.n	80022e0 <APP_READ_DATA_TaskUpdate+0x164>
    return;
 80022de:	bf00      	nop
}
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200006d8 	.word	0x200006d8

080022ec <APP_READ_DATA_ConvertVoltage>:
 * @param u16_adc_value_voltage The parameter `u16_adc_value_voltage` is a
 * 16-bit unsigned integer representing the ADC value of the voltage being read.
 */
static void
APP_READ_DATA_ConvertVoltage (uint16_t u16_adc_value_voltage)
{
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 80022f6:	88fb      	ldrh	r3, [r7, #6]
 80022f8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	461a      	mov	r2, r3
 8002302:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <APP_READ_DATA_ConvertVoltage+0x6c>)
 8002304:	fba3 1302 	umull	r1, r3, r3, r2
 8002308:	1ad2      	subs	r2, r2, r3
 800230a:	0852      	lsrs	r2, r2, #1
 800230c:	4413      	add	r3, r2
 800230e:	0adb      	lsrs	r3, r3, #11
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe fcc9 	bl	8000ca8 <__aeabi_ui2f>
 8002316:	4603      	mov	r3, r0
 8002318:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_voltage, LL_ADC_RESOLUTION_12B);

  *s_read_data.p_voltage = f_mVolt * 11.0 / 100.0;
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7fe f88e 	bl	800043c <__aeabi_f2d>
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <APP_READ_DATA_ConvertVoltage+0x70>)
 8002326:	f7fe f8e1 	bl	80004ec <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <APP_READ_DATA_ConvertVoltage+0x74>)
 8002338:	f7fe fa02 	bl	8000740 <__aeabi_ddiv>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4908      	ldr	r1, [pc, #32]	@ (8002364 <APP_READ_DATA_ConvertVoltage+0x78>)
 8002342:	688c      	ldr	r4, [r1, #8]
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fba8 	bl	8000a9c <__aeabi_d2f>
 800234c:	4603      	mov	r3, r0
 800234e:	6023      	str	r3, [r4, #0]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bd90      	pop	{r4, r7, pc}
 8002358:	00100101 	.word	0x00100101
 800235c:	40260000 	.word	0x40260000
 8002360:	40590000 	.word	0x40590000
 8002364:	200006d8 	.word	0x200006d8

08002368 <APP_READ_DATA_ConvertCurrent>:

static void
APP_READ_DATA_ConvertCurrent (uint16_t u16_adc_value_current)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	461a      	mov	r2, r3
 800237e:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <APP_READ_DATA_ConvertCurrent+0x44>)
 8002380:	fba3 1302 	umull	r1, r3, r3, r2
 8002384:	1ad2      	subs	r2, r2, r3
 8002386:	0852      	lsrs	r2, r2, #1
 8002388:	4413      	add	r3, r2
 800238a:	0adb      	lsrs	r3, r3, #11
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe fc8b 	bl	8000ca8 <__aeabi_ui2f>
 8002392:	4603      	mov	r3, r0
 8002394:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_current, LL_ADC_RESOLUTION_12B);

  *s_read_data.p_current = ACS712_VoltageConverterCurrent(f_mVolt);
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <APP_READ_DATA_ConvertCurrent+0x48>)
 8002398:	68dc      	ldr	r4, [r3, #12]
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fe54 	bl	8002048 <ACS712_VoltageConverterCurrent>
 80023a0:	4603      	mov	r3, r0
 80023a2:	6023      	str	r3, [r4, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	00100101 	.word	0x00100101
 80023b0:	200006d8 	.word	0x200006d8

080023b4 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	334c      	adds	r3, #76	@ 0x4c
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	e001      	b.n	80023d4 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 80023d0:	4b03      	ldr	r3, [pc, #12]	@ (80023e0 <LL_ADC_DMA_GetRegAddr+0x2c>)
 80023d2:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr
 80023e0:	4001244c 	.word	0x4001244c

080023e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL) == (LL_ADC_REG_TRIG_SOFTWARE));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80023f4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80023f8:	bf0c      	ite	eq
 80023fa:	2301      	moveq	r3, #1
 80023fc:	2300      	movne	r3, #0
 80023fe:	b2db      	uxtb	r3, r3
}
 8002400:	4618      	mov	r0, r3
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	609a      	str	r2, [r3, #8]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	bc80      	pop	{r7}
 800242c:	4770      	bx	lr

0800242e <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <LL_ADC_Disable>:
  * @rmtoll CR2      ADON           LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 0201 	bic.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr

0800246a <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b01      	cmp	r3, #1
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 800248e:	b480      	push	{r7}
 8002490:	b083      	sub	sp, #12
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f043 0204 	orr.w	r2, r3, #4
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	609a      	str	r2, [r3, #8]
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	609a      	str	r2, [r3, #8]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f06f 0202 	mvn.w	r2, #2
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <BSP_ADC_ConversionStop_Disable>:
 *   INLINE PRIVATE FUNCTION
 *****************************************************************************/

static inline void
BSP_ADC_ConversionStop_Disable (ADC_TypeDef *p_ADC)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  // Disable the ADC peripheral
  LL_ADC_Disable(p_ADC);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff9d 	bl	800244c <LL_ADC_Disable>

  // Wait for ADC effectively disabled
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <BSP_ADC_ConversionStop_Disable+0x38>)
 8002514:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002518:	601a      	str	r2, [r3, #0]
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 800251a:	e003      	b.n	8002524 <BSP_ADC_ConversionStop_Disable+0x20>
  {
    if (u32_adc_timeout == 0)
 800251c:	4b07      	ldr	r3, [pc, #28]	@ (800253c <BSP_ADC_ConversionStop_Disable+0x38>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <BSP_ADC_ConversionStop_Disable+0x2e>
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7ff ffa0 	bl	800246a <LL_ADC_IsEnabled>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f5      	bne.n	800251c <BSP_ADC_ConversionStop_Disable+0x18>
 8002530:	e000      	b.n	8002534 <BSP_ADC_ConversionStop_Disable+0x30>
    {
      return;
 8002532:	bf00      	nop
    }
  }
}
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200006ec 	.word	0x200006ec

08002540 <BSP_ADC_Enable>:

static inline void
BSP_ADC_Enable (ADC_TypeDef *p_ADC)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if (LL_ADC_IsEnabled(p_ADC) == RESET)
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff8e 	bl	800246a <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <BSP_ADC_Enable+0x3c>
  {
    LL_ADC_Enable(p_ADC);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff6a 	bl	800242e <LL_ADC_Enable>
    // Wait for ADC effectively enabled
    u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <BSP_ADC_Enable+0x44>)
 800255c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002560:	601a      	str	r2, [r3, #0]
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 8002562:	e003      	b.n	800256c <BSP_ADC_Enable+0x2c>
    {
      if (u32_adc_timeout == 0)
 8002564:	4b07      	ldr	r3, [pc, #28]	@ (8002584 <BSP_ADC_Enable+0x44>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <BSP_ADC_Enable+0x3a>
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff7c 	bl	800246a <LL_ADC_IsEnabled>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f5      	beq.n	8002564 <BSP_ADC_Enable+0x24>
 8002578:	e000      	b.n	800257c <BSP_ADC_Enable+0x3c>
      {
        return;
 800257a:	bf00      	nop
      }
    }
  }
}
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200006ec 	.word	0x200006ec

08002588 <BSP_ADC_Start_Calibration>:
 *   PUBLIC FUNCTION
 *****************************************************************************/

void
BSP_ADC_Start_Calibration (ADC_TypeDef *p_ADC)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  // 1. Disable ADC peripheral
  BSP_ADC_ConversionStop_Disable(p_ADC);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ffb7 	bl	8002504 <BSP_ADC_ConversionStop_Disable>

  // 2. Calibration prerequisite delay before starting the calibration.
  // - ADC must be enabled for at least two ADC clock cycles
  BSP_ADC_Enable(p_ADC);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffd2 	bl	8002540 <BSP_ADC_Enable>

  // Hardware prerequisite: delay before starting the calibration.
  //  - Computation of CPU clock cycles corresponding to ADC clock cycles.
  //  - Wait for the expected ADC clock cycles delay
  LL_mDelay(10);
 800259c:	200a      	movs	r0, #10
 800259e:	f002 fa89 	bl	8004ab4 <LL_mDelay>

  // 3. Resets ADC calibration registers
  p_ADC->CR2 |= ADC_CR2_RSTCAL;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f043 0208 	orr.w	r2, r3, #8
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 80025ae:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <BSP_ADC_Start_Calibration+0x78>)
 80025b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025b4:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 80025b6:	e003      	b.n	80025c0 <BSP_ADC_Start_Calibration+0x38>
  {
    if (u32_adc_timeout == 0)
 80025b8:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <BSP_ADC_Start_Calibration+0x78>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d018      	beq.n	80025f2 <BSP_ADC_Start_Calibration+0x6a>
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f5      	bne.n	80025b8 <BSP_ADC_Start_Calibration+0x30>
      return;
    }
  }

  // 4. Start ADC calibration
  LL_ADC_StartCalibration(p_ADC);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff5e 	bl	800248e <LL_ADC_StartCalibration>

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 80025d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <BSP_ADC_Start_Calibration+0x78>)
 80025d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025d8:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 80025da:	e003      	b.n	80025e4 <BSP_ADC_Start_Calibration+0x5c>
  {
    if (u32_adc_timeout == 0)
 80025dc:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <BSP_ADC_Start_Calibration+0x78>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <BSP_ADC_Start_Calibration+0x6e>
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f5      	bne.n	80025dc <BSP_ADC_Start_Calibration+0x54>
 80025f0:	e002      	b.n	80025f8 <BSP_ADC_Start_Calibration+0x70>
      return;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <BSP_ADC_Start_Calibration+0x70>
    {
      return;
 80025f6:	bf00      	nop
    }
  }
}
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200006ec 	.word	0x200006ec

08002604 <BSP_ADC_Start_DMA>:

// Using with >= 2 Channel in ADC
void
BSP_ADC_Start_DMA (ADC_TypeDef *p_ADC, uint16_t *pData, uint32_t Length)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  // Enable the ADC peripheral
  BSP_ADC_Enable(p_ADC);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ff95 	bl	8002540 <BSP_ADC_Enable>

  // Clear previous flags (EOC)
  LL_ADC_ClearFlag_EOS(p_ADC);
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff ff67 	bl	80024ea <LL_ADC_ClearFlag_EOS>

  LL_ADC_REG_SetDMATransfer(p_ADC, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 800261c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff fef2 	bl	800240a <LL_ADC_REG_SetDMATransfer>

  BSP_DMA_Start_IT(DMA1,
 8002626:	2100      	movs	r1, #0
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f7ff fec3 	bl	80023b4 <LL_ADC_DMA_GetRegAddr>
 800262e:	4601      	mov	r1, r0
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	460a      	mov	r2, r1
 800263a:	2101      	movs	r1, #1
 800263c:	480a      	ldr	r0, [pc, #40]	@ (8002668 <BSP_ADC_Start_DMA+0x64>)
 800263e:	f000 f9c5 	bl	80029cc <BSP_DMA_Start_IT>
                   LL_ADC_DMA_GetRegAddr(p_ADC, LL_ADC_DMA_REG_REGULAR_DATA),
                   (uint32_t)pData,
                   Length);

  // Start ADC conversion
  if (LL_ADC_REG_IsTriggerSourceSWStart(p_ADC))
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fece 	bl	80023e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <BSP_ADC_Start_DMA+0x52>
  {
    // If software start is selected
    LL_ADC_REG_StartConversionSWStart(p_ADC);
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f7ff ff2c 	bl	80024ac <LL_ADC_REG_StartConversionSWStart>
  else
  {
    // If external trigger is selected
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
  }
}
 8002654:	e004      	b.n	8002660 <BSP_ADC_Start_DMA+0x5c>
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
 8002656:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ff35 	bl	80024ca <LL_ADC_REG_StartConversionExtTrig>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40020000 	.word	0x40020000

0800266c <BSP_ADC_TimeOut>:

void
BSP_ADC_TimeOut (void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  if (u32_adc_timeout != 0)
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <BSP_ADC_TimeOut+0x20>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d004      	beq.n	8002682 <BSP_ADC_TimeOut+0x16>
  {
    u32_adc_timeout--;
 8002678:	4b04      	ldr	r3, [pc, #16]	@ (800268c <BSP_ADC_TimeOut+0x20>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	3b01      	subs	r3, #1
 800267e:	4a03      	ldr	r2, [pc, #12]	@ (800268c <BSP_ADC_TimeOut+0x20>)
 8002680:	6013      	str	r3, [r2, #0]
  }
}
 8002682:	bf00      	nop
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	200006ec 	.word	0x200006ec

08002690 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3b01      	subs	r3, #1
 800269e:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <LL_DMA_EnableChannel+0x38>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	461a      	mov	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	3a01      	subs	r2, #1
 80026ae:	4906      	ldr	r1, [pc, #24]	@ (80026c8 <LL_DMA_EnableChannel+0x38>)
 80026b0:	5c8a      	ldrb	r2, [r1, r2]
 80026b2:	4611      	mov	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	440a      	add	r2, r1
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6013      	str	r3, [r2, #0]
}
 80026be:	bf00      	nop
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	08007be0 	.word	0x08007be0

080026cc <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	3b01      	subs	r3, #1
 80026da:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <LL_DMA_DisableChannel+0x38>)
 80026dc:	5cd3      	ldrb	r3, [r2, r3]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	3a01      	subs	r2, #1
 80026ea:	4906      	ldr	r1, [pc, #24]	@ (8002704 <LL_DMA_DisableChannel+0x38>)
 80026ec:	5c8a      	ldrb	r2, [r1, r2]
 80026ee:	4611      	mov	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	440a      	add	r2, r1
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	6013      	str	r3, [r2, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	08007be0 	.word	0x08007be0

08002708 <LL_DMA_GetMode>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  */
__STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <LL_DMA_GetMode+0x28>)
 8002718:	5cd3      	ldrb	r3, [r2, r3]
 800271a:	461a      	mov	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4413      	add	r3, r2
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0320 	and.w	r3, r3, #32
                   DMA_CCR_CIRC));
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	08007be0 	.word	0x08007be0

08002734 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	3b01      	subs	r3, #1
 8002744:	4a0b      	ldr	r2, [pc, #44]	@ (8002774 <LL_DMA_SetDataLength+0x40>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	461a      	mov	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4413      	add	r3, r2
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0c1b      	lsrs	r3, r3, #16
 8002752:	041b      	lsls	r3, r3, #16
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	3a01      	subs	r2, #1
 8002758:	4906      	ldr	r1, [pc, #24]	@ (8002774 <LL_DMA_SetDataLength+0x40>)
 800275a:	5c8a      	ldrb	r2, [r1, r2]
 800275c:	4611      	mov	r1, r2
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	440a      	add	r2, r1
 8002762:	4611      	mov	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	08007be0 	.word	0x08007be0

08002778 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b10      	cmp	r3, #16
 800278a:	d114      	bne.n	80027b6 <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3b01      	subs	r3, #1
 8002790:	4a15      	ldr	r2, [pc, #84]	@ (80027e8 <LL_DMA_ConfigAddresses+0x70>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	461a      	mov	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	461a      	mov	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	4a10      	ldr	r2, [pc, #64]	@ (80027e8 <LL_DMA_ConfigAddresses+0x70>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	461a      	mov	r2, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80027b4:	e013      	b.n	80027de <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	4a0b      	ldr	r2, [pc, #44]	@ (80027e8 <LL_DMA_ConfigAddresses+0x70>)
 80027bc:	5cd3      	ldrb	r3, [r2, r3]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	4a06      	ldr	r2, [pc, #24]	@ (80027e8 <LL_DMA_ConfigAddresses+0x70>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	60d3      	str	r3, [r2, #12]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	08007be0 	.word	0x08007be0

080027ec <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b04      	cmp	r3, #4
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b08      	cmp	r3, #8
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	605a      	str	r2, [r3, #4]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	605a      	str	r2, [r3, #4]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2208      	movs	r2, #8
 8002894:	605a      	str	r2, [r3, #4]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	4a0a      	ldr	r2, [pc, #40]	@ (80028d8 <LL_DMA_EnableIT_TC+0x38>)
 80028b0:	5cd3      	ldrb	r3, [r2, r3]
 80028b2:	461a      	mov	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4413      	add	r3, r2
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	3a01      	subs	r2, #1
 80028be:	4906      	ldr	r1, [pc, #24]	@ (80028d8 <LL_DMA_EnableIT_TC+0x38>)
 80028c0:	5c8a      	ldrb	r2, [r1, r2]
 80028c2:	4611      	mov	r1, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	440a      	add	r2, r1
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	08007be0 	.word	0x08007be0

080028dc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002914 <LL_DMA_EnableIT_TE+0x38>)
 80028ec:	5cd3      	ldrb	r3, [r2, r3]
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	3a01      	subs	r2, #1
 80028fa:	4906      	ldr	r1, [pc, #24]	@ (8002914 <LL_DMA_EnableIT_TE+0x38>)
 80028fc:	5c8a      	ldrb	r2, [r1, r2]
 80028fe:	4611      	mov	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	440a      	add	r2, r1
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6013      	str	r3, [r2, #0]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	08007be0 	.word	0x08007be0

08002918 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <LL_DMA_DisableIT_TC+0x38>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	461a      	mov	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4413      	add	r3, r2
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	3a01      	subs	r2, #1
 8002936:	4906      	ldr	r1, [pc, #24]	@ (8002950 <LL_DMA_DisableIT_TC+0x38>)
 8002938:	5c8a      	ldrb	r2, [r1, r2]
 800293a:	4611      	mov	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	440a      	add	r2, r1
 8002940:	f023 0302 	bic.w	r3, r3, #2
 8002944:	6013      	str	r3, [r2, #0]
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	08007be0 	.word	0x08007be0

08002954 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	4a0a      	ldr	r2, [pc, #40]	@ (800298c <LL_DMA_DisableIT_HT+0x38>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	3a01      	subs	r2, #1
 8002972:	4906      	ldr	r1, [pc, #24]	@ (800298c <LL_DMA_DisableIT_HT+0x38>)
 8002974:	5c8a      	ldrb	r2, [r1, r2]
 8002976:	4611      	mov	r1, r2
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	440a      	add	r2, r1
 800297c:	f023 0304 	bic.w	r3, r3, #4
 8002980:	6013      	str	r3, [r2, #0]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	08007be0 	.word	0x08007be0

08002990 <LL_DMA_DisableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	3b01      	subs	r3, #1
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <LL_DMA_DisableIT_TE+0x38>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	461a      	mov	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	3a01      	subs	r2, #1
 80029ae:	4906      	ldr	r1, [pc, #24]	@ (80029c8 <LL_DMA_DisableIT_TE+0x38>)
 80029b0:	5c8a      	ldrb	r2, [r1, r2]
 80029b2:	4611      	mov	r1, r2
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	440a      	add	r2, r1
 80029b8:	f023 0308 	bic.w	r3, r3, #8
 80029bc:	6013      	str	r3, [r2, #0]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	08007be0 	.word	0x08007be0

080029cc <BSP_DMA_Start_IT>:
BSP_DMA_Start_IT (DMA_TypeDef *p_DMA,
                  uint32_t     Channel,
                  uint32_t     SrcAddress,
                  uint32_t     DstAddress,
                  uint32_t     DataLength)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  LL_DMA_DisableChannel(p_DMA, Channel);
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff fe75 	bl	80026cc <LL_DMA_DisableChannel>

  LL_DMA_ConfigAddresses(p_DMA,
 80029e2:	2300      	movs	r3, #0
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f7ff fec3 	bl	8002778 <LL_DMA_ConfigAddresses>
                         Channel,
                         SrcAddress,
                         (uint32_t)DstAddress,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  LL_DMA_SetDataLength(p_DMA, Channel, DataLength);
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f7ff fe9c 	bl	8002734 <LL_DMA_SetDataLength>

//  LL_DMA_EnableIT_HT(p_DMA, Channel);
  LL_DMA_EnableIT_TC(p_DMA, Channel);
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f7ff ff4e 	bl	80028a0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(p_DMA, Channel);
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ff68 	bl	80028dc <LL_DMA_EnableIT_TE>

  LL_DMA_EnableChannel(p_DMA, Channel);
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fe3e 	bl	8002690 <LL_DMA_EnableChannel>
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <BSP_DMA_IRQ_Channel1_Handler>:
 * `DMA_TypeDef`, which is likely a data structure representing a Direct Memory
 * Access (DMA) controller in a micro-controller or embedded system.
 */
flagIRQ_dma_t
BSP_DMA_IRQ_Channel1_Handler (DMA_TypeDef *p_DMA)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Half Transfer Complete Interrupt management ******************************/
  if (LL_DMA_IsActiveFlag_HT1(p_DMA))
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fef3 	bl	8002810 <LL_DMA_IsActiveFlag_HT1>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00f      	beq.n	8002a50 <BSP_DMA_IRQ_Channel1_Handler+0x34>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002a30:	2101      	movs	r1, #1
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff fe68 	bl	8002708 <LL_DMA_GetMode>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d103      	bne.n	8002a46 <BSP_DMA_IRQ_Channel1_Handler+0x2a>
    {
      LL_DMA_DisableIT_HT(p_DMA, LL_DMA_CHANNEL_1);
 8002a3e:	2101      	movs	r1, #1
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff87 	bl	8002954 <LL_DMA_DisableIT_HT>
    }
    LL_DMA_ClearFlag_HT1(p_DMA);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff12 	bl	8002870 <LL_DMA_ClearFlag_HT1>
    return FLAG_HALF_TRANSFER_COMPLETE;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e02c      	b.n	8002aaa <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if (LL_DMA_IsActiveFlag_TC1(p_DMA))
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fecb 	bl	80027ec <LL_DMA_IsActiveFlag_TC1>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00f      	beq.n	8002a7c <BSP_DMA_IRQ_Channel1_Handler+0x60>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff fe52 	bl	8002708 <LL_DMA_GetMode>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <BSP_DMA_IRQ_Channel1_Handler+0x56>
    {
      LL_DMA_DisableIT_TC(p_DMA, LL_DMA_CHANNEL_1);
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff53 	bl	8002918 <LL_DMA_DisableIT_TC>
    }
    LL_DMA_ClearFlag_TC1(p_DMA);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff fef0 	bl	8002858 <LL_DMA_ClearFlag_TC1>
    return FLAG_TRANSFER_COMPLETE;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e016      	b.n	8002aaa <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Error Interrupt management **************************************/
  else if (LL_DMA_IsActiveFlag_TE1(p_DMA))
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fed9 	bl	8002834 <LL_DMA_IsActiveFlag_TE1>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00f      	beq.n	8002aa8 <BSP_DMA_IRQ_Channel1_Handler+0x8c>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fe3c 	bl	8002708 <LL_DMA_GetMode>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d103      	bne.n	8002a9e <BSP_DMA_IRQ_Channel1_Handler+0x82>
    {
      LL_DMA_DisableIT_TE(p_DMA, LL_DMA_CHANNEL_1);
 8002a96:	2101      	movs	r1, #1
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff79 	bl	8002990 <LL_DMA_DisableIT_TE>
    }
    LL_DMA_ClearFlag_TE1(p_DMA);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fef2 	bl	8002888 <LL_DMA_ClearFlag_TE1>
    return FLAG_TRANSFER_ERROR;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  return FLAG_NONE;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	@ (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b18:	d301      	bcc.n	8002b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <SysTick_Config+0x40>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b26:	210f      	movs	r1, #15
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f7ff ffc2 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <SysTick_Config+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <SysTick_Config+0x40>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk);
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <BSP_SYSTICK_TimerStart+0x18>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a03      	ldr	r2, [pc, #12]	@ (8002b64 <BSP_SYSTICK_TimerStart+0x18>)
 8002b56:	f043 0303 	orr.w	r3, r3, #3
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	e000e010 	.word	0xe000e010

08002b68 <BSP_SYSTICK_TimerInit>:
 * This function configures the SysTick timer to generate interrupts at a rate
 * of 1 millisecond, based on the system core clock.
 */
void
BSP_SYSTICK_TimerInit (void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  SysTick_Config(SystemCoreClock / 1000);
 8002b6c:	4b05      	ldr	r3, [pc, #20]	@ (8002b84 <BSP_SYSTICK_TimerInit+0x1c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <BSP_SYSTICK_TimerInit+0x20>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	099b      	lsrs	r3, r3, #6
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ffc5 	bl	8002b08 <SysTick_Config>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200000a4 	.word	0x200000a4
 8002b88:	10624dd3 	.word	0x10624dd3

08002b8c <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	330c      	adds	r3, #12
 8002b98:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f043 0320 	orr.w	r3, r3, #32
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	330c      	adds	r3, #12
 8002bae:	69fa      	ldr	r2, [r7, #28]
 8002bb0:	61ba      	str	r2, [r7, #24]
 8002bb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	6979      	ldr	r1, [r7, #20]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e7      	bne.n	8002b94 <LL_USART_EnableIT_RXNE+0x8>
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	3724      	adds	r7, #36	@ 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	@ 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	e853 3f00 	ldrex	r3, [r3]
 8002be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bec:	61fb      	str	r3, [r7, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	61ba      	str	r2, [r7, #24]
 8002bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6979      	ldr	r1, [r7, #20]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	613b      	str	r3, [r7, #16]
   return(result);
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e7      	bne.n	8002bd8 <LL_USART_EnableIT_TXE+0x8>
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b089      	sub	sp, #36	@ 0x24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3314      	adds	r3, #20
 8002c20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3314      	adds	r3, #20
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	61ba      	str	r2, [r7, #24]
 8002c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6979      	ldr	r1, [r7, #20]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	e841 2300 	strex	r3, r2, [r1]
 8002c44:	613b      	str	r3, [r7, #16]
   return(result);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1e7      	bne.n	8002c1c <LL_USART_EnableIT_ERROR+0x8>
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3724      	adds	r7, #36	@ 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	@ 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	330c      	adds	r3, #12
 8002c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	e853 3f00 	ldrex	r3, [r3]
 8002c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f023 0320 	bic.w	r3, r3, #32
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	61ba      	str	r2, [r7, #24]
 8002c7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c80:	6979      	ldr	r1, [r7, #20]
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	e841 2300 	strex	r3, r2, [r1]
 8002c88:	613b      	str	r3, [r7, #16]
   return(result);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1e7      	bne.n	8002c60 <LL_USART_DisableIT_RXNE+0x8>
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  uartstdio_device->e_uart_irqn = uart_irqn;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	79fa      	ldrb	r2, [r7, #7]
 8002cb6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	334c      	adds	r3, #76	@ 0x4c
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f001 ff2a 	bl	8004b18 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 ff26 	bl	8004b18 <RING_BUFFER_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 8002ccc:	68b8      	ldr	r0, [r7, #8]
 8002cce:	f7ff ffa1 	bl	8002c14 <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 8002cd2:	68b8      	ldr	r0, [r7, #8]
 8002cd4:	f7ff ff5a 	bl	8002b8c <LL_USART_EnableIT_RXNE>
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 ff38 	bl	8004b60 <RING_BUFFER_Is_Empty>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e000      	b.n	8002cfc <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 8002d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d14:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002d16:	e005      	b.n	8002d24 <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d024      	beq.n	8002d68 <BSP_UART_SendChar+0x64>
    {
      return;
    }
    u32_uart_timeout--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	334c      	adds	r3, #76	@ 0x4c
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f001 ff29 	bl	8004b80 <RING_BUFFER_Is_Full>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f1      	bne.n	8002d18 <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff8c 	bl	8002c58 <LL_USART_DisableIT_RXNE>
  RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	334c      	adds	r3, #76	@ 0x4c
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 ff29 	bl	8004ba0 <RING_BUFFER_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff19 	bl	8002b8c <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff35 	bl	8002bd0 <LL_USART_EnableIT_TXE>
 8002d66:	e000      	b.n	8002d6a <BSP_UART_SendChar+0x66>
      return;
 8002d68:	bf00      	nop
}
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  while (*s)
 8002d7a:	e007      	b.n	8002d8c <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	603a      	str	r2, [r7, #0]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ffbc 	bl	8002d04 <BSP_UART_SendChar>
  while (*s)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f3      	bne.n	8002d7c <BSP_UART_SendString+0xc>
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 8002da6:	2400      	movs	r4, #0
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fed8 	bl	8004b60 <RING_BUFFER_Is_Empty>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f083 0301 	eor.w	r3, r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <BSP_UART_ReadChar+0x46>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff48 	bl	8002c58 <LL_USART_DisableIT_RXNE>
    c = (char)RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f001 ff0d 	bl	8004bea <RING_BUFFER_Pull_Data>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fed6 	bl	8002b8c <LL_USART_EnableIT_RXNE>
    return c;
 8002de0:	4623      	mov	r3, r4
 8002de2:	e000      	b.n	8002de6 <BSP_UART_ReadChar+0x48>
  }
  return c;
 8002de4:	4623      	mov	r3, r4
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
	...

08002df0 <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <BSP_UART_TimeOut+0x20>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d004      	beq.n	8002e06 <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8002dfc:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <BSP_UART_TimeOut+0x20>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	4a03      	ldr	r2, [pc, #12]	@ (8002e10 <BSP_UART_TimeOut+0x20>)
 8002e04:	6013      	str	r3, [r2, #0]
  }
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	200006f0 	.word	0x200006f0

08002e14 <__NVIC_SetPriorityGrouping>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e46:	4a04      	ldr	r2, [pc, #16]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	60d3      	str	r3, [r2, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_GetPriorityGrouping>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <__NVIC_GetPriorityGrouping+0x18>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0307 	and.w	r3, r3, #7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_EnableIRQ>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db0b      	blt.n	8002ea2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4906      	ldr	r1, [pc, #24]	@ (8002eac <__NVIC_EnableIRQ+0x34>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2001      	movs	r0, #1
 8002e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	@ (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	@ (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	@ 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_REG_SetSequencerRanks>:
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	332c      	adds	r3, #44	@ 0x2c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f80:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002f84:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	617a      	str	r2, [r7, #20]
  return result;
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	40d3      	lsrs	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	211f      	movs	r1, #31
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f003 011f 	and.w	r1, r3, #31
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	601a      	str	r2, [r3, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	3724      	adds	r7, #36	@ 0x24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <LL_ADC_SetChannelSamplingTime>:
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b08d      	sub	sp, #52	@ 0x34
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	330c      	adds	r3, #12
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	fa92 f2a2 	rbit	r2, r2
 8002ff6:	617a      	str	r2, [r7, #20]
  return result;
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	fab2 f282 	clz	r2, r2
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	40d3      	lsrs	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(*preg,
 8003008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8003012:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8003016:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6a39      	ldr	r1, [r7, #32]
 800301a:	fa91 f1a1 	rbit	r1, r1
 800301e:	61f9      	str	r1, [r7, #28]
  return result;
 8003020:	69f9      	ldr	r1, [r7, #28]
 8003022:	fab1 f181 	clz	r1, r1
 8003026:	b2c9      	uxtb	r1, r1
 8003028:	40cb      	lsrs	r3, r1
 800302a:	2107      	movs	r1, #7
 800302c:	fa01 f303 	lsl.w	r3, r1, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	401a      	ands	r2, r3
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800303a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800303e:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003042:	fa91 f1a1 	rbit	r1, r1
 8003046:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8003048:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800304a:	fab1 f181 	clz	r1, r1
 800304e:	b2c9      	uxtb	r1, r1
 8003050:	40cb      	lsrs	r3, r1
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	fa01 f303 	lsl.w	r3, r1, r3
 8003058:	431a      	orrs	r2, r3
 800305a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305c:	601a      	str	r2, [r3, #0]
}
 800305e:	bf00      	nop
 8003060:	3734      	adds	r7, #52	@ 0x34
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <LL_DMA_SetDataTransferDirection>:
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	3b01      	subs	r3, #1
 8003078:	4a0c      	ldr	r2, [pc, #48]	@ (80030ac <LL_DMA_SetDataTransferDirection+0x44>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	461a      	mov	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003088:	f023 0310 	bic.w	r3, r3, #16
 800308c:	68ba      	ldr	r2, [r7, #8]
 800308e:	3a01      	subs	r2, #1
 8003090:	4906      	ldr	r1, [pc, #24]	@ (80030ac <LL_DMA_SetDataTransferDirection+0x44>)
 8003092:	5c8a      	ldrb	r2, [r1, r2]
 8003094:	4611      	mov	r1, r2
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	440a      	add	r2, r1
 800309a:	4611      	mov	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	08007be8 	.word	0x08007be8

080030b0 <LL_DMA_SetMode>:
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3b01      	subs	r3, #1
 80030c0:	4a0b      	ldr	r2, [pc, #44]	@ (80030f0 <LL_DMA_SetMode+0x40>)
 80030c2:	5cd3      	ldrb	r3, [r2, r3]
 80030c4:	461a      	mov	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f023 0220 	bic.w	r2, r3, #32
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	4906      	ldr	r1, [pc, #24]	@ (80030f0 <LL_DMA_SetMode+0x40>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	4619      	mov	r1, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	440b      	add	r3, r1
 80030de:	4619      	mov	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	600b      	str	r3, [r1, #0]
}
 80030e6:	bf00      	nop
 80030e8:	3714      	adds	r7, #20
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bc80      	pop	{r7}
 80030ee:	4770      	bx	lr
 80030f0:	08007be8 	.word	0x08007be8

080030f4 <LL_DMA_SetPeriphIncMode>:
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3b01      	subs	r3, #1
 8003104:	4a0b      	ldr	r2, [pc, #44]	@ (8003134 <LL_DMA_SetPeriphIncMode+0x40>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	461a      	mov	r2, r3
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4413      	add	r3, r2
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3b01      	subs	r3, #1
 8003118:	4906      	ldr	r1, [pc, #24]	@ (8003134 <LL_DMA_SetPeriphIncMode+0x40>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	4619      	mov	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	440b      	add	r3, r1
 8003122:	4619      	mov	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
}
 800312a:	bf00      	nop
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	08007be8 	.word	0x08007be8

08003138 <LL_DMA_SetMemoryIncMode>:
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3b01      	subs	r3, #1
 8003148:	4a0b      	ldr	r2, [pc, #44]	@ (8003178 <LL_DMA_SetMemoryIncMode+0x40>)
 800314a:	5cd3      	ldrb	r3, [r2, r3]
 800314c:	461a      	mov	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4413      	add	r3, r2
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	3b01      	subs	r3, #1
 800315c:	4906      	ldr	r1, [pc, #24]	@ (8003178 <LL_DMA_SetMemoryIncMode+0x40>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	4619      	mov	r1, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	440b      	add	r3, r1
 8003166:	4619      	mov	r1, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	08007be8 	.word	0x08007be8

0800317c <LL_DMA_SetPeriphSize>:
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3b01      	subs	r3, #1
 800318c:	4a0b      	ldr	r2, [pc, #44]	@ (80031bc <LL_DMA_SetPeriphSize+0x40>)
 800318e:	5cd3      	ldrb	r3, [r2, r3]
 8003190:	461a      	mov	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4413      	add	r3, r2
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3b01      	subs	r3, #1
 80031a0:	4906      	ldr	r1, [pc, #24]	@ (80031bc <LL_DMA_SetPeriphSize+0x40>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	4619      	mov	r1, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	440b      	add	r3, r1
 80031aa:	4619      	mov	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	600b      	str	r3, [r1, #0]
}
 80031b2:	bf00      	nop
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	08007be8 	.word	0x08007be8

080031c0 <LL_DMA_SetMemorySize>:
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003200 <LL_DMA_SetMemorySize+0x40>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	461a      	mov	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	4906      	ldr	r1, [pc, #24]	@ (8003200 <LL_DMA_SetMemorySize+0x40>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	4619      	mov	r1, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	440b      	add	r3, r1
 80031ee:	4619      	mov	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
}
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	08007be8 	.word	0x08007be8

08003204 <LL_DMA_SetChannelPriorityLevel>:
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	3b01      	subs	r3, #1
 8003214:	4a0b      	ldr	r2, [pc, #44]	@ (8003244 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3b01      	subs	r3, #1
 8003228:	4906      	ldr	r1, [pc, #24]	@ (8003244 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	4619      	mov	r1, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	440b      	add	r3, r1
 8003232:	4619      	mov	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	08007be8 	.word	0x08007be8

08003248 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800324c:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <LL_RCC_HSE_Enable+0x18>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a03      	ldr	r2, [pc, #12]	@ (8003260 <LL_RCC_HSE_Enable+0x18>)
 8003252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003256:	6013      	str	r3, [r2, #0]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	40021000 	.word	0x40021000

08003264 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <LL_RCC_HSE_IsReady+0x20>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr
 8003284:	40021000 	.word	0x40021000

08003288 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003290:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <LL_RCC_SetSysClkSource+0x24>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 0203 	bic.w	r2, r3, #3
 8003298:	4904      	ldr	r1, [pc, #16]	@ (80032ac <LL_RCC_SetSysClkSource+0x24>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000

080032b0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80032b4:	4b03      	ldr	r3, [pc, #12]	@ (80032c4 <LL_RCC_GetSysClkSource+0x14>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 030c 	and.w	r3, r3, #12
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40021000 	.word	0x40021000

080032c8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032d0:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <LL_RCC_SetAHBPrescaler+0x24>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d8:	4904      	ldr	r1, [pc, #16]	@ (80032ec <LL_RCC_SetAHBPrescaler+0x24>)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000

080032f0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80032f8:	4b06      	ldr	r3, [pc, #24]	@ (8003314 <LL_RCC_SetAPB1Prescaler+0x24>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003300:	4904      	ldr	r1, [pc, #16]	@ (8003314 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	bc80      	pop	{r7}
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40021000 	.word	0x40021000

08003318 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003320:	4b06      	ldr	r3, [pc, #24]	@ (800333c <LL_RCC_SetAPB2Prescaler+0x24>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003328:	4904      	ldr	r1, [pc, #16]	@ (800333c <LL_RCC_SetAPB2Prescaler+0x24>)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000

08003340 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8003348:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <LL_RCC_SetADCClockSource+0x24>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003350:	4904      	ldr	r1, [pc, #16]	@ (8003364 <LL_RCC_SetADCClockSource+0x24>)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bc80      	pop	{r7}
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000

08003368 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800336c:	4b04      	ldr	r3, [pc, #16]	@ (8003380 <LL_RCC_PLL_Enable+0x18>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a03      	ldr	r2, [pc, #12]	@ (8003380 <LL_RCC_PLL_Enable+0x18>)
 8003372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	bc80      	pop	{r7}
 800337e:	4770      	bx	lr
 8003380:	40021000 	.word	0x40021000

08003384 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8003388:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <LL_RCC_PLL_IsReady+0x20>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003390:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003394:	bf0c      	ite	eq
 8003396:	2301      	moveq	r3, #1
 8003398:	2300      	movne	r3, #0
 800339a:	b2db      	uxtb	r3, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40021000 	.word	0x40021000

080033a8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	430b      	orrs	r3, r1
 80033c4:	4903      	ldr	r1, [pc, #12]	@ (80033d4 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr
 80033d4:	40021000 	.word	0x40021000

080033d8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	4907      	ldr	r1, [pc, #28]	@ (8003404 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80033ec:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80033ee:	695a      	ldr	r2, [r3, #20]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4013      	ands	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033f6:	68fb      	ldr	r3, [r7, #12]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000

08003408 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8003410:	4b08      	ldr	r3, [pc, #32]	@ (8003434 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	4907      	ldr	r1, [pc, #28]	@ (8003434 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4313      	orrs	r3, r2
 800341a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800341c:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <LL_APB1_GRP1_EnableClock+0x2c>)
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4013      	ands	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003426:	68fb      	ldr	r3, [r7, #12]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000

08003438 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003440:	4b08      	ldr	r3, [pc, #32]	@ (8003464 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	4907      	ldr	r1, [pc, #28]	@ (8003464 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800344c:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <LL_APB2_GRP1_EnableClock+0x2c>)
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4013      	ands	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8003470:	4b06      	ldr	r3, [pc, #24]	@ (800348c <LL_FLASH_SetLatency+0x24>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 0207 	bic.w	r2, r3, #7
 8003478:	4904      	ldr	r1, [pc, #16]	@ (800348c <LL_FLASH_SetLatency+0x24>)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40022000 	.word	0x40022000

08003490 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <LL_FLASH_GetLatency+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr
 80034a4:	40022000 	.word	0x40022000

080034a8 <LL_TIM_DisableARRPreload>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	601a      	str	r2, [r3, #0]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034d8:	f023 0307 	bic.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	609a      	str	r2, [r3, #8]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr

080034ee <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	605a      	str	r2, [r3, #4]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	609a      	str	r2, [r3, #8]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr

08003530 <LL_USART_Enable>:
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <LL_USART_ConfigAsyncMode>:
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	615a      	str	r2, [r3, #20]
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bc80      	pop	{r7}
 8003576:	4770      	bx	lr

08003578 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8003578:	b490      	push	{r4, r7}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	461a      	mov	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0e1b      	lsrs	r3, r3, #24
 800358c:	4413      	add	r3, r2
 800358e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	613b      	str	r3, [r7, #16]
  return result;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	fab3 f383 	clz	r3, r3
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	210f      	movs	r1, #15
 80035aa:	fa01 f303 	lsl.w	r3, r1, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	401a      	ands	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	61bb      	str	r3, [r7, #24]
  return result;
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	fa01 f303 	lsl.w	r3, r1, r3
 80035ce:	4313      	orrs	r3, r2
 80035d0:	6023      	str	r3, [r4, #0]
}
 80035d2:	bf00      	nop
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc90      	pop	{r4, r7}
 80035da:	4770      	bx	lr

080035dc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	43db      	mvns	r3, r3
 80035f2:	401a      	ands	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa93 f3a3 	rbit	r3, r3
 8003600:	613b      	str	r3, [r7, #16]
  return result;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	fab3 f383 	clz	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	408b      	lsls	r3, r1
 8003610:	431a      	orrs	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	60da      	str	r2, [r3, #12]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr

08003620 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	615a      	str	r2, [r3, #20]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr
	...

08003640 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800364c:	4a03      	ldr	r2, [pc, #12]	@ (800365c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800364e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003652:	6053      	str	r3, [r2, #4]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40010000 	.word	0x40010000

08003660 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800366a:	4a13      	ldr	r2, [pc, #76]	@ (80036b8 <LL_GPIO_AF_SetEXTISource+0x58>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3302      	adds	r3, #2
 8003672:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	43db      	mvns	r3, r3
 800367c:	ea02 0103 	and.w	r1, r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	60bb      	str	r3, [r7, #8]
  return result;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	fab3 f383 	clz	r3, r3
 8003694:	b2db      	uxtb	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	fa03 f202 	lsl.w	r2, r3, r2
 800369e:	4806      	ldr	r0, [pc, #24]	@ (80036b8 <LL_GPIO_AF_SetEXTISource+0x58>)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	430a      	orrs	r2, r1
 80036a6:	3302      	adds	r3, #2
 80036a8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40010000 	.word	0x40010000

080036bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80036c0:	2001      	movs	r0, #1
 80036c2:	f7ff feb9 	bl	8003438 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80036c6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80036ca:	f7ff fe9d 	bl	8003408 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ce:	2003      	movs	r0, #3
 80036d0:	f7ff fba0 	bl	8002e14 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80036d4:	f7ff fbc2 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 80036d8:	4603      	mov	r3, r0
 80036da:	2200      	movs	r2, #0
 80036dc:	210f      	movs	r1, #15
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fc10 	bl	8002f04 <NVIC_EncodePriority>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4619      	mov	r1, r3
 80036e8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ec:	f7ff fbe0 	bl	8002eb0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 80036f0:	f7ff ffa6 	bl	8003640 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036f4:	f000 f83e 	bl	8003774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036f8:	f000 fa52 	bl	8003ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 80036fc:	f000 fa38 	bl	8003b70 <MX_DMA_Init>
  MX_ADC1_Init();
 8003700:	f000 f87a 	bl	80037f8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003704:	f000 f974 	bl	80039f0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003708:	f000 f9da 	bl	8003ac0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800370c:	f000 f90e 	bl	800392c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003710:	f000 f93e 	bl	8003990 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Application Initialize
  APP_READ_DATA_Init();
 8003714:	f7fe fcba 	bl	800208c <APP_READ_DATA_Init>
  APP_CALCULATOR_PF_Init();
 8003718:	f7fd ff5a 	bl	80015d0 <APP_CALCULATOR_PF_Init>
  APP_DATA_TRANS_REC_Init();
 800371c:	f7fe f87a 	bl	8001814 <APP_DATA_TRANS_REC_Init>
  APP_COMMAND_Init();
 8003720:	f7fd fd5a 	bl	80011d8 <APP_COMMAND_Init>
  APP_LED_7_SEG_Init();
 8003724:	f7fe f97a 	bl	8001a1c <APP_LED_7_SEG_Init>

  // Initialize Scheduler
  SCH_Initialize();
 8003728:	f001 fa82 	bl	8004c30 <SCH_Initialize>

  // Application Create Task
  APP_READ_DATA_CreateTask();
 800372c:	f7fe fca2 	bl	8002074 <APP_READ_DATA_CreateTask>
  APP_CALCULATOR_PF_CreateTask();
 8003730:	f7fd ff42 	bl	80015b8 <APP_CALCULATOR_PF_CreateTask>
  APP_DATA_TRANS_REC_CreateTask();
 8003734:	f7fe f862 	bl	80017fc <APP_DATA_TRANS_REC_CreateTask>
  APP_COMMAND_CreateTask();
 8003738:	f7fd fd70 	bl	800121c <APP_COMMAND_CreateTask>
  APP_LED_7_SEG_CreateTask();
 800373c:	f7fe f9e2 	bl	8001b04 <APP_LED_7_SEG_CreateTask>

  // Start Scheduler
  SCH_StartScheduler();
 8003740:	f001 fa9f 	bl	8004c82 <SCH_StartScheduler>

  // Start ADC - TIM3
  BSP_ADC_Start_Calibration(ADC1);
 8003744:	4808      	ldr	r0, [pc, #32]	@ (8003768 <main+0xac>)
 8003746:	f7fe ff1f 	bl	8002588 <BSP_ADC_Start_Calibration>
  BSP_ADC_Start_DMA(ADC1, (uint16_t *)s_data_system.u16_adc_value, 2);
 800374a:	2202      	movs	r2, #2
 800374c:	4907      	ldr	r1, [pc, #28]	@ (800376c <main+0xb0>)
 800374e:	4806      	ldr	r0, [pc, #24]	@ (8003768 <main+0xac>)
 8003750:	f7fe ff58 	bl	8002604 <BSP_ADC_Start_DMA>
  TIM3->CR1 |= TIM_CR1_CEN;
 8003754:	4b06      	ldr	r3, [pc, #24]	@ (8003770 <main+0xb4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a05      	ldr	r2, [pc, #20]	@ (8003770 <main+0xb4>)
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8003760:	f001 fa96 	bl	8004c90 <SCH_HandleScheduledTask>
 8003764:	e7fc      	b.n	8003760 <main+0xa4>
 8003766:	bf00      	nop
 8003768:	40012400 	.word	0x40012400
 800376c:	20000644 	.word	0x20000644
 8003770:	40000400 	.word	0x40000400

08003774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8003778:	2002      	movs	r0, #2
 800377a:	f7ff fe75 	bl	8003468 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800377e:	bf00      	nop
 8003780:	f7ff fe86 	bl	8003490 <LL_FLASH_GetLatency>
 8003784:	4603      	mov	r3, r0
 8003786:	2b02      	cmp	r3, #2
 8003788:	d1fa      	bne.n	8003780 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800378a:	f7ff fd5d 	bl	8003248 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800378e:	bf00      	nop
 8003790:	f7ff fd68 	bl	8003264 <LL_RCC_HSE_IsReady>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d1fa      	bne.n	8003790 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_7);
 800379a:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
 800379e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80037a2:	f7ff fe01 	bl	80033a8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80037a6:	f7ff fddf 	bl	8003368 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80037aa:	bf00      	nop
 80037ac:	f7ff fdea 	bl	8003384 <LL_RCC_PLL_IsReady>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d1fa      	bne.n	80037ac <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7ff fd86 	bl	80032c8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80037bc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80037c0:	f7ff fd96 	bl	80032f0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7ff fda7 	bl	8003318 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80037ca:	2002      	movs	r0, #2
 80037cc:	f7ff fd5c 	bl	8003288 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80037d0:	bf00      	nop
 80037d2:	f7ff fd6d 	bl	80032b0 <LL_RCC_GetSysClkSource>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d1fa      	bne.n	80037d2 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(56000000);
 80037dc:	4805      	ldr	r0, [pc, #20]	@ (80037f4 <SystemClock_Config+0x80>)
 80037de:	f001 f95b 	bl	8004a98 <LL_Init1msTick>
  LL_SetSystemCoreClock(56000000);
 80037e2:	4804      	ldr	r0, [pc, #16]	@ (80037f4 <SystemClock_Config+0x80>)
 80037e4:	f001 f98a 	bl	8004afc <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_4);
 80037e8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80037ec:	f7ff fda8 	bl	8003340 <LL_RCC_SetADCClockSource>
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	03567e00 	.word	0x03567e00

080037f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08e      	sub	sp, #56	@ 0x38
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80037fe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003808:	2300      	movs	r3, #0
 800380a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800380c:	f107 0318 	add.w	r3, r7, #24
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 800382a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800382e:	f7ff fe03 	bl	8003438 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003832:	2004      	movs	r0, #4
 8003834:	f7ff fe00 	bl	8003438 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8003838:	f240 6306 	movw	r3, #1542	@ 0x606
 800383c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	1d3b      	adds	r3, r7, #4
 8003844:	4619      	mov	r1, r3
 8003846:	4834      	ldr	r0, [pc, #208]	@ (8003918 <MX_ADC1_Init+0x120>)
 8003848:	f000 fe09 	bl	800445e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800384c:	2200      	movs	r2, #0
 800384e:	2101      	movs	r1, #1
 8003850:	4832      	ldr	r0, [pc, #200]	@ (800391c <MX_ADC1_Init+0x124>)
 8003852:	f7ff fc09 	bl	8003068 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8003856:	2200      	movs	r2, #0
 8003858:	2101      	movs	r1, #1
 800385a:	4830      	ldr	r0, [pc, #192]	@ (800391c <MX_ADC1_Init+0x124>)
 800385c:	f7ff fcd2 	bl	8003204 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003860:	2220      	movs	r2, #32
 8003862:	2101      	movs	r1, #1
 8003864:	482d      	ldr	r0, [pc, #180]	@ (800391c <MX_ADC1_Init+0x124>)
 8003866:	f7ff fc23 	bl	80030b0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800386a:	2200      	movs	r2, #0
 800386c:	2101      	movs	r1, #1
 800386e:	482b      	ldr	r0, [pc, #172]	@ (800391c <MX_ADC1_Init+0x124>)
 8003870:	f7ff fc40 	bl	80030f4 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003874:	2280      	movs	r2, #128	@ 0x80
 8003876:	2101      	movs	r1, #1
 8003878:	4828      	ldr	r0, [pc, #160]	@ (800391c <MX_ADC1_Init+0x124>)
 800387a:	f7ff fc5d 	bl	8003138 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 800387e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003882:	2101      	movs	r1, #1
 8003884:	4825      	ldr	r0, [pc, #148]	@ (800391c <MX_ADC1_Init+0x124>)
 8003886:	f7ff fc79 	bl	800317c <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 800388a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800388e:	2101      	movs	r1, #1
 8003890:	4822      	ldr	r0, [pc, #136]	@ (800391c <MX_ADC1_Init+0x124>)
 8003892:	f7ff fc95 	bl	80031c0 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003896:	2300      	movs	r3, #0
 8003898:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800389a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800389e:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80038a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80038a4:	4619      	mov	r1, r3
 80038a6:	481e      	ldr	r0, [pc, #120]	@ (8003920 <MX_ADC1_Init+0x128>)
 80038a8:	f000 fba4 	bl	8003ff4 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80038b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038b4:	4619      	mov	r1, r3
 80038b6:	481a      	ldr	r0, [pc, #104]	@ (8003920 <MX_ADC1_Init+0x128>)
 80038b8:	f000 fb6a 	bl	8003f90 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 80038bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80038c0:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80038c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80038c6:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80038d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80038d6:	f107 0318 	add.w	r3, r7, #24
 80038da:	4619      	mov	r1, r3
 80038dc:	4810      	ldr	r0, [pc, #64]	@ (8003920 <MX_ADC1_Init+0x128>)
 80038de:	f000 fbb0 	bl	8004042 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80038e2:	4a10      	ldr	r2, [pc, #64]	@ (8003924 <MX_ADC1_Init+0x12c>)
 80038e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038e8:	480d      	ldr	r0, [pc, #52]	@ (8003920 <MX_ADC1_Init+0x128>)
 80038ea:	f7ff fb3d 	bl	8002f68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80038ee:	2207      	movs	r2, #7
 80038f0:	490c      	ldr	r1, [pc, #48]	@ (8003924 <MX_ADC1_Init+0x12c>)
 80038f2:	480b      	ldr	r0, [pc, #44]	@ (8003920 <MX_ADC1_Init+0x128>)
 80038f4:	f7ff fb6d 	bl	8002fd2 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 80038f8:	4a0b      	ldr	r2, [pc, #44]	@ (8003928 <MX_ADC1_Init+0x130>)
 80038fa:	f240 2105 	movw	r1, #517	@ 0x205
 80038fe:	4808      	ldr	r0, [pc, #32]	@ (8003920 <MX_ADC1_Init+0x128>)
 8003900:	f7ff fb32 	bl	8002f68 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003904:	2207      	movs	r2, #7
 8003906:	4908      	ldr	r1, [pc, #32]	@ (8003928 <MX_ADC1_Init+0x130>)
 8003908:	4805      	ldr	r0, [pc, #20]	@ (8003920 <MX_ADC1_Init+0x128>)
 800390a:	f7ff fb62 	bl	8002fd2 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800390e:	bf00      	nop
 8003910:	3738      	adds	r7, #56	@ 0x38
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40010800 	.word	0x40010800
 800391c:	40020000 	.word	0x40020000
 8003920:	40012400 	.word	0x40012400
 8003924:	02300001 	.word	0x02300001
 8003928:	02600002 	.word	0x02600002

0800392c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003940:	2001      	movs	r0, #1
 8003942:	f7ff fd61 	bl	8003408 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 800394e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003952:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003960:	f000 ff2c 	bl	80047bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003964:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003968:	f7ff fd9e 	bl	80034a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800396c:	2100      	movs	r1, #0
 800396e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003972:	f7ff fda8 	bl	80034c6 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003976:	2100      	movs	r1, #0
 8003978:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800397c:	f7ff fdb7 	bl	80034ee <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003980:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003984:	f7ff fdc5 	bl	8003512 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003996:	1d3b      	adds	r3, r7, #4
 8003998:	2200      	movs	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
 800399c:	605a      	str	r2, [r3, #4]
 800399e:	609a      	str	r2, [r3, #8]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80039a4:	2002      	movs	r0, #2
 80039a6:	f7ff fd2f 	bl	8003408 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 55999;
 80039aa:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 80039ae:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19;
 80039b4:	2313      	movs	r3, #19
 80039b6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	4619      	mov	r1, r3
 80039c0:	480a      	ldr	r0, [pc, #40]	@ (80039ec <MX_TIM3_Init+0x5c>)
 80039c2:	f000 fefb 	bl	80047bc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80039c6:	4809      	ldr	r0, [pc, #36]	@ (80039ec <MX_TIM3_Init+0x5c>)
 80039c8:	f7ff fd6e 	bl	80034a8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80039cc:	2100      	movs	r1, #0
 80039ce:	4807      	ldr	r0, [pc, #28]	@ (80039ec <MX_TIM3_Init+0x5c>)
 80039d0:	f7ff fd79 	bl	80034c6 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 80039d4:	2120      	movs	r1, #32
 80039d6:	4805      	ldr	r0, [pc, #20]	@ (80039ec <MX_TIM3_Init+0x5c>)
 80039d8:	f7ff fd89 	bl	80034ee <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80039dc:	4803      	ldr	r0, [pc, #12]	@ (80039ec <MX_TIM3_Init+0x5c>)
 80039de:	f7ff fd98 	bl	8003512 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039e2:	bf00      	nop
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40000400 	.word	0x40000400

080039f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	@ 0x30
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80039f6:	f107 0314 	add.w	r3, r7, #20
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	611a      	str	r2, [r3, #16]
 8003a06:	615a      	str	r2, [r3, #20]
 8003a08:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003a18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003a1c:	f7ff fd0c 	bl	8003438 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003a20:	2004      	movs	r0, #4
 8003a22:	f7ff fd09 	bl	8003438 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003a26:	4b22      	ldr	r3, [pc, #136]	@ (8003ab0 <MX_USART1_UART_Init+0xc0>)
 8003a28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a2a:	2309      	movs	r3, #9
 8003a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a36:	463b      	mov	r3, r7
 8003a38:	4619      	mov	r1, r3
 8003a3a:	481e      	ldr	r0, [pc, #120]	@ (8003ab4 <MX_USART1_UART_Init+0xc4>)
 8003a3c:	f000 fd0f 	bl	800445e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003a40:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <MX_USART1_UART_Init+0xc8>)
 8003a42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003a44:	2304      	movs	r3, #4
 8003a46:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a48:	463b      	mov	r3, r7
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4819      	ldr	r0, [pc, #100]	@ (8003ab4 <MX_USART1_UART_Init+0xc4>)
 8003a4e:	f000 fd06 	bl	800445e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8003a52:	f7ff fa03 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2200      	movs	r2, #0
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fa51 	bl	8002f04 <NVIC_EncodePriority>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4619      	mov	r1, r3
 8003a66:	2025      	movs	r0, #37	@ 0x25
 8003a68:	f7ff fa22 	bl	8002eb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003a6c:	2025      	movs	r0, #37	@ 0x25
 8003a6e:	f7ff fa03 	bl	8002e78 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003a72:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003a76:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003a84:	230c      	movs	r3, #12
 8003a86:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003a90:	f107 0314 	add.w	r3, r7, #20
 8003a94:	4619      	mov	r1, r3
 8003a96:	4809      	ldr	r0, [pc, #36]	@ (8003abc <MX_USART1_UART_Init+0xcc>)
 8003a98:	f000 ff84 	bl	80049a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003a9c:	4807      	ldr	r0, [pc, #28]	@ (8003abc <MX_USART1_UART_Init+0xcc>)
 8003a9e:	f7ff fd56 	bl	800354e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003aa2:	4806      	ldr	r0, [pc, #24]	@ (8003abc <MX_USART1_UART_Init+0xcc>)
 8003aa4:	f7ff fd44 	bl	8003530 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003aa8:	bf00      	nop
 8003aaa:	3730      	adds	r7, #48	@ 0x30
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	04020002 	.word	0x04020002
 8003ab4:	40010800 	.word	0x40010800
 8003ab8:	04040004 	.word	0x04040004
 8003abc:	40013800 	.word	0x40013800

08003ac0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	@ 0x30
 8003ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	611a      	str	r2, [r3, #16]
 8003ad6:	615a      	str	r2, [r3, #20]
 8003ad8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ada:	463b      	mov	r3, r7
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003ae8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003aec:	f7ff fc8c 	bl	8003408 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003af0:	2008      	movs	r0, #8
 8003af2:	f7ff fca1 	bl	8003438 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003af6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b60 <MX_USART3_UART_Init+0xa0>)
 8003af8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003afa:	2309      	movs	r3, #9
 8003afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003afe:	2303      	movs	r3, #3
 8003b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b06:	463b      	mov	r3, r7
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4816      	ldr	r0, [pc, #88]	@ (8003b64 <MX_USART3_UART_Init+0xa4>)
 8003b0c:	f000 fca7 	bl	800445e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003b10:	4b15      	ldr	r3, [pc, #84]	@ (8003b68 <MX_USART3_UART_Init+0xa8>)
 8003b12:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003b14:	2304      	movs	r3, #4
 8003b16:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b18:	463b      	mov	r3, r7
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4811      	ldr	r0, [pc, #68]	@ (8003b64 <MX_USART3_UART_Init+0xa4>)
 8003b1e:	f000 fc9e 	bl	800445e <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003b22:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003b26:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003b34:	230c      	movs	r3, #12
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4619      	mov	r1, r3
 8003b46:	4809      	ldr	r0, [pc, #36]	@ (8003b6c <MX_USART3_UART_Init+0xac>)
 8003b48:	f000 ff2c 	bl	80049a4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003b4c:	4807      	ldr	r0, [pc, #28]	@ (8003b6c <MX_USART3_UART_Init+0xac>)
 8003b4e:	f7ff fcfe 	bl	800354e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003b52:	4806      	ldr	r0, [pc, #24]	@ (8003b6c <MX_USART3_UART_Init+0xac>)
 8003b54:	f7ff fcec 	bl	8003530 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b58:	bf00      	nop
 8003b5a:	3730      	adds	r7, #48	@ 0x30
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	04040004 	.word	0x04040004
 8003b64:	40010c00 	.word	0x40010c00
 8003b68:	04080008 	.word	0x04080008
 8003b6c:	40004800 	.word	0x40004800

08003b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003b74:	2001      	movs	r0, #1
 8003b76:	f7ff fc2f 	bl	80033d8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003b7a:	f7ff f96f 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2200      	movs	r2, #0
 8003b82:	2101      	movs	r1, #1
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f9bd 	bl	8002f04 <NVIC_EncodePriority>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	200b      	movs	r0, #11
 8003b90:	f7ff f98e 	bl	8002eb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b94:	200b      	movs	r0, #11
 8003b96:	f7ff f96f 	bl	8002e78 <__NVIC_EnableIRQ>

}
 8003b9a:	bf00      	nop
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8003ba6:	f107 0318 	add.w	r3, r7, #24
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	60da      	str	r2, [r3, #12]
 8003bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8003bbe:	2010      	movs	r0, #16
 8003bc0:	f7ff fc3a 	bl	8003438 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8003bc4:	2020      	movs	r0, #32
 8003bc6:	f7ff fc37 	bl	8003438 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003bca:	2004      	movs	r0, #4
 8003bcc:	f7ff fc34 	bl	8003438 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003bd0:	2008      	movs	r0, #8
 8003bd2:	f7ff fc31 	bl	8003438 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 8003bd6:	4939      	ldr	r1, [pc, #228]	@ (8003cbc <MX_GPIO_Init+0x11c>)
 8003bd8:	4839      	ldr	r0, [pc, #228]	@ (8003cc0 <MX_GPIO_Init+0x120>)
 8003bda:	f7ff fd21 	bl	8003620 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8003bde:	f248 0180 	movw	r1, #32896	@ 0x8080
 8003be2:	4838      	ldr	r0, [pc, #224]	@ (8003cc4 <MX_GPIO_Init+0x124>)
 8003be4:	f7ff fd1c 	bl	8003620 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003be8:	4b34      	ldr	r3, [pc, #208]	@ (8003cbc <MX_GPIO_Init+0x11c>)
 8003bea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003bec:	2301      	movs	r3, #1
 8003bee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf8:	1d3b      	adds	r3, r7, #4
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4830      	ldr	r0, [pc, #192]	@ (8003cc0 <MX_GPIO_Init+0x120>)
 8003bfe:	f000 fc2e 	bl	800445e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003c02:	f248 0380 	movw	r3, #32896	@ 0x8080
 8003c06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c14:	1d3b      	adds	r3, r7, #4
 8003c16:	4619      	mov	r1, r3
 8003c18:	482a      	ldr	r0, [pc, #168]	@ (8003cc4 <MX_GPIO_Init+0x124>)
 8003c1a:	f000 fc20 	bl	800445e <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE5);
 8003c1e:	492a      	ldr	r1, [pc, #168]	@ (8003cc8 <MX_GPIO_Init+0x128>)
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7ff fd1d 	bl	8003660 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE6);
 8003c26:	4929      	ldr	r1, [pc, #164]	@ (8003ccc <MX_GPIO_Init+0x12c>)
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7ff fd19 	bl	8003660 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8003c2e:	2320      	movs	r3, #32
 8003c30:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003c32:	2301      	movs	r3, #1
 8003c34:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003c36:	2300      	movs	r3, #0
 8003c38:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003c3e:	f107 0318 	add.w	r3, r7, #24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fad4 	bl	80041f0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8003c48:	2340      	movs	r3, #64	@ 0x40
 8003c4a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003c50:	2300      	movs	r3, #0
 8003c52:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003c54:	2301      	movs	r3, #1
 8003c56:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003c58:	f107 0318 	add.w	r3, r7, #24
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 fac7 	bl	80041f0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_DOWN);
 8003c62:	2200      	movs	r2, #0
 8003c64:	f242 0120 	movw	r1, #8224	@ 0x2020
 8003c68:	4816      	ldr	r0, [pc, #88]	@ (8003cc4 <MX_GPIO_Init+0x124>)
 8003c6a:	f7ff fcb7 	bl	80035dc <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_DOWN);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f244 0140 	movw	r1, #16448	@ 0x4040
 8003c74:	4813      	ldr	r0, [pc, #76]	@ (8003cc4 <MX_GPIO_Init+0x124>)
 8003c76:	f7ff fcb1 	bl	80035dc <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8003c80:	4810      	ldr	r0, [pc, #64]	@ (8003cc4 <MX_GPIO_Init+0x124>)
 8003c82:	f7ff fc79 	bl	8003578 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 8003c86:	2208      	movs	r2, #8
 8003c88:	f244 0140 	movw	r1, #16448	@ 0x4040
 8003c8c:	480d      	ldr	r0, [pc, #52]	@ (8003cc4 <MX_GPIO_Init+0x124>)
 8003c8e:	f7ff fc73 	bl	8003578 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 8003c92:	f7ff f8e3 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7ff f931 	bl	8002f04 <NVIC_EncodePriority>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	2017      	movs	r0, #23
 8003ca8:	f7ff f902 	bl	8002eb0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003cac:	2017      	movs	r0, #23
 8003cae:	f7ff f8e3 	bl	8002e78 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cb2:	bf00      	nop
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	04e000e0 	.word	0x04e000e0
 8003cc0:	40011000 	.word	0x40011000
 8003cc4:	40010800 	.word	0x40010800
 8003cc8:	00f00001 	.word	0x00f00001
 8003ccc:	0f000001 	.word	0x0f000001

08003cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cd4:	bf00      	nop
 8003cd6:	e7fd      	b.n	8003cd4 <NMI_Handler+0x4>

08003cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <HardFault_Handler+0x4>

08003ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ce4:	bf00      	nop
 8003ce6:	e7fd      	b.n	8003ce4 <MemManage_Handler+0x4>

08003ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cec:	bf00      	nop
 8003cee:	e7fd      	b.n	8003cec <BusFault_Handler+0x4>

08003cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cf4:	bf00      	nop
 8003cf6:	e7fd      	b.n	8003cf4 <UsageFault_Handler+0x4>

08003cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bc80      	pop	{r7}
 8003d02:	4770      	bx	lr

08003d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  BSP_ADC_TimeOut();
 8003d20:	f7fe fca4 	bl	800266c <BSP_ADC_TimeOut>
  BSP_UART_TimeOut();
 8003d24:	f7ff f864 	bl	8002df0 <BSP_UART_TimeOut>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  status = BSP_DMA_IRQ_Channel1_Handler(DMA1);
 8003d30:	4806      	ldr	r0, [pc, #24]	@ (8003d4c <DMA1_Channel1_IRQHandler+0x20>)
 8003d32:	f7fe fe73 	bl	8002a1c <BSP_DMA_IRQ_Channel1_Handler>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <DMA1_Channel1_IRQHandler+0x24>)
 8003d3c:	701a      	strb	r2, [r3, #0]
  APP_READ_DATA_HandleDMA_IRQ(status);
 8003d3e:	4b04      	ldr	r3, [pc, #16]	@ (8003d50 <DMA1_Channel1_IRQHandler+0x24>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe f9c6 	bl	80020d4 <APP_READ_DATA_HandleDMA_IRQ>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40020000 	.word	0x40020000
 8003d50:	200006f4 	.word	0x200006f4

08003d54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  APP_CALCULATOR_PF_EXTI_IRQHandler();
 8003d58:	f7fd fc5a 	bl	8001610 <APP_CALCULATOR_PF_EXTI_IRQHandler>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d64:	bf00      	nop
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return 1;
 8003d70:	2301      	movs	r3, #1
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <_kill>:

int _kill(int pid, int sig)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d84:	f001 fdb2 	bl	80058ec <__errno>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2216      	movs	r2, #22
 8003d8c:	601a      	str	r2, [r3, #0]
  return -1;
 8003d8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}

08003d9a <_exit>:

void _exit (int status)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003da2:	f04f 31ff 	mov.w	r1, #4294967295
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff ffe7 	bl	8003d7a <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <_exit+0x12>

08003db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]
 8003dc0:	e00a      	b.n	8003dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dc2:	f3af 8000 	nop.w
 8003dc6:	4601      	mov	r1, r0
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	60ba      	str	r2, [r7, #8]
 8003dce:	b2ca      	uxtb	r2, r1
 8003dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	dbf0      	blt.n	8003dc2 <_read+0x12>
  }

  return len;
 8003de0:	687b      	ldr	r3, [r7, #4]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b086      	sub	sp, #24
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	60f8      	str	r0, [r7, #12]
 8003df2:	60b9      	str	r1, [r7, #8]
 8003df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	e009      	b.n	8003e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	60ba      	str	r2, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	617b      	str	r3, [r7, #20]
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	dbf1      	blt.n	8003dfc <_write+0x12>
  }
  return len;
 8003e18:	687b      	ldr	r3, [r7, #4]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <_close>:

int _close(int file)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr

08003e38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e48:	605a      	str	r2, [r3, #4]
  return 0;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <_isatty>:

int _isatty(int file)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e5e:	2301      	movs	r3, #1
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr

08003e6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr
	...

08003e84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ee0 <_sbrk+0x5c>)
 8003e8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <_sbrk+0x60>)
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e98:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <_sbrk+0x64>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ea0:	4b11      	ldr	r3, [pc, #68]	@ (8003ee8 <_sbrk+0x64>)
 8003ea2:	4a12      	ldr	r2, [pc, #72]	@ (8003eec <_sbrk+0x68>)
 8003ea4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ea6:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <_sbrk+0x64>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d207      	bcs.n	8003ec4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eb4:	f001 fd1a 	bl	80058ec <__errno>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	220c      	movs	r2, #12
 8003ebc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	e009      	b.n	8003ed8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ec4:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <_sbrk+0x64>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003eca:	4b07      	ldr	r3, [pc, #28]	@ (8003ee8 <_sbrk+0x64>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	4a05      	ldr	r2, [pc, #20]	@ (8003ee8 <_sbrk+0x64>)
 8003ed4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3718      	adds	r7, #24
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20005000 	.word	0x20005000
 8003ee4:	00000400 	.word	0x00000400
 8003ee8:	200006f8 	.word	0x200006f8
 8003eec:	20000860 	.word	0x20000860

08003ef0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ef4:	bf00      	nop
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003efc:	f7ff fff8 	bl	8003ef0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f00:	480b      	ldr	r0, [pc, #44]	@ (8003f30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003f02:	490c      	ldr	r1, [pc, #48]	@ (8003f34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003f04:	4a0c      	ldr	r2, [pc, #48]	@ (8003f38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f08:	e002      	b.n	8003f10 <LoopCopyDataInit>

08003f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f0e:	3304      	adds	r3, #4

08003f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f14:	d3f9      	bcc.n	8003f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f16:	4a09      	ldr	r2, [pc, #36]	@ (8003f3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003f18:	4c09      	ldr	r4, [pc, #36]	@ (8003f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f1c:	e001      	b.n	8003f22 <LoopFillZerobss>

08003f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f20:	3204      	adds	r2, #4

08003f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f24:	d3fb      	bcc.n	8003f1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f26:	f001 fce7 	bl	80058f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f2a:	f7ff fbc7 	bl	80036bc <main>
  bx lr
 8003f2e:	4770      	bx	lr
  ldr r0, =_sdata
 8003f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f34:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8003f38:	08007f88 	.word	0x08007f88
  ldr r2, =_sbss
 8003f3c:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8003f40:	2000085c 	.word	0x2000085c

08003f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f44:	e7fe      	b.n	8003f44 <ADC1_2_IRQHandler>

08003f46 <LL_ADC_REG_SetSequencerLength>:
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <LL_ADC_IsEnabled>:
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr
	...

08003f90 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8003f9e:	4813      	ldr	r0, [pc, #76]	@ (8003fec <LL_ADC_CommonInit+0x5c>)
 8003fa0:	f7ff ffe3 	bl	8003f6a <LL_ADC_IsEnabled>
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	4812      	ldr	r0, [pc, #72]	@ (8003ff0 <LL_ADC_CommonInit+0x60>)
 8003fa8:	f7ff ffdf 	bl	8003f6a <LL_ADC_IsEnabled>
 8003fac:	4603      	mov	r3, r0
 8003fae:	4323      	orrs	r3, r4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d114      	bne.n	8003fde <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d009      	beq.n	8003fd0 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	e008      	b.n	8003fe2 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	e001      	b.n	8003fe2 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	40012400 	.word	0x40012400
 8003ff0:	40012800 	.word	0x40012800

08003ff4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff ffb1 	bl	8003f6a <LL_ADC_IsEnabled>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d112      	bne.n	8004034 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	431a      	orrs	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	609a      	str	r2, [r3, #8]
 8004032:	e001      	b.n	8004038 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7ff ff8a 	bl	8003f6a <LL_ADC_IsEnabled>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d131      	bne.n	80040c0 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00c      	beq.n	800407e <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	430b      	orrs	r3, r1
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]
 800407c:	e008      	b.n	8004090 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8004098:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	6811      	ldr	r1, [r2, #0]
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	68d2      	ldr	r2, [r2, #12]
 80040a4:	4311      	orrs	r1, r2
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	6912      	ldr	r2, [r2, #16]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7ff ff44 	bl	8003f46 <LL_ADC_REG_SetSequencerLength>
 80040be:	e001      	b.n	80040c4 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <LL_EXTI_EnableIT_0_31>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4904      	ldr	r1, [pc, #16]	@ (80040f0 <LL_EXTI_EnableIT_0_31+0x20>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010400 	.word	0x40010400

080040f4 <LL_EXTI_DisableIT_0_31>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80040fc:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <LL_EXTI_DisableIT_0_31+0x20>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	43db      	mvns	r3, r3
 8004104:	4903      	ldr	r1, [pc, #12]	@ (8004114 <LL_EXTI_DisableIT_0_31+0x20>)
 8004106:	4013      	ands	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40010400 	.word	0x40010400

08004118 <LL_EXTI_EnableEvent_0_31>:
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	4904      	ldr	r1, [pc, #16]	@ (8004138 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40010400 	.word	0x40010400

0800413c <LL_EXTI_DisableEvent_0_31>:
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8004144:	4b05      	ldr	r3, [pc, #20]	@ (800415c <LL_EXTI_DisableEvent_0_31+0x20>)
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	43db      	mvns	r3, r3
 800414c:	4903      	ldr	r1, [pc, #12]	@ (800415c <LL_EXTI_DisableEvent_0_31+0x20>)
 800414e:	4013      	ands	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40010400 	.word	0x40010400

08004160 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004168:	4b05      	ldr	r3, [pc, #20]	@ (8004180 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	4904      	ldr	r1, [pc, #16]	@ (8004180 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010400 	.word	0x40010400

08004184 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	43db      	mvns	r3, r3
 8004194:	4903      	ldr	r1, [pc, #12]	@ (80041a4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004196:	4013      	ands	r3, r2
 8004198:	608b      	str	r3, [r1, #8]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40010400 	.word	0x40010400

080041a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4904      	ldr	r1, [pc, #16]	@ (80041c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40010400 	.word	0x40010400

080041cc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	43db      	mvns	r3, r3
 80041dc:	4903      	ldr	r1, [pc, #12]	@ (80041ec <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80041de:	4013      	ands	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	40010400 	.word	0x40010400

080041f0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80041f8:	2300      	movs	r3, #0
 80041fa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d065      	beq.n	80042d0 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d06b      	beq.n	80042e4 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	795b      	ldrb	r3, [r3, #5]
 8004210:	2b02      	cmp	r3, #2
 8004212:	d01c      	beq.n	800424e <LL_EXTI_Init+0x5e>
 8004214:	2b02      	cmp	r3, #2
 8004216:	dc25      	bgt.n	8004264 <LL_EXTI_Init+0x74>
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <LL_EXTI_Init+0x32>
 800421c:	2b01      	cmp	r3, #1
 800421e:	d00b      	beq.n	8004238 <LL_EXTI_Init+0x48>
 8004220:	e020      	b.n	8004264 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ff88 	bl	800413c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ff4d 	bl	80040d0 <LL_EXTI_EnableIT_0_31>
          break;
 8004236:	e018      	b.n	800426a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ff59 	bl	80040f4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff ff66 	bl	8004118 <LL_EXTI_EnableEvent_0_31>
          break;
 800424c:	e00d      	b.n	800426a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ff3c 	bl	80040d0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7ff ff5b 	bl	8004118 <LL_EXTI_EnableEvent_0_31>
          break;
 8004262:	e002      	b.n	800426a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
          break;
 8004268:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	799b      	ldrb	r3, [r3, #6]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d038      	beq.n	80042e4 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	799b      	ldrb	r3, [r3, #6]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d01c      	beq.n	80042b4 <LL_EXTI_Init+0xc4>
 800427a:	2b03      	cmp	r3, #3
 800427c:	dc25      	bgt.n	80042ca <LL_EXTI_Init+0xda>
 800427e:	2b01      	cmp	r3, #1
 8004280:	d002      	beq.n	8004288 <LL_EXTI_Init+0x98>
 8004282:	2b02      	cmp	r3, #2
 8004284:	d00b      	beq.n	800429e <LL_EXTI_Init+0xae>
 8004286:	e020      	b.n	80042ca <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff9d 	bl	80041cc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff ff62 	bl	8004160 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800429c:	e022      	b.n	80042e4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff6e 	bl	8004184 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff7b 	bl	80041a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80042b2:	e017      	b.n	80042e4 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7ff ff51 	bl	8004160 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ff70 	bl	80041a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80042c8:	e00c      	b.n	80042e4 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
            break;
 80042ce:	e009      	b.n	80042e4 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff0d 	bl	80040f4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f7ff ff2c 	bl	800413c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <LL_GPIO_SetPinMode>:
{
 80042ee:	b490      	push	{r4, r7}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	461a      	mov	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0e1b      	lsrs	r3, r3, #24
 8004302:	4413      	add	r3, r2
 8004304:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004306:	6822      	ldr	r2, [r4, #0]
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	613b      	str	r3, [r7, #16]
  return result;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	fab3 f383 	clz	r3, r3
 800431a:	b2db      	uxtb	r3, r3
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	210f      	movs	r1, #15
 8004320:	fa01 f303 	lsl.w	r3, r1, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	401a      	ands	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	61bb      	str	r3, [r7, #24]
  return result;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	fab3 f383 	clz	r3, r3
 800433a:	b2db      	uxtb	r3, r3
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	fa01 f303 	lsl.w	r3, r1, r3
 8004344:	4313      	orrs	r3, r2
 8004346:	6023      	str	r3, [r4, #0]
}
 8004348:	bf00      	nop
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bc90      	pop	{r4, r7}
 8004350:	4770      	bx	lr

08004352 <LL_GPIO_SetPinSpeed>:
{
 8004352:	b490      	push	{r4, r7}
 8004354:	b088      	sub	sp, #32
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	461a      	mov	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0e1b      	lsrs	r3, r3, #24
 8004366:	4413      	add	r3, r2
 8004368:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800436a:	6822      	ldr	r2, [r4, #0]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	613b      	str	r3, [r7, #16]
  return result;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	fab3 f383 	clz	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	2103      	movs	r1, #3
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	43db      	mvns	r3, r3
 800438a:	401a      	ands	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	61bb      	str	r3, [r7, #24]
  return result;
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	4313      	orrs	r3, r2
 80043aa:	6023      	str	r3, [r4, #0]
}
 80043ac:	bf00      	nop
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc90      	pop	{r4, r7}
 80043b4:	4770      	bx	lr

080043b6 <LL_GPIO_SetPinOutputType>:
{
 80043b6:	b490      	push	{r4, r7}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	461a      	mov	r2, r3
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	0e1b      	lsrs	r3, r3, #24
 80043ca:	4413      	add	r3, r2
 80043cc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	613b      	str	r3, [r7, #16]
  return result;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	2104      	movs	r1, #4
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	401a      	ands	r2, r3
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	fa93 f3a3 	rbit	r3, r3
 80043fa:	61bb      	str	r3, [r7, #24]
  return result;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	6023      	str	r3, [r4, #0]
}
 8004410:	bf00      	nop
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bc90      	pop	{r4, r7}
 8004418:	4770      	bx	lr

0800441a <LL_GPIO_SetPinPull>:
{
 800441a:	b480      	push	{r7}
 800441c:	b087      	sub	sp, #28
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	43db      	mvns	r3, r3
 8004430:	401a      	ands	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0a1b      	lsrs	r3, r3, #8
 8004436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	613b      	str	r3, [r7, #16]
  return result;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	408b      	lsls	r3, r1
 800444e:	431a      	orrs	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	60da      	str	r2, [r3, #12]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	0c1b      	lsrs	r3, r3, #16
 8004470:	617b      	str	r3, [r7, #20]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	fa93 f3a3 	rbit	r3, r3
 800447c:	60fb      	str	r3, [r7, #12]
  return result;
 800447e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004480:	fab3 f383 	clz	r3, r3
 8004484:	b2db      	uxtb	r3, r3
 8004486:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004488:	e044      	b.n	8004514 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800448a:	2201      	movs	r2, #1
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	409a      	lsls	r2, r3
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d03a      	beq.n	800450e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b07      	cmp	r3, #7
 800449c:	d806      	bhi.n	80044ac <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800449e:	f240 1201 	movw	r2, #257	@ 0x101
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e008      	b.n	80044be <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3b08      	subs	r3, #8
 80044b0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044bc:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d106      	bne.n	80044d4 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	461a      	mov	r2, r3
 80044cc:	69b9      	ldr	r1, [r7, #24]
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ffa3 	bl	800441a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	461a      	mov	r2, r3
 80044da:	69b9      	ldr	r1, [r7, #24]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff ff06 	bl	80042ee <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d003      	beq.n	80044f2 <LL_GPIO_Init+0x94>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b09      	cmp	r3, #9
 80044f0:	d10d      	bne.n	800450e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	461a      	mov	r2, r3
 80044f8:	69b9      	ldr	r1, [r7, #24]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ff29 	bl	8004352 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	461a      	mov	r2, r3
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff54 	bl	80043b6 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1b4      	bne.n	800448a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3720      	adds	r7, #32
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
	...

0800452c <LL_RCC_GetSysClkSource>:
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004530:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <LL_RCC_GetSysClkSource+0x14>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 030c 	and.w	r3, r3, #12
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	bc80      	pop	{r7}
 800453e:	4770      	bx	lr
 8004540:	40021000 	.word	0x40021000

08004544 <LL_RCC_GetAHBPrescaler>:
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <LL_RCC_GetAHBPrescaler+0x14>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr
 8004558:	40021000 	.word	0x40021000

0800455c <LL_RCC_GetAPB1Prescaler>:
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004560:	4b03      	ldr	r3, [pc, #12]	@ (8004570 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40021000 	.word	0x40021000

08004574 <LL_RCC_GetAPB2Prescaler>:
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004578:	4b03      	ldr	r3, [pc, #12]	@ (8004588 <LL_RCC_GetAPB2Prescaler+0x14>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	40021000 	.word	0x40021000

0800458c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004590:	4b03      	ldr	r3, [pc, #12]	@ (80045a0 <LL_RCC_PLL_GetMainSource+0x14>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	40021000 	.word	0x40021000

080045a4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bc80      	pop	{r7}
 80045b6:	4770      	bx	lr
 80045b8:	40021000 	.word	0x40021000

080045bc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80045c0:	4b04      	ldr	r3, [pc, #16]	@ (80045d4 <LL_RCC_PLL_GetPrediv+0x18>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	0c5b      	lsrs	r3, r3, #17
 80045c6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000

080045d8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80045e0:	f000 f820 	bl	8004624 <RCC_GetSystemClockFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f83e 	bl	8004670 <RCC_GetHCLKClockFreq>
 80045f4:	4602      	mov	r2, r0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f84c 	bl	800469c <RCC_GetPCLK1ClockFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f858 	bl	80046c4 <RCC_GetPCLK2ClockFreq>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60da      	str	r2, [r3, #12]
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800462e:	f7ff ff7d 	bl	800452c <LL_RCC_GetSysClkSource>
 8004632:	4603      	mov	r3, r0
 8004634:	2b08      	cmp	r3, #8
 8004636:	d00c      	beq.n	8004652 <RCC_GetSystemClockFreq+0x2e>
 8004638:	2b08      	cmp	r3, #8
 800463a:	d80e      	bhi.n	800465a <RCC_GetSystemClockFreq+0x36>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <RCC_GetSystemClockFreq+0x22>
 8004640:	2b04      	cmp	r3, #4
 8004642:	d003      	beq.n	800464c <RCC_GetSystemClockFreq+0x28>
 8004644:	e009      	b.n	800465a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004646:	4b09      	ldr	r3, [pc, #36]	@ (800466c <RCC_GetSystemClockFreq+0x48>)
 8004648:	607b      	str	r3, [r7, #4]
      break;
 800464a:	e009      	b.n	8004660 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800464c:	4b07      	ldr	r3, [pc, #28]	@ (800466c <RCC_GetSystemClockFreq+0x48>)
 800464e:	607b      	str	r3, [r7, #4]
      break;
 8004650:	e006      	b.n	8004660 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004652:	f000 f84b 	bl	80046ec <RCC_PLL_GetFreqDomain_SYS>
 8004656:	6078      	str	r0, [r7, #4]
      break;
 8004658:	e002      	b.n	8004660 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800465a:	4b04      	ldr	r3, [pc, #16]	@ (800466c <RCC_GetSystemClockFreq+0x48>)
 800465c:	607b      	str	r3, [r7, #4]
      break;
 800465e:	bf00      	nop
  }

  return frequency;
 8004660:	687b      	ldr	r3, [r7, #4]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	007a1200 	.word	0x007a1200

08004670 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004678:	f7ff ff64 	bl	8004544 <LL_RCC_GetAHBPrescaler>
 800467c:	4603      	mov	r3, r0
 800467e:	091b      	lsrs	r3, r3, #4
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	4a04      	ldr	r2, [pc, #16]	@ (8004698 <RCC_GetHCLKClockFreq+0x28>)
 8004686:	5cd3      	ldrb	r3, [r2, r3]
 8004688:	461a      	mov	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	40d3      	lsrs	r3, r2
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	08007bf0 	.word	0x08007bf0

0800469c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80046a4:	f7ff ff5a 	bl	800455c <LL_RCC_GetAPB1Prescaler>
 80046a8:	4603      	mov	r3, r0
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	4a04      	ldr	r2, [pc, #16]	@ (80046c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	461a      	mov	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	40d3      	lsrs	r3, r2
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	08007c00 	.word	0x08007c00

080046c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80046cc:	f7ff ff52 	bl	8004574 <LL_RCC_GetAPB2Prescaler>
 80046d0:	4603      	mov	r3, r0
 80046d2:	0adb      	lsrs	r3, r3, #11
 80046d4:	4a04      	ldr	r2, [pc, #16]	@ (80046e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80046d6:	5cd3      	ldrb	r3, [r2, r3]
 80046d8:	461a      	mov	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	40d3      	lsrs	r3, r2
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	08007c00 	.word	0x08007c00

080046ec <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	2300      	movs	r3, #0
 80046f8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80046fa:	f7ff ff47 	bl	800458c <LL_RCC_PLL_GetMainSource>
 80046fe:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470c:	d003      	beq.n	8004716 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800470e:	e00b      	b.n	8004728 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004710:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004712:	607b      	str	r3, [r7, #4]
      break;
 8004714:	e00b      	b.n	800472e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004716:	f7ff ff51 	bl	80045bc <LL_RCC_PLL_GetPrediv>
 800471a:	4603      	mov	r3, r0
 800471c:	3301      	adds	r3, #1
 800471e:	4a0b      	ldr	r2, [pc, #44]	@ (800474c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	607b      	str	r3, [r7, #4]
      break;
 8004726:	e002      	b.n	800472e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004728:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800472a:	607b      	str	r3, [r7, #4]
      break;
 800472c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 800472e:	f7ff ff39 	bl	80045a4 <LL_RCC_PLL_GetMultiplicator>
 8004732:	4603      	mov	r3, r0
 8004734:	0c9b      	lsrs	r3, r3, #18
 8004736:	3302      	adds	r3, #2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	fb02 f303 	mul.w	r3, r2, r3
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	003d0900 	.word	0x003d0900
 800474c:	007a1200 	.word	0x007a1200

08004750 <LL_TIM_SetPrescaler>:
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr

0800476a <LL_TIM_SetAutoReload>:
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr

08004784 <LL_TIM_SetRepetitionCounter>:
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	615a      	str	r2, [r3, #20]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a27      	ldr	r2, [pc, #156]	@ (800486c <LL_TIM_Init+0xb0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00b      	beq.n	80047ec <LL_TIM_Init+0x30>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047da:	d007      	beq.n	80047ec <LL_TIM_Init+0x30>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <LL_TIM_Init+0xb4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <LL_TIM_Init+0x30>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a23      	ldr	r2, [pc, #140]	@ (8004874 <LL_TIM_Init+0xb8>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d106      	bne.n	80047fa <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1b      	ldr	r2, [pc, #108]	@ (800486c <LL_TIM_Init+0xb0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00b      	beq.n	800481a <LL_TIM_Init+0x5e>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004808:	d007      	beq.n	800481a <LL_TIM_Init+0x5e>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a18      	ldr	r2, [pc, #96]	@ (8004870 <LL_TIM_Init+0xb4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d003      	beq.n	800481a <LL_TIM_Init+0x5e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a17      	ldr	r2, [pc, #92]	@ (8004874 <LL_TIM_Init+0xb8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d106      	bne.n	8004828 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4619      	mov	r1, r3
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff ff98 	bl	800476a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff85 	bl	8004750 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a08      	ldr	r2, [pc, #32]	@ (800486c <LL_TIM_Init+0xb0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d105      	bne.n	800485a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff95 	bl	8004784 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff ff9f 	bl	800479e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800

08004878 <LL_USART_IsEnabled>:
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	bc80      	pop	{r7}
 800489c:	4770      	bx	lr

0800489e <LL_USART_SetStopBitsLength>:
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	611a      	str	r2, [r3, #16]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <LL_USART_SetHWFlowCtrl>:
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	615a      	str	r2, [r3, #20]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
	...

080048e8 <LL_USART_SetBaudRate>:
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	009a      	lsls	r2, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	4a25      	ldr	r2, [pc, #148]	@ (80049a0 <LL_USART_SetBaudRate+0xb8>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	b29b      	uxth	r3, r3
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	b299      	uxth	r1, r3
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009a      	lsls	r2, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	fbb2 f2f3 	udiv	r2, r2, r3
 800492a:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <LL_USART_SetBaudRate+0xb8>)
 800492c:	fba3 0302 	umull	r0, r3, r3, r2
 8004930:	095b      	lsrs	r3, r3, #5
 8004932:	2064      	movs	r0, #100	@ 0x64
 8004934:	fb00 f303 	mul.w	r3, r0, r3
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	3332      	adds	r3, #50	@ 0x32
 800493e:	4a18      	ldr	r2, [pc, #96]	@ (80049a0 <LL_USART_SetBaudRate+0xb8>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	b29b      	uxth	r3, r3
 8004948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800494c:	b29b      	uxth	r3, r3
 800494e:	440b      	add	r3, r1
 8004950:	b299      	uxth	r1, r3
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	fbb2 f2f3 	udiv	r2, r2, r3
 8004966:	4b0e      	ldr	r3, [pc, #56]	@ (80049a0 <LL_USART_SetBaudRate+0xb8>)
 8004968:	fba3 0302 	umull	r0, r3, r3, r2
 800496c:	095b      	lsrs	r3, r3, #5
 800496e:	2064      	movs	r0, #100	@ 0x64
 8004970:	fb00 f303 	mul.w	r3, r0, r3
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	3332      	adds	r3, #50	@ 0x32
 800497a:	4a09      	ldr	r2, [pc, #36]	@ (80049a0 <LL_USART_SetBaudRate+0xb8>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	095b      	lsrs	r3, r3, #5
 8004982:	b29b      	uxth	r3, r3
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	b29b      	uxth	r3, r3
 800498a:	440b      	add	r3, r1
 800498c:	b29b      	uxth	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	51eb851f 	.word	0x51eb851f

080049a4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80049b2:	2300      	movs	r3, #0
 80049b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff ff5e 	bl	8004878 <LL_USART_IsEnabled>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d145      	bne.n	8004a4e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049ca:	f023 030c 	bic.w	r3, r3, #12
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	6851      	ldr	r1, [r2, #4]
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	68d2      	ldr	r2, [r2, #12]
 80049d6:	4311      	orrs	r1, r2
 80049d8:	683a      	ldr	r2, [r7, #0]
 80049da:	6912      	ldr	r2, [r2, #16]
 80049dc:	430a      	orrs	r2, r1
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff ff57 	bl	800489e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	4619      	mov	r1, r3
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff ff63 	bl	80048c2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fde9 	bl	80045d8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a13      	ldr	r2, [pc, #76]	@ (8004a58 <LL_USART_Init+0xb4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d102      	bne.n	8004a14 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	61bb      	str	r3, [r7, #24]
 8004a12:	e00c      	b.n	8004a2e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a11      	ldr	r2, [pc, #68]	@ (8004a5c <LL_USART_Init+0xb8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d102      	bne.n	8004a22 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	e005      	b.n	8004a2e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a0e      	ldr	r2, [pc, #56]	@ (8004a60 <LL_USART_Init+0xbc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d101      	bne.n	8004a2e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00c      	beq.n	8004a4e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004a44:	461a      	mov	r2, r3
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7ff ff4d 	bl	80048e8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3720      	adds	r7, #32
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40004400 	.word	0x40004400
 8004a60:	40004800 	.word	0x40004800

08004a64 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	4a07      	ldr	r2, [pc, #28]	@ (8004a94 <LL_InitTick+0x30>)
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004a7c:	4b05      	ldr	r3, [pc, #20]	@ (8004a94 <LL_InitTick+0x30>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a82:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <LL_InitTick+0x30>)
 8004a84:	2205      	movs	r2, #5
 8004a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	e000e010 	.word	0xe000e010

08004a98 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004aa0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f7ff ffdd 	bl	8004a64 <LL_InitTick>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004abc:	4b0e      	ldr	r3, [pc, #56]	@ (8004af8 <LL_mDelay+0x44>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004ac2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d00c      	beq.n	8004ae6 <LL_mDelay+0x32>
  {
    Delay++;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004ad2:	e008      	b.n	8004ae6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004ad4:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <LL_mDelay+0x44>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <LL_mDelay+0x32>
    {
      Delay--;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f3      	bne.n	8004ad4 <LL_mDelay+0x20>
    }
  }
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	e000e010 	.word	0xe000e010

08004afc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004b04:	4a03      	ldr	r2, [pc, #12]	@ (8004b14 <LL_SetSystemCoreClock+0x18>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6013      	str	r3, [r2, #0]
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bc80      	pop	{r7}
 8004b12:	4770      	bx	lr
 8004b14:	200000a4 	.word	0x200000a4

08004b18 <RING_BUFFER_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
RING_BUFFER_Init (ring_buffer_t *rb)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_out   = 0;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count = 0;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_out   = 0;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count = 0;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004b56:	bf00      	nop
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr

08004b60 <RING_BUFFER_Is_Empty>:
 * the count of elements in the ring buffer is 0, indicating that the buffer is
 * empty, and `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <RING_BUFFER_Is_Full>:
 * either `true` or `false`, based on whether the count of elements in the ring
 * buffer `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b8c:	2b40      	cmp	r3, #64	@ 0x40
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <RING_BUFFER_Push_Data>:
 * buffer. It is of type `char`, which means it can store a single character (1
 * byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff ffe7 	bl	8004b80 <RING_BUFFER_Is_Full>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ffbf 	bl	8004b3c <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc4:	4413      	add	r3, r2
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	3301      	adds	r3, #1
 8004bd0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_count++;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data
 * value from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 8004bea:	b590      	push	{r4, r7, lr}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff ffb4 	bl	8004b60 <RING_BUFFER_Is_Empty>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 8004bfe:	23ff      	movs	r3, #255	@ 0xff
 8004c00:	e012      	b.n	8004c28 <RING_BUFFER_Pull_Data+0x3e>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c08:	4413      	add	r3, r2
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c12:	3301      	adds	r3, #1
 8004c14:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count--;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	649a      	str	r2, [r3, #72]	@ 0x48

  return data;
 8004c26:	4623      	mov	r3, r4
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd90      	pop	{r4, r7, pc}

08004c30 <SCH_Initialize>:
 * scheduler context, including task and timer contexts, as well as soft timers.
 * It also initializes the SysTick timer for scheduler operations.
 */
void
SCH_Initialize (void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  s_SystemTick         = RESET; /**< @brief Reset system tick counter. */
 8004c34:	4b08      	ldr	r3, [pc, #32]	@ (8004c58 <SCH_Initialize+0x28>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET; /**< @brief Reset number of scheduled tasks. */
 8004c3a:	4b08      	ldr	r3, [pc, #32]	@ (8004c5c <SCH_Initialize+0x2c>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers        = RESET; /**< @brief Reset number of timers. */
 8004c40:	4b07      	ldr	r3, [pc, #28]	@ (8004c60 <SCH_Initialize+0x30>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	701a      	strb	r2, [r3, #0]
  memset((uint8_t *)&s_TimerContext[0],
         RESET,
         (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));

  /**< @brief Clear soft timers array. */
  memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8004c46:	2208      	movs	r2, #8
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4806      	ldr	r0, [pc, #24]	@ (8004c64 <SCH_Initialize+0x34>)
 8004c4c:	f000 fdfb 	bl	8005846 <memset>

  /**< @brief Initialize SysTick timer. */
  BSP_SYSTICK_TimerInit();
 8004c50:	f7fd ff8a 	bl	8002b68 <BSP_SYSTICK_TimerInit>
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	20000704 	.word	0x20000704
 8004c5c:	200006fc 	.word	0x200006fc
 8004c60:	20000700 	.word	0x20000700
 8004c64:	20000708 	.word	0x20000708

08004c68 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  status_t status
 8004c72:	2301      	movs	r3, #1
 8004c74:	73fb      	strb	r3, [r7, #15]
      status = STS_DONE;
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr

08004c82 <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 8004c86:	f7fd ff61 	bl	8002b4c <BSP_SYSTICK_TimerStart>
}
 8004c8a:	bf00      	nop
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	e01e      	b.n	8004cda <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 8004c9c:	7bfa      	ldrb	r2, [r7, #15]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4a23      	ldr	r2, [pc, #140]	@ (8004d34 <SCH_HandleScheduledTask+0xa4>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	885b      	ldrh	r3, [r3, #2]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d10f      	bne.n	8004cd4 <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d10b      	bne.n	8004cd4 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	73fb      	strb	r3, [r7, #15]
 8004cda:	4b17      	ldr	r3, [pc, #92]	@ (8004d38 <SCH_HandleScheduledTask+0xa8>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3db      	bcc.n	8004c9c <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	73bb      	strb	r3, [r7, #14]
 8004ce8:	e01a      	b.n	8004d20 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 8004cea:	7bba      	ldrb	r2, [r7, #14]
 8004cec:	4613      	mov	r3, r2
 8004cee:	005b      	lsls	r3, r3, #1
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4a11      	ldr	r2, [pc, #68]	@ (8004d3c <SCH_HandleScheduledTask+0xac>)
 8004cf6:	4413      	add	r3, r2
 8004cf8:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	885b      	ldrh	r3, [r3, #2]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d10b      	bne.n	8004d1a <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2200      	movs	r2, #0
 8004d06:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004d1a:	7bbb      	ldrb	r3, [r7, #14]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	73bb      	strb	r3, [r7, #14]
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <SCH_HandleScheduledTask+0xb0>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	7bba      	ldrb	r2, [r7, #14]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d3df      	bcc.n	8004cea <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	200006fc 	.word	0x200006fc
 8004d38:	200006fc 	.word	0x200006fc
 8004d3c:	20000700 	.word	0x20000700
 8004d40:	20000700 	.word	0x20000700

08004d44 <__cvt>:
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4a:	461d      	mov	r5, r3
 8004d4c:	bfbb      	ittet	lt
 8004d4e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004d52:	461d      	movlt	r5, r3
 8004d54:	2300      	movge	r3, #0
 8004d56:	232d      	movlt	r3, #45	@ 0x2d
 8004d58:	b088      	sub	sp, #32
 8004d5a:	4614      	mov	r4, r2
 8004d5c:	bfb8      	it	lt
 8004d5e:	4614      	movlt	r4, r2
 8004d60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d62:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004d64:	7013      	strb	r3, [r2, #0]
 8004d66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d68:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004d6c:	f023 0820 	bic.w	r8, r3, #32
 8004d70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d74:	d005      	beq.n	8004d82 <__cvt+0x3e>
 8004d76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d7a:	d100      	bne.n	8004d7e <__cvt+0x3a>
 8004d7c:	3601      	adds	r6, #1
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e000      	b.n	8004d84 <__cvt+0x40>
 8004d82:	2303      	movs	r3, #3
 8004d84:	aa07      	add	r2, sp, #28
 8004d86:	9204      	str	r2, [sp, #16]
 8004d88:	aa06      	add	r2, sp, #24
 8004d8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004d8e:	e9cd 3600 	strd	r3, r6, [sp]
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	f000 fe6f 	bl	8005a78 <_dtoa_r>
 8004d9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d9e:	4607      	mov	r7, r0
 8004da0:	d119      	bne.n	8004dd6 <__cvt+0x92>
 8004da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004da4:	07db      	lsls	r3, r3, #31
 8004da6:	d50e      	bpl.n	8004dc6 <__cvt+0x82>
 8004da8:	eb00 0906 	add.w	r9, r0, r6
 8004dac:	2200      	movs	r2, #0
 8004dae:	2300      	movs	r3, #0
 8004db0:	4620      	mov	r0, r4
 8004db2:	4629      	mov	r1, r5
 8004db4:	f7fb fe02 	bl	80009bc <__aeabi_dcmpeq>
 8004db8:	b108      	cbz	r0, 8004dbe <__cvt+0x7a>
 8004dba:	f8cd 901c 	str.w	r9, [sp, #28]
 8004dbe:	2230      	movs	r2, #48	@ 0x30
 8004dc0:	9b07      	ldr	r3, [sp, #28]
 8004dc2:	454b      	cmp	r3, r9
 8004dc4:	d31e      	bcc.n	8004e04 <__cvt+0xc0>
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	9b07      	ldr	r3, [sp, #28]
 8004dca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004dcc:	1bdb      	subs	r3, r3, r7
 8004dce:	6013      	str	r3, [r2, #0]
 8004dd0:	b008      	add	sp, #32
 8004dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dda:	eb00 0906 	add.w	r9, r0, r6
 8004dde:	d1e5      	bne.n	8004dac <__cvt+0x68>
 8004de0:	7803      	ldrb	r3, [r0, #0]
 8004de2:	2b30      	cmp	r3, #48	@ 0x30
 8004de4:	d10a      	bne.n	8004dfc <__cvt+0xb8>
 8004de6:	2200      	movs	r2, #0
 8004de8:	2300      	movs	r3, #0
 8004dea:	4620      	mov	r0, r4
 8004dec:	4629      	mov	r1, r5
 8004dee:	f7fb fde5 	bl	80009bc <__aeabi_dcmpeq>
 8004df2:	b918      	cbnz	r0, 8004dfc <__cvt+0xb8>
 8004df4:	f1c6 0601 	rsb	r6, r6, #1
 8004df8:	f8ca 6000 	str.w	r6, [sl]
 8004dfc:	f8da 3000 	ldr.w	r3, [sl]
 8004e00:	4499      	add	r9, r3
 8004e02:	e7d3      	b.n	8004dac <__cvt+0x68>
 8004e04:	1c59      	adds	r1, r3, #1
 8004e06:	9107      	str	r1, [sp, #28]
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e7d9      	b.n	8004dc0 <__cvt+0x7c>

08004e0c <__exponent>:
 8004e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e0e:	2900      	cmp	r1, #0
 8004e10:	bfb6      	itet	lt
 8004e12:	232d      	movlt	r3, #45	@ 0x2d
 8004e14:	232b      	movge	r3, #43	@ 0x2b
 8004e16:	4249      	neglt	r1, r1
 8004e18:	2909      	cmp	r1, #9
 8004e1a:	7002      	strb	r2, [r0, #0]
 8004e1c:	7043      	strb	r3, [r0, #1]
 8004e1e:	dd29      	ble.n	8004e74 <__exponent+0x68>
 8004e20:	f10d 0307 	add.w	r3, sp, #7
 8004e24:	461d      	mov	r5, r3
 8004e26:	270a      	movs	r7, #10
 8004e28:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	fb07 1416 	mls	r4, r7, r6, r1
 8004e32:	3430      	adds	r4, #48	@ 0x30
 8004e34:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e38:	460c      	mov	r4, r1
 8004e3a:	2c63      	cmp	r4, #99	@ 0x63
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e42:	dcf1      	bgt.n	8004e28 <__exponent+0x1c>
 8004e44:	3130      	adds	r1, #48	@ 0x30
 8004e46:	1e94      	subs	r4, r2, #2
 8004e48:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	1c41      	adds	r1, r0, #1
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	d30a      	bcc.n	8004e6a <__exponent+0x5e>
 8004e54:	f10d 0309 	add.w	r3, sp, #9
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	42ac      	cmp	r4, r5
 8004e5c:	bf88      	it	hi
 8004e5e:	2300      	movhi	r3, #0
 8004e60:	3302      	adds	r3, #2
 8004e62:	4403      	add	r3, r0
 8004e64:	1a18      	subs	r0, r3, r0
 8004e66:	b003      	add	sp, #12
 8004e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e72:	e7ed      	b.n	8004e50 <__exponent+0x44>
 8004e74:	2330      	movs	r3, #48	@ 0x30
 8004e76:	3130      	adds	r1, #48	@ 0x30
 8004e78:	7083      	strb	r3, [r0, #2]
 8004e7a:	70c1      	strb	r1, [r0, #3]
 8004e7c:	1d03      	adds	r3, r0, #4
 8004e7e:	e7f1      	b.n	8004e64 <__exponent+0x58>

08004e80 <_printf_float>:
 8004e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e84:	b091      	sub	sp, #68	@ 0x44
 8004e86:	460c      	mov	r4, r1
 8004e88:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004e8c:	4616      	mov	r6, r2
 8004e8e:	461f      	mov	r7, r3
 8004e90:	4605      	mov	r5, r0
 8004e92:	f000 fce1 	bl	8005858 <_localeconv_r>
 8004e96:	6803      	ldr	r3, [r0, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	9308      	str	r3, [sp, #32]
 8004e9c:	f7fb f962 	bl	8000164 <strlen>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ea8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004eaa:	3307      	adds	r3, #7
 8004eac:	f023 0307 	bic.w	r3, r3, #7
 8004eb0:	f103 0208 	add.w	r2, r3, #8
 8004eb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004eb8:	f8d4 b000 	ldr.w	fp, [r4]
 8004ebc:	f8c8 2000 	str.w	r2, [r8]
 8004ec0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ec4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004ece:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ed6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004eda:	4b9c      	ldr	r3, [pc, #624]	@ (800514c <_printf_float+0x2cc>)
 8004edc:	f7fb fda0 	bl	8000a20 <__aeabi_dcmpun>
 8004ee0:	bb70      	cbnz	r0, 8004f40 <_printf_float+0xc0>
 8004ee2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	4b98      	ldr	r3, [pc, #608]	@ (800514c <_printf_float+0x2cc>)
 8004eec:	f7fb fd7a 	bl	80009e4 <__aeabi_dcmple>
 8004ef0:	bb30      	cbnz	r0, 8004f40 <_printf_float+0xc0>
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4640      	mov	r0, r8
 8004ef8:	4649      	mov	r1, r9
 8004efa:	f7fb fd69 	bl	80009d0 <__aeabi_dcmplt>
 8004efe:	b110      	cbz	r0, 8004f06 <_printf_float+0x86>
 8004f00:	232d      	movs	r3, #45	@ 0x2d
 8004f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f06:	4a92      	ldr	r2, [pc, #584]	@ (8005150 <_printf_float+0x2d0>)
 8004f08:	4b92      	ldr	r3, [pc, #584]	@ (8005154 <_printf_float+0x2d4>)
 8004f0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f0e:	bf94      	ite	ls
 8004f10:	4690      	movls	r8, r2
 8004f12:	4698      	movhi	r8, r3
 8004f14:	2303      	movs	r3, #3
 8004f16:	f04f 0900 	mov.w	r9, #0
 8004f1a:	6123      	str	r3, [r4, #16]
 8004f1c:	f02b 0304 	bic.w	r3, fp, #4
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	4633      	mov	r3, r6
 8004f24:	4621      	mov	r1, r4
 8004f26:	4628      	mov	r0, r5
 8004f28:	9700      	str	r7, [sp, #0]
 8004f2a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004f2c:	f000 f9d4 	bl	80052d8 <_printf_common>
 8004f30:	3001      	adds	r0, #1
 8004f32:	f040 8090 	bne.w	8005056 <_printf_float+0x1d6>
 8004f36:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3a:	b011      	add	sp, #68	@ 0x44
 8004f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	4640      	mov	r0, r8
 8004f46:	4649      	mov	r1, r9
 8004f48:	f7fb fd6a 	bl	8000a20 <__aeabi_dcmpun>
 8004f4c:	b148      	cbz	r0, 8004f62 <_printf_float+0xe2>
 8004f4e:	464b      	mov	r3, r9
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bfb8      	it	lt
 8004f54:	232d      	movlt	r3, #45	@ 0x2d
 8004f56:	4a80      	ldr	r2, [pc, #512]	@ (8005158 <_printf_float+0x2d8>)
 8004f58:	bfb8      	it	lt
 8004f5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800515c <_printf_float+0x2dc>)
 8004f60:	e7d3      	b.n	8004f0a <_printf_float+0x8a>
 8004f62:	6863      	ldr	r3, [r4, #4]
 8004f64:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	d13f      	bne.n	8004fec <_printf_float+0x16c>
 8004f6c:	2306      	movs	r3, #6
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	9206      	str	r2, [sp, #24]
 8004f7a:	aa0e      	add	r2, sp, #56	@ 0x38
 8004f7c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004f80:	aa0d      	add	r2, sp, #52	@ 0x34
 8004f82:	9203      	str	r2, [sp, #12]
 8004f84:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004f88:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004f8c:	6863      	ldr	r3, [r4, #4]
 8004f8e:	4642      	mov	r2, r8
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4628      	mov	r0, r5
 8004f94:	464b      	mov	r3, r9
 8004f96:	910a      	str	r1, [sp, #40]	@ 0x28
 8004f98:	f7ff fed4 	bl	8004d44 <__cvt>
 8004f9c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004f9e:	4680      	mov	r8, r0
 8004fa0:	2947      	cmp	r1, #71	@ 0x47
 8004fa2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004fa4:	d128      	bne.n	8004ff8 <_printf_float+0x178>
 8004fa6:	1cc8      	adds	r0, r1, #3
 8004fa8:	db02      	blt.n	8004fb0 <_printf_float+0x130>
 8004faa:	6863      	ldr	r3, [r4, #4]
 8004fac:	4299      	cmp	r1, r3
 8004fae:	dd40      	ble.n	8005032 <_printf_float+0x1b2>
 8004fb0:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fb4:	fa5f fa8a 	uxtb.w	sl, sl
 8004fb8:	4652      	mov	r2, sl
 8004fba:	3901      	subs	r1, #1
 8004fbc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fc0:	910d      	str	r1, [sp, #52]	@ 0x34
 8004fc2:	f7ff ff23 	bl	8004e0c <__exponent>
 8004fc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fc8:	4681      	mov	r9, r0
 8004fca:	1813      	adds	r3, r2, r0
 8004fcc:	2a01      	cmp	r2, #1
 8004fce:	6123      	str	r3, [r4, #16]
 8004fd0:	dc02      	bgt.n	8004fd8 <_printf_float+0x158>
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	07d2      	lsls	r2, r2, #31
 8004fd6:	d501      	bpl.n	8004fdc <_printf_float+0x15c>
 8004fd8:	3301      	adds	r3, #1
 8004fda:	6123      	str	r3, [r4, #16]
 8004fdc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d09e      	beq.n	8004f22 <_printf_float+0xa2>
 8004fe4:	232d      	movs	r3, #45	@ 0x2d
 8004fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fea:	e79a      	b.n	8004f22 <_printf_float+0xa2>
 8004fec:	2947      	cmp	r1, #71	@ 0x47
 8004fee:	d1bf      	bne.n	8004f70 <_printf_float+0xf0>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1bd      	bne.n	8004f70 <_printf_float+0xf0>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e7ba      	b.n	8004f6e <_printf_float+0xee>
 8004ff8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ffc:	d9dc      	bls.n	8004fb8 <_printf_float+0x138>
 8004ffe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005002:	d118      	bne.n	8005036 <_printf_float+0x1b6>
 8005004:	2900      	cmp	r1, #0
 8005006:	6863      	ldr	r3, [r4, #4]
 8005008:	dd0b      	ble.n	8005022 <_printf_float+0x1a2>
 800500a:	6121      	str	r1, [r4, #16]
 800500c:	b913      	cbnz	r3, 8005014 <_printf_float+0x194>
 800500e:	6822      	ldr	r2, [r4, #0]
 8005010:	07d0      	lsls	r0, r2, #31
 8005012:	d502      	bpl.n	800501a <_printf_float+0x19a>
 8005014:	3301      	adds	r3, #1
 8005016:	440b      	add	r3, r1
 8005018:	6123      	str	r3, [r4, #16]
 800501a:	f04f 0900 	mov.w	r9, #0
 800501e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005020:	e7dc      	b.n	8004fdc <_printf_float+0x15c>
 8005022:	b913      	cbnz	r3, 800502a <_printf_float+0x1aa>
 8005024:	6822      	ldr	r2, [r4, #0]
 8005026:	07d2      	lsls	r2, r2, #31
 8005028:	d501      	bpl.n	800502e <_printf_float+0x1ae>
 800502a:	3302      	adds	r3, #2
 800502c:	e7f4      	b.n	8005018 <_printf_float+0x198>
 800502e:	2301      	movs	r3, #1
 8005030:	e7f2      	b.n	8005018 <_printf_float+0x198>
 8005032:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005036:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005038:	4299      	cmp	r1, r3
 800503a:	db05      	blt.n	8005048 <_printf_float+0x1c8>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	6121      	str	r1, [r4, #16]
 8005040:	07d8      	lsls	r0, r3, #31
 8005042:	d5ea      	bpl.n	800501a <_printf_float+0x19a>
 8005044:	1c4b      	adds	r3, r1, #1
 8005046:	e7e7      	b.n	8005018 <_printf_float+0x198>
 8005048:	2900      	cmp	r1, #0
 800504a:	bfcc      	ite	gt
 800504c:	2201      	movgt	r2, #1
 800504e:	f1c1 0202 	rsble	r2, r1, #2
 8005052:	4413      	add	r3, r2
 8005054:	e7e0      	b.n	8005018 <_printf_float+0x198>
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	055a      	lsls	r2, r3, #21
 800505a:	d407      	bmi.n	800506c <_printf_float+0x1ec>
 800505c:	6923      	ldr	r3, [r4, #16]
 800505e:	4642      	mov	r2, r8
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	d12b      	bne.n	80050c2 <_printf_float+0x242>
 800506a:	e764      	b.n	8004f36 <_printf_float+0xb6>
 800506c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005070:	f240 80dc 	bls.w	800522c <_printf_float+0x3ac>
 8005074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005078:	2200      	movs	r2, #0
 800507a:	2300      	movs	r3, #0
 800507c:	f7fb fc9e 	bl	80009bc <__aeabi_dcmpeq>
 8005080:	2800      	cmp	r0, #0
 8005082:	d033      	beq.n	80050ec <_printf_float+0x26c>
 8005084:	2301      	movs	r3, #1
 8005086:	4631      	mov	r1, r6
 8005088:	4628      	mov	r0, r5
 800508a:	4a35      	ldr	r2, [pc, #212]	@ (8005160 <_printf_float+0x2e0>)
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	f43f af51 	beq.w	8004f36 <_printf_float+0xb6>
 8005094:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005098:	4543      	cmp	r3, r8
 800509a:	db02      	blt.n	80050a2 <_printf_float+0x222>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	07d8      	lsls	r0, r3, #31
 80050a0:	d50f      	bpl.n	80050c2 <_printf_float+0x242>
 80050a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f af42 	beq.w	8004f36 <_printf_float+0xb6>
 80050b2:	f04f 0900 	mov.w	r9, #0
 80050b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80050ba:	f104 0a1a 	add.w	sl, r4, #26
 80050be:	45c8      	cmp	r8, r9
 80050c0:	dc09      	bgt.n	80050d6 <_printf_float+0x256>
 80050c2:	6823      	ldr	r3, [r4, #0]
 80050c4:	079b      	lsls	r3, r3, #30
 80050c6:	f100 8102 	bmi.w	80052ce <_printf_float+0x44e>
 80050ca:	68e0      	ldr	r0, [r4, #12]
 80050cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050ce:	4298      	cmp	r0, r3
 80050d0:	bfb8      	it	lt
 80050d2:	4618      	movlt	r0, r3
 80050d4:	e731      	b.n	8004f3a <_printf_float+0xba>
 80050d6:	2301      	movs	r3, #1
 80050d8:	4652      	mov	r2, sl
 80050da:	4631      	mov	r1, r6
 80050dc:	4628      	mov	r0, r5
 80050de:	47b8      	blx	r7
 80050e0:	3001      	adds	r0, #1
 80050e2:	f43f af28 	beq.w	8004f36 <_printf_float+0xb6>
 80050e6:	f109 0901 	add.w	r9, r9, #1
 80050ea:	e7e8      	b.n	80050be <_printf_float+0x23e>
 80050ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	dc38      	bgt.n	8005164 <_printf_float+0x2e4>
 80050f2:	2301      	movs	r3, #1
 80050f4:	4631      	mov	r1, r6
 80050f6:	4628      	mov	r0, r5
 80050f8:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <_printf_float+0x2e0>)
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f af1a 	beq.w	8004f36 <_printf_float+0xb6>
 8005102:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005106:	ea59 0303 	orrs.w	r3, r9, r3
 800510a:	d102      	bne.n	8005112 <_printf_float+0x292>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	07d9      	lsls	r1, r3, #31
 8005110:	d5d7      	bpl.n	80050c2 <_printf_float+0x242>
 8005112:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005116:	4631      	mov	r1, r6
 8005118:	4628      	mov	r0, r5
 800511a:	47b8      	blx	r7
 800511c:	3001      	adds	r0, #1
 800511e:	f43f af0a 	beq.w	8004f36 <_printf_float+0xb6>
 8005122:	f04f 0a00 	mov.w	sl, #0
 8005126:	f104 0b1a 	add.w	fp, r4, #26
 800512a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800512c:	425b      	negs	r3, r3
 800512e:	4553      	cmp	r3, sl
 8005130:	dc01      	bgt.n	8005136 <_printf_float+0x2b6>
 8005132:	464b      	mov	r3, r9
 8005134:	e793      	b.n	800505e <_printf_float+0x1de>
 8005136:	2301      	movs	r3, #1
 8005138:	465a      	mov	r2, fp
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f aef8 	beq.w	8004f36 <_printf_float+0xb6>
 8005146:	f10a 0a01 	add.w	sl, sl, #1
 800514a:	e7ee      	b.n	800512a <_printf_float+0x2aa>
 800514c:	7fefffff 	.word	0x7fefffff
 8005150:	08007c08 	.word	0x08007c08
 8005154:	08007c0c 	.word	0x08007c0c
 8005158:	08007c10 	.word	0x08007c10
 800515c:	08007c14 	.word	0x08007c14
 8005160:	08007c18 	.word	0x08007c18
 8005164:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005166:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800516a:	4553      	cmp	r3, sl
 800516c:	bfa8      	it	ge
 800516e:	4653      	movge	r3, sl
 8005170:	2b00      	cmp	r3, #0
 8005172:	4699      	mov	r9, r3
 8005174:	dc36      	bgt.n	80051e4 <_printf_float+0x364>
 8005176:	f04f 0b00 	mov.w	fp, #0
 800517a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800517e:	f104 021a 	add.w	r2, r4, #26
 8005182:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005184:	930a      	str	r3, [sp, #40]	@ 0x28
 8005186:	eba3 0309 	sub.w	r3, r3, r9
 800518a:	455b      	cmp	r3, fp
 800518c:	dc31      	bgt.n	80051f2 <_printf_float+0x372>
 800518e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005190:	459a      	cmp	sl, r3
 8005192:	dc3a      	bgt.n	800520a <_printf_float+0x38a>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	07da      	lsls	r2, r3, #31
 8005198:	d437      	bmi.n	800520a <_printf_float+0x38a>
 800519a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800519c:	ebaa 0903 	sub.w	r9, sl, r3
 80051a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051a2:	ebaa 0303 	sub.w	r3, sl, r3
 80051a6:	4599      	cmp	r9, r3
 80051a8:	bfa8      	it	ge
 80051aa:	4699      	movge	r9, r3
 80051ac:	f1b9 0f00 	cmp.w	r9, #0
 80051b0:	dc33      	bgt.n	800521a <_printf_float+0x39a>
 80051b2:	f04f 0800 	mov.w	r8, #0
 80051b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ba:	f104 0b1a 	add.w	fp, r4, #26
 80051be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051c0:	ebaa 0303 	sub.w	r3, sl, r3
 80051c4:	eba3 0309 	sub.w	r3, r3, r9
 80051c8:	4543      	cmp	r3, r8
 80051ca:	f77f af7a 	ble.w	80050c2 <_printf_float+0x242>
 80051ce:	2301      	movs	r3, #1
 80051d0:	465a      	mov	r2, fp
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	47b8      	blx	r7
 80051d8:	3001      	adds	r0, #1
 80051da:	f43f aeac 	beq.w	8004f36 <_printf_float+0xb6>
 80051de:	f108 0801 	add.w	r8, r8, #1
 80051e2:	e7ec      	b.n	80051be <_printf_float+0x33e>
 80051e4:	4642      	mov	r2, r8
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	d1c2      	bne.n	8005176 <_printf_float+0x2f6>
 80051f0:	e6a1      	b.n	8004f36 <_printf_float+0xb6>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4631      	mov	r1, r6
 80051f6:	4628      	mov	r0, r5
 80051f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f ae9a 	beq.w	8004f36 <_printf_float+0xb6>
 8005202:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005204:	f10b 0b01 	add.w	fp, fp, #1
 8005208:	e7bb      	b.n	8005182 <_printf_float+0x302>
 800520a:	4631      	mov	r1, r6
 800520c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	d1c0      	bne.n	800519a <_printf_float+0x31a>
 8005218:	e68d      	b.n	8004f36 <_printf_float+0xb6>
 800521a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800521c:	464b      	mov	r3, r9
 800521e:	4631      	mov	r1, r6
 8005220:	4628      	mov	r0, r5
 8005222:	4442      	add	r2, r8
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	d1c3      	bne.n	80051b2 <_printf_float+0x332>
 800522a:	e684      	b.n	8004f36 <_printf_float+0xb6>
 800522c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005230:	f1ba 0f01 	cmp.w	sl, #1
 8005234:	dc01      	bgt.n	800523a <_printf_float+0x3ba>
 8005236:	07db      	lsls	r3, r3, #31
 8005238:	d536      	bpl.n	80052a8 <_printf_float+0x428>
 800523a:	2301      	movs	r3, #1
 800523c:	4642      	mov	r2, r8
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	f43f ae76 	beq.w	8004f36 <_printf_float+0xb6>
 800524a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800524e:	4631      	mov	r1, r6
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	f43f ae6e 	beq.w	8004f36 <_printf_float+0xb6>
 800525a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800525e:	2200      	movs	r2, #0
 8005260:	2300      	movs	r3, #0
 8005262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005266:	f7fb fba9 	bl	80009bc <__aeabi_dcmpeq>
 800526a:	b9c0      	cbnz	r0, 800529e <_printf_float+0x41e>
 800526c:	4653      	mov	r3, sl
 800526e:	f108 0201 	add.w	r2, r8, #1
 8005272:	4631      	mov	r1, r6
 8005274:	4628      	mov	r0, r5
 8005276:	47b8      	blx	r7
 8005278:	3001      	adds	r0, #1
 800527a:	d10c      	bne.n	8005296 <_printf_float+0x416>
 800527c:	e65b      	b.n	8004f36 <_printf_float+0xb6>
 800527e:	2301      	movs	r3, #1
 8005280:	465a      	mov	r2, fp
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f ae54 	beq.w	8004f36 <_printf_float+0xb6>
 800528e:	f108 0801 	add.w	r8, r8, #1
 8005292:	45d0      	cmp	r8, sl
 8005294:	dbf3      	blt.n	800527e <_printf_float+0x3fe>
 8005296:	464b      	mov	r3, r9
 8005298:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800529c:	e6e0      	b.n	8005060 <_printf_float+0x1e0>
 800529e:	f04f 0800 	mov.w	r8, #0
 80052a2:	f104 0b1a 	add.w	fp, r4, #26
 80052a6:	e7f4      	b.n	8005292 <_printf_float+0x412>
 80052a8:	2301      	movs	r3, #1
 80052aa:	4642      	mov	r2, r8
 80052ac:	e7e1      	b.n	8005272 <_printf_float+0x3f2>
 80052ae:	2301      	movs	r3, #1
 80052b0:	464a      	mov	r2, r9
 80052b2:	4631      	mov	r1, r6
 80052b4:	4628      	mov	r0, r5
 80052b6:	47b8      	blx	r7
 80052b8:	3001      	adds	r0, #1
 80052ba:	f43f ae3c 	beq.w	8004f36 <_printf_float+0xb6>
 80052be:	f108 0801 	add.w	r8, r8, #1
 80052c2:	68e3      	ldr	r3, [r4, #12]
 80052c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80052c6:	1a5b      	subs	r3, r3, r1
 80052c8:	4543      	cmp	r3, r8
 80052ca:	dcf0      	bgt.n	80052ae <_printf_float+0x42e>
 80052cc:	e6fd      	b.n	80050ca <_printf_float+0x24a>
 80052ce:	f04f 0800 	mov.w	r8, #0
 80052d2:	f104 0919 	add.w	r9, r4, #25
 80052d6:	e7f4      	b.n	80052c2 <_printf_float+0x442>

080052d8 <_printf_common>:
 80052d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052dc:	4616      	mov	r6, r2
 80052de:	4698      	mov	r8, r3
 80052e0:	688a      	ldr	r2, [r1, #8]
 80052e2:	690b      	ldr	r3, [r1, #16]
 80052e4:	4607      	mov	r7, r0
 80052e6:	4293      	cmp	r3, r2
 80052e8:	bfb8      	it	lt
 80052ea:	4613      	movlt	r3, r2
 80052ec:	6033      	str	r3, [r6, #0]
 80052ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052f2:	460c      	mov	r4, r1
 80052f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052f8:	b10a      	cbz	r2, 80052fe <_printf_common+0x26>
 80052fa:	3301      	adds	r3, #1
 80052fc:	6033      	str	r3, [r6, #0]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	0699      	lsls	r1, r3, #26
 8005302:	bf42      	ittt	mi
 8005304:	6833      	ldrmi	r3, [r6, #0]
 8005306:	3302      	addmi	r3, #2
 8005308:	6033      	strmi	r3, [r6, #0]
 800530a:	6825      	ldr	r5, [r4, #0]
 800530c:	f015 0506 	ands.w	r5, r5, #6
 8005310:	d106      	bne.n	8005320 <_printf_common+0x48>
 8005312:	f104 0a19 	add.w	sl, r4, #25
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	6832      	ldr	r2, [r6, #0]
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	42ab      	cmp	r3, r5
 800531e:	dc2b      	bgt.n	8005378 <_printf_common+0xa0>
 8005320:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005324:	6822      	ldr	r2, [r4, #0]
 8005326:	3b00      	subs	r3, #0
 8005328:	bf18      	it	ne
 800532a:	2301      	movne	r3, #1
 800532c:	0692      	lsls	r2, r2, #26
 800532e:	d430      	bmi.n	8005392 <_printf_common+0xba>
 8005330:	4641      	mov	r1, r8
 8005332:	4638      	mov	r0, r7
 8005334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005338:	47c8      	blx	r9
 800533a:	3001      	adds	r0, #1
 800533c:	d023      	beq.n	8005386 <_printf_common+0xae>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	6922      	ldr	r2, [r4, #16]
 8005342:	f003 0306 	and.w	r3, r3, #6
 8005346:	2b04      	cmp	r3, #4
 8005348:	bf14      	ite	ne
 800534a:	2500      	movne	r5, #0
 800534c:	6833      	ldreq	r3, [r6, #0]
 800534e:	f04f 0600 	mov.w	r6, #0
 8005352:	bf08      	it	eq
 8005354:	68e5      	ldreq	r5, [r4, #12]
 8005356:	f104 041a 	add.w	r4, r4, #26
 800535a:	bf08      	it	eq
 800535c:	1aed      	subeq	r5, r5, r3
 800535e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005362:	bf08      	it	eq
 8005364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005368:	4293      	cmp	r3, r2
 800536a:	bfc4      	itt	gt
 800536c:	1a9b      	subgt	r3, r3, r2
 800536e:	18ed      	addgt	r5, r5, r3
 8005370:	42b5      	cmp	r5, r6
 8005372:	d11a      	bne.n	80053aa <_printf_common+0xd2>
 8005374:	2000      	movs	r0, #0
 8005376:	e008      	b.n	800538a <_printf_common+0xb2>
 8005378:	2301      	movs	r3, #1
 800537a:	4652      	mov	r2, sl
 800537c:	4641      	mov	r1, r8
 800537e:	4638      	mov	r0, r7
 8005380:	47c8      	blx	r9
 8005382:	3001      	adds	r0, #1
 8005384:	d103      	bne.n	800538e <_printf_common+0xb6>
 8005386:	f04f 30ff 	mov.w	r0, #4294967295
 800538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538e:	3501      	adds	r5, #1
 8005390:	e7c1      	b.n	8005316 <_printf_common+0x3e>
 8005392:	2030      	movs	r0, #48	@ 0x30
 8005394:	18e1      	adds	r1, r4, r3
 8005396:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800539a:	1c5a      	adds	r2, r3, #1
 800539c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053a0:	4422      	add	r2, r4
 80053a2:	3302      	adds	r3, #2
 80053a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053a8:	e7c2      	b.n	8005330 <_printf_common+0x58>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4622      	mov	r2, r4
 80053ae:	4641      	mov	r1, r8
 80053b0:	4638      	mov	r0, r7
 80053b2:	47c8      	blx	r9
 80053b4:	3001      	adds	r0, #1
 80053b6:	d0e6      	beq.n	8005386 <_printf_common+0xae>
 80053b8:	3601      	adds	r6, #1
 80053ba:	e7d9      	b.n	8005370 <_printf_common+0x98>

080053bc <_printf_i>:
 80053bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053c0:	7e0f      	ldrb	r7, [r1, #24]
 80053c2:	4691      	mov	r9, r2
 80053c4:	2f78      	cmp	r7, #120	@ 0x78
 80053c6:	4680      	mov	r8, r0
 80053c8:	460c      	mov	r4, r1
 80053ca:	469a      	mov	sl, r3
 80053cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053d2:	d807      	bhi.n	80053e4 <_printf_i+0x28>
 80053d4:	2f62      	cmp	r7, #98	@ 0x62
 80053d6:	d80a      	bhi.n	80053ee <_printf_i+0x32>
 80053d8:	2f00      	cmp	r7, #0
 80053da:	f000 80d3 	beq.w	8005584 <_printf_i+0x1c8>
 80053de:	2f58      	cmp	r7, #88	@ 0x58
 80053e0:	f000 80ba 	beq.w	8005558 <_printf_i+0x19c>
 80053e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053ec:	e03a      	b.n	8005464 <_printf_i+0xa8>
 80053ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053f2:	2b15      	cmp	r3, #21
 80053f4:	d8f6      	bhi.n	80053e4 <_printf_i+0x28>
 80053f6:	a101      	add	r1, pc, #4	@ (adr r1, 80053fc <_printf_i+0x40>)
 80053f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053fc:	08005455 	.word	0x08005455
 8005400:	08005469 	.word	0x08005469
 8005404:	080053e5 	.word	0x080053e5
 8005408:	080053e5 	.word	0x080053e5
 800540c:	080053e5 	.word	0x080053e5
 8005410:	080053e5 	.word	0x080053e5
 8005414:	08005469 	.word	0x08005469
 8005418:	080053e5 	.word	0x080053e5
 800541c:	080053e5 	.word	0x080053e5
 8005420:	080053e5 	.word	0x080053e5
 8005424:	080053e5 	.word	0x080053e5
 8005428:	0800556b 	.word	0x0800556b
 800542c:	08005493 	.word	0x08005493
 8005430:	08005525 	.word	0x08005525
 8005434:	080053e5 	.word	0x080053e5
 8005438:	080053e5 	.word	0x080053e5
 800543c:	0800558d 	.word	0x0800558d
 8005440:	080053e5 	.word	0x080053e5
 8005444:	08005493 	.word	0x08005493
 8005448:	080053e5 	.word	0x080053e5
 800544c:	080053e5 	.word	0x080053e5
 8005450:	0800552d 	.word	0x0800552d
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6032      	str	r2, [r6, #0]
 800545c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005460:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005464:	2301      	movs	r3, #1
 8005466:	e09e      	b.n	80055a6 <_printf_i+0x1ea>
 8005468:	6833      	ldr	r3, [r6, #0]
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	1d19      	adds	r1, r3, #4
 800546e:	6031      	str	r1, [r6, #0]
 8005470:	0606      	lsls	r6, r0, #24
 8005472:	d501      	bpl.n	8005478 <_printf_i+0xbc>
 8005474:	681d      	ldr	r5, [r3, #0]
 8005476:	e003      	b.n	8005480 <_printf_i+0xc4>
 8005478:	0645      	lsls	r5, r0, #25
 800547a:	d5fb      	bpl.n	8005474 <_printf_i+0xb8>
 800547c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005480:	2d00      	cmp	r5, #0
 8005482:	da03      	bge.n	800548c <_printf_i+0xd0>
 8005484:	232d      	movs	r3, #45	@ 0x2d
 8005486:	426d      	negs	r5, r5
 8005488:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800548c:	230a      	movs	r3, #10
 800548e:	4859      	ldr	r0, [pc, #356]	@ (80055f4 <_printf_i+0x238>)
 8005490:	e011      	b.n	80054b6 <_printf_i+0xfa>
 8005492:	6821      	ldr	r1, [r4, #0]
 8005494:	6833      	ldr	r3, [r6, #0]
 8005496:	0608      	lsls	r0, r1, #24
 8005498:	f853 5b04 	ldr.w	r5, [r3], #4
 800549c:	d402      	bmi.n	80054a4 <_printf_i+0xe8>
 800549e:	0649      	lsls	r1, r1, #25
 80054a0:	bf48      	it	mi
 80054a2:	b2ad      	uxthmi	r5, r5
 80054a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80054a6:	6033      	str	r3, [r6, #0]
 80054a8:	bf14      	ite	ne
 80054aa:	230a      	movne	r3, #10
 80054ac:	2308      	moveq	r3, #8
 80054ae:	4851      	ldr	r0, [pc, #324]	@ (80055f4 <_printf_i+0x238>)
 80054b0:	2100      	movs	r1, #0
 80054b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054b6:	6866      	ldr	r6, [r4, #4]
 80054b8:	2e00      	cmp	r6, #0
 80054ba:	bfa8      	it	ge
 80054bc:	6821      	ldrge	r1, [r4, #0]
 80054be:	60a6      	str	r6, [r4, #8]
 80054c0:	bfa4      	itt	ge
 80054c2:	f021 0104 	bicge.w	r1, r1, #4
 80054c6:	6021      	strge	r1, [r4, #0]
 80054c8:	b90d      	cbnz	r5, 80054ce <_printf_i+0x112>
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	d04b      	beq.n	8005566 <_printf_i+0x1aa>
 80054ce:	4616      	mov	r6, r2
 80054d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80054d4:	fb03 5711 	mls	r7, r3, r1, r5
 80054d8:	5dc7      	ldrb	r7, [r0, r7]
 80054da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054de:	462f      	mov	r7, r5
 80054e0:	42bb      	cmp	r3, r7
 80054e2:	460d      	mov	r5, r1
 80054e4:	d9f4      	bls.n	80054d0 <_printf_i+0x114>
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d10b      	bne.n	8005502 <_printf_i+0x146>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	07df      	lsls	r7, r3, #31
 80054ee:	d508      	bpl.n	8005502 <_printf_i+0x146>
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	6861      	ldr	r1, [r4, #4]
 80054f4:	4299      	cmp	r1, r3
 80054f6:	bfde      	ittt	le
 80054f8:	2330      	movle	r3, #48	@ 0x30
 80054fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005502:	1b92      	subs	r2, r2, r6
 8005504:	6122      	str	r2, [r4, #16]
 8005506:	464b      	mov	r3, r9
 8005508:	4621      	mov	r1, r4
 800550a:	4640      	mov	r0, r8
 800550c:	f8cd a000 	str.w	sl, [sp]
 8005510:	aa03      	add	r2, sp, #12
 8005512:	f7ff fee1 	bl	80052d8 <_printf_common>
 8005516:	3001      	adds	r0, #1
 8005518:	d14a      	bne.n	80055b0 <_printf_i+0x1f4>
 800551a:	f04f 30ff 	mov.w	r0, #4294967295
 800551e:	b004      	add	sp, #16
 8005520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	f043 0320 	orr.w	r3, r3, #32
 800552a:	6023      	str	r3, [r4, #0]
 800552c:	2778      	movs	r7, #120	@ 0x78
 800552e:	4832      	ldr	r0, [pc, #200]	@ (80055f8 <_printf_i+0x23c>)
 8005530:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	6831      	ldr	r1, [r6, #0]
 8005538:	061f      	lsls	r7, r3, #24
 800553a:	f851 5b04 	ldr.w	r5, [r1], #4
 800553e:	d402      	bmi.n	8005546 <_printf_i+0x18a>
 8005540:	065f      	lsls	r7, r3, #25
 8005542:	bf48      	it	mi
 8005544:	b2ad      	uxthmi	r5, r5
 8005546:	6031      	str	r1, [r6, #0]
 8005548:	07d9      	lsls	r1, r3, #31
 800554a:	bf44      	itt	mi
 800554c:	f043 0320 	orrmi.w	r3, r3, #32
 8005550:	6023      	strmi	r3, [r4, #0]
 8005552:	b11d      	cbz	r5, 800555c <_printf_i+0x1a0>
 8005554:	2310      	movs	r3, #16
 8005556:	e7ab      	b.n	80054b0 <_printf_i+0xf4>
 8005558:	4826      	ldr	r0, [pc, #152]	@ (80055f4 <_printf_i+0x238>)
 800555a:	e7e9      	b.n	8005530 <_printf_i+0x174>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	f023 0320 	bic.w	r3, r3, #32
 8005562:	6023      	str	r3, [r4, #0]
 8005564:	e7f6      	b.n	8005554 <_printf_i+0x198>
 8005566:	4616      	mov	r6, r2
 8005568:	e7bd      	b.n	80054e6 <_printf_i+0x12a>
 800556a:	6833      	ldr	r3, [r6, #0]
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1d18      	adds	r0, r3, #4
 8005570:	6961      	ldr	r1, [r4, #20]
 8005572:	6030      	str	r0, [r6, #0]
 8005574:	062e      	lsls	r6, r5, #24
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	d501      	bpl.n	800557e <_printf_i+0x1c2>
 800557a:	6019      	str	r1, [r3, #0]
 800557c:	e002      	b.n	8005584 <_printf_i+0x1c8>
 800557e:	0668      	lsls	r0, r5, #25
 8005580:	d5fb      	bpl.n	800557a <_printf_i+0x1be>
 8005582:	8019      	strh	r1, [r3, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	4616      	mov	r6, r2
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	e7bc      	b.n	8005506 <_printf_i+0x14a>
 800558c:	6833      	ldr	r3, [r6, #0]
 800558e:	2100      	movs	r1, #0
 8005590:	1d1a      	adds	r2, r3, #4
 8005592:	6032      	str	r2, [r6, #0]
 8005594:	681e      	ldr	r6, [r3, #0]
 8005596:	6862      	ldr	r2, [r4, #4]
 8005598:	4630      	mov	r0, r6
 800559a:	f000 f9d4 	bl	8005946 <memchr>
 800559e:	b108      	cbz	r0, 80055a4 <_printf_i+0x1e8>
 80055a0:	1b80      	subs	r0, r0, r6
 80055a2:	6060      	str	r0, [r4, #4]
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	2300      	movs	r3, #0
 80055aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ae:	e7aa      	b.n	8005506 <_printf_i+0x14a>
 80055b0:	4632      	mov	r2, r6
 80055b2:	4649      	mov	r1, r9
 80055b4:	4640      	mov	r0, r8
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	47d0      	blx	sl
 80055ba:	3001      	adds	r0, #1
 80055bc:	d0ad      	beq.n	800551a <_printf_i+0x15e>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	079b      	lsls	r3, r3, #30
 80055c2:	d413      	bmi.n	80055ec <_printf_i+0x230>
 80055c4:	68e0      	ldr	r0, [r4, #12]
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	4298      	cmp	r0, r3
 80055ca:	bfb8      	it	lt
 80055cc:	4618      	movlt	r0, r3
 80055ce:	e7a6      	b.n	800551e <_printf_i+0x162>
 80055d0:	2301      	movs	r3, #1
 80055d2:	4632      	mov	r2, r6
 80055d4:	4649      	mov	r1, r9
 80055d6:	4640      	mov	r0, r8
 80055d8:	47d0      	blx	sl
 80055da:	3001      	adds	r0, #1
 80055dc:	d09d      	beq.n	800551a <_printf_i+0x15e>
 80055de:	3501      	adds	r5, #1
 80055e0:	68e3      	ldr	r3, [r4, #12]
 80055e2:	9903      	ldr	r1, [sp, #12]
 80055e4:	1a5b      	subs	r3, r3, r1
 80055e6:	42ab      	cmp	r3, r5
 80055e8:	dcf2      	bgt.n	80055d0 <_printf_i+0x214>
 80055ea:	e7eb      	b.n	80055c4 <_printf_i+0x208>
 80055ec:	2500      	movs	r5, #0
 80055ee:	f104 0619 	add.w	r6, r4, #25
 80055f2:	e7f5      	b.n	80055e0 <_printf_i+0x224>
 80055f4:	08007c1a 	.word	0x08007c1a
 80055f8:	08007c2b 	.word	0x08007c2b

080055fc <std>:
 80055fc:	2300      	movs	r3, #0
 80055fe:	b510      	push	{r4, lr}
 8005600:	4604      	mov	r4, r0
 8005602:	e9c0 3300 	strd	r3, r3, [r0]
 8005606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800560a:	6083      	str	r3, [r0, #8]
 800560c:	8181      	strh	r1, [r0, #12]
 800560e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005610:	81c2      	strh	r2, [r0, #14]
 8005612:	6183      	str	r3, [r0, #24]
 8005614:	4619      	mov	r1, r3
 8005616:	2208      	movs	r2, #8
 8005618:	305c      	adds	r0, #92	@ 0x5c
 800561a:	f000 f914 	bl	8005846 <memset>
 800561e:	4b0d      	ldr	r3, [pc, #52]	@ (8005654 <std+0x58>)
 8005620:	6224      	str	r4, [r4, #32]
 8005622:	6263      	str	r3, [r4, #36]	@ 0x24
 8005624:	4b0c      	ldr	r3, [pc, #48]	@ (8005658 <std+0x5c>)
 8005626:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005628:	4b0c      	ldr	r3, [pc, #48]	@ (800565c <std+0x60>)
 800562a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800562c:	4b0c      	ldr	r3, [pc, #48]	@ (8005660 <std+0x64>)
 800562e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005630:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <std+0x68>)
 8005632:	429c      	cmp	r4, r3
 8005634:	d006      	beq.n	8005644 <std+0x48>
 8005636:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800563a:	4294      	cmp	r4, r2
 800563c:	d002      	beq.n	8005644 <std+0x48>
 800563e:	33d0      	adds	r3, #208	@ 0xd0
 8005640:	429c      	cmp	r4, r3
 8005642:	d105      	bne.n	8005650 <std+0x54>
 8005644:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800564c:	f000 b978 	b.w	8005940 <__retarget_lock_init_recursive>
 8005650:	bd10      	pop	{r4, pc}
 8005652:	bf00      	nop
 8005654:	080057c1 	.word	0x080057c1
 8005658:	080057e3 	.word	0x080057e3
 800565c:	0800581b 	.word	0x0800581b
 8005660:	0800583f 	.word	0x0800583f
 8005664:	20000710 	.word	0x20000710

08005668 <stdio_exit_handler>:
 8005668:	4a02      	ldr	r2, [pc, #8]	@ (8005674 <stdio_exit_handler+0xc>)
 800566a:	4903      	ldr	r1, [pc, #12]	@ (8005678 <stdio_exit_handler+0x10>)
 800566c:	4803      	ldr	r0, [pc, #12]	@ (800567c <stdio_exit_handler+0x14>)
 800566e:	f000 b869 	b.w	8005744 <_fwalk_sglue>
 8005672:	bf00      	nop
 8005674:	200000a8 	.word	0x200000a8
 8005678:	080072b5 	.word	0x080072b5
 800567c:	200000b8 	.word	0x200000b8

08005680 <cleanup_stdio>:
 8005680:	6841      	ldr	r1, [r0, #4]
 8005682:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <cleanup_stdio+0x34>)
 8005684:	b510      	push	{r4, lr}
 8005686:	4299      	cmp	r1, r3
 8005688:	4604      	mov	r4, r0
 800568a:	d001      	beq.n	8005690 <cleanup_stdio+0x10>
 800568c:	f001 fe12 	bl	80072b4 <_fflush_r>
 8005690:	68a1      	ldr	r1, [r4, #8]
 8005692:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <cleanup_stdio+0x38>)
 8005694:	4299      	cmp	r1, r3
 8005696:	d002      	beq.n	800569e <cleanup_stdio+0x1e>
 8005698:	4620      	mov	r0, r4
 800569a:	f001 fe0b 	bl	80072b4 <_fflush_r>
 800569e:	68e1      	ldr	r1, [r4, #12]
 80056a0:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <cleanup_stdio+0x3c>)
 80056a2:	4299      	cmp	r1, r3
 80056a4:	d004      	beq.n	80056b0 <cleanup_stdio+0x30>
 80056a6:	4620      	mov	r0, r4
 80056a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ac:	f001 be02 	b.w	80072b4 <_fflush_r>
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	bf00      	nop
 80056b4:	20000710 	.word	0x20000710
 80056b8:	20000778 	.word	0x20000778
 80056bc:	200007e0 	.word	0x200007e0

080056c0 <global_stdio_init.part.0>:
 80056c0:	b510      	push	{r4, lr}
 80056c2:	4b0b      	ldr	r3, [pc, #44]	@ (80056f0 <global_stdio_init.part.0+0x30>)
 80056c4:	4c0b      	ldr	r4, [pc, #44]	@ (80056f4 <global_stdio_init.part.0+0x34>)
 80056c6:	4a0c      	ldr	r2, [pc, #48]	@ (80056f8 <global_stdio_init.part.0+0x38>)
 80056c8:	4620      	mov	r0, r4
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	2104      	movs	r1, #4
 80056ce:	2200      	movs	r2, #0
 80056d0:	f7ff ff94 	bl	80055fc <std>
 80056d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056d8:	2201      	movs	r2, #1
 80056da:	2109      	movs	r1, #9
 80056dc:	f7ff ff8e 	bl	80055fc <std>
 80056e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056e4:	2202      	movs	r2, #2
 80056e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ea:	2112      	movs	r1, #18
 80056ec:	f7ff bf86 	b.w	80055fc <std>
 80056f0:	20000848 	.word	0x20000848
 80056f4:	20000710 	.word	0x20000710
 80056f8:	08005669 	.word	0x08005669

080056fc <__sfp_lock_acquire>:
 80056fc:	4801      	ldr	r0, [pc, #4]	@ (8005704 <__sfp_lock_acquire+0x8>)
 80056fe:	f000 b920 	b.w	8005942 <__retarget_lock_acquire_recursive>
 8005702:	bf00      	nop
 8005704:	20000851 	.word	0x20000851

08005708 <__sfp_lock_release>:
 8005708:	4801      	ldr	r0, [pc, #4]	@ (8005710 <__sfp_lock_release+0x8>)
 800570a:	f000 b91b 	b.w	8005944 <__retarget_lock_release_recursive>
 800570e:	bf00      	nop
 8005710:	20000851 	.word	0x20000851

08005714 <__sinit>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4604      	mov	r4, r0
 8005718:	f7ff fff0 	bl	80056fc <__sfp_lock_acquire>
 800571c:	6a23      	ldr	r3, [r4, #32]
 800571e:	b11b      	cbz	r3, 8005728 <__sinit+0x14>
 8005720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005724:	f7ff bff0 	b.w	8005708 <__sfp_lock_release>
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <__sinit+0x28>)
 800572a:	6223      	str	r3, [r4, #32]
 800572c:	4b04      	ldr	r3, [pc, #16]	@ (8005740 <__sinit+0x2c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f5      	bne.n	8005720 <__sinit+0xc>
 8005734:	f7ff ffc4 	bl	80056c0 <global_stdio_init.part.0>
 8005738:	e7f2      	b.n	8005720 <__sinit+0xc>
 800573a:	bf00      	nop
 800573c:	08005681 	.word	0x08005681
 8005740:	20000848 	.word	0x20000848

08005744 <_fwalk_sglue>:
 8005744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005748:	4607      	mov	r7, r0
 800574a:	4688      	mov	r8, r1
 800574c:	4614      	mov	r4, r2
 800574e:	2600      	movs	r6, #0
 8005750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005754:	f1b9 0901 	subs.w	r9, r9, #1
 8005758:	d505      	bpl.n	8005766 <_fwalk_sglue+0x22>
 800575a:	6824      	ldr	r4, [r4, #0]
 800575c:	2c00      	cmp	r4, #0
 800575e:	d1f7      	bne.n	8005750 <_fwalk_sglue+0xc>
 8005760:	4630      	mov	r0, r6
 8005762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d907      	bls.n	800577c <_fwalk_sglue+0x38>
 800576c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005770:	3301      	adds	r3, #1
 8005772:	d003      	beq.n	800577c <_fwalk_sglue+0x38>
 8005774:	4629      	mov	r1, r5
 8005776:	4638      	mov	r0, r7
 8005778:	47c0      	blx	r8
 800577a:	4306      	orrs	r6, r0
 800577c:	3568      	adds	r5, #104	@ 0x68
 800577e:	e7e9      	b.n	8005754 <_fwalk_sglue+0x10>

08005780 <siprintf>:
 8005780:	b40e      	push	{r1, r2, r3}
 8005782:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005786:	b500      	push	{lr}
 8005788:	b09c      	sub	sp, #112	@ 0x70
 800578a:	ab1d      	add	r3, sp, #116	@ 0x74
 800578c:	9002      	str	r0, [sp, #8]
 800578e:	9006      	str	r0, [sp, #24]
 8005790:	9107      	str	r1, [sp, #28]
 8005792:	9104      	str	r1, [sp, #16]
 8005794:	4808      	ldr	r0, [pc, #32]	@ (80057b8 <siprintf+0x38>)
 8005796:	4909      	ldr	r1, [pc, #36]	@ (80057bc <siprintf+0x3c>)
 8005798:	f853 2b04 	ldr.w	r2, [r3], #4
 800579c:	9105      	str	r1, [sp, #20]
 800579e:	6800      	ldr	r0, [r0, #0]
 80057a0:	a902      	add	r1, sp, #8
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	f001 fc0a 	bl	8006fbc <_svfiprintf_r>
 80057a8:	2200      	movs	r2, #0
 80057aa:	9b02      	ldr	r3, [sp, #8]
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	b01c      	add	sp, #112	@ 0x70
 80057b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b4:	b003      	add	sp, #12
 80057b6:	4770      	bx	lr
 80057b8:	200000b4 	.word	0x200000b4
 80057bc:	ffff0208 	.word	0xffff0208

080057c0 <__sread>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	460c      	mov	r4, r1
 80057c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c8:	f000 f86c 	bl	80058a4 <_read_r>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	bfab      	itete	ge
 80057d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057d2:	89a3      	ldrhlt	r3, [r4, #12]
 80057d4:	181b      	addge	r3, r3, r0
 80057d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057da:	bfac      	ite	ge
 80057dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057de:	81a3      	strhlt	r3, [r4, #12]
 80057e0:	bd10      	pop	{r4, pc}

080057e2 <__swrite>:
 80057e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	461f      	mov	r7, r3
 80057e8:	898b      	ldrh	r3, [r1, #12]
 80057ea:	4605      	mov	r5, r0
 80057ec:	05db      	lsls	r3, r3, #23
 80057ee:	460c      	mov	r4, r1
 80057f0:	4616      	mov	r6, r2
 80057f2:	d505      	bpl.n	8005800 <__swrite+0x1e>
 80057f4:	2302      	movs	r3, #2
 80057f6:	2200      	movs	r2, #0
 80057f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fc:	f000 f840 	bl	8005880 <_lseek_r>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	4632      	mov	r2, r6
 8005804:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	4628      	mov	r0, r5
 800580c:	463b      	mov	r3, r7
 800580e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005816:	f000 b857 	b.w	80058c8 <_write_r>

0800581a <__sseek>:
 800581a:	b510      	push	{r4, lr}
 800581c:	460c      	mov	r4, r1
 800581e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005822:	f000 f82d 	bl	8005880 <_lseek_r>
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	bf15      	itete	ne
 800582c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800582e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005832:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005836:	81a3      	strheq	r3, [r4, #12]
 8005838:	bf18      	it	ne
 800583a:	81a3      	strhne	r3, [r4, #12]
 800583c:	bd10      	pop	{r4, pc}

0800583e <__sclose>:
 800583e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005842:	f000 b80d 	b.w	8005860 <_close_r>

08005846 <memset>:
 8005846:	4603      	mov	r3, r0
 8005848:	4402      	add	r2, r0
 800584a:	4293      	cmp	r3, r2
 800584c:	d100      	bne.n	8005850 <memset+0xa>
 800584e:	4770      	bx	lr
 8005850:	f803 1b01 	strb.w	r1, [r3], #1
 8005854:	e7f9      	b.n	800584a <memset+0x4>
	...

08005858 <_localeconv_r>:
 8005858:	4800      	ldr	r0, [pc, #0]	@ (800585c <_localeconv_r+0x4>)
 800585a:	4770      	bx	lr
 800585c:	200001f4 	.word	0x200001f4

08005860 <_close_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	2300      	movs	r3, #0
 8005864:	4d05      	ldr	r5, [pc, #20]	@ (800587c <_close_r+0x1c>)
 8005866:	4604      	mov	r4, r0
 8005868:	4608      	mov	r0, r1
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	f7fe fad9 	bl	8003e22 <_close>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_close_r+0x1a>
 8005874:	682b      	ldr	r3, [r5, #0]
 8005876:	b103      	cbz	r3, 800587a <_close_r+0x1a>
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	2000084c 	.word	0x2000084c

08005880 <_lseek_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	4611      	mov	r1, r2
 8005888:	2200      	movs	r2, #0
 800588a:	4d05      	ldr	r5, [pc, #20]	@ (80058a0 <_lseek_r+0x20>)
 800588c:	602a      	str	r2, [r5, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	f7fe faeb 	bl	8003e6a <_lseek>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d102      	bne.n	800589e <_lseek_r+0x1e>
 8005898:	682b      	ldr	r3, [r5, #0]
 800589a:	b103      	cbz	r3, 800589e <_lseek_r+0x1e>
 800589c:	6023      	str	r3, [r4, #0]
 800589e:	bd38      	pop	{r3, r4, r5, pc}
 80058a0:	2000084c 	.word	0x2000084c

080058a4 <_read_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	4611      	mov	r1, r2
 80058ac:	2200      	movs	r2, #0
 80058ae:	4d05      	ldr	r5, [pc, #20]	@ (80058c4 <_read_r+0x20>)
 80058b0:	602a      	str	r2, [r5, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	f7fe fa7c 	bl	8003db0 <_read>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d102      	bne.n	80058c2 <_read_r+0x1e>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	b103      	cbz	r3, 80058c2 <_read_r+0x1e>
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	bd38      	pop	{r3, r4, r5, pc}
 80058c4:	2000084c 	.word	0x2000084c

080058c8 <_write_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4604      	mov	r4, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	2200      	movs	r2, #0
 80058d2:	4d05      	ldr	r5, [pc, #20]	@ (80058e8 <_write_r+0x20>)
 80058d4:	602a      	str	r2, [r5, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f7fe fa87 	bl	8003dea <_write>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_write_r+0x1e>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_write_r+0x1e>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	2000084c 	.word	0x2000084c

080058ec <__errno>:
 80058ec:	4b01      	ldr	r3, [pc, #4]	@ (80058f4 <__errno+0x8>)
 80058ee:	6818      	ldr	r0, [r3, #0]
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	200000b4 	.word	0x200000b4

080058f8 <__libc_init_array>:
 80058f8:	b570      	push	{r4, r5, r6, lr}
 80058fa:	2600      	movs	r6, #0
 80058fc:	4d0c      	ldr	r5, [pc, #48]	@ (8005930 <__libc_init_array+0x38>)
 80058fe:	4c0d      	ldr	r4, [pc, #52]	@ (8005934 <__libc_init_array+0x3c>)
 8005900:	1b64      	subs	r4, r4, r5
 8005902:	10a4      	asrs	r4, r4, #2
 8005904:	42a6      	cmp	r6, r4
 8005906:	d109      	bne.n	800591c <__libc_init_array+0x24>
 8005908:	f002 f870 	bl	80079ec <_init>
 800590c:	2600      	movs	r6, #0
 800590e:	4d0a      	ldr	r5, [pc, #40]	@ (8005938 <__libc_init_array+0x40>)
 8005910:	4c0a      	ldr	r4, [pc, #40]	@ (800593c <__libc_init_array+0x44>)
 8005912:	1b64      	subs	r4, r4, r5
 8005914:	10a4      	asrs	r4, r4, #2
 8005916:	42a6      	cmp	r6, r4
 8005918:	d105      	bne.n	8005926 <__libc_init_array+0x2e>
 800591a:	bd70      	pop	{r4, r5, r6, pc}
 800591c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005920:	4798      	blx	r3
 8005922:	3601      	adds	r6, #1
 8005924:	e7ee      	b.n	8005904 <__libc_init_array+0xc>
 8005926:	f855 3b04 	ldr.w	r3, [r5], #4
 800592a:	4798      	blx	r3
 800592c:	3601      	adds	r6, #1
 800592e:	e7f2      	b.n	8005916 <__libc_init_array+0x1e>
 8005930:	08007f80 	.word	0x08007f80
 8005934:	08007f80 	.word	0x08007f80
 8005938:	08007f80 	.word	0x08007f80
 800593c:	08007f84 	.word	0x08007f84

08005940 <__retarget_lock_init_recursive>:
 8005940:	4770      	bx	lr

08005942 <__retarget_lock_acquire_recursive>:
 8005942:	4770      	bx	lr

08005944 <__retarget_lock_release_recursive>:
 8005944:	4770      	bx	lr

08005946 <memchr>:
 8005946:	4603      	mov	r3, r0
 8005948:	b510      	push	{r4, lr}
 800594a:	b2c9      	uxtb	r1, r1
 800594c:	4402      	add	r2, r0
 800594e:	4293      	cmp	r3, r2
 8005950:	4618      	mov	r0, r3
 8005952:	d101      	bne.n	8005958 <memchr+0x12>
 8005954:	2000      	movs	r0, #0
 8005956:	e003      	b.n	8005960 <memchr+0x1a>
 8005958:	7804      	ldrb	r4, [r0, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	428c      	cmp	r4, r1
 800595e:	d1f6      	bne.n	800594e <memchr+0x8>
 8005960:	bd10      	pop	{r4, pc}

08005962 <quorem>:
 8005962:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	6903      	ldr	r3, [r0, #16]
 8005968:	690c      	ldr	r4, [r1, #16]
 800596a:	4607      	mov	r7, r0
 800596c:	42a3      	cmp	r3, r4
 800596e:	db7e      	blt.n	8005a6e <quorem+0x10c>
 8005970:	3c01      	subs	r4, #1
 8005972:	00a3      	lsls	r3, r4, #2
 8005974:	f100 0514 	add.w	r5, r0, #20
 8005978:	f101 0814 	add.w	r8, r1, #20
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005982:	9301      	str	r3, [sp, #4]
 8005984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800598c:	3301      	adds	r3, #1
 800598e:	429a      	cmp	r2, r3
 8005990:	fbb2 f6f3 	udiv	r6, r2, r3
 8005994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005998:	d32e      	bcc.n	80059f8 <quorem+0x96>
 800599a:	f04f 0a00 	mov.w	sl, #0
 800599e:	46c4      	mov	ip, r8
 80059a0:	46ae      	mov	lr, r5
 80059a2:	46d3      	mov	fp, sl
 80059a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80059a8:	b298      	uxth	r0, r3
 80059aa:	fb06 a000 	mla	r0, r6, r0, sl
 80059ae:	0c1b      	lsrs	r3, r3, #16
 80059b0:	0c02      	lsrs	r2, r0, #16
 80059b2:	fb06 2303 	mla	r3, r6, r3, r2
 80059b6:	f8de 2000 	ldr.w	r2, [lr]
 80059ba:	b280      	uxth	r0, r0
 80059bc:	b292      	uxth	r2, r2
 80059be:	1a12      	subs	r2, r2, r0
 80059c0:	445a      	add	r2, fp
 80059c2:	f8de 0000 	ldr.w	r0, [lr]
 80059c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80059d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80059d4:	b292      	uxth	r2, r2
 80059d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80059da:	45e1      	cmp	r9, ip
 80059dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80059e0:	f84e 2b04 	str.w	r2, [lr], #4
 80059e4:	d2de      	bcs.n	80059a4 <quorem+0x42>
 80059e6:	9b00      	ldr	r3, [sp, #0]
 80059e8:	58eb      	ldr	r3, [r5, r3]
 80059ea:	b92b      	cbnz	r3, 80059f8 <quorem+0x96>
 80059ec:	9b01      	ldr	r3, [sp, #4]
 80059ee:	3b04      	subs	r3, #4
 80059f0:	429d      	cmp	r5, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	d32f      	bcc.n	8005a56 <quorem+0xf4>
 80059f6:	613c      	str	r4, [r7, #16]
 80059f8:	4638      	mov	r0, r7
 80059fa:	f001 f97b 	bl	8006cf4 <__mcmp>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	db25      	blt.n	8005a4e <quorem+0xec>
 8005a02:	4629      	mov	r1, r5
 8005a04:	2000      	movs	r0, #0
 8005a06:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a0a:	f8d1 c000 	ldr.w	ip, [r1]
 8005a0e:	fa1f fe82 	uxth.w	lr, r2
 8005a12:	fa1f f38c 	uxth.w	r3, ip
 8005a16:	eba3 030e 	sub.w	r3, r3, lr
 8005a1a:	4403      	add	r3, r0
 8005a1c:	0c12      	lsrs	r2, r2, #16
 8005a1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005a22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a2c:	45c1      	cmp	r9, r8
 8005a2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005a32:	f841 3b04 	str.w	r3, [r1], #4
 8005a36:	d2e6      	bcs.n	8005a06 <quorem+0xa4>
 8005a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a40:	b922      	cbnz	r2, 8005a4c <quorem+0xea>
 8005a42:	3b04      	subs	r3, #4
 8005a44:	429d      	cmp	r5, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	d30b      	bcc.n	8005a62 <quorem+0x100>
 8005a4a:	613c      	str	r4, [r7, #16]
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	4630      	mov	r0, r6
 8005a50:	b003      	add	sp, #12
 8005a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a56:	6812      	ldr	r2, [r2, #0]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d1cb      	bne.n	80059f6 <quorem+0x94>
 8005a5e:	3c01      	subs	r4, #1
 8005a60:	e7c6      	b.n	80059f0 <quorem+0x8e>
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d1ef      	bne.n	8005a4a <quorem+0xe8>
 8005a6a:	3c01      	subs	r4, #1
 8005a6c:	e7ea      	b.n	8005a44 <quorem+0xe2>
 8005a6e:	2000      	movs	r0, #0
 8005a70:	e7ee      	b.n	8005a50 <quorem+0xee>
 8005a72:	0000      	movs	r0, r0
 8005a74:	0000      	movs	r0, r0
	...

08005a78 <_dtoa_r>:
 8005a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	461d      	mov	r5, r3
 8005a80:	69c7      	ldr	r7, [r0, #28]
 8005a82:	b097      	sub	sp, #92	@ 0x5c
 8005a84:	4683      	mov	fp, r0
 8005a86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005a8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005a8c:	b97f      	cbnz	r7, 8005aae <_dtoa_r+0x36>
 8005a8e:	2010      	movs	r0, #16
 8005a90:	f000 fe02 	bl	8006698 <malloc>
 8005a94:	4602      	mov	r2, r0
 8005a96:	f8cb 001c 	str.w	r0, [fp, #28]
 8005a9a:	b920      	cbnz	r0, 8005aa6 <_dtoa_r+0x2e>
 8005a9c:	21ef      	movs	r1, #239	@ 0xef
 8005a9e:	4ba8      	ldr	r3, [pc, #672]	@ (8005d40 <_dtoa_r+0x2c8>)
 8005aa0:	48a8      	ldr	r0, [pc, #672]	@ (8005d44 <_dtoa_r+0x2cc>)
 8005aa2:	f001 fc67 	bl	8007374 <__assert_func>
 8005aa6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005aaa:	6007      	str	r7, [r0, #0]
 8005aac:	60c7      	str	r7, [r0, #12]
 8005aae:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	b159      	cbz	r1, 8005ace <_dtoa_r+0x56>
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	4093      	lsls	r3, r2
 8005abc:	604a      	str	r2, [r1, #4]
 8005abe:	608b      	str	r3, [r1, #8]
 8005ac0:	4658      	mov	r0, fp
 8005ac2:	f000 fedf 	bl	8006884 <_Bfree>
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	1e2b      	subs	r3, r5, #0
 8005ad0:	bfaf      	iteee	ge
 8005ad2:	2300      	movge	r3, #0
 8005ad4:	2201      	movlt	r2, #1
 8005ad6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ada:	9303      	strlt	r3, [sp, #12]
 8005adc:	bfa8      	it	ge
 8005ade:	6033      	strge	r3, [r6, #0]
 8005ae0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005ae4:	4b98      	ldr	r3, [pc, #608]	@ (8005d48 <_dtoa_r+0x2d0>)
 8005ae6:	bfb8      	it	lt
 8005ae8:	6032      	strlt	r2, [r6, #0]
 8005aea:	ea33 0308 	bics.w	r3, r3, r8
 8005aee:	d112      	bne.n	8005b16 <_dtoa_r+0x9e>
 8005af0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005af4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005afc:	4323      	orrs	r3, r4
 8005afe:	f000 8550 	beq.w	80065a2 <_dtoa_r+0xb2a>
 8005b02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005d4c <_dtoa_r+0x2d4>
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 8552 	beq.w	80065b2 <_dtoa_r+0xb3a>
 8005b0e:	f10a 0303 	add.w	r3, sl, #3
 8005b12:	f000 bd4c 	b.w	80065ae <_dtoa_r+0xb36>
 8005b16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005b1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b22:	2200      	movs	r2, #0
 8005b24:	2300      	movs	r3, #0
 8005b26:	f7fa ff49 	bl	80009bc <__aeabi_dcmpeq>
 8005b2a:	4607      	mov	r7, r0
 8005b2c:	b158      	cbz	r0, 8005b46 <_dtoa_r+0xce>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b36:	b113      	cbz	r3, 8005b3e <_dtoa_r+0xc6>
 8005b38:	4b85      	ldr	r3, [pc, #532]	@ (8005d50 <_dtoa_r+0x2d8>)
 8005b3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005d54 <_dtoa_r+0x2dc>
 8005b42:	f000 bd36 	b.w	80065b2 <_dtoa_r+0xb3a>
 8005b46:	ab14      	add	r3, sp, #80	@ 0x50
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	ab15      	add	r3, sp, #84	@ 0x54
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	4658      	mov	r0, fp
 8005b50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005b54:	f001 f97e 	bl	8006e54 <__d2b>
 8005b58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005b5c:	4681      	mov	r9, r0
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	d077      	beq.n	8005c52 <_dtoa_r+0x1da>
 8005b62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005b78:	9712      	str	r7, [sp, #72]	@ 0x48
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4b76      	ldr	r3, [pc, #472]	@ (8005d58 <_dtoa_r+0x2e0>)
 8005b80:	f7fa fafc 	bl	800017c <__aeabi_dsub>
 8005b84:	a368      	add	r3, pc, #416	@ (adr r3, 8005d28 <_dtoa_r+0x2b0>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fcaf 	bl	80004ec <__aeabi_dmul>
 8005b8e:	a368      	add	r3, pc, #416	@ (adr r3, 8005d30 <_dtoa_r+0x2b8>)
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f7fa faf4 	bl	8000180 <__adddf3>
 8005b98:	4604      	mov	r4, r0
 8005b9a:	4630      	mov	r0, r6
 8005b9c:	460d      	mov	r5, r1
 8005b9e:	f7fa fc3b 	bl	8000418 <__aeabi_i2d>
 8005ba2:	a365      	add	r3, pc, #404	@ (adr r3, 8005d38 <_dtoa_r+0x2c0>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	f7fa fca0 	bl	80004ec <__aeabi_dmul>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	4629      	mov	r1, r5
 8005bb4:	f7fa fae4 	bl	8000180 <__adddf3>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	f7fa ff46 	bl	8000a4c <__aeabi_d2iz>
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4607      	mov	r7, r0
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa ff01 	bl	80009d0 <__aeabi_dcmplt>
 8005bce:	b140      	cbz	r0, 8005be2 <_dtoa_r+0x16a>
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7fa fc21 	bl	8000418 <__aeabi_i2d>
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	462b      	mov	r3, r5
 8005bda:	f7fa feef 	bl	80009bc <__aeabi_dcmpeq>
 8005bde:	b900      	cbnz	r0, 8005be2 <_dtoa_r+0x16a>
 8005be0:	3f01      	subs	r7, #1
 8005be2:	2f16      	cmp	r7, #22
 8005be4:	d853      	bhi.n	8005c8e <_dtoa_r+0x216>
 8005be6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bea:	4b5c      	ldr	r3, [pc, #368]	@ (8005d5c <_dtoa_r+0x2e4>)
 8005bec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf4:	f7fa feec 	bl	80009d0 <__aeabi_dcmplt>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d04a      	beq.n	8005c92 <_dtoa_r+0x21a>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	3f01      	subs	r7, #1
 8005c00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c04:	1b9b      	subs	r3, r3, r6
 8005c06:	1e5a      	subs	r2, r3, #1
 8005c08:	bf46      	itte	mi
 8005c0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005c0e:	2300      	movmi	r3, #0
 8005c10:	f04f 0800 	movpl.w	r8, #0
 8005c14:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c16:	bf48      	it	mi
 8005c18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005c1a:	2f00      	cmp	r7, #0
 8005c1c:	db3b      	blt.n	8005c96 <_dtoa_r+0x21e>
 8005c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c20:	970e      	str	r7, [sp, #56]	@ 0x38
 8005c22:	443b      	add	r3, r7
 8005c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c26:	2300      	movs	r3, #0
 8005c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c2c:	2b09      	cmp	r3, #9
 8005c2e:	d866      	bhi.n	8005cfe <_dtoa_r+0x286>
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	bfc4      	itt	gt
 8005c34:	3b04      	subgt	r3, #4
 8005c36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005c38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c3a:	bfc8      	it	gt
 8005c3c:	2400      	movgt	r4, #0
 8005c3e:	f1a3 0302 	sub.w	r3, r3, #2
 8005c42:	bfd8      	it	le
 8005c44:	2401      	movle	r4, #1
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d864      	bhi.n	8005d14 <_dtoa_r+0x29c>
 8005c4a:	e8df f003 	tbb	[pc, r3]
 8005c4e:	382b      	.short	0x382b
 8005c50:	5636      	.short	0x5636
 8005c52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005c56:	441e      	add	r6, r3
 8005c58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	bfc1      	itttt	gt
 8005c60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005c64:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005c6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005c70:	bfd6      	itet	le
 8005c72:	f1c3 0320 	rsble	r3, r3, #32
 8005c76:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c7a:	fa04 f003 	lslle.w	r0, r4, r3
 8005c7e:	f7fa fbbb 	bl	80003f8 <__aeabi_ui2d>
 8005c82:	2201      	movs	r2, #1
 8005c84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005c88:	3e01      	subs	r6, #1
 8005c8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005c8c:	e775      	b.n	8005b7a <_dtoa_r+0x102>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e7b6      	b.n	8005c00 <_dtoa_r+0x188>
 8005c92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005c94:	e7b5      	b.n	8005c02 <_dtoa_r+0x18a>
 8005c96:	427b      	negs	r3, r7
 8005c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	eba8 0807 	sub.w	r8, r8, r7
 8005ca0:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ca2:	e7c2      	b.n	8005c2a <_dtoa_r+0x1b2>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ca8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dc35      	bgt.n	8005d1a <_dtoa_r+0x2a2>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005cb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8005cb8:	e00b      	b.n	8005cd2 <_dtoa_r+0x25a>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e7f3      	b.n	8005ca6 <_dtoa_r+0x22e>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cc4:	18fb      	adds	r3, r7, r3
 8005cc6:	9308      	str	r3, [sp, #32]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	9307      	str	r3, [sp, #28]
 8005cce:	bfb8      	it	lt
 8005cd0:	2301      	movlt	r3, #1
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005cda:	f102 0514 	add.w	r5, r2, #20
 8005cde:	429d      	cmp	r5, r3
 8005ce0:	d91f      	bls.n	8005d22 <_dtoa_r+0x2aa>
 8005ce2:	6041      	str	r1, [r0, #4]
 8005ce4:	4658      	mov	r0, fp
 8005ce6:	f000 fd8d 	bl	8006804 <_Balloc>
 8005cea:	4682      	mov	sl, r0
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d139      	bne.n	8005d64 <_dtoa_r+0x2ec>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	f240 11af 	movw	r1, #431	@ 0x1af
 8005cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8005d60 <_dtoa_r+0x2e8>)
 8005cf8:	e6d2      	b.n	8005aa0 <_dtoa_r+0x28>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e7e0      	b.n	8005cc0 <_dtoa_r+0x248>
 8005cfe:	2401      	movs	r4, #1
 8005d00:	2300      	movs	r3, #0
 8005d02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d04:	9320      	str	r3, [sp, #128]	@ 0x80
 8005d06:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d10:	2312      	movs	r3, #18
 8005d12:	e7d0      	b.n	8005cb6 <_dtoa_r+0x23e>
 8005d14:	2301      	movs	r3, #1
 8005d16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d18:	e7f5      	b.n	8005d06 <_dtoa_r+0x28e>
 8005d1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d20:	e7d7      	b.n	8005cd2 <_dtoa_r+0x25a>
 8005d22:	3101      	adds	r1, #1
 8005d24:	0052      	lsls	r2, r2, #1
 8005d26:	e7d8      	b.n	8005cda <_dtoa_r+0x262>
 8005d28:	636f4361 	.word	0x636f4361
 8005d2c:	3fd287a7 	.word	0x3fd287a7
 8005d30:	8b60c8b3 	.word	0x8b60c8b3
 8005d34:	3fc68a28 	.word	0x3fc68a28
 8005d38:	509f79fb 	.word	0x509f79fb
 8005d3c:	3fd34413 	.word	0x3fd34413
 8005d40:	08007c49 	.word	0x08007c49
 8005d44:	08007c60 	.word	0x08007c60
 8005d48:	7ff00000 	.word	0x7ff00000
 8005d4c:	08007c45 	.word	0x08007c45
 8005d50:	08007c19 	.word	0x08007c19
 8005d54:	08007c18 	.word	0x08007c18
 8005d58:	3ff80000 	.word	0x3ff80000
 8005d5c:	08007d58 	.word	0x08007d58
 8005d60:	08007cb8 	.word	0x08007cb8
 8005d64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d68:	6018      	str	r0, [r3, #0]
 8005d6a:	9b07      	ldr	r3, [sp, #28]
 8005d6c:	2b0e      	cmp	r3, #14
 8005d6e:	f200 80a4 	bhi.w	8005eba <_dtoa_r+0x442>
 8005d72:	2c00      	cmp	r4, #0
 8005d74:	f000 80a1 	beq.w	8005eba <_dtoa_r+0x442>
 8005d78:	2f00      	cmp	r7, #0
 8005d7a:	dd33      	ble.n	8005de4 <_dtoa_r+0x36c>
 8005d7c:	4b86      	ldr	r3, [pc, #536]	@ (8005f98 <_dtoa_r+0x520>)
 8005d7e:	f007 020f 	and.w	r2, r7, #15
 8005d82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d86:	05f8      	lsls	r0, r7, #23
 8005d88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005d94:	d516      	bpl.n	8005dc4 <_dtoa_r+0x34c>
 8005d96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d9a:	4b80      	ldr	r3, [pc, #512]	@ (8005f9c <_dtoa_r+0x524>)
 8005d9c:	2603      	movs	r6, #3
 8005d9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005da2:	f7fa fccd 	bl	8000740 <__aeabi_ddiv>
 8005da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005daa:	f004 040f 	and.w	r4, r4, #15
 8005dae:	4d7b      	ldr	r5, [pc, #492]	@ (8005f9c <_dtoa_r+0x524>)
 8005db0:	b954      	cbnz	r4, 8005dc8 <_dtoa_r+0x350>
 8005db2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dba:	f7fa fcc1 	bl	8000740 <__aeabi_ddiv>
 8005dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc2:	e028      	b.n	8005e16 <_dtoa_r+0x39e>
 8005dc4:	2602      	movs	r6, #2
 8005dc6:	e7f2      	b.n	8005dae <_dtoa_r+0x336>
 8005dc8:	07e1      	lsls	r1, r4, #31
 8005dca:	d508      	bpl.n	8005dde <_dtoa_r+0x366>
 8005dcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005dd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005dd4:	f7fa fb8a 	bl	80004ec <__aeabi_dmul>
 8005dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ddc:	3601      	adds	r6, #1
 8005dde:	1064      	asrs	r4, r4, #1
 8005de0:	3508      	adds	r5, #8
 8005de2:	e7e5      	b.n	8005db0 <_dtoa_r+0x338>
 8005de4:	f000 80d2 	beq.w	8005f8c <_dtoa_r+0x514>
 8005de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dec:	427c      	negs	r4, r7
 8005dee:	4b6a      	ldr	r3, [pc, #424]	@ (8005f98 <_dtoa_r+0x520>)
 8005df0:	f004 020f 	and.w	r2, r4, #15
 8005df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f7fa fb76 	bl	80004ec <__aeabi_dmul>
 8005e00:	2602      	movs	r6, #2
 8005e02:	2300      	movs	r3, #0
 8005e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e08:	4d64      	ldr	r5, [pc, #400]	@ (8005f9c <_dtoa_r+0x524>)
 8005e0a:	1124      	asrs	r4, r4, #4
 8005e0c:	2c00      	cmp	r4, #0
 8005e0e:	f040 80b2 	bne.w	8005f76 <_dtoa_r+0x4fe>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1d3      	bne.n	8005dbe <_dtoa_r+0x346>
 8005e16:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80b7 	beq.w	8005f90 <_dtoa_r+0x518>
 8005e22:	2200      	movs	r2, #0
 8005e24:	4620      	mov	r0, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	4b5d      	ldr	r3, [pc, #372]	@ (8005fa0 <_dtoa_r+0x528>)
 8005e2a:	f7fa fdd1 	bl	80009d0 <__aeabi_dcmplt>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f000 80ae 	beq.w	8005f90 <_dtoa_r+0x518>
 8005e34:	9b07      	ldr	r3, [sp, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80aa 	beq.w	8005f90 <_dtoa_r+0x518>
 8005e3c:	9b08      	ldr	r3, [sp, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	dd37      	ble.n	8005eb2 <_dtoa_r+0x43a>
 8005e42:	1e7b      	subs	r3, r7, #1
 8005e44:	4620      	mov	r0, r4
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4b55      	ldr	r3, [pc, #340]	@ (8005fa4 <_dtoa_r+0x52c>)
 8005e4e:	f7fa fb4d 	bl	80004ec <__aeabi_dmul>
 8005e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e56:	9c08      	ldr	r4, [sp, #32]
 8005e58:	3601      	adds	r6, #1
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f7fa fadc 	bl	8000418 <__aeabi_i2d>
 8005e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e64:	f7fa fb42 	bl	80004ec <__aeabi_dmul>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8005fa8 <_dtoa_r+0x530>)
 8005e6c:	f7fa f988 	bl	8000180 <__adddf3>
 8005e70:	4605      	mov	r5, r0
 8005e72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005e76:	2c00      	cmp	r4, #0
 8005e78:	f040 809a 	bne.w	8005fb0 <_dtoa_r+0x538>
 8005e7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e80:	2200      	movs	r2, #0
 8005e82:	4b4a      	ldr	r3, [pc, #296]	@ (8005fac <_dtoa_r+0x534>)
 8005e84:	f7fa f97a 	bl	800017c <__aeabi_dsub>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e90:	462a      	mov	r2, r5
 8005e92:	4633      	mov	r3, r6
 8005e94:	f7fa fdba 	bl	8000a0c <__aeabi_dcmpgt>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	f040 828e 	bne.w	80063ba <_dtoa_r+0x942>
 8005e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ea2:	462a      	mov	r2, r5
 8005ea4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ea8:	f7fa fd92 	bl	80009d0 <__aeabi_dcmplt>
 8005eac:	2800      	cmp	r0, #0
 8005eae:	f040 8127 	bne.w	8006100 <_dtoa_r+0x688>
 8005eb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005eb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005eba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f2c0 8163 	blt.w	8006188 <_dtoa_r+0x710>
 8005ec2:	2f0e      	cmp	r7, #14
 8005ec4:	f300 8160 	bgt.w	8006188 <_dtoa_r+0x710>
 8005ec8:	4b33      	ldr	r3, [pc, #204]	@ (8005f98 <_dtoa_r+0x520>)
 8005eca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ece:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ed2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ed6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da03      	bge.n	8005ee4 <_dtoa_r+0x46c>
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f340 8100 	ble.w	80060e4 <_dtoa_r+0x66c>
 8005ee4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005ee8:	4656      	mov	r6, sl
 8005eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa fc25 	bl	8000740 <__aeabi_ddiv>
 8005ef6:	f7fa fda9 	bl	8000a4c <__aeabi_d2iz>
 8005efa:	4680      	mov	r8, r0
 8005efc:	f7fa fa8c 	bl	8000418 <__aeabi_i2d>
 8005f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f04:	f7fa faf2 	bl	80004ec <__aeabi_dmul>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	4629      	mov	r1, r5
 8005f10:	f7fa f934 	bl	800017c <__aeabi_dsub>
 8005f14:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005f18:	9d07      	ldr	r5, [sp, #28]
 8005f1a:	f806 4b01 	strb.w	r4, [r6], #1
 8005f1e:	eba6 040a 	sub.w	r4, r6, sl
 8005f22:	42a5      	cmp	r5, r4
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	f040 8116 	bne.w	8006158 <_dtoa_r+0x6e0>
 8005f2c:	f7fa f928 	bl	8000180 <__adddf3>
 8005f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f34:	4604      	mov	r4, r0
 8005f36:	460d      	mov	r5, r1
 8005f38:	f7fa fd68 	bl	8000a0c <__aeabi_dcmpgt>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f040 80f8 	bne.w	8006132 <_dtoa_r+0x6ba>
 8005f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f46:	4620      	mov	r0, r4
 8005f48:	4629      	mov	r1, r5
 8005f4a:	f7fa fd37 	bl	80009bc <__aeabi_dcmpeq>
 8005f4e:	b118      	cbz	r0, 8005f58 <_dtoa_r+0x4e0>
 8005f50:	f018 0f01 	tst.w	r8, #1
 8005f54:	f040 80ed 	bne.w	8006132 <_dtoa_r+0x6ba>
 8005f58:	4649      	mov	r1, r9
 8005f5a:	4658      	mov	r0, fp
 8005f5c:	f000 fc92 	bl	8006884 <_Bfree>
 8005f60:	2300      	movs	r3, #0
 8005f62:	7033      	strb	r3, [r6, #0]
 8005f64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005f66:	3701      	adds	r7, #1
 8005f68:	601f      	str	r7, [r3, #0]
 8005f6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8320 	beq.w	80065b2 <_dtoa_r+0xb3a>
 8005f72:	601e      	str	r6, [r3, #0]
 8005f74:	e31d      	b.n	80065b2 <_dtoa_r+0xb3a>
 8005f76:	07e2      	lsls	r2, r4, #31
 8005f78:	d505      	bpl.n	8005f86 <_dtoa_r+0x50e>
 8005f7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f7e:	f7fa fab5 	bl	80004ec <__aeabi_dmul>
 8005f82:	2301      	movs	r3, #1
 8005f84:	3601      	adds	r6, #1
 8005f86:	1064      	asrs	r4, r4, #1
 8005f88:	3508      	adds	r5, #8
 8005f8a:	e73f      	b.n	8005e0c <_dtoa_r+0x394>
 8005f8c:	2602      	movs	r6, #2
 8005f8e:	e742      	b.n	8005e16 <_dtoa_r+0x39e>
 8005f90:	9c07      	ldr	r4, [sp, #28]
 8005f92:	9704      	str	r7, [sp, #16]
 8005f94:	e761      	b.n	8005e5a <_dtoa_r+0x3e2>
 8005f96:	bf00      	nop
 8005f98:	08007d58 	.word	0x08007d58
 8005f9c:	08007d30 	.word	0x08007d30
 8005fa0:	3ff00000 	.word	0x3ff00000
 8005fa4:	40240000 	.word	0x40240000
 8005fa8:	401c0000 	.word	0x401c0000
 8005fac:	40140000 	.word	0x40140000
 8005fb0:	4b70      	ldr	r3, [pc, #448]	@ (8006174 <_dtoa_r+0x6fc>)
 8005fb2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005fb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005fb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fbc:	4454      	add	r4, sl
 8005fbe:	2900      	cmp	r1, #0
 8005fc0:	d045      	beq.n	800604e <_dtoa_r+0x5d6>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	496c      	ldr	r1, [pc, #432]	@ (8006178 <_dtoa_r+0x700>)
 8005fc6:	f7fa fbbb 	bl	8000740 <__aeabi_ddiv>
 8005fca:	4633      	mov	r3, r6
 8005fcc:	462a      	mov	r2, r5
 8005fce:	f7fa f8d5 	bl	800017c <__aeabi_dsub>
 8005fd2:	4656      	mov	r6, sl
 8005fd4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fdc:	f7fa fd36 	bl	8000a4c <__aeabi_d2iz>
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	f7fa fa19 	bl	8000418 <__aeabi_i2d>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fee:	f7fa f8c5 	bl	800017c <__aeabi_dsub>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	3530      	adds	r5, #48	@ 0x30
 8005ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ffc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006000:	f806 5b01 	strb.w	r5, [r6], #1
 8006004:	f7fa fce4 	bl	80009d0 <__aeabi_dcmplt>
 8006008:	2800      	cmp	r0, #0
 800600a:	d163      	bne.n	80060d4 <_dtoa_r+0x65c>
 800600c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006010:	2000      	movs	r0, #0
 8006012:	495a      	ldr	r1, [pc, #360]	@ (800617c <_dtoa_r+0x704>)
 8006014:	f7fa f8b2 	bl	800017c <__aeabi_dsub>
 8006018:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800601c:	f7fa fcd8 	bl	80009d0 <__aeabi_dcmplt>
 8006020:	2800      	cmp	r0, #0
 8006022:	f040 8087 	bne.w	8006134 <_dtoa_r+0x6bc>
 8006026:	42a6      	cmp	r6, r4
 8006028:	f43f af43 	beq.w	8005eb2 <_dtoa_r+0x43a>
 800602c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006030:	2200      	movs	r2, #0
 8006032:	4b53      	ldr	r3, [pc, #332]	@ (8006180 <_dtoa_r+0x708>)
 8006034:	f7fa fa5a 	bl	80004ec <__aeabi_dmul>
 8006038:	2200      	movs	r2, #0
 800603a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800603e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006042:	4b4f      	ldr	r3, [pc, #316]	@ (8006180 <_dtoa_r+0x708>)
 8006044:	f7fa fa52 	bl	80004ec <__aeabi_dmul>
 8006048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800604c:	e7c4      	b.n	8005fd8 <_dtoa_r+0x560>
 800604e:	4631      	mov	r1, r6
 8006050:	4628      	mov	r0, r5
 8006052:	f7fa fa4b 	bl	80004ec <__aeabi_dmul>
 8006056:	4656      	mov	r6, sl
 8006058:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800605c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800605e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006062:	f7fa fcf3 	bl	8000a4c <__aeabi_d2iz>
 8006066:	4605      	mov	r5, r0
 8006068:	f7fa f9d6 	bl	8000418 <__aeabi_i2d>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006074:	f7fa f882 	bl	800017c <__aeabi_dsub>
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	3530      	adds	r5, #48	@ 0x30
 800607e:	f806 5b01 	strb.w	r5, [r6], #1
 8006082:	42a6      	cmp	r6, r4
 8006084:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006088:	f04f 0200 	mov.w	r2, #0
 800608c:	d124      	bne.n	80060d8 <_dtoa_r+0x660>
 800608e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006092:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <_dtoa_r+0x700>)
 8006094:	f7fa f874 	bl	8000180 <__adddf3>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060a0:	f7fa fcb4 	bl	8000a0c <__aeabi_dcmpgt>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d145      	bne.n	8006134 <_dtoa_r+0x6bc>
 80060a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060ac:	2000      	movs	r0, #0
 80060ae:	4932      	ldr	r1, [pc, #200]	@ (8006178 <_dtoa_r+0x700>)
 80060b0:	f7fa f864 	bl	800017c <__aeabi_dsub>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060bc:	f7fa fc88 	bl	80009d0 <__aeabi_dcmplt>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f43f aef6 	beq.w	8005eb2 <_dtoa_r+0x43a>
 80060c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80060c8:	1e73      	subs	r3, r6, #1
 80060ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80060d0:	2b30      	cmp	r3, #48	@ 0x30
 80060d2:	d0f8      	beq.n	80060c6 <_dtoa_r+0x64e>
 80060d4:	9f04      	ldr	r7, [sp, #16]
 80060d6:	e73f      	b.n	8005f58 <_dtoa_r+0x4e0>
 80060d8:	4b29      	ldr	r3, [pc, #164]	@ (8006180 <_dtoa_r+0x708>)
 80060da:	f7fa fa07 	bl	80004ec <__aeabi_dmul>
 80060de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060e2:	e7bc      	b.n	800605e <_dtoa_r+0x5e6>
 80060e4:	d10c      	bne.n	8006100 <_dtoa_r+0x688>
 80060e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060ea:	2200      	movs	r2, #0
 80060ec:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <_dtoa_r+0x70c>)
 80060ee:	f7fa f9fd 	bl	80004ec <__aeabi_dmul>
 80060f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060f6:	f7fa fc7f 	bl	80009f8 <__aeabi_dcmpge>
 80060fa:	2800      	cmp	r0, #0
 80060fc:	f000 815b 	beq.w	80063b6 <_dtoa_r+0x93e>
 8006100:	2400      	movs	r4, #0
 8006102:	4625      	mov	r5, r4
 8006104:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006106:	4656      	mov	r6, sl
 8006108:	43db      	mvns	r3, r3
 800610a:	9304      	str	r3, [sp, #16]
 800610c:	2700      	movs	r7, #0
 800610e:	4621      	mov	r1, r4
 8006110:	4658      	mov	r0, fp
 8006112:	f000 fbb7 	bl	8006884 <_Bfree>
 8006116:	2d00      	cmp	r5, #0
 8006118:	d0dc      	beq.n	80060d4 <_dtoa_r+0x65c>
 800611a:	b12f      	cbz	r7, 8006128 <_dtoa_r+0x6b0>
 800611c:	42af      	cmp	r7, r5
 800611e:	d003      	beq.n	8006128 <_dtoa_r+0x6b0>
 8006120:	4639      	mov	r1, r7
 8006122:	4658      	mov	r0, fp
 8006124:	f000 fbae 	bl	8006884 <_Bfree>
 8006128:	4629      	mov	r1, r5
 800612a:	4658      	mov	r0, fp
 800612c:	f000 fbaa 	bl	8006884 <_Bfree>
 8006130:	e7d0      	b.n	80060d4 <_dtoa_r+0x65c>
 8006132:	9704      	str	r7, [sp, #16]
 8006134:	4633      	mov	r3, r6
 8006136:	461e      	mov	r6, r3
 8006138:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800613c:	2a39      	cmp	r2, #57	@ 0x39
 800613e:	d107      	bne.n	8006150 <_dtoa_r+0x6d8>
 8006140:	459a      	cmp	sl, r3
 8006142:	d1f8      	bne.n	8006136 <_dtoa_r+0x6be>
 8006144:	9a04      	ldr	r2, [sp, #16]
 8006146:	3201      	adds	r2, #1
 8006148:	9204      	str	r2, [sp, #16]
 800614a:	2230      	movs	r2, #48	@ 0x30
 800614c:	f88a 2000 	strb.w	r2, [sl]
 8006150:	781a      	ldrb	r2, [r3, #0]
 8006152:	3201      	adds	r2, #1
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e7bd      	b.n	80060d4 <_dtoa_r+0x65c>
 8006158:	2200      	movs	r2, #0
 800615a:	4b09      	ldr	r3, [pc, #36]	@ (8006180 <_dtoa_r+0x708>)
 800615c:	f7fa f9c6 	bl	80004ec <__aeabi_dmul>
 8006160:	2200      	movs	r2, #0
 8006162:	2300      	movs	r3, #0
 8006164:	4604      	mov	r4, r0
 8006166:	460d      	mov	r5, r1
 8006168:	f7fa fc28 	bl	80009bc <__aeabi_dcmpeq>
 800616c:	2800      	cmp	r0, #0
 800616e:	f43f aebc 	beq.w	8005eea <_dtoa_r+0x472>
 8006172:	e6f1      	b.n	8005f58 <_dtoa_r+0x4e0>
 8006174:	08007d58 	.word	0x08007d58
 8006178:	3fe00000 	.word	0x3fe00000
 800617c:	3ff00000 	.word	0x3ff00000
 8006180:	40240000 	.word	0x40240000
 8006184:	40140000 	.word	0x40140000
 8006188:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800618a:	2a00      	cmp	r2, #0
 800618c:	f000 80db 	beq.w	8006346 <_dtoa_r+0x8ce>
 8006190:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006192:	2a01      	cmp	r2, #1
 8006194:	f300 80bf 	bgt.w	8006316 <_dtoa_r+0x89e>
 8006198:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800619a:	2a00      	cmp	r2, #0
 800619c:	f000 80b7 	beq.w	800630e <_dtoa_r+0x896>
 80061a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80061a4:	4646      	mov	r6, r8
 80061a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061aa:	2101      	movs	r1, #1
 80061ac:	441a      	add	r2, r3
 80061ae:	4658      	mov	r0, fp
 80061b0:	4498      	add	r8, r3
 80061b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80061b4:	f000 fc1a 	bl	80069ec <__i2b>
 80061b8:	4605      	mov	r5, r0
 80061ba:	b15e      	cbz	r6, 80061d4 <_dtoa_r+0x75c>
 80061bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061be:	2b00      	cmp	r3, #0
 80061c0:	dd08      	ble.n	80061d4 <_dtoa_r+0x75c>
 80061c2:	42b3      	cmp	r3, r6
 80061c4:	bfa8      	it	ge
 80061c6:	4633      	movge	r3, r6
 80061c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061ca:	eba8 0803 	sub.w	r8, r8, r3
 80061ce:	1af6      	subs	r6, r6, r3
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061d6:	b1f3      	cbz	r3, 8006216 <_dtoa_r+0x79e>
 80061d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 80b7 	beq.w	800634e <_dtoa_r+0x8d6>
 80061e0:	b18c      	cbz	r4, 8006206 <_dtoa_r+0x78e>
 80061e2:	4629      	mov	r1, r5
 80061e4:	4622      	mov	r2, r4
 80061e6:	4658      	mov	r0, fp
 80061e8:	f000 fcbe 	bl	8006b68 <__pow5mult>
 80061ec:	464a      	mov	r2, r9
 80061ee:	4601      	mov	r1, r0
 80061f0:	4605      	mov	r5, r0
 80061f2:	4658      	mov	r0, fp
 80061f4:	f000 fc10 	bl	8006a18 <__multiply>
 80061f8:	4649      	mov	r1, r9
 80061fa:	9004      	str	r0, [sp, #16]
 80061fc:	4658      	mov	r0, fp
 80061fe:	f000 fb41 	bl	8006884 <_Bfree>
 8006202:	9b04      	ldr	r3, [sp, #16]
 8006204:	4699      	mov	r9, r3
 8006206:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006208:	1b1a      	subs	r2, r3, r4
 800620a:	d004      	beq.n	8006216 <_dtoa_r+0x79e>
 800620c:	4649      	mov	r1, r9
 800620e:	4658      	mov	r0, fp
 8006210:	f000 fcaa 	bl	8006b68 <__pow5mult>
 8006214:	4681      	mov	r9, r0
 8006216:	2101      	movs	r1, #1
 8006218:	4658      	mov	r0, fp
 800621a:	f000 fbe7 	bl	80069ec <__i2b>
 800621e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006220:	4604      	mov	r4, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	f000 81c9 	beq.w	80065ba <_dtoa_r+0xb42>
 8006228:	461a      	mov	r2, r3
 800622a:	4601      	mov	r1, r0
 800622c:	4658      	mov	r0, fp
 800622e:	f000 fc9b 	bl	8006b68 <__pow5mult>
 8006232:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006234:	4604      	mov	r4, r0
 8006236:	2b01      	cmp	r3, #1
 8006238:	f300 808f 	bgt.w	800635a <_dtoa_r+0x8e2>
 800623c:	9b02      	ldr	r3, [sp, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f040 8087 	bne.w	8006352 <_dtoa_r+0x8da>
 8006244:	9b03      	ldr	r3, [sp, #12]
 8006246:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800624a:	2b00      	cmp	r3, #0
 800624c:	f040 8083 	bne.w	8006356 <_dtoa_r+0x8de>
 8006250:	9b03      	ldr	r3, [sp, #12]
 8006252:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006256:	0d1b      	lsrs	r3, r3, #20
 8006258:	051b      	lsls	r3, r3, #20
 800625a:	b12b      	cbz	r3, 8006268 <_dtoa_r+0x7f0>
 800625c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800625e:	f108 0801 	add.w	r8, r8, #1
 8006262:	3301      	adds	r3, #1
 8006264:	9309      	str	r3, [sp, #36]	@ 0x24
 8006266:	2301      	movs	r3, #1
 8006268:	930a      	str	r3, [sp, #40]	@ 0x28
 800626a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 81aa 	beq.w	80065c6 <_dtoa_r+0xb4e>
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006278:	6918      	ldr	r0, [r3, #16]
 800627a:	f000 fb6b 	bl	8006954 <__hi0bits>
 800627e:	f1c0 0020 	rsb	r0, r0, #32
 8006282:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006284:	4418      	add	r0, r3
 8006286:	f010 001f 	ands.w	r0, r0, #31
 800628a:	d071      	beq.n	8006370 <_dtoa_r+0x8f8>
 800628c:	f1c0 0320 	rsb	r3, r0, #32
 8006290:	2b04      	cmp	r3, #4
 8006292:	dd65      	ble.n	8006360 <_dtoa_r+0x8e8>
 8006294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006296:	f1c0 001c 	rsb	r0, r0, #28
 800629a:	4403      	add	r3, r0
 800629c:	4480      	add	r8, r0
 800629e:	4406      	add	r6, r0
 80062a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80062a2:	f1b8 0f00 	cmp.w	r8, #0
 80062a6:	dd05      	ble.n	80062b4 <_dtoa_r+0x83c>
 80062a8:	4649      	mov	r1, r9
 80062aa:	4642      	mov	r2, r8
 80062ac:	4658      	mov	r0, fp
 80062ae:	f000 fcb5 	bl	8006c1c <__lshift>
 80062b2:	4681      	mov	r9, r0
 80062b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	dd05      	ble.n	80062c6 <_dtoa_r+0x84e>
 80062ba:	4621      	mov	r1, r4
 80062bc:	461a      	mov	r2, r3
 80062be:	4658      	mov	r0, fp
 80062c0:	f000 fcac 	bl	8006c1c <__lshift>
 80062c4:	4604      	mov	r4, r0
 80062c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d053      	beq.n	8006374 <_dtoa_r+0x8fc>
 80062cc:	4621      	mov	r1, r4
 80062ce:	4648      	mov	r0, r9
 80062d0:	f000 fd10 	bl	8006cf4 <__mcmp>
 80062d4:	2800      	cmp	r0, #0
 80062d6:	da4d      	bge.n	8006374 <_dtoa_r+0x8fc>
 80062d8:	1e7b      	subs	r3, r7, #1
 80062da:	4649      	mov	r1, r9
 80062dc:	9304      	str	r3, [sp, #16]
 80062de:	220a      	movs	r2, #10
 80062e0:	2300      	movs	r3, #0
 80062e2:	4658      	mov	r0, fp
 80062e4:	f000 faf0 	bl	80068c8 <__multadd>
 80062e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062ea:	4681      	mov	r9, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 816c 	beq.w	80065ca <_dtoa_r+0xb52>
 80062f2:	2300      	movs	r3, #0
 80062f4:	4629      	mov	r1, r5
 80062f6:	220a      	movs	r2, #10
 80062f8:	4658      	mov	r0, fp
 80062fa:	f000 fae5 	bl	80068c8 <__multadd>
 80062fe:	9b08      	ldr	r3, [sp, #32]
 8006300:	4605      	mov	r5, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	dc61      	bgt.n	80063ca <_dtoa_r+0x952>
 8006306:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006308:	2b02      	cmp	r3, #2
 800630a:	dc3b      	bgt.n	8006384 <_dtoa_r+0x90c>
 800630c:	e05d      	b.n	80063ca <_dtoa_r+0x952>
 800630e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006310:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006314:	e746      	b.n	80061a4 <_dtoa_r+0x72c>
 8006316:	9b07      	ldr	r3, [sp, #28]
 8006318:	1e5c      	subs	r4, r3, #1
 800631a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800631c:	42a3      	cmp	r3, r4
 800631e:	bfbf      	itttt	lt
 8006320:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006322:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006324:	1ae3      	sublt	r3, r4, r3
 8006326:	18d2      	addlt	r2, r2, r3
 8006328:	bfa8      	it	ge
 800632a:	1b1c      	subge	r4, r3, r4
 800632c:	9b07      	ldr	r3, [sp, #28]
 800632e:	bfbe      	ittt	lt
 8006330:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006332:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006334:	2400      	movlt	r4, #0
 8006336:	2b00      	cmp	r3, #0
 8006338:	bfb5      	itete	lt
 800633a:	eba8 0603 	sublt.w	r6, r8, r3
 800633e:	4646      	movge	r6, r8
 8006340:	2300      	movlt	r3, #0
 8006342:	9b07      	ldrge	r3, [sp, #28]
 8006344:	e730      	b.n	80061a8 <_dtoa_r+0x730>
 8006346:	4646      	mov	r6, r8
 8006348:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800634a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800634c:	e735      	b.n	80061ba <_dtoa_r+0x742>
 800634e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006350:	e75c      	b.n	800620c <_dtoa_r+0x794>
 8006352:	2300      	movs	r3, #0
 8006354:	e788      	b.n	8006268 <_dtoa_r+0x7f0>
 8006356:	9b02      	ldr	r3, [sp, #8]
 8006358:	e786      	b.n	8006268 <_dtoa_r+0x7f0>
 800635a:	2300      	movs	r3, #0
 800635c:	930a      	str	r3, [sp, #40]	@ 0x28
 800635e:	e788      	b.n	8006272 <_dtoa_r+0x7fa>
 8006360:	d09f      	beq.n	80062a2 <_dtoa_r+0x82a>
 8006362:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006364:	331c      	adds	r3, #28
 8006366:	441a      	add	r2, r3
 8006368:	4498      	add	r8, r3
 800636a:	441e      	add	r6, r3
 800636c:	9209      	str	r2, [sp, #36]	@ 0x24
 800636e:	e798      	b.n	80062a2 <_dtoa_r+0x82a>
 8006370:	4603      	mov	r3, r0
 8006372:	e7f6      	b.n	8006362 <_dtoa_r+0x8ea>
 8006374:	9b07      	ldr	r3, [sp, #28]
 8006376:	9704      	str	r7, [sp, #16]
 8006378:	2b00      	cmp	r3, #0
 800637a:	dc20      	bgt.n	80063be <_dtoa_r+0x946>
 800637c:	9308      	str	r3, [sp, #32]
 800637e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006380:	2b02      	cmp	r3, #2
 8006382:	dd1e      	ble.n	80063c2 <_dtoa_r+0x94a>
 8006384:	9b08      	ldr	r3, [sp, #32]
 8006386:	2b00      	cmp	r3, #0
 8006388:	f47f aebc 	bne.w	8006104 <_dtoa_r+0x68c>
 800638c:	4621      	mov	r1, r4
 800638e:	2205      	movs	r2, #5
 8006390:	4658      	mov	r0, fp
 8006392:	f000 fa99 	bl	80068c8 <__multadd>
 8006396:	4601      	mov	r1, r0
 8006398:	4604      	mov	r4, r0
 800639a:	4648      	mov	r0, r9
 800639c:	f000 fcaa 	bl	8006cf4 <__mcmp>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	f77f aeaf 	ble.w	8006104 <_dtoa_r+0x68c>
 80063a6:	2331      	movs	r3, #49	@ 0x31
 80063a8:	4656      	mov	r6, sl
 80063aa:	f806 3b01 	strb.w	r3, [r6], #1
 80063ae:	9b04      	ldr	r3, [sp, #16]
 80063b0:	3301      	adds	r3, #1
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	e6aa      	b.n	800610c <_dtoa_r+0x694>
 80063b6:	9c07      	ldr	r4, [sp, #28]
 80063b8:	9704      	str	r7, [sp, #16]
 80063ba:	4625      	mov	r5, r4
 80063bc:	e7f3      	b.n	80063a6 <_dtoa_r+0x92e>
 80063be:	9b07      	ldr	r3, [sp, #28]
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 8104 	beq.w	80065d2 <_dtoa_r+0xb5a>
 80063ca:	2e00      	cmp	r6, #0
 80063cc:	dd05      	ble.n	80063da <_dtoa_r+0x962>
 80063ce:	4629      	mov	r1, r5
 80063d0:	4632      	mov	r2, r6
 80063d2:	4658      	mov	r0, fp
 80063d4:	f000 fc22 	bl	8006c1c <__lshift>
 80063d8:	4605      	mov	r5, r0
 80063da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d05a      	beq.n	8006496 <_dtoa_r+0xa1e>
 80063e0:	4658      	mov	r0, fp
 80063e2:	6869      	ldr	r1, [r5, #4]
 80063e4:	f000 fa0e 	bl	8006804 <_Balloc>
 80063e8:	4606      	mov	r6, r0
 80063ea:	b928      	cbnz	r0, 80063f8 <_dtoa_r+0x980>
 80063ec:	4602      	mov	r2, r0
 80063ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80063f2:	4b83      	ldr	r3, [pc, #524]	@ (8006600 <_dtoa_r+0xb88>)
 80063f4:	f7ff bb54 	b.w	8005aa0 <_dtoa_r+0x28>
 80063f8:	692a      	ldr	r2, [r5, #16]
 80063fa:	f105 010c 	add.w	r1, r5, #12
 80063fe:	3202      	adds	r2, #2
 8006400:	0092      	lsls	r2, r2, #2
 8006402:	300c      	adds	r0, #12
 8006404:	f000 ffa8 	bl	8007358 <memcpy>
 8006408:	2201      	movs	r2, #1
 800640a:	4631      	mov	r1, r6
 800640c:	4658      	mov	r0, fp
 800640e:	f000 fc05 	bl	8006c1c <__lshift>
 8006412:	462f      	mov	r7, r5
 8006414:	4605      	mov	r5, r0
 8006416:	f10a 0301 	add.w	r3, sl, #1
 800641a:	9307      	str	r3, [sp, #28]
 800641c:	9b08      	ldr	r3, [sp, #32]
 800641e:	4453      	add	r3, sl
 8006420:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006422:	9b02      	ldr	r3, [sp, #8]
 8006424:	f003 0301 	and.w	r3, r3, #1
 8006428:	930a      	str	r3, [sp, #40]	@ 0x28
 800642a:	9b07      	ldr	r3, [sp, #28]
 800642c:	4621      	mov	r1, r4
 800642e:	3b01      	subs	r3, #1
 8006430:	4648      	mov	r0, r9
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	f7ff fa95 	bl	8005962 <quorem>
 8006438:	4639      	mov	r1, r7
 800643a:	9008      	str	r0, [sp, #32]
 800643c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006440:	4648      	mov	r0, r9
 8006442:	f000 fc57 	bl	8006cf4 <__mcmp>
 8006446:	462a      	mov	r2, r5
 8006448:	9009      	str	r0, [sp, #36]	@ 0x24
 800644a:	4621      	mov	r1, r4
 800644c:	4658      	mov	r0, fp
 800644e:	f000 fc6d 	bl	8006d2c <__mdiff>
 8006452:	68c2      	ldr	r2, [r0, #12]
 8006454:	4606      	mov	r6, r0
 8006456:	bb02      	cbnz	r2, 800649a <_dtoa_r+0xa22>
 8006458:	4601      	mov	r1, r0
 800645a:	4648      	mov	r0, r9
 800645c:	f000 fc4a 	bl	8006cf4 <__mcmp>
 8006460:	4602      	mov	r2, r0
 8006462:	4631      	mov	r1, r6
 8006464:	4658      	mov	r0, fp
 8006466:	920c      	str	r2, [sp, #48]	@ 0x30
 8006468:	f000 fa0c 	bl	8006884 <_Bfree>
 800646c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800646e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006470:	9e07      	ldr	r6, [sp, #28]
 8006472:	ea43 0102 	orr.w	r1, r3, r2
 8006476:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006478:	4319      	orrs	r1, r3
 800647a:	d110      	bne.n	800649e <_dtoa_r+0xa26>
 800647c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006480:	d029      	beq.n	80064d6 <_dtoa_r+0xa5e>
 8006482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd02      	ble.n	800648e <_dtoa_r+0xa16>
 8006488:	9b08      	ldr	r3, [sp, #32]
 800648a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800648e:	9b02      	ldr	r3, [sp, #8]
 8006490:	f883 8000 	strb.w	r8, [r3]
 8006494:	e63b      	b.n	800610e <_dtoa_r+0x696>
 8006496:	4628      	mov	r0, r5
 8006498:	e7bb      	b.n	8006412 <_dtoa_r+0x99a>
 800649a:	2201      	movs	r2, #1
 800649c:	e7e1      	b.n	8006462 <_dtoa_r+0x9ea>
 800649e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	db04      	blt.n	80064ae <_dtoa_r+0xa36>
 80064a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80064a6:	430b      	orrs	r3, r1
 80064a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80064aa:	430b      	orrs	r3, r1
 80064ac:	d120      	bne.n	80064f0 <_dtoa_r+0xa78>
 80064ae:	2a00      	cmp	r2, #0
 80064b0:	dded      	ble.n	800648e <_dtoa_r+0xa16>
 80064b2:	4649      	mov	r1, r9
 80064b4:	2201      	movs	r2, #1
 80064b6:	4658      	mov	r0, fp
 80064b8:	f000 fbb0 	bl	8006c1c <__lshift>
 80064bc:	4621      	mov	r1, r4
 80064be:	4681      	mov	r9, r0
 80064c0:	f000 fc18 	bl	8006cf4 <__mcmp>
 80064c4:	2800      	cmp	r0, #0
 80064c6:	dc03      	bgt.n	80064d0 <_dtoa_r+0xa58>
 80064c8:	d1e1      	bne.n	800648e <_dtoa_r+0xa16>
 80064ca:	f018 0f01 	tst.w	r8, #1
 80064ce:	d0de      	beq.n	800648e <_dtoa_r+0xa16>
 80064d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064d4:	d1d8      	bne.n	8006488 <_dtoa_r+0xa10>
 80064d6:	2339      	movs	r3, #57	@ 0x39
 80064d8:	9a02      	ldr	r2, [sp, #8]
 80064da:	7013      	strb	r3, [r2, #0]
 80064dc:	4633      	mov	r3, r6
 80064de:	461e      	mov	r6, r3
 80064e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	2a39      	cmp	r2, #57	@ 0x39
 80064e8:	d052      	beq.n	8006590 <_dtoa_r+0xb18>
 80064ea:	3201      	adds	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e60e      	b.n	800610e <_dtoa_r+0x696>
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	dd07      	ble.n	8006504 <_dtoa_r+0xa8c>
 80064f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80064f8:	d0ed      	beq.n	80064d6 <_dtoa_r+0xa5e>
 80064fa:	9a02      	ldr	r2, [sp, #8]
 80064fc:	f108 0301 	add.w	r3, r8, #1
 8006500:	7013      	strb	r3, [r2, #0]
 8006502:	e604      	b.n	800610e <_dtoa_r+0x696>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	9a07      	ldr	r2, [sp, #28]
 8006508:	f803 8c01 	strb.w	r8, [r3, #-1]
 800650c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800650e:	4293      	cmp	r3, r2
 8006510:	d028      	beq.n	8006564 <_dtoa_r+0xaec>
 8006512:	4649      	mov	r1, r9
 8006514:	2300      	movs	r3, #0
 8006516:	220a      	movs	r2, #10
 8006518:	4658      	mov	r0, fp
 800651a:	f000 f9d5 	bl	80068c8 <__multadd>
 800651e:	42af      	cmp	r7, r5
 8006520:	4681      	mov	r9, r0
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	f04f 020a 	mov.w	r2, #10
 800652a:	4639      	mov	r1, r7
 800652c:	4658      	mov	r0, fp
 800652e:	d107      	bne.n	8006540 <_dtoa_r+0xac8>
 8006530:	f000 f9ca 	bl	80068c8 <__multadd>
 8006534:	4607      	mov	r7, r0
 8006536:	4605      	mov	r5, r0
 8006538:	9b07      	ldr	r3, [sp, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	9307      	str	r3, [sp, #28]
 800653e:	e774      	b.n	800642a <_dtoa_r+0x9b2>
 8006540:	f000 f9c2 	bl	80068c8 <__multadd>
 8006544:	4629      	mov	r1, r5
 8006546:	4607      	mov	r7, r0
 8006548:	2300      	movs	r3, #0
 800654a:	220a      	movs	r2, #10
 800654c:	4658      	mov	r0, fp
 800654e:	f000 f9bb 	bl	80068c8 <__multadd>
 8006552:	4605      	mov	r5, r0
 8006554:	e7f0      	b.n	8006538 <_dtoa_r+0xac0>
 8006556:	9b08      	ldr	r3, [sp, #32]
 8006558:	2700      	movs	r7, #0
 800655a:	2b00      	cmp	r3, #0
 800655c:	bfcc      	ite	gt
 800655e:	461e      	movgt	r6, r3
 8006560:	2601      	movle	r6, #1
 8006562:	4456      	add	r6, sl
 8006564:	4649      	mov	r1, r9
 8006566:	2201      	movs	r2, #1
 8006568:	4658      	mov	r0, fp
 800656a:	f000 fb57 	bl	8006c1c <__lshift>
 800656e:	4621      	mov	r1, r4
 8006570:	4681      	mov	r9, r0
 8006572:	f000 fbbf 	bl	8006cf4 <__mcmp>
 8006576:	2800      	cmp	r0, #0
 8006578:	dcb0      	bgt.n	80064dc <_dtoa_r+0xa64>
 800657a:	d102      	bne.n	8006582 <_dtoa_r+0xb0a>
 800657c:	f018 0f01 	tst.w	r8, #1
 8006580:	d1ac      	bne.n	80064dc <_dtoa_r+0xa64>
 8006582:	4633      	mov	r3, r6
 8006584:	461e      	mov	r6, r3
 8006586:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800658a:	2a30      	cmp	r2, #48	@ 0x30
 800658c:	d0fa      	beq.n	8006584 <_dtoa_r+0xb0c>
 800658e:	e5be      	b.n	800610e <_dtoa_r+0x696>
 8006590:	459a      	cmp	sl, r3
 8006592:	d1a4      	bne.n	80064de <_dtoa_r+0xa66>
 8006594:	9b04      	ldr	r3, [sp, #16]
 8006596:	3301      	adds	r3, #1
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	2331      	movs	r3, #49	@ 0x31
 800659c:	f88a 3000 	strb.w	r3, [sl]
 80065a0:	e5b5      	b.n	800610e <_dtoa_r+0x696>
 80065a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006604 <_dtoa_r+0xb8c>
 80065a8:	b11b      	cbz	r3, 80065b2 <_dtoa_r+0xb3a>
 80065aa:	f10a 0308 	add.w	r3, sl, #8
 80065ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	4650      	mov	r0, sl
 80065b4:	b017      	add	sp, #92	@ 0x5c
 80065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80065bc:	2b01      	cmp	r3, #1
 80065be:	f77f ae3d 	ble.w	800623c <_dtoa_r+0x7c4>
 80065c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c6:	2001      	movs	r0, #1
 80065c8:	e65b      	b.n	8006282 <_dtoa_r+0x80a>
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f77f aed6 	ble.w	800637e <_dtoa_r+0x906>
 80065d2:	4656      	mov	r6, sl
 80065d4:	4621      	mov	r1, r4
 80065d6:	4648      	mov	r0, r9
 80065d8:	f7ff f9c3 	bl	8005962 <quorem>
 80065dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065e0:	9b08      	ldr	r3, [sp, #32]
 80065e2:	f806 8b01 	strb.w	r8, [r6], #1
 80065e6:	eba6 020a 	sub.w	r2, r6, sl
 80065ea:	4293      	cmp	r3, r2
 80065ec:	ddb3      	ble.n	8006556 <_dtoa_r+0xade>
 80065ee:	4649      	mov	r1, r9
 80065f0:	2300      	movs	r3, #0
 80065f2:	220a      	movs	r2, #10
 80065f4:	4658      	mov	r0, fp
 80065f6:	f000 f967 	bl	80068c8 <__multadd>
 80065fa:	4681      	mov	r9, r0
 80065fc:	e7ea      	b.n	80065d4 <_dtoa_r+0xb5c>
 80065fe:	bf00      	nop
 8006600:	08007cb8 	.word	0x08007cb8
 8006604:	08007c3c 	.word	0x08007c3c

08006608 <_free_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4605      	mov	r5, r0
 800660c:	2900      	cmp	r1, #0
 800660e:	d040      	beq.n	8006692 <_free_r+0x8a>
 8006610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006614:	1f0c      	subs	r4, r1, #4
 8006616:	2b00      	cmp	r3, #0
 8006618:	bfb8      	it	lt
 800661a:	18e4      	addlt	r4, r4, r3
 800661c:	f000 f8e6 	bl	80067ec <__malloc_lock>
 8006620:	4a1c      	ldr	r2, [pc, #112]	@ (8006694 <_free_r+0x8c>)
 8006622:	6813      	ldr	r3, [r2, #0]
 8006624:	b933      	cbnz	r3, 8006634 <_free_r+0x2c>
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	6014      	str	r4, [r2, #0]
 800662a:	4628      	mov	r0, r5
 800662c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006630:	f000 b8e2 	b.w	80067f8 <__malloc_unlock>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d908      	bls.n	800664a <_free_r+0x42>
 8006638:	6820      	ldr	r0, [r4, #0]
 800663a:	1821      	adds	r1, r4, r0
 800663c:	428b      	cmp	r3, r1
 800663e:	bf01      	itttt	eq
 8006640:	6819      	ldreq	r1, [r3, #0]
 8006642:	685b      	ldreq	r3, [r3, #4]
 8006644:	1809      	addeq	r1, r1, r0
 8006646:	6021      	streq	r1, [r4, #0]
 8006648:	e7ed      	b.n	8006626 <_free_r+0x1e>
 800664a:	461a      	mov	r2, r3
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	b10b      	cbz	r3, 8006654 <_free_r+0x4c>
 8006650:	42a3      	cmp	r3, r4
 8006652:	d9fa      	bls.n	800664a <_free_r+0x42>
 8006654:	6811      	ldr	r1, [r2, #0]
 8006656:	1850      	adds	r0, r2, r1
 8006658:	42a0      	cmp	r0, r4
 800665a:	d10b      	bne.n	8006674 <_free_r+0x6c>
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	4401      	add	r1, r0
 8006660:	1850      	adds	r0, r2, r1
 8006662:	4283      	cmp	r3, r0
 8006664:	6011      	str	r1, [r2, #0]
 8006666:	d1e0      	bne.n	800662a <_free_r+0x22>
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	4408      	add	r0, r1
 800666e:	6010      	str	r0, [r2, #0]
 8006670:	6053      	str	r3, [r2, #4]
 8006672:	e7da      	b.n	800662a <_free_r+0x22>
 8006674:	d902      	bls.n	800667c <_free_r+0x74>
 8006676:	230c      	movs	r3, #12
 8006678:	602b      	str	r3, [r5, #0]
 800667a:	e7d6      	b.n	800662a <_free_r+0x22>
 800667c:	6820      	ldr	r0, [r4, #0]
 800667e:	1821      	adds	r1, r4, r0
 8006680:	428b      	cmp	r3, r1
 8006682:	bf01      	itttt	eq
 8006684:	6819      	ldreq	r1, [r3, #0]
 8006686:	685b      	ldreq	r3, [r3, #4]
 8006688:	1809      	addeq	r1, r1, r0
 800668a:	6021      	streq	r1, [r4, #0]
 800668c:	6063      	str	r3, [r4, #4]
 800668e:	6054      	str	r4, [r2, #4]
 8006690:	e7cb      	b.n	800662a <_free_r+0x22>
 8006692:	bd38      	pop	{r3, r4, r5, pc}
 8006694:	20000858 	.word	0x20000858

08006698 <malloc>:
 8006698:	4b02      	ldr	r3, [pc, #8]	@ (80066a4 <malloc+0xc>)
 800669a:	4601      	mov	r1, r0
 800669c:	6818      	ldr	r0, [r3, #0]
 800669e:	f000 b825 	b.w	80066ec <_malloc_r>
 80066a2:	bf00      	nop
 80066a4:	200000b4 	.word	0x200000b4

080066a8 <sbrk_aligned>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4e0f      	ldr	r6, [pc, #60]	@ (80066e8 <sbrk_aligned+0x40>)
 80066ac:	460c      	mov	r4, r1
 80066ae:	6831      	ldr	r1, [r6, #0]
 80066b0:	4605      	mov	r5, r0
 80066b2:	b911      	cbnz	r1, 80066ba <sbrk_aligned+0x12>
 80066b4:	f000 fe40 	bl	8007338 <_sbrk_r>
 80066b8:	6030      	str	r0, [r6, #0]
 80066ba:	4621      	mov	r1, r4
 80066bc:	4628      	mov	r0, r5
 80066be:	f000 fe3b 	bl	8007338 <_sbrk_r>
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	d103      	bne.n	80066ce <sbrk_aligned+0x26>
 80066c6:	f04f 34ff 	mov.w	r4, #4294967295
 80066ca:	4620      	mov	r0, r4
 80066cc:	bd70      	pop	{r4, r5, r6, pc}
 80066ce:	1cc4      	adds	r4, r0, #3
 80066d0:	f024 0403 	bic.w	r4, r4, #3
 80066d4:	42a0      	cmp	r0, r4
 80066d6:	d0f8      	beq.n	80066ca <sbrk_aligned+0x22>
 80066d8:	1a21      	subs	r1, r4, r0
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 fe2c 	bl	8007338 <_sbrk_r>
 80066e0:	3001      	adds	r0, #1
 80066e2:	d1f2      	bne.n	80066ca <sbrk_aligned+0x22>
 80066e4:	e7ef      	b.n	80066c6 <sbrk_aligned+0x1e>
 80066e6:	bf00      	nop
 80066e8:	20000854 	.word	0x20000854

080066ec <_malloc_r>:
 80066ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f0:	1ccd      	adds	r5, r1, #3
 80066f2:	f025 0503 	bic.w	r5, r5, #3
 80066f6:	3508      	adds	r5, #8
 80066f8:	2d0c      	cmp	r5, #12
 80066fa:	bf38      	it	cc
 80066fc:	250c      	movcc	r5, #12
 80066fe:	2d00      	cmp	r5, #0
 8006700:	4606      	mov	r6, r0
 8006702:	db01      	blt.n	8006708 <_malloc_r+0x1c>
 8006704:	42a9      	cmp	r1, r5
 8006706:	d904      	bls.n	8006712 <_malloc_r+0x26>
 8006708:	230c      	movs	r3, #12
 800670a:	6033      	str	r3, [r6, #0]
 800670c:	2000      	movs	r0, #0
 800670e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80067e8 <_malloc_r+0xfc>
 8006716:	f000 f869 	bl	80067ec <__malloc_lock>
 800671a:	f8d8 3000 	ldr.w	r3, [r8]
 800671e:	461c      	mov	r4, r3
 8006720:	bb44      	cbnz	r4, 8006774 <_malloc_r+0x88>
 8006722:	4629      	mov	r1, r5
 8006724:	4630      	mov	r0, r6
 8006726:	f7ff ffbf 	bl	80066a8 <sbrk_aligned>
 800672a:	1c43      	adds	r3, r0, #1
 800672c:	4604      	mov	r4, r0
 800672e:	d158      	bne.n	80067e2 <_malloc_r+0xf6>
 8006730:	f8d8 4000 	ldr.w	r4, [r8]
 8006734:	4627      	mov	r7, r4
 8006736:	2f00      	cmp	r7, #0
 8006738:	d143      	bne.n	80067c2 <_malloc_r+0xd6>
 800673a:	2c00      	cmp	r4, #0
 800673c:	d04b      	beq.n	80067d6 <_malloc_r+0xea>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	4639      	mov	r1, r7
 8006742:	4630      	mov	r0, r6
 8006744:	eb04 0903 	add.w	r9, r4, r3
 8006748:	f000 fdf6 	bl	8007338 <_sbrk_r>
 800674c:	4581      	cmp	r9, r0
 800674e:	d142      	bne.n	80067d6 <_malloc_r+0xea>
 8006750:	6821      	ldr	r1, [r4, #0]
 8006752:	4630      	mov	r0, r6
 8006754:	1a6d      	subs	r5, r5, r1
 8006756:	4629      	mov	r1, r5
 8006758:	f7ff ffa6 	bl	80066a8 <sbrk_aligned>
 800675c:	3001      	adds	r0, #1
 800675e:	d03a      	beq.n	80067d6 <_malloc_r+0xea>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	442b      	add	r3, r5
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	f8d8 3000 	ldr.w	r3, [r8]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	bb62      	cbnz	r2, 80067c8 <_malloc_r+0xdc>
 800676e:	f8c8 7000 	str.w	r7, [r8]
 8006772:	e00f      	b.n	8006794 <_malloc_r+0xa8>
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	1b52      	subs	r2, r2, r5
 8006778:	d420      	bmi.n	80067bc <_malloc_r+0xd0>
 800677a:	2a0b      	cmp	r2, #11
 800677c:	d917      	bls.n	80067ae <_malloc_r+0xc2>
 800677e:	1961      	adds	r1, r4, r5
 8006780:	42a3      	cmp	r3, r4
 8006782:	6025      	str	r5, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	6059      	strne	r1, [r3, #4]
 8006788:	6863      	ldr	r3, [r4, #4]
 800678a:	bf08      	it	eq
 800678c:	f8c8 1000 	streq.w	r1, [r8]
 8006790:	5162      	str	r2, [r4, r5]
 8006792:	604b      	str	r3, [r1, #4]
 8006794:	4630      	mov	r0, r6
 8006796:	f000 f82f 	bl	80067f8 <__malloc_unlock>
 800679a:	f104 000b 	add.w	r0, r4, #11
 800679e:	1d23      	adds	r3, r4, #4
 80067a0:	f020 0007 	bic.w	r0, r0, #7
 80067a4:	1ac2      	subs	r2, r0, r3
 80067a6:	bf1c      	itt	ne
 80067a8:	1a1b      	subne	r3, r3, r0
 80067aa:	50a3      	strne	r3, [r4, r2]
 80067ac:	e7af      	b.n	800670e <_malloc_r+0x22>
 80067ae:	6862      	ldr	r2, [r4, #4]
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	bf0c      	ite	eq
 80067b4:	f8c8 2000 	streq.w	r2, [r8]
 80067b8:	605a      	strne	r2, [r3, #4]
 80067ba:	e7eb      	b.n	8006794 <_malloc_r+0xa8>
 80067bc:	4623      	mov	r3, r4
 80067be:	6864      	ldr	r4, [r4, #4]
 80067c0:	e7ae      	b.n	8006720 <_malloc_r+0x34>
 80067c2:	463c      	mov	r4, r7
 80067c4:	687f      	ldr	r7, [r7, #4]
 80067c6:	e7b6      	b.n	8006736 <_malloc_r+0x4a>
 80067c8:	461a      	mov	r2, r3
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d1fb      	bne.n	80067c8 <_malloc_r+0xdc>
 80067d0:	2300      	movs	r3, #0
 80067d2:	6053      	str	r3, [r2, #4]
 80067d4:	e7de      	b.n	8006794 <_malloc_r+0xa8>
 80067d6:	230c      	movs	r3, #12
 80067d8:	4630      	mov	r0, r6
 80067da:	6033      	str	r3, [r6, #0]
 80067dc:	f000 f80c 	bl	80067f8 <__malloc_unlock>
 80067e0:	e794      	b.n	800670c <_malloc_r+0x20>
 80067e2:	6005      	str	r5, [r0, #0]
 80067e4:	e7d6      	b.n	8006794 <_malloc_r+0xa8>
 80067e6:	bf00      	nop
 80067e8:	20000858 	.word	0x20000858

080067ec <__malloc_lock>:
 80067ec:	4801      	ldr	r0, [pc, #4]	@ (80067f4 <__malloc_lock+0x8>)
 80067ee:	f7ff b8a8 	b.w	8005942 <__retarget_lock_acquire_recursive>
 80067f2:	bf00      	nop
 80067f4:	20000850 	.word	0x20000850

080067f8 <__malloc_unlock>:
 80067f8:	4801      	ldr	r0, [pc, #4]	@ (8006800 <__malloc_unlock+0x8>)
 80067fa:	f7ff b8a3 	b.w	8005944 <__retarget_lock_release_recursive>
 80067fe:	bf00      	nop
 8006800:	20000850 	.word	0x20000850

08006804 <_Balloc>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	69c6      	ldr	r6, [r0, #28]
 8006808:	4604      	mov	r4, r0
 800680a:	460d      	mov	r5, r1
 800680c:	b976      	cbnz	r6, 800682c <_Balloc+0x28>
 800680e:	2010      	movs	r0, #16
 8006810:	f7ff ff42 	bl	8006698 <malloc>
 8006814:	4602      	mov	r2, r0
 8006816:	61e0      	str	r0, [r4, #28]
 8006818:	b920      	cbnz	r0, 8006824 <_Balloc+0x20>
 800681a:	216b      	movs	r1, #107	@ 0x6b
 800681c:	4b17      	ldr	r3, [pc, #92]	@ (800687c <_Balloc+0x78>)
 800681e:	4818      	ldr	r0, [pc, #96]	@ (8006880 <_Balloc+0x7c>)
 8006820:	f000 fda8 	bl	8007374 <__assert_func>
 8006824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006828:	6006      	str	r6, [r0, #0]
 800682a:	60c6      	str	r6, [r0, #12]
 800682c:	69e6      	ldr	r6, [r4, #28]
 800682e:	68f3      	ldr	r3, [r6, #12]
 8006830:	b183      	cbz	r3, 8006854 <_Balloc+0x50>
 8006832:	69e3      	ldr	r3, [r4, #28]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800683a:	b9b8      	cbnz	r0, 800686c <_Balloc+0x68>
 800683c:	2101      	movs	r1, #1
 800683e:	fa01 f605 	lsl.w	r6, r1, r5
 8006842:	1d72      	adds	r2, r6, #5
 8006844:	4620      	mov	r0, r4
 8006846:	0092      	lsls	r2, r2, #2
 8006848:	f000 fdb2 	bl	80073b0 <_calloc_r>
 800684c:	b160      	cbz	r0, 8006868 <_Balloc+0x64>
 800684e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006852:	e00e      	b.n	8006872 <_Balloc+0x6e>
 8006854:	2221      	movs	r2, #33	@ 0x21
 8006856:	2104      	movs	r1, #4
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fda9 	bl	80073b0 <_calloc_r>
 800685e:	69e3      	ldr	r3, [r4, #28]
 8006860:	60f0      	str	r0, [r6, #12]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e4      	bne.n	8006832 <_Balloc+0x2e>
 8006868:	2000      	movs	r0, #0
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	6802      	ldr	r2, [r0, #0]
 800686e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006872:	2300      	movs	r3, #0
 8006874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006878:	e7f7      	b.n	800686a <_Balloc+0x66>
 800687a:	bf00      	nop
 800687c:	08007c49 	.word	0x08007c49
 8006880:	08007cc9 	.word	0x08007cc9

08006884 <_Bfree>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	69c6      	ldr	r6, [r0, #28]
 8006888:	4605      	mov	r5, r0
 800688a:	460c      	mov	r4, r1
 800688c:	b976      	cbnz	r6, 80068ac <_Bfree+0x28>
 800688e:	2010      	movs	r0, #16
 8006890:	f7ff ff02 	bl	8006698 <malloc>
 8006894:	4602      	mov	r2, r0
 8006896:	61e8      	str	r0, [r5, #28]
 8006898:	b920      	cbnz	r0, 80068a4 <_Bfree+0x20>
 800689a:	218f      	movs	r1, #143	@ 0x8f
 800689c:	4b08      	ldr	r3, [pc, #32]	@ (80068c0 <_Bfree+0x3c>)
 800689e:	4809      	ldr	r0, [pc, #36]	@ (80068c4 <_Bfree+0x40>)
 80068a0:	f000 fd68 	bl	8007374 <__assert_func>
 80068a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068a8:	6006      	str	r6, [r0, #0]
 80068aa:	60c6      	str	r6, [r0, #12]
 80068ac:	b13c      	cbz	r4, 80068be <_Bfree+0x3a>
 80068ae:	69eb      	ldr	r3, [r5, #28]
 80068b0:	6862      	ldr	r2, [r4, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068b8:	6021      	str	r1, [r4, #0]
 80068ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068be:	bd70      	pop	{r4, r5, r6, pc}
 80068c0:	08007c49 	.word	0x08007c49
 80068c4:	08007cc9 	.word	0x08007cc9

080068c8 <__multadd>:
 80068c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068cc:	4607      	mov	r7, r0
 80068ce:	460c      	mov	r4, r1
 80068d0:	461e      	mov	r6, r3
 80068d2:	2000      	movs	r0, #0
 80068d4:	690d      	ldr	r5, [r1, #16]
 80068d6:	f101 0c14 	add.w	ip, r1, #20
 80068da:	f8dc 3000 	ldr.w	r3, [ip]
 80068de:	3001      	adds	r0, #1
 80068e0:	b299      	uxth	r1, r3
 80068e2:	fb02 6101 	mla	r1, r2, r1, r6
 80068e6:	0c1e      	lsrs	r6, r3, #16
 80068e8:	0c0b      	lsrs	r3, r1, #16
 80068ea:	fb02 3306 	mla	r3, r2, r6, r3
 80068ee:	b289      	uxth	r1, r1
 80068f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068f4:	4285      	cmp	r5, r0
 80068f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068fa:	f84c 1b04 	str.w	r1, [ip], #4
 80068fe:	dcec      	bgt.n	80068da <__multadd+0x12>
 8006900:	b30e      	cbz	r6, 8006946 <__multadd+0x7e>
 8006902:	68a3      	ldr	r3, [r4, #8]
 8006904:	42ab      	cmp	r3, r5
 8006906:	dc19      	bgt.n	800693c <__multadd+0x74>
 8006908:	6861      	ldr	r1, [r4, #4]
 800690a:	4638      	mov	r0, r7
 800690c:	3101      	adds	r1, #1
 800690e:	f7ff ff79 	bl	8006804 <_Balloc>
 8006912:	4680      	mov	r8, r0
 8006914:	b928      	cbnz	r0, 8006922 <__multadd+0x5a>
 8006916:	4602      	mov	r2, r0
 8006918:	21ba      	movs	r1, #186	@ 0xba
 800691a:	4b0c      	ldr	r3, [pc, #48]	@ (800694c <__multadd+0x84>)
 800691c:	480c      	ldr	r0, [pc, #48]	@ (8006950 <__multadd+0x88>)
 800691e:	f000 fd29 	bl	8007374 <__assert_func>
 8006922:	6922      	ldr	r2, [r4, #16]
 8006924:	f104 010c 	add.w	r1, r4, #12
 8006928:	3202      	adds	r2, #2
 800692a:	0092      	lsls	r2, r2, #2
 800692c:	300c      	adds	r0, #12
 800692e:	f000 fd13 	bl	8007358 <memcpy>
 8006932:	4621      	mov	r1, r4
 8006934:	4638      	mov	r0, r7
 8006936:	f7ff ffa5 	bl	8006884 <_Bfree>
 800693a:	4644      	mov	r4, r8
 800693c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006940:	3501      	adds	r5, #1
 8006942:	615e      	str	r6, [r3, #20]
 8006944:	6125      	str	r5, [r4, #16]
 8006946:	4620      	mov	r0, r4
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	08007cb8 	.word	0x08007cb8
 8006950:	08007cc9 	.word	0x08007cc9

08006954 <__hi0bits>:
 8006954:	4603      	mov	r3, r0
 8006956:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800695a:	bf3a      	itte	cc
 800695c:	0403      	lslcc	r3, r0, #16
 800695e:	2010      	movcc	r0, #16
 8006960:	2000      	movcs	r0, #0
 8006962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006966:	bf3c      	itt	cc
 8006968:	021b      	lslcc	r3, r3, #8
 800696a:	3008      	addcc	r0, #8
 800696c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006970:	bf3c      	itt	cc
 8006972:	011b      	lslcc	r3, r3, #4
 8006974:	3004      	addcc	r0, #4
 8006976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800697a:	bf3c      	itt	cc
 800697c:	009b      	lslcc	r3, r3, #2
 800697e:	3002      	addcc	r0, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	db05      	blt.n	8006990 <__hi0bits+0x3c>
 8006984:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006988:	f100 0001 	add.w	r0, r0, #1
 800698c:	bf08      	it	eq
 800698e:	2020      	moveq	r0, #32
 8006990:	4770      	bx	lr

08006992 <__lo0bits>:
 8006992:	6803      	ldr	r3, [r0, #0]
 8006994:	4602      	mov	r2, r0
 8006996:	f013 0007 	ands.w	r0, r3, #7
 800699a:	d00b      	beq.n	80069b4 <__lo0bits+0x22>
 800699c:	07d9      	lsls	r1, r3, #31
 800699e:	d421      	bmi.n	80069e4 <__lo0bits+0x52>
 80069a0:	0798      	lsls	r0, r3, #30
 80069a2:	bf49      	itett	mi
 80069a4:	085b      	lsrmi	r3, r3, #1
 80069a6:	089b      	lsrpl	r3, r3, #2
 80069a8:	2001      	movmi	r0, #1
 80069aa:	6013      	strmi	r3, [r2, #0]
 80069ac:	bf5c      	itt	pl
 80069ae:	2002      	movpl	r0, #2
 80069b0:	6013      	strpl	r3, [r2, #0]
 80069b2:	4770      	bx	lr
 80069b4:	b299      	uxth	r1, r3
 80069b6:	b909      	cbnz	r1, 80069bc <__lo0bits+0x2a>
 80069b8:	2010      	movs	r0, #16
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	b2d9      	uxtb	r1, r3
 80069be:	b909      	cbnz	r1, 80069c4 <__lo0bits+0x32>
 80069c0:	3008      	adds	r0, #8
 80069c2:	0a1b      	lsrs	r3, r3, #8
 80069c4:	0719      	lsls	r1, r3, #28
 80069c6:	bf04      	itt	eq
 80069c8:	091b      	lsreq	r3, r3, #4
 80069ca:	3004      	addeq	r0, #4
 80069cc:	0799      	lsls	r1, r3, #30
 80069ce:	bf04      	itt	eq
 80069d0:	089b      	lsreq	r3, r3, #2
 80069d2:	3002      	addeq	r0, #2
 80069d4:	07d9      	lsls	r1, r3, #31
 80069d6:	d403      	bmi.n	80069e0 <__lo0bits+0x4e>
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	f100 0001 	add.w	r0, r0, #1
 80069de:	d003      	beq.n	80069e8 <__lo0bits+0x56>
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	4770      	bx	lr
 80069e4:	2000      	movs	r0, #0
 80069e6:	4770      	bx	lr
 80069e8:	2020      	movs	r0, #32
 80069ea:	4770      	bx	lr

080069ec <__i2b>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	460c      	mov	r4, r1
 80069f0:	2101      	movs	r1, #1
 80069f2:	f7ff ff07 	bl	8006804 <_Balloc>
 80069f6:	4602      	mov	r2, r0
 80069f8:	b928      	cbnz	r0, 8006a06 <__i2b+0x1a>
 80069fa:	f240 1145 	movw	r1, #325	@ 0x145
 80069fe:	4b04      	ldr	r3, [pc, #16]	@ (8006a10 <__i2b+0x24>)
 8006a00:	4804      	ldr	r0, [pc, #16]	@ (8006a14 <__i2b+0x28>)
 8006a02:	f000 fcb7 	bl	8007374 <__assert_func>
 8006a06:	2301      	movs	r3, #1
 8006a08:	6144      	str	r4, [r0, #20]
 8006a0a:	6103      	str	r3, [r0, #16]
 8006a0c:	bd10      	pop	{r4, pc}
 8006a0e:	bf00      	nop
 8006a10:	08007cb8 	.word	0x08007cb8
 8006a14:	08007cc9 	.word	0x08007cc9

08006a18 <__multiply>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	4614      	mov	r4, r2
 8006a1e:	690a      	ldr	r2, [r1, #16]
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	460f      	mov	r7, r1
 8006a24:	429a      	cmp	r2, r3
 8006a26:	bfa2      	ittt	ge
 8006a28:	4623      	movge	r3, r4
 8006a2a:	460c      	movge	r4, r1
 8006a2c:	461f      	movge	r7, r3
 8006a2e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a32:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	6861      	ldr	r1, [r4, #4]
 8006a3a:	eb0a 0609 	add.w	r6, sl, r9
 8006a3e:	42b3      	cmp	r3, r6
 8006a40:	b085      	sub	sp, #20
 8006a42:	bfb8      	it	lt
 8006a44:	3101      	addlt	r1, #1
 8006a46:	f7ff fedd 	bl	8006804 <_Balloc>
 8006a4a:	b930      	cbnz	r0, 8006a5a <__multiply+0x42>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a52:	4b43      	ldr	r3, [pc, #268]	@ (8006b60 <__multiply+0x148>)
 8006a54:	4843      	ldr	r0, [pc, #268]	@ (8006b64 <__multiply+0x14c>)
 8006a56:	f000 fc8d 	bl	8007374 <__assert_func>
 8006a5a:	f100 0514 	add.w	r5, r0, #20
 8006a5e:	462b      	mov	r3, r5
 8006a60:	2200      	movs	r2, #0
 8006a62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a66:	4543      	cmp	r3, r8
 8006a68:	d321      	bcc.n	8006aae <__multiply+0x96>
 8006a6a:	f107 0114 	add.w	r1, r7, #20
 8006a6e:	f104 0214 	add.w	r2, r4, #20
 8006a72:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006a76:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006a7a:	9302      	str	r3, [sp, #8]
 8006a7c:	1b13      	subs	r3, r2, r4
 8006a7e:	3b15      	subs	r3, #21
 8006a80:	f023 0303 	bic.w	r3, r3, #3
 8006a84:	3304      	adds	r3, #4
 8006a86:	f104 0715 	add.w	r7, r4, #21
 8006a8a:	42ba      	cmp	r2, r7
 8006a8c:	bf38      	it	cc
 8006a8e:	2304      	movcc	r3, #4
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	9103      	str	r1, [sp, #12]
 8006a96:	428b      	cmp	r3, r1
 8006a98:	d80c      	bhi.n	8006ab4 <__multiply+0x9c>
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	dd03      	ble.n	8006aa6 <__multiply+0x8e>
 8006a9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d05a      	beq.n	8006b5c <__multiply+0x144>
 8006aa6:	6106      	str	r6, [r0, #16]
 8006aa8:	b005      	add	sp, #20
 8006aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aae:	f843 2b04 	str.w	r2, [r3], #4
 8006ab2:	e7d8      	b.n	8006a66 <__multiply+0x4e>
 8006ab4:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ab8:	f1ba 0f00 	cmp.w	sl, #0
 8006abc:	d023      	beq.n	8006b06 <__multiply+0xee>
 8006abe:	46a9      	mov	r9, r5
 8006ac0:	f04f 0c00 	mov.w	ip, #0
 8006ac4:	f104 0e14 	add.w	lr, r4, #20
 8006ac8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006acc:	f8d9 3000 	ldr.w	r3, [r9]
 8006ad0:	fa1f fb87 	uxth.w	fp, r7
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	fb0a 330b 	mla	r3, sl, fp, r3
 8006ada:	4463      	add	r3, ip
 8006adc:	f8d9 c000 	ldr.w	ip, [r9]
 8006ae0:	0c3f      	lsrs	r7, r7, #16
 8006ae2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006ae6:	fb0a c707 	mla	r7, sl, r7, ip
 8006aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006af4:	4572      	cmp	r2, lr
 8006af6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006afa:	f849 3b04 	str.w	r3, [r9], #4
 8006afe:	d8e3      	bhi.n	8006ac8 <__multiply+0xb0>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	f845 c003 	str.w	ip, [r5, r3]
 8006b06:	9b03      	ldr	r3, [sp, #12]
 8006b08:	3104      	adds	r1, #4
 8006b0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b0e:	f1b9 0f00 	cmp.w	r9, #0
 8006b12:	d021      	beq.n	8006b58 <__multiply+0x140>
 8006b14:	46ae      	mov	lr, r5
 8006b16:	f04f 0a00 	mov.w	sl, #0
 8006b1a:	682b      	ldr	r3, [r5, #0]
 8006b1c:	f104 0c14 	add.w	ip, r4, #20
 8006b20:	f8bc b000 	ldrh.w	fp, [ip]
 8006b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	fb09 770b 	mla	r7, r9, fp, r7
 8006b2e:	4457      	add	r7, sl
 8006b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b34:	f84e 3b04 	str.w	r3, [lr], #4
 8006b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b40:	f8be 3000 	ldrh.w	r3, [lr]
 8006b44:	4562      	cmp	r2, ip
 8006b46:	fb09 330a 	mla	r3, r9, sl, r3
 8006b4a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b52:	d8e5      	bhi.n	8006b20 <__multiply+0x108>
 8006b54:	9f01      	ldr	r7, [sp, #4]
 8006b56:	51eb      	str	r3, [r5, r7]
 8006b58:	3504      	adds	r5, #4
 8006b5a:	e79a      	b.n	8006a92 <__multiply+0x7a>
 8006b5c:	3e01      	subs	r6, #1
 8006b5e:	e79c      	b.n	8006a9a <__multiply+0x82>
 8006b60:	08007cb8 	.word	0x08007cb8
 8006b64:	08007cc9 	.word	0x08007cc9

08006b68 <__pow5mult>:
 8006b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b6c:	4615      	mov	r5, r2
 8006b6e:	f012 0203 	ands.w	r2, r2, #3
 8006b72:	4607      	mov	r7, r0
 8006b74:	460e      	mov	r6, r1
 8006b76:	d007      	beq.n	8006b88 <__pow5mult+0x20>
 8006b78:	4c25      	ldr	r4, [pc, #148]	@ (8006c10 <__pow5mult+0xa8>)
 8006b7a:	3a01      	subs	r2, #1
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b82:	f7ff fea1 	bl	80068c8 <__multadd>
 8006b86:	4606      	mov	r6, r0
 8006b88:	10ad      	asrs	r5, r5, #2
 8006b8a:	d03d      	beq.n	8006c08 <__pow5mult+0xa0>
 8006b8c:	69fc      	ldr	r4, [r7, #28]
 8006b8e:	b97c      	cbnz	r4, 8006bb0 <__pow5mult+0x48>
 8006b90:	2010      	movs	r0, #16
 8006b92:	f7ff fd81 	bl	8006698 <malloc>
 8006b96:	4602      	mov	r2, r0
 8006b98:	61f8      	str	r0, [r7, #28]
 8006b9a:	b928      	cbnz	r0, 8006ba8 <__pow5mult+0x40>
 8006b9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8006c14 <__pow5mult+0xac>)
 8006ba2:	481d      	ldr	r0, [pc, #116]	@ (8006c18 <__pow5mult+0xb0>)
 8006ba4:	f000 fbe6 	bl	8007374 <__assert_func>
 8006ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bac:	6004      	str	r4, [r0, #0]
 8006bae:	60c4      	str	r4, [r0, #12]
 8006bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bb8:	b94c      	cbnz	r4, 8006bce <__pow5mult+0x66>
 8006bba:	f240 2171 	movw	r1, #625	@ 0x271
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f7ff ff14 	bl	80069ec <__i2b>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bcc:	6003      	str	r3, [r0, #0]
 8006bce:	f04f 0900 	mov.w	r9, #0
 8006bd2:	07eb      	lsls	r3, r5, #31
 8006bd4:	d50a      	bpl.n	8006bec <__pow5mult+0x84>
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4622      	mov	r2, r4
 8006bda:	4638      	mov	r0, r7
 8006bdc:	f7ff ff1c 	bl	8006a18 <__multiply>
 8006be0:	4680      	mov	r8, r0
 8006be2:	4631      	mov	r1, r6
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7ff fe4d 	bl	8006884 <_Bfree>
 8006bea:	4646      	mov	r6, r8
 8006bec:	106d      	asrs	r5, r5, #1
 8006bee:	d00b      	beq.n	8006c08 <__pow5mult+0xa0>
 8006bf0:	6820      	ldr	r0, [r4, #0]
 8006bf2:	b938      	cbnz	r0, 8006c04 <__pow5mult+0x9c>
 8006bf4:	4622      	mov	r2, r4
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ff0d 	bl	8006a18 <__multiply>
 8006bfe:	6020      	str	r0, [r4, #0]
 8006c00:	f8c0 9000 	str.w	r9, [r0]
 8006c04:	4604      	mov	r4, r0
 8006c06:	e7e4      	b.n	8006bd2 <__pow5mult+0x6a>
 8006c08:	4630      	mov	r0, r6
 8006c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c0e:	bf00      	nop
 8006c10:	08007d24 	.word	0x08007d24
 8006c14:	08007c49 	.word	0x08007c49
 8006c18:	08007cc9 	.word	0x08007cc9

08006c1c <__lshift>:
 8006c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c20:	460c      	mov	r4, r1
 8006c22:	4607      	mov	r7, r0
 8006c24:	4691      	mov	r9, r2
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	6849      	ldr	r1, [r1, #4]
 8006c2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c2e:	68a3      	ldr	r3, [r4, #8]
 8006c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c34:	f108 0601 	add.w	r6, r8, #1
 8006c38:	42b3      	cmp	r3, r6
 8006c3a:	db0b      	blt.n	8006c54 <__lshift+0x38>
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f7ff fde1 	bl	8006804 <_Balloc>
 8006c42:	4605      	mov	r5, r0
 8006c44:	b948      	cbnz	r0, 8006c5a <__lshift+0x3e>
 8006c46:	4602      	mov	r2, r0
 8006c48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c4c:	4b27      	ldr	r3, [pc, #156]	@ (8006cec <__lshift+0xd0>)
 8006c4e:	4828      	ldr	r0, [pc, #160]	@ (8006cf0 <__lshift+0xd4>)
 8006c50:	f000 fb90 	bl	8007374 <__assert_func>
 8006c54:	3101      	adds	r1, #1
 8006c56:	005b      	lsls	r3, r3, #1
 8006c58:	e7ee      	b.n	8006c38 <__lshift+0x1c>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f100 0114 	add.w	r1, r0, #20
 8006c60:	f100 0210 	add.w	r2, r0, #16
 8006c64:	4618      	mov	r0, r3
 8006c66:	4553      	cmp	r3, sl
 8006c68:	db33      	blt.n	8006cd2 <__lshift+0xb6>
 8006c6a:	6920      	ldr	r0, [r4, #16]
 8006c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c70:	f104 0314 	add.w	r3, r4, #20
 8006c74:	f019 091f 	ands.w	r9, r9, #31
 8006c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c80:	d02b      	beq.n	8006cda <__lshift+0xbe>
 8006c82:	468a      	mov	sl, r1
 8006c84:	2200      	movs	r2, #0
 8006c86:	f1c9 0e20 	rsb	lr, r9, #32
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c90:	4310      	orrs	r0, r2
 8006c92:	f84a 0b04 	str.w	r0, [sl], #4
 8006c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c9a:	459c      	cmp	ip, r3
 8006c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ca0:	d8f3      	bhi.n	8006c8a <__lshift+0x6e>
 8006ca2:	ebac 0304 	sub.w	r3, ip, r4
 8006ca6:	3b15      	subs	r3, #21
 8006ca8:	f023 0303 	bic.w	r3, r3, #3
 8006cac:	3304      	adds	r3, #4
 8006cae:	f104 0015 	add.w	r0, r4, #21
 8006cb2:	4584      	cmp	ip, r0
 8006cb4:	bf38      	it	cc
 8006cb6:	2304      	movcc	r3, #4
 8006cb8:	50ca      	str	r2, [r1, r3]
 8006cba:	b10a      	cbz	r2, 8006cc0 <__lshift+0xa4>
 8006cbc:	f108 0602 	add.w	r6, r8, #2
 8006cc0:	3e01      	subs	r6, #1
 8006cc2:	4638      	mov	r0, r7
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	612e      	str	r6, [r5, #16]
 8006cc8:	f7ff fddc 	bl	8006884 <_Bfree>
 8006ccc:	4628      	mov	r0, r5
 8006cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	e7c5      	b.n	8006c66 <__lshift+0x4a>
 8006cda:	3904      	subs	r1, #4
 8006cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ce0:	459c      	cmp	ip, r3
 8006ce2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ce6:	d8f9      	bhi.n	8006cdc <__lshift+0xc0>
 8006ce8:	e7ea      	b.n	8006cc0 <__lshift+0xa4>
 8006cea:	bf00      	nop
 8006cec:	08007cb8 	.word	0x08007cb8
 8006cf0:	08007cc9 	.word	0x08007cc9

08006cf4 <__mcmp>:
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	690a      	ldr	r2, [r1, #16]
 8006cf8:	6900      	ldr	r0, [r0, #16]
 8006cfa:	b530      	push	{r4, r5, lr}
 8006cfc:	1a80      	subs	r0, r0, r2
 8006cfe:	d10e      	bne.n	8006d1e <__mcmp+0x2a>
 8006d00:	3314      	adds	r3, #20
 8006d02:	3114      	adds	r1, #20
 8006d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d14:	4295      	cmp	r5, r2
 8006d16:	d003      	beq.n	8006d20 <__mcmp+0x2c>
 8006d18:	d205      	bcs.n	8006d26 <__mcmp+0x32>
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1e:	bd30      	pop	{r4, r5, pc}
 8006d20:	42a3      	cmp	r3, r4
 8006d22:	d3f3      	bcc.n	8006d0c <__mcmp+0x18>
 8006d24:	e7fb      	b.n	8006d1e <__mcmp+0x2a>
 8006d26:	2001      	movs	r0, #1
 8006d28:	e7f9      	b.n	8006d1e <__mcmp+0x2a>
	...

08006d2c <__mdiff>:
 8006d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	4689      	mov	r9, r1
 8006d32:	4606      	mov	r6, r0
 8006d34:	4611      	mov	r1, r2
 8006d36:	4648      	mov	r0, r9
 8006d38:	4614      	mov	r4, r2
 8006d3a:	f7ff ffdb 	bl	8006cf4 <__mcmp>
 8006d3e:	1e05      	subs	r5, r0, #0
 8006d40:	d112      	bne.n	8006d68 <__mdiff+0x3c>
 8006d42:	4629      	mov	r1, r5
 8006d44:	4630      	mov	r0, r6
 8006d46:	f7ff fd5d 	bl	8006804 <_Balloc>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	b928      	cbnz	r0, 8006d5a <__mdiff+0x2e>
 8006d4e:	f240 2137 	movw	r1, #567	@ 0x237
 8006d52:	4b3e      	ldr	r3, [pc, #248]	@ (8006e4c <__mdiff+0x120>)
 8006d54:	483e      	ldr	r0, [pc, #248]	@ (8006e50 <__mdiff+0x124>)
 8006d56:	f000 fb0d 	bl	8007374 <__assert_func>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d60:	4610      	mov	r0, r2
 8006d62:	b003      	add	sp, #12
 8006d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d68:	bfbc      	itt	lt
 8006d6a:	464b      	movlt	r3, r9
 8006d6c:	46a1      	movlt	r9, r4
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d74:	bfba      	itte	lt
 8006d76:	461c      	movlt	r4, r3
 8006d78:	2501      	movlt	r5, #1
 8006d7a:	2500      	movge	r5, #0
 8006d7c:	f7ff fd42 	bl	8006804 <_Balloc>
 8006d80:	4602      	mov	r2, r0
 8006d82:	b918      	cbnz	r0, 8006d8c <__mdiff+0x60>
 8006d84:	f240 2145 	movw	r1, #581	@ 0x245
 8006d88:	4b30      	ldr	r3, [pc, #192]	@ (8006e4c <__mdiff+0x120>)
 8006d8a:	e7e3      	b.n	8006d54 <__mdiff+0x28>
 8006d8c:	f100 0b14 	add.w	fp, r0, #20
 8006d90:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d94:	f109 0310 	add.w	r3, r9, #16
 8006d98:	60c5      	str	r5, [r0, #12]
 8006d9a:	f04f 0c00 	mov.w	ip, #0
 8006d9e:	f109 0514 	add.w	r5, r9, #20
 8006da2:	46d9      	mov	r9, fp
 8006da4:	6926      	ldr	r6, [r4, #16]
 8006da6:	f104 0e14 	add.w	lr, r4, #20
 8006daa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006dae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006db2:	9301      	str	r3, [sp, #4]
 8006db4:	9b01      	ldr	r3, [sp, #4]
 8006db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006dbe:	b281      	uxth	r1, r0
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	fa1f f38a 	uxth.w	r3, sl
 8006dc6:	1a5b      	subs	r3, r3, r1
 8006dc8:	0c00      	lsrs	r0, r0, #16
 8006dca:	4463      	add	r3, ip
 8006dcc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006dd0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006dda:	4576      	cmp	r6, lr
 8006ddc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006de0:	f849 3b04 	str.w	r3, [r9], #4
 8006de4:	d8e6      	bhi.n	8006db4 <__mdiff+0x88>
 8006de6:	1b33      	subs	r3, r6, r4
 8006de8:	3b15      	subs	r3, #21
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	3415      	adds	r4, #21
 8006df0:	3304      	adds	r3, #4
 8006df2:	42a6      	cmp	r6, r4
 8006df4:	bf38      	it	cc
 8006df6:	2304      	movcc	r3, #4
 8006df8:	441d      	add	r5, r3
 8006dfa:	445b      	add	r3, fp
 8006dfc:	461e      	mov	r6, r3
 8006dfe:	462c      	mov	r4, r5
 8006e00:	4544      	cmp	r4, r8
 8006e02:	d30e      	bcc.n	8006e22 <__mdiff+0xf6>
 8006e04:	f108 0103 	add.w	r1, r8, #3
 8006e08:	1b49      	subs	r1, r1, r5
 8006e0a:	f021 0103 	bic.w	r1, r1, #3
 8006e0e:	3d03      	subs	r5, #3
 8006e10:	45a8      	cmp	r8, r5
 8006e12:	bf38      	it	cc
 8006e14:	2100      	movcc	r1, #0
 8006e16:	440b      	add	r3, r1
 8006e18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e1c:	b199      	cbz	r1, 8006e46 <__mdiff+0x11a>
 8006e1e:	6117      	str	r7, [r2, #16]
 8006e20:	e79e      	b.n	8006d60 <__mdiff+0x34>
 8006e22:	46e6      	mov	lr, ip
 8006e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e28:	fa1f fc81 	uxth.w	ip, r1
 8006e2c:	44f4      	add	ip, lr
 8006e2e:	0c08      	lsrs	r0, r1, #16
 8006e30:	4471      	add	r1, lr
 8006e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e36:	b289      	uxth	r1, r1
 8006e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e40:	f846 1b04 	str.w	r1, [r6], #4
 8006e44:	e7dc      	b.n	8006e00 <__mdiff+0xd4>
 8006e46:	3f01      	subs	r7, #1
 8006e48:	e7e6      	b.n	8006e18 <__mdiff+0xec>
 8006e4a:	bf00      	nop
 8006e4c:	08007cb8 	.word	0x08007cb8
 8006e50:	08007cc9 	.word	0x08007cc9

08006e54 <__d2b>:
 8006e54:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006e58:	2101      	movs	r1, #1
 8006e5a:	4690      	mov	r8, r2
 8006e5c:	4699      	mov	r9, r3
 8006e5e:	9e08      	ldr	r6, [sp, #32]
 8006e60:	f7ff fcd0 	bl	8006804 <_Balloc>
 8006e64:	4604      	mov	r4, r0
 8006e66:	b930      	cbnz	r0, 8006e76 <__d2b+0x22>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e6e:	4b23      	ldr	r3, [pc, #140]	@ (8006efc <__d2b+0xa8>)
 8006e70:	4823      	ldr	r0, [pc, #140]	@ (8006f00 <__d2b+0xac>)
 8006e72:	f000 fa7f 	bl	8007374 <__assert_func>
 8006e76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e7e:	b10d      	cbz	r5, 8006e84 <__d2b+0x30>
 8006e80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	f1b8 0300 	subs.w	r3, r8, #0
 8006e8a:	d024      	beq.n	8006ed6 <__d2b+0x82>
 8006e8c:	4668      	mov	r0, sp
 8006e8e:	9300      	str	r3, [sp, #0]
 8006e90:	f7ff fd7f 	bl	8006992 <__lo0bits>
 8006e94:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e98:	b1d8      	cbz	r0, 8006ed2 <__d2b+0x7e>
 8006e9a:	f1c0 0320 	rsb	r3, r0, #32
 8006e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea2:	430b      	orrs	r3, r1
 8006ea4:	40c2      	lsrs	r2, r0
 8006ea6:	6163      	str	r3, [r4, #20]
 8006ea8:	9201      	str	r2, [sp, #4]
 8006eaa:	9b01      	ldr	r3, [sp, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf0c      	ite	eq
 8006eb0:	2201      	moveq	r2, #1
 8006eb2:	2202      	movne	r2, #2
 8006eb4:	61a3      	str	r3, [r4, #24]
 8006eb6:	6122      	str	r2, [r4, #16]
 8006eb8:	b1ad      	cbz	r5, 8006ee6 <__d2b+0x92>
 8006eba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ebe:	4405      	add	r5, r0
 8006ec0:	6035      	str	r5, [r6, #0]
 8006ec2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec8:	6018      	str	r0, [r3, #0]
 8006eca:	4620      	mov	r0, r4
 8006ecc:	b002      	add	sp, #8
 8006ece:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006ed2:	6161      	str	r1, [r4, #20]
 8006ed4:	e7e9      	b.n	8006eaa <__d2b+0x56>
 8006ed6:	a801      	add	r0, sp, #4
 8006ed8:	f7ff fd5b 	bl	8006992 <__lo0bits>
 8006edc:	9b01      	ldr	r3, [sp, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	6163      	str	r3, [r4, #20]
 8006ee2:	3020      	adds	r0, #32
 8006ee4:	e7e7      	b.n	8006eb6 <__d2b+0x62>
 8006ee6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006eea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006eee:	6030      	str	r0, [r6, #0]
 8006ef0:	6918      	ldr	r0, [r3, #16]
 8006ef2:	f7ff fd2f 	bl	8006954 <__hi0bits>
 8006ef6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006efa:	e7e4      	b.n	8006ec6 <__d2b+0x72>
 8006efc:	08007cb8 	.word	0x08007cb8
 8006f00:	08007cc9 	.word	0x08007cc9

08006f04 <__ssputs_r>:
 8006f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	461f      	mov	r7, r3
 8006f0a:	688e      	ldr	r6, [r1, #8]
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	42be      	cmp	r6, r7
 8006f10:	460c      	mov	r4, r1
 8006f12:	4690      	mov	r8, r2
 8006f14:	680b      	ldr	r3, [r1, #0]
 8006f16:	d82d      	bhi.n	8006f74 <__ssputs_r+0x70>
 8006f18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f20:	d026      	beq.n	8006f70 <__ssputs_r+0x6c>
 8006f22:	6965      	ldr	r5, [r4, #20]
 8006f24:	6909      	ldr	r1, [r1, #16]
 8006f26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f2a:	eba3 0901 	sub.w	r9, r3, r1
 8006f2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f32:	1c7b      	adds	r3, r7, #1
 8006f34:	444b      	add	r3, r9
 8006f36:	106d      	asrs	r5, r5, #1
 8006f38:	429d      	cmp	r5, r3
 8006f3a:	bf38      	it	cc
 8006f3c:	461d      	movcc	r5, r3
 8006f3e:	0553      	lsls	r3, r2, #21
 8006f40:	d527      	bpl.n	8006f92 <__ssputs_r+0x8e>
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7ff fbd2 	bl	80066ec <_malloc_r>
 8006f48:	4606      	mov	r6, r0
 8006f4a:	b360      	cbz	r0, 8006fa6 <__ssputs_r+0xa2>
 8006f4c:	464a      	mov	r2, r9
 8006f4e:	6921      	ldr	r1, [r4, #16]
 8006f50:	f000 fa02 	bl	8007358 <memcpy>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f5e:	81a3      	strh	r3, [r4, #12]
 8006f60:	6126      	str	r6, [r4, #16]
 8006f62:	444e      	add	r6, r9
 8006f64:	6026      	str	r6, [r4, #0]
 8006f66:	463e      	mov	r6, r7
 8006f68:	6165      	str	r5, [r4, #20]
 8006f6a:	eba5 0509 	sub.w	r5, r5, r9
 8006f6e:	60a5      	str	r5, [r4, #8]
 8006f70:	42be      	cmp	r6, r7
 8006f72:	d900      	bls.n	8006f76 <__ssputs_r+0x72>
 8006f74:	463e      	mov	r6, r7
 8006f76:	4632      	mov	r2, r6
 8006f78:	4641      	mov	r1, r8
 8006f7a:	6820      	ldr	r0, [r4, #0]
 8006f7c:	f000 f9c2 	bl	8007304 <memmove>
 8006f80:	2000      	movs	r0, #0
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	1b9b      	subs	r3, r3, r6
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	4433      	add	r3, r6
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	462a      	mov	r2, r5
 8006f94:	f000 fa32 	bl	80073fc <_realloc_r>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d1e0      	bne.n	8006f60 <__ssputs_r+0x5c>
 8006f9e:	4650      	mov	r0, sl
 8006fa0:	6921      	ldr	r1, [r4, #16]
 8006fa2:	f7ff fb31 	bl	8006608 <_free_r>
 8006fa6:	230c      	movs	r3, #12
 8006fa8:	f8ca 3000 	str.w	r3, [sl]
 8006fac:	89a3      	ldrh	r3, [r4, #12]
 8006fae:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb6:	81a3      	strh	r3, [r4, #12]
 8006fb8:	e7e9      	b.n	8006f8e <__ssputs_r+0x8a>
	...

08006fbc <_svfiprintf_r>:
 8006fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc0:	4698      	mov	r8, r3
 8006fc2:	898b      	ldrh	r3, [r1, #12]
 8006fc4:	4607      	mov	r7, r0
 8006fc6:	061b      	lsls	r3, r3, #24
 8006fc8:	460d      	mov	r5, r1
 8006fca:	4614      	mov	r4, r2
 8006fcc:	b09d      	sub	sp, #116	@ 0x74
 8006fce:	d510      	bpl.n	8006ff2 <_svfiprintf_r+0x36>
 8006fd0:	690b      	ldr	r3, [r1, #16]
 8006fd2:	b973      	cbnz	r3, 8006ff2 <_svfiprintf_r+0x36>
 8006fd4:	2140      	movs	r1, #64	@ 0x40
 8006fd6:	f7ff fb89 	bl	80066ec <_malloc_r>
 8006fda:	6028      	str	r0, [r5, #0]
 8006fdc:	6128      	str	r0, [r5, #16]
 8006fde:	b930      	cbnz	r0, 8006fee <_svfiprintf_r+0x32>
 8006fe0:	230c      	movs	r3, #12
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe8:	b01d      	add	sp, #116	@ 0x74
 8006fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fee:	2340      	movs	r3, #64	@ 0x40
 8006ff0:	616b      	str	r3, [r5, #20]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ffc:	2330      	movs	r3, #48	@ 0x30
 8006ffe:	f04f 0901 	mov.w	r9, #1
 8007002:	f8cd 800c 	str.w	r8, [sp, #12]
 8007006:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80071a0 <_svfiprintf_r+0x1e4>
 800700a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800700e:	4623      	mov	r3, r4
 8007010:	469a      	mov	sl, r3
 8007012:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007016:	b10a      	cbz	r2, 800701c <_svfiprintf_r+0x60>
 8007018:	2a25      	cmp	r2, #37	@ 0x25
 800701a:	d1f9      	bne.n	8007010 <_svfiprintf_r+0x54>
 800701c:	ebba 0b04 	subs.w	fp, sl, r4
 8007020:	d00b      	beq.n	800703a <_svfiprintf_r+0x7e>
 8007022:	465b      	mov	r3, fp
 8007024:	4622      	mov	r2, r4
 8007026:	4629      	mov	r1, r5
 8007028:	4638      	mov	r0, r7
 800702a:	f7ff ff6b 	bl	8006f04 <__ssputs_r>
 800702e:	3001      	adds	r0, #1
 8007030:	f000 80a7 	beq.w	8007182 <_svfiprintf_r+0x1c6>
 8007034:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007036:	445a      	add	r2, fp
 8007038:	9209      	str	r2, [sp, #36]	@ 0x24
 800703a:	f89a 3000 	ldrb.w	r3, [sl]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 809f 	beq.w	8007182 <_svfiprintf_r+0x1c6>
 8007044:	2300      	movs	r3, #0
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800704e:	f10a 0a01 	add.w	sl, sl, #1
 8007052:	9304      	str	r3, [sp, #16]
 8007054:	9307      	str	r3, [sp, #28]
 8007056:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800705a:	931a      	str	r3, [sp, #104]	@ 0x68
 800705c:	4654      	mov	r4, sl
 800705e:	2205      	movs	r2, #5
 8007060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007064:	484e      	ldr	r0, [pc, #312]	@ (80071a0 <_svfiprintf_r+0x1e4>)
 8007066:	f7fe fc6e 	bl	8005946 <memchr>
 800706a:	9a04      	ldr	r2, [sp, #16]
 800706c:	b9d8      	cbnz	r0, 80070a6 <_svfiprintf_r+0xea>
 800706e:	06d0      	lsls	r0, r2, #27
 8007070:	bf44      	itt	mi
 8007072:	2320      	movmi	r3, #32
 8007074:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007078:	0711      	lsls	r1, r2, #28
 800707a:	bf44      	itt	mi
 800707c:	232b      	movmi	r3, #43	@ 0x2b
 800707e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007082:	f89a 3000 	ldrb.w	r3, [sl]
 8007086:	2b2a      	cmp	r3, #42	@ 0x2a
 8007088:	d015      	beq.n	80070b6 <_svfiprintf_r+0xfa>
 800708a:	4654      	mov	r4, sl
 800708c:	2000      	movs	r0, #0
 800708e:	f04f 0c0a 	mov.w	ip, #10
 8007092:	9a07      	ldr	r2, [sp, #28]
 8007094:	4621      	mov	r1, r4
 8007096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800709a:	3b30      	subs	r3, #48	@ 0x30
 800709c:	2b09      	cmp	r3, #9
 800709e:	d94b      	bls.n	8007138 <_svfiprintf_r+0x17c>
 80070a0:	b1b0      	cbz	r0, 80070d0 <_svfiprintf_r+0x114>
 80070a2:	9207      	str	r2, [sp, #28]
 80070a4:	e014      	b.n	80070d0 <_svfiprintf_r+0x114>
 80070a6:	eba0 0308 	sub.w	r3, r0, r8
 80070aa:	fa09 f303 	lsl.w	r3, r9, r3
 80070ae:	4313      	orrs	r3, r2
 80070b0:	46a2      	mov	sl, r4
 80070b2:	9304      	str	r3, [sp, #16]
 80070b4:	e7d2      	b.n	800705c <_svfiprintf_r+0xa0>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	1d19      	adds	r1, r3, #4
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	9103      	str	r1, [sp, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfbb      	ittet	lt
 80070c2:	425b      	neglt	r3, r3
 80070c4:	f042 0202 	orrlt.w	r2, r2, #2
 80070c8:	9307      	strge	r3, [sp, #28]
 80070ca:	9307      	strlt	r3, [sp, #28]
 80070cc:	bfb8      	it	lt
 80070ce:	9204      	strlt	r2, [sp, #16]
 80070d0:	7823      	ldrb	r3, [r4, #0]
 80070d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80070d4:	d10a      	bne.n	80070ec <_svfiprintf_r+0x130>
 80070d6:	7863      	ldrb	r3, [r4, #1]
 80070d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070da:	d132      	bne.n	8007142 <_svfiprintf_r+0x186>
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	3402      	adds	r4, #2
 80070e0:	1d1a      	adds	r2, r3, #4
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	9203      	str	r2, [sp, #12]
 80070e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070ea:	9305      	str	r3, [sp, #20]
 80070ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80071a4 <_svfiprintf_r+0x1e8>
 80070f0:	2203      	movs	r2, #3
 80070f2:	4650      	mov	r0, sl
 80070f4:	7821      	ldrb	r1, [r4, #0]
 80070f6:	f7fe fc26 	bl	8005946 <memchr>
 80070fa:	b138      	cbz	r0, 800710c <_svfiprintf_r+0x150>
 80070fc:	2240      	movs	r2, #64	@ 0x40
 80070fe:	9b04      	ldr	r3, [sp, #16]
 8007100:	eba0 000a 	sub.w	r0, r0, sl
 8007104:	4082      	lsls	r2, r0
 8007106:	4313      	orrs	r3, r2
 8007108:	3401      	adds	r4, #1
 800710a:	9304      	str	r3, [sp, #16]
 800710c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007110:	2206      	movs	r2, #6
 8007112:	4825      	ldr	r0, [pc, #148]	@ (80071a8 <_svfiprintf_r+0x1ec>)
 8007114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007118:	f7fe fc15 	bl	8005946 <memchr>
 800711c:	2800      	cmp	r0, #0
 800711e:	d036      	beq.n	800718e <_svfiprintf_r+0x1d2>
 8007120:	4b22      	ldr	r3, [pc, #136]	@ (80071ac <_svfiprintf_r+0x1f0>)
 8007122:	bb1b      	cbnz	r3, 800716c <_svfiprintf_r+0x1b0>
 8007124:	9b03      	ldr	r3, [sp, #12]
 8007126:	3307      	adds	r3, #7
 8007128:	f023 0307 	bic.w	r3, r3, #7
 800712c:	3308      	adds	r3, #8
 800712e:	9303      	str	r3, [sp, #12]
 8007130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007132:	4433      	add	r3, r6
 8007134:	9309      	str	r3, [sp, #36]	@ 0x24
 8007136:	e76a      	b.n	800700e <_svfiprintf_r+0x52>
 8007138:	460c      	mov	r4, r1
 800713a:	2001      	movs	r0, #1
 800713c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007140:	e7a8      	b.n	8007094 <_svfiprintf_r+0xd8>
 8007142:	2300      	movs	r3, #0
 8007144:	f04f 0c0a 	mov.w	ip, #10
 8007148:	4619      	mov	r1, r3
 800714a:	3401      	adds	r4, #1
 800714c:	9305      	str	r3, [sp, #20]
 800714e:	4620      	mov	r0, r4
 8007150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007154:	3a30      	subs	r2, #48	@ 0x30
 8007156:	2a09      	cmp	r2, #9
 8007158:	d903      	bls.n	8007162 <_svfiprintf_r+0x1a6>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0c6      	beq.n	80070ec <_svfiprintf_r+0x130>
 800715e:	9105      	str	r1, [sp, #20]
 8007160:	e7c4      	b.n	80070ec <_svfiprintf_r+0x130>
 8007162:	4604      	mov	r4, r0
 8007164:	2301      	movs	r3, #1
 8007166:	fb0c 2101 	mla	r1, ip, r1, r2
 800716a:	e7f0      	b.n	800714e <_svfiprintf_r+0x192>
 800716c:	ab03      	add	r3, sp, #12
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	462a      	mov	r2, r5
 8007172:	4638      	mov	r0, r7
 8007174:	4b0e      	ldr	r3, [pc, #56]	@ (80071b0 <_svfiprintf_r+0x1f4>)
 8007176:	a904      	add	r1, sp, #16
 8007178:	f7fd fe82 	bl	8004e80 <_printf_float>
 800717c:	1c42      	adds	r2, r0, #1
 800717e:	4606      	mov	r6, r0
 8007180:	d1d6      	bne.n	8007130 <_svfiprintf_r+0x174>
 8007182:	89ab      	ldrh	r3, [r5, #12]
 8007184:	065b      	lsls	r3, r3, #25
 8007186:	f53f af2d 	bmi.w	8006fe4 <_svfiprintf_r+0x28>
 800718a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800718c:	e72c      	b.n	8006fe8 <_svfiprintf_r+0x2c>
 800718e:	ab03      	add	r3, sp, #12
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	462a      	mov	r2, r5
 8007194:	4638      	mov	r0, r7
 8007196:	4b06      	ldr	r3, [pc, #24]	@ (80071b0 <_svfiprintf_r+0x1f4>)
 8007198:	a904      	add	r1, sp, #16
 800719a:	f7fe f90f 	bl	80053bc <_printf_i>
 800719e:	e7ed      	b.n	800717c <_svfiprintf_r+0x1c0>
 80071a0:	08007e20 	.word	0x08007e20
 80071a4:	08007e26 	.word	0x08007e26
 80071a8:	08007e2a 	.word	0x08007e2a
 80071ac:	08004e81 	.word	0x08004e81
 80071b0:	08006f05 	.word	0x08006f05

080071b4 <__sflush_r>:
 80071b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	0716      	lsls	r6, r2, #28
 80071bc:	4605      	mov	r5, r0
 80071be:	460c      	mov	r4, r1
 80071c0:	d454      	bmi.n	800726c <__sflush_r+0xb8>
 80071c2:	684b      	ldr	r3, [r1, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dc02      	bgt.n	80071ce <__sflush_r+0x1a>
 80071c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	dd48      	ble.n	8007260 <__sflush_r+0xac>
 80071ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071d0:	2e00      	cmp	r6, #0
 80071d2:	d045      	beq.n	8007260 <__sflush_r+0xac>
 80071d4:	2300      	movs	r3, #0
 80071d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071da:	682f      	ldr	r7, [r5, #0]
 80071dc:	6a21      	ldr	r1, [r4, #32]
 80071de:	602b      	str	r3, [r5, #0]
 80071e0:	d030      	beq.n	8007244 <__sflush_r+0x90>
 80071e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071e4:	89a3      	ldrh	r3, [r4, #12]
 80071e6:	0759      	lsls	r1, r3, #29
 80071e8:	d505      	bpl.n	80071f6 <__sflush_r+0x42>
 80071ea:	6863      	ldr	r3, [r4, #4]
 80071ec:	1ad2      	subs	r2, r2, r3
 80071ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071f0:	b10b      	cbz	r3, 80071f6 <__sflush_r+0x42>
 80071f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071f4:	1ad2      	subs	r2, r2, r3
 80071f6:	2300      	movs	r3, #0
 80071f8:	4628      	mov	r0, r5
 80071fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071fc:	6a21      	ldr	r1, [r4, #32]
 80071fe:	47b0      	blx	r6
 8007200:	1c43      	adds	r3, r0, #1
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	d106      	bne.n	8007214 <__sflush_r+0x60>
 8007206:	6829      	ldr	r1, [r5, #0]
 8007208:	291d      	cmp	r1, #29
 800720a:	d82b      	bhi.n	8007264 <__sflush_r+0xb0>
 800720c:	4a28      	ldr	r2, [pc, #160]	@ (80072b0 <__sflush_r+0xfc>)
 800720e:	410a      	asrs	r2, r1
 8007210:	07d6      	lsls	r6, r2, #31
 8007212:	d427      	bmi.n	8007264 <__sflush_r+0xb0>
 8007214:	2200      	movs	r2, #0
 8007216:	6062      	str	r2, [r4, #4]
 8007218:	6922      	ldr	r2, [r4, #16]
 800721a:	04d9      	lsls	r1, r3, #19
 800721c:	6022      	str	r2, [r4, #0]
 800721e:	d504      	bpl.n	800722a <__sflush_r+0x76>
 8007220:	1c42      	adds	r2, r0, #1
 8007222:	d101      	bne.n	8007228 <__sflush_r+0x74>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b903      	cbnz	r3, 800722a <__sflush_r+0x76>
 8007228:	6560      	str	r0, [r4, #84]	@ 0x54
 800722a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800722c:	602f      	str	r7, [r5, #0]
 800722e:	b1b9      	cbz	r1, 8007260 <__sflush_r+0xac>
 8007230:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007234:	4299      	cmp	r1, r3
 8007236:	d002      	beq.n	800723e <__sflush_r+0x8a>
 8007238:	4628      	mov	r0, r5
 800723a:	f7ff f9e5 	bl	8006608 <_free_r>
 800723e:	2300      	movs	r3, #0
 8007240:	6363      	str	r3, [r4, #52]	@ 0x34
 8007242:	e00d      	b.n	8007260 <__sflush_r+0xac>
 8007244:	2301      	movs	r3, #1
 8007246:	4628      	mov	r0, r5
 8007248:	47b0      	blx	r6
 800724a:	4602      	mov	r2, r0
 800724c:	1c50      	adds	r0, r2, #1
 800724e:	d1c9      	bne.n	80071e4 <__sflush_r+0x30>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0c6      	beq.n	80071e4 <__sflush_r+0x30>
 8007256:	2b1d      	cmp	r3, #29
 8007258:	d001      	beq.n	800725e <__sflush_r+0xaa>
 800725a:	2b16      	cmp	r3, #22
 800725c:	d11d      	bne.n	800729a <__sflush_r+0xe6>
 800725e:	602f      	str	r7, [r5, #0]
 8007260:	2000      	movs	r0, #0
 8007262:	e021      	b.n	80072a8 <__sflush_r+0xf4>
 8007264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007268:	b21b      	sxth	r3, r3
 800726a:	e01a      	b.n	80072a2 <__sflush_r+0xee>
 800726c:	690f      	ldr	r7, [r1, #16]
 800726e:	2f00      	cmp	r7, #0
 8007270:	d0f6      	beq.n	8007260 <__sflush_r+0xac>
 8007272:	0793      	lsls	r3, r2, #30
 8007274:	bf18      	it	ne
 8007276:	2300      	movne	r3, #0
 8007278:	680e      	ldr	r6, [r1, #0]
 800727a:	bf08      	it	eq
 800727c:	694b      	ldreq	r3, [r1, #20]
 800727e:	1bf6      	subs	r6, r6, r7
 8007280:	600f      	str	r7, [r1, #0]
 8007282:	608b      	str	r3, [r1, #8]
 8007284:	2e00      	cmp	r6, #0
 8007286:	ddeb      	ble.n	8007260 <__sflush_r+0xac>
 8007288:	4633      	mov	r3, r6
 800728a:	463a      	mov	r2, r7
 800728c:	4628      	mov	r0, r5
 800728e:	6a21      	ldr	r1, [r4, #32]
 8007290:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007294:	47e0      	blx	ip
 8007296:	2800      	cmp	r0, #0
 8007298:	dc07      	bgt.n	80072aa <__sflush_r+0xf6>
 800729a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800729e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072a2:	f04f 30ff 	mov.w	r0, #4294967295
 80072a6:	81a3      	strh	r3, [r4, #12]
 80072a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072aa:	4407      	add	r7, r0
 80072ac:	1a36      	subs	r6, r6, r0
 80072ae:	e7e9      	b.n	8007284 <__sflush_r+0xd0>
 80072b0:	dfbffffe 	.word	0xdfbffffe

080072b4 <_fflush_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	690b      	ldr	r3, [r1, #16]
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b913      	cbnz	r3, 80072c4 <_fflush_r+0x10>
 80072be:	2500      	movs	r5, #0
 80072c0:	4628      	mov	r0, r5
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	b118      	cbz	r0, 80072ce <_fflush_r+0x1a>
 80072c6:	6a03      	ldr	r3, [r0, #32]
 80072c8:	b90b      	cbnz	r3, 80072ce <_fflush_r+0x1a>
 80072ca:	f7fe fa23 	bl	8005714 <__sinit>
 80072ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0f3      	beq.n	80072be <_fflush_r+0xa>
 80072d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072d8:	07d0      	lsls	r0, r2, #31
 80072da:	d404      	bmi.n	80072e6 <_fflush_r+0x32>
 80072dc:	0599      	lsls	r1, r3, #22
 80072de:	d402      	bmi.n	80072e6 <_fflush_r+0x32>
 80072e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072e2:	f7fe fb2e 	bl	8005942 <__retarget_lock_acquire_recursive>
 80072e6:	4628      	mov	r0, r5
 80072e8:	4621      	mov	r1, r4
 80072ea:	f7ff ff63 	bl	80071b4 <__sflush_r>
 80072ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072f0:	4605      	mov	r5, r0
 80072f2:	07da      	lsls	r2, r3, #31
 80072f4:	d4e4      	bmi.n	80072c0 <_fflush_r+0xc>
 80072f6:	89a3      	ldrh	r3, [r4, #12]
 80072f8:	059b      	lsls	r3, r3, #22
 80072fa:	d4e1      	bmi.n	80072c0 <_fflush_r+0xc>
 80072fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072fe:	f7fe fb21 	bl	8005944 <__retarget_lock_release_recursive>
 8007302:	e7dd      	b.n	80072c0 <_fflush_r+0xc>

08007304 <memmove>:
 8007304:	4288      	cmp	r0, r1
 8007306:	b510      	push	{r4, lr}
 8007308:	eb01 0402 	add.w	r4, r1, r2
 800730c:	d902      	bls.n	8007314 <memmove+0x10>
 800730e:	4284      	cmp	r4, r0
 8007310:	4623      	mov	r3, r4
 8007312:	d807      	bhi.n	8007324 <memmove+0x20>
 8007314:	1e43      	subs	r3, r0, #1
 8007316:	42a1      	cmp	r1, r4
 8007318:	d008      	beq.n	800732c <memmove+0x28>
 800731a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007322:	e7f8      	b.n	8007316 <memmove+0x12>
 8007324:	4601      	mov	r1, r0
 8007326:	4402      	add	r2, r0
 8007328:	428a      	cmp	r2, r1
 800732a:	d100      	bne.n	800732e <memmove+0x2a>
 800732c:	bd10      	pop	{r4, pc}
 800732e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007336:	e7f7      	b.n	8007328 <memmove+0x24>

08007338 <_sbrk_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	2300      	movs	r3, #0
 800733c:	4d05      	ldr	r5, [pc, #20]	@ (8007354 <_sbrk_r+0x1c>)
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7fc fd9e 	bl	8003e84 <_sbrk>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_sbrk_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_sbrk_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	2000084c 	.word	0x2000084c

08007358 <memcpy>:
 8007358:	440a      	add	r2, r1
 800735a:	4291      	cmp	r1, r2
 800735c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007360:	d100      	bne.n	8007364 <memcpy+0xc>
 8007362:	4770      	bx	lr
 8007364:	b510      	push	{r4, lr}
 8007366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800736a:	4291      	cmp	r1, r2
 800736c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007370:	d1f9      	bne.n	8007366 <memcpy+0xe>
 8007372:	bd10      	pop	{r4, pc}

08007374 <__assert_func>:
 8007374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007376:	4614      	mov	r4, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4b09      	ldr	r3, [pc, #36]	@ (80073a0 <__assert_func+0x2c>)
 800737c:	4605      	mov	r5, r0
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68d8      	ldr	r0, [r3, #12]
 8007382:	b954      	cbnz	r4, 800739a <__assert_func+0x26>
 8007384:	4b07      	ldr	r3, [pc, #28]	@ (80073a4 <__assert_func+0x30>)
 8007386:	461c      	mov	r4, r3
 8007388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800738c:	9100      	str	r1, [sp, #0]
 800738e:	462b      	mov	r3, r5
 8007390:	4905      	ldr	r1, [pc, #20]	@ (80073a8 <__assert_func+0x34>)
 8007392:	f000 f86f 	bl	8007474 <fiprintf>
 8007396:	f000 f87f 	bl	8007498 <abort>
 800739a:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <__assert_func+0x38>)
 800739c:	e7f4      	b.n	8007388 <__assert_func+0x14>
 800739e:	bf00      	nop
 80073a0:	200000b4 	.word	0x200000b4
 80073a4:	08007e76 	.word	0x08007e76
 80073a8:	08007e48 	.word	0x08007e48
 80073ac:	08007e3b 	.word	0x08007e3b

080073b0 <_calloc_r>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	fba1 5402 	umull	r5, r4, r1, r2
 80073b6:	b93c      	cbnz	r4, 80073c8 <_calloc_r+0x18>
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7ff f997 	bl	80066ec <_malloc_r>
 80073be:	4606      	mov	r6, r0
 80073c0:	b928      	cbnz	r0, 80073ce <_calloc_r+0x1e>
 80073c2:	2600      	movs	r6, #0
 80073c4:	4630      	mov	r0, r6
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	220c      	movs	r2, #12
 80073ca:	6002      	str	r2, [r0, #0]
 80073cc:	e7f9      	b.n	80073c2 <_calloc_r+0x12>
 80073ce:	462a      	mov	r2, r5
 80073d0:	4621      	mov	r1, r4
 80073d2:	f7fe fa38 	bl	8005846 <memset>
 80073d6:	e7f5      	b.n	80073c4 <_calloc_r+0x14>

080073d8 <__ascii_mbtowc>:
 80073d8:	b082      	sub	sp, #8
 80073da:	b901      	cbnz	r1, 80073de <__ascii_mbtowc+0x6>
 80073dc:	a901      	add	r1, sp, #4
 80073de:	b142      	cbz	r2, 80073f2 <__ascii_mbtowc+0x1a>
 80073e0:	b14b      	cbz	r3, 80073f6 <__ascii_mbtowc+0x1e>
 80073e2:	7813      	ldrb	r3, [r2, #0]
 80073e4:	600b      	str	r3, [r1, #0]
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	1e10      	subs	r0, r2, #0
 80073ea:	bf18      	it	ne
 80073ec:	2001      	movne	r0, #1
 80073ee:	b002      	add	sp, #8
 80073f0:	4770      	bx	lr
 80073f2:	4610      	mov	r0, r2
 80073f4:	e7fb      	b.n	80073ee <__ascii_mbtowc+0x16>
 80073f6:	f06f 0001 	mvn.w	r0, #1
 80073fa:	e7f8      	b.n	80073ee <__ascii_mbtowc+0x16>

080073fc <_realloc_r>:
 80073fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007400:	4680      	mov	r8, r0
 8007402:	4615      	mov	r5, r2
 8007404:	460c      	mov	r4, r1
 8007406:	b921      	cbnz	r1, 8007412 <_realloc_r+0x16>
 8007408:	4611      	mov	r1, r2
 800740a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800740e:	f7ff b96d 	b.w	80066ec <_malloc_r>
 8007412:	b92a      	cbnz	r2, 8007420 <_realloc_r+0x24>
 8007414:	f7ff f8f8 	bl	8006608 <_free_r>
 8007418:	2400      	movs	r4, #0
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007420:	f000 f841 	bl	80074a6 <_malloc_usable_size_r>
 8007424:	4285      	cmp	r5, r0
 8007426:	4606      	mov	r6, r0
 8007428:	d802      	bhi.n	8007430 <_realloc_r+0x34>
 800742a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800742e:	d8f4      	bhi.n	800741a <_realloc_r+0x1e>
 8007430:	4629      	mov	r1, r5
 8007432:	4640      	mov	r0, r8
 8007434:	f7ff f95a 	bl	80066ec <_malloc_r>
 8007438:	4607      	mov	r7, r0
 800743a:	2800      	cmp	r0, #0
 800743c:	d0ec      	beq.n	8007418 <_realloc_r+0x1c>
 800743e:	42b5      	cmp	r5, r6
 8007440:	462a      	mov	r2, r5
 8007442:	4621      	mov	r1, r4
 8007444:	bf28      	it	cs
 8007446:	4632      	movcs	r2, r6
 8007448:	f7ff ff86 	bl	8007358 <memcpy>
 800744c:	4621      	mov	r1, r4
 800744e:	4640      	mov	r0, r8
 8007450:	f7ff f8da 	bl	8006608 <_free_r>
 8007454:	463c      	mov	r4, r7
 8007456:	e7e0      	b.n	800741a <_realloc_r+0x1e>

08007458 <__ascii_wctomb>:
 8007458:	4603      	mov	r3, r0
 800745a:	4608      	mov	r0, r1
 800745c:	b141      	cbz	r1, 8007470 <__ascii_wctomb+0x18>
 800745e:	2aff      	cmp	r2, #255	@ 0xff
 8007460:	d904      	bls.n	800746c <__ascii_wctomb+0x14>
 8007462:	228a      	movs	r2, #138	@ 0x8a
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	4770      	bx	lr
 800746c:	2001      	movs	r0, #1
 800746e:	700a      	strb	r2, [r1, #0]
 8007470:	4770      	bx	lr
	...

08007474 <fiprintf>:
 8007474:	b40e      	push	{r1, r2, r3}
 8007476:	b503      	push	{r0, r1, lr}
 8007478:	4601      	mov	r1, r0
 800747a:	ab03      	add	r3, sp, #12
 800747c:	4805      	ldr	r0, [pc, #20]	@ (8007494 <fiprintf+0x20>)
 800747e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	9301      	str	r3, [sp, #4]
 8007486:	f000 f83d 	bl	8007504 <_vfiprintf_r>
 800748a:	b002      	add	sp, #8
 800748c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007490:	b003      	add	sp, #12
 8007492:	4770      	bx	lr
 8007494:	200000b4 	.word	0x200000b4

08007498 <abort>:
 8007498:	2006      	movs	r0, #6
 800749a:	b508      	push	{r3, lr}
 800749c:	f000 fa06 	bl	80078ac <raise>
 80074a0:	2001      	movs	r0, #1
 80074a2:	f7fc fc7a 	bl	8003d9a <_exit>

080074a6 <_malloc_usable_size_r>:
 80074a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074aa:	1f18      	subs	r0, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	bfbc      	itt	lt
 80074b0:	580b      	ldrlt	r3, [r1, r0]
 80074b2:	18c0      	addlt	r0, r0, r3
 80074b4:	4770      	bx	lr

080074b6 <__sfputc_r>:
 80074b6:	6893      	ldr	r3, [r2, #8]
 80074b8:	b410      	push	{r4}
 80074ba:	3b01      	subs	r3, #1
 80074bc:	2b00      	cmp	r3, #0
 80074be:	6093      	str	r3, [r2, #8]
 80074c0:	da07      	bge.n	80074d2 <__sfputc_r+0x1c>
 80074c2:	6994      	ldr	r4, [r2, #24]
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	db01      	blt.n	80074cc <__sfputc_r+0x16>
 80074c8:	290a      	cmp	r1, #10
 80074ca:	d102      	bne.n	80074d2 <__sfputc_r+0x1c>
 80074cc:	bc10      	pop	{r4}
 80074ce:	f000 b931 	b.w	8007734 <__swbuf_r>
 80074d2:	6813      	ldr	r3, [r2, #0]
 80074d4:	1c58      	adds	r0, r3, #1
 80074d6:	6010      	str	r0, [r2, #0]
 80074d8:	7019      	strb	r1, [r3, #0]
 80074da:	4608      	mov	r0, r1
 80074dc:	bc10      	pop	{r4}
 80074de:	4770      	bx	lr

080074e0 <__sfputs_r>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	4606      	mov	r6, r0
 80074e4:	460f      	mov	r7, r1
 80074e6:	4614      	mov	r4, r2
 80074e8:	18d5      	adds	r5, r2, r3
 80074ea:	42ac      	cmp	r4, r5
 80074ec:	d101      	bne.n	80074f2 <__sfputs_r+0x12>
 80074ee:	2000      	movs	r0, #0
 80074f0:	e007      	b.n	8007502 <__sfputs_r+0x22>
 80074f2:	463a      	mov	r2, r7
 80074f4:	4630      	mov	r0, r6
 80074f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fa:	f7ff ffdc 	bl	80074b6 <__sfputc_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d1f3      	bne.n	80074ea <__sfputs_r+0xa>
 8007502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007504 <_vfiprintf_r>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	460d      	mov	r5, r1
 800750a:	4614      	mov	r4, r2
 800750c:	4698      	mov	r8, r3
 800750e:	4606      	mov	r6, r0
 8007510:	b09d      	sub	sp, #116	@ 0x74
 8007512:	b118      	cbz	r0, 800751c <_vfiprintf_r+0x18>
 8007514:	6a03      	ldr	r3, [r0, #32]
 8007516:	b90b      	cbnz	r3, 800751c <_vfiprintf_r+0x18>
 8007518:	f7fe f8fc 	bl	8005714 <__sinit>
 800751c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751e:	07d9      	lsls	r1, r3, #31
 8007520:	d405      	bmi.n	800752e <_vfiprintf_r+0x2a>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	059a      	lsls	r2, r3, #22
 8007526:	d402      	bmi.n	800752e <_vfiprintf_r+0x2a>
 8007528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800752a:	f7fe fa0a 	bl	8005942 <__retarget_lock_acquire_recursive>
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	071b      	lsls	r3, r3, #28
 8007532:	d501      	bpl.n	8007538 <_vfiprintf_r+0x34>
 8007534:	692b      	ldr	r3, [r5, #16]
 8007536:	b99b      	cbnz	r3, 8007560 <_vfiprintf_r+0x5c>
 8007538:	4629      	mov	r1, r5
 800753a:	4630      	mov	r0, r6
 800753c:	f000 f938 	bl	80077b0 <__swsetup_r>
 8007540:	b170      	cbz	r0, 8007560 <_vfiprintf_r+0x5c>
 8007542:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007544:	07dc      	lsls	r4, r3, #31
 8007546:	d504      	bpl.n	8007552 <_vfiprintf_r+0x4e>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b01d      	add	sp, #116	@ 0x74
 800754e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007552:	89ab      	ldrh	r3, [r5, #12]
 8007554:	0598      	lsls	r0, r3, #22
 8007556:	d4f7      	bmi.n	8007548 <_vfiprintf_r+0x44>
 8007558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800755a:	f7fe f9f3 	bl	8005944 <__retarget_lock_release_recursive>
 800755e:	e7f3      	b.n	8007548 <_vfiprintf_r+0x44>
 8007560:	2300      	movs	r3, #0
 8007562:	9309      	str	r3, [sp, #36]	@ 0x24
 8007564:	2320      	movs	r3, #32
 8007566:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800756a:	2330      	movs	r3, #48	@ 0x30
 800756c:	f04f 0901 	mov.w	r9, #1
 8007570:	f8cd 800c 	str.w	r8, [sp, #12]
 8007574:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007720 <_vfiprintf_r+0x21c>
 8007578:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800757c:	4623      	mov	r3, r4
 800757e:	469a      	mov	sl, r3
 8007580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007584:	b10a      	cbz	r2, 800758a <_vfiprintf_r+0x86>
 8007586:	2a25      	cmp	r2, #37	@ 0x25
 8007588:	d1f9      	bne.n	800757e <_vfiprintf_r+0x7a>
 800758a:	ebba 0b04 	subs.w	fp, sl, r4
 800758e:	d00b      	beq.n	80075a8 <_vfiprintf_r+0xa4>
 8007590:	465b      	mov	r3, fp
 8007592:	4622      	mov	r2, r4
 8007594:	4629      	mov	r1, r5
 8007596:	4630      	mov	r0, r6
 8007598:	f7ff ffa2 	bl	80074e0 <__sfputs_r>
 800759c:	3001      	adds	r0, #1
 800759e:	f000 80a7 	beq.w	80076f0 <_vfiprintf_r+0x1ec>
 80075a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a4:	445a      	add	r2, fp
 80075a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80075a8:	f89a 3000 	ldrb.w	r3, [sl]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 809f 	beq.w	80076f0 <_vfiprintf_r+0x1ec>
 80075b2:	2300      	movs	r3, #0
 80075b4:	f04f 32ff 	mov.w	r2, #4294967295
 80075b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075bc:	f10a 0a01 	add.w	sl, sl, #1
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	9307      	str	r3, [sp, #28]
 80075c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80075ca:	4654      	mov	r4, sl
 80075cc:	2205      	movs	r2, #5
 80075ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075d2:	4853      	ldr	r0, [pc, #332]	@ (8007720 <_vfiprintf_r+0x21c>)
 80075d4:	f7fe f9b7 	bl	8005946 <memchr>
 80075d8:	9a04      	ldr	r2, [sp, #16]
 80075da:	b9d8      	cbnz	r0, 8007614 <_vfiprintf_r+0x110>
 80075dc:	06d1      	lsls	r1, r2, #27
 80075de:	bf44      	itt	mi
 80075e0:	2320      	movmi	r3, #32
 80075e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075e6:	0713      	lsls	r3, r2, #28
 80075e8:	bf44      	itt	mi
 80075ea:	232b      	movmi	r3, #43	@ 0x2b
 80075ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075f0:	f89a 3000 	ldrb.w	r3, [sl]
 80075f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f6:	d015      	beq.n	8007624 <_vfiprintf_r+0x120>
 80075f8:	4654      	mov	r4, sl
 80075fa:	2000      	movs	r0, #0
 80075fc:	f04f 0c0a 	mov.w	ip, #10
 8007600:	9a07      	ldr	r2, [sp, #28]
 8007602:	4621      	mov	r1, r4
 8007604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007608:	3b30      	subs	r3, #48	@ 0x30
 800760a:	2b09      	cmp	r3, #9
 800760c:	d94b      	bls.n	80076a6 <_vfiprintf_r+0x1a2>
 800760e:	b1b0      	cbz	r0, 800763e <_vfiprintf_r+0x13a>
 8007610:	9207      	str	r2, [sp, #28]
 8007612:	e014      	b.n	800763e <_vfiprintf_r+0x13a>
 8007614:	eba0 0308 	sub.w	r3, r0, r8
 8007618:	fa09 f303 	lsl.w	r3, r9, r3
 800761c:	4313      	orrs	r3, r2
 800761e:	46a2      	mov	sl, r4
 8007620:	9304      	str	r3, [sp, #16]
 8007622:	e7d2      	b.n	80075ca <_vfiprintf_r+0xc6>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1d19      	adds	r1, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	9103      	str	r1, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfbb      	ittet	lt
 8007630:	425b      	neglt	r3, r3
 8007632:	f042 0202 	orrlt.w	r2, r2, #2
 8007636:	9307      	strge	r3, [sp, #28]
 8007638:	9307      	strlt	r3, [sp, #28]
 800763a:	bfb8      	it	lt
 800763c:	9204      	strlt	r2, [sp, #16]
 800763e:	7823      	ldrb	r3, [r4, #0]
 8007640:	2b2e      	cmp	r3, #46	@ 0x2e
 8007642:	d10a      	bne.n	800765a <_vfiprintf_r+0x156>
 8007644:	7863      	ldrb	r3, [r4, #1]
 8007646:	2b2a      	cmp	r3, #42	@ 0x2a
 8007648:	d132      	bne.n	80076b0 <_vfiprintf_r+0x1ac>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	3402      	adds	r4, #2
 800764e:	1d1a      	adds	r2, r3, #4
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	9203      	str	r2, [sp, #12]
 8007654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007658:	9305      	str	r3, [sp, #20]
 800765a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007724 <_vfiprintf_r+0x220>
 800765e:	2203      	movs	r2, #3
 8007660:	4650      	mov	r0, sl
 8007662:	7821      	ldrb	r1, [r4, #0]
 8007664:	f7fe f96f 	bl	8005946 <memchr>
 8007668:	b138      	cbz	r0, 800767a <_vfiprintf_r+0x176>
 800766a:	2240      	movs	r2, #64	@ 0x40
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	eba0 000a 	sub.w	r0, r0, sl
 8007672:	4082      	lsls	r2, r0
 8007674:	4313      	orrs	r3, r2
 8007676:	3401      	adds	r4, #1
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767e:	2206      	movs	r2, #6
 8007680:	4829      	ldr	r0, [pc, #164]	@ (8007728 <_vfiprintf_r+0x224>)
 8007682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007686:	f7fe f95e 	bl	8005946 <memchr>
 800768a:	2800      	cmp	r0, #0
 800768c:	d03f      	beq.n	800770e <_vfiprintf_r+0x20a>
 800768e:	4b27      	ldr	r3, [pc, #156]	@ (800772c <_vfiprintf_r+0x228>)
 8007690:	bb1b      	cbnz	r3, 80076da <_vfiprintf_r+0x1d6>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	3307      	adds	r3, #7
 8007696:	f023 0307 	bic.w	r3, r3, #7
 800769a:	3308      	adds	r3, #8
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	443b      	add	r3, r7
 80076a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a4:	e76a      	b.n	800757c <_vfiprintf_r+0x78>
 80076a6:	460c      	mov	r4, r1
 80076a8:	2001      	movs	r0, #1
 80076aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ae:	e7a8      	b.n	8007602 <_vfiprintf_r+0xfe>
 80076b0:	2300      	movs	r3, #0
 80076b2:	f04f 0c0a 	mov.w	ip, #10
 80076b6:	4619      	mov	r1, r3
 80076b8:	3401      	adds	r4, #1
 80076ba:	9305      	str	r3, [sp, #20]
 80076bc:	4620      	mov	r0, r4
 80076be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076c2:	3a30      	subs	r2, #48	@ 0x30
 80076c4:	2a09      	cmp	r2, #9
 80076c6:	d903      	bls.n	80076d0 <_vfiprintf_r+0x1cc>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0c6      	beq.n	800765a <_vfiprintf_r+0x156>
 80076cc:	9105      	str	r1, [sp, #20]
 80076ce:	e7c4      	b.n	800765a <_vfiprintf_r+0x156>
 80076d0:	4604      	mov	r4, r0
 80076d2:	2301      	movs	r3, #1
 80076d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076d8:	e7f0      	b.n	80076bc <_vfiprintf_r+0x1b8>
 80076da:	ab03      	add	r3, sp, #12
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	462a      	mov	r2, r5
 80076e0:	4630      	mov	r0, r6
 80076e2:	4b13      	ldr	r3, [pc, #76]	@ (8007730 <_vfiprintf_r+0x22c>)
 80076e4:	a904      	add	r1, sp, #16
 80076e6:	f7fd fbcb 	bl	8004e80 <_printf_float>
 80076ea:	4607      	mov	r7, r0
 80076ec:	1c78      	adds	r0, r7, #1
 80076ee:	d1d6      	bne.n	800769e <_vfiprintf_r+0x19a>
 80076f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076f2:	07d9      	lsls	r1, r3, #31
 80076f4:	d405      	bmi.n	8007702 <_vfiprintf_r+0x1fe>
 80076f6:	89ab      	ldrh	r3, [r5, #12]
 80076f8:	059a      	lsls	r2, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_vfiprintf_r+0x1fe>
 80076fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076fe:	f7fe f921 	bl	8005944 <__retarget_lock_release_recursive>
 8007702:	89ab      	ldrh	r3, [r5, #12]
 8007704:	065b      	lsls	r3, r3, #25
 8007706:	f53f af1f 	bmi.w	8007548 <_vfiprintf_r+0x44>
 800770a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800770c:	e71e      	b.n	800754c <_vfiprintf_r+0x48>
 800770e:	ab03      	add	r3, sp, #12
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	462a      	mov	r2, r5
 8007714:	4630      	mov	r0, r6
 8007716:	4b06      	ldr	r3, [pc, #24]	@ (8007730 <_vfiprintf_r+0x22c>)
 8007718:	a904      	add	r1, sp, #16
 800771a:	f7fd fe4f 	bl	80053bc <_printf_i>
 800771e:	e7e4      	b.n	80076ea <_vfiprintf_r+0x1e6>
 8007720:	08007e20 	.word	0x08007e20
 8007724:	08007e26 	.word	0x08007e26
 8007728:	08007e2a 	.word	0x08007e2a
 800772c:	08004e81 	.word	0x08004e81
 8007730:	080074e1 	.word	0x080074e1

08007734 <__swbuf_r>:
 8007734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007736:	460e      	mov	r6, r1
 8007738:	4614      	mov	r4, r2
 800773a:	4605      	mov	r5, r0
 800773c:	b118      	cbz	r0, 8007746 <__swbuf_r+0x12>
 800773e:	6a03      	ldr	r3, [r0, #32]
 8007740:	b90b      	cbnz	r3, 8007746 <__swbuf_r+0x12>
 8007742:	f7fd ffe7 	bl	8005714 <__sinit>
 8007746:	69a3      	ldr	r3, [r4, #24]
 8007748:	60a3      	str	r3, [r4, #8]
 800774a:	89a3      	ldrh	r3, [r4, #12]
 800774c:	071a      	lsls	r2, r3, #28
 800774e:	d501      	bpl.n	8007754 <__swbuf_r+0x20>
 8007750:	6923      	ldr	r3, [r4, #16]
 8007752:	b943      	cbnz	r3, 8007766 <__swbuf_r+0x32>
 8007754:	4621      	mov	r1, r4
 8007756:	4628      	mov	r0, r5
 8007758:	f000 f82a 	bl	80077b0 <__swsetup_r>
 800775c:	b118      	cbz	r0, 8007766 <__swbuf_r+0x32>
 800775e:	f04f 37ff 	mov.w	r7, #4294967295
 8007762:	4638      	mov	r0, r7
 8007764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	6922      	ldr	r2, [r4, #16]
 800776a:	b2f6      	uxtb	r6, r6
 800776c:	1a98      	subs	r0, r3, r2
 800776e:	6963      	ldr	r3, [r4, #20]
 8007770:	4637      	mov	r7, r6
 8007772:	4283      	cmp	r3, r0
 8007774:	dc05      	bgt.n	8007782 <__swbuf_r+0x4e>
 8007776:	4621      	mov	r1, r4
 8007778:	4628      	mov	r0, r5
 800777a:	f7ff fd9b 	bl	80072b4 <_fflush_r>
 800777e:	2800      	cmp	r0, #0
 8007780:	d1ed      	bne.n	800775e <__swbuf_r+0x2a>
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	3b01      	subs	r3, #1
 8007786:	60a3      	str	r3, [r4, #8]
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	6022      	str	r2, [r4, #0]
 800778e:	701e      	strb	r6, [r3, #0]
 8007790:	6962      	ldr	r2, [r4, #20]
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	429a      	cmp	r2, r3
 8007796:	d004      	beq.n	80077a2 <__swbuf_r+0x6e>
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	07db      	lsls	r3, r3, #31
 800779c:	d5e1      	bpl.n	8007762 <__swbuf_r+0x2e>
 800779e:	2e0a      	cmp	r6, #10
 80077a0:	d1df      	bne.n	8007762 <__swbuf_r+0x2e>
 80077a2:	4621      	mov	r1, r4
 80077a4:	4628      	mov	r0, r5
 80077a6:	f7ff fd85 	bl	80072b4 <_fflush_r>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d0d9      	beq.n	8007762 <__swbuf_r+0x2e>
 80077ae:	e7d6      	b.n	800775e <__swbuf_r+0x2a>

080077b0 <__swsetup_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4b29      	ldr	r3, [pc, #164]	@ (8007858 <__swsetup_r+0xa8>)
 80077b4:	4605      	mov	r5, r0
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	460c      	mov	r4, r1
 80077ba:	b118      	cbz	r0, 80077c4 <__swsetup_r+0x14>
 80077bc:	6a03      	ldr	r3, [r0, #32]
 80077be:	b90b      	cbnz	r3, 80077c4 <__swsetup_r+0x14>
 80077c0:	f7fd ffa8 	bl	8005714 <__sinit>
 80077c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c8:	0719      	lsls	r1, r3, #28
 80077ca:	d422      	bmi.n	8007812 <__swsetup_r+0x62>
 80077cc:	06da      	lsls	r2, r3, #27
 80077ce:	d407      	bmi.n	80077e0 <__swsetup_r+0x30>
 80077d0:	2209      	movs	r2, #9
 80077d2:	602a      	str	r2, [r5, #0]
 80077d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077d8:	f04f 30ff 	mov.w	r0, #4294967295
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	e033      	b.n	8007848 <__swsetup_r+0x98>
 80077e0:	0758      	lsls	r0, r3, #29
 80077e2:	d512      	bpl.n	800780a <__swsetup_r+0x5a>
 80077e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077e6:	b141      	cbz	r1, 80077fa <__swsetup_r+0x4a>
 80077e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077ec:	4299      	cmp	r1, r3
 80077ee:	d002      	beq.n	80077f6 <__swsetup_r+0x46>
 80077f0:	4628      	mov	r0, r5
 80077f2:	f7fe ff09 	bl	8006608 <_free_r>
 80077f6:	2300      	movs	r3, #0
 80077f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007800:	81a3      	strh	r3, [r4, #12]
 8007802:	2300      	movs	r3, #0
 8007804:	6063      	str	r3, [r4, #4]
 8007806:	6923      	ldr	r3, [r4, #16]
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	89a3      	ldrh	r3, [r4, #12]
 800780c:	f043 0308 	orr.w	r3, r3, #8
 8007810:	81a3      	strh	r3, [r4, #12]
 8007812:	6923      	ldr	r3, [r4, #16]
 8007814:	b94b      	cbnz	r3, 800782a <__swsetup_r+0x7a>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800781c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007820:	d003      	beq.n	800782a <__swsetup_r+0x7a>
 8007822:	4621      	mov	r1, r4
 8007824:	4628      	mov	r0, r5
 8007826:	f000 f882 	bl	800792e <__smakebuf_r>
 800782a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782e:	f013 0201 	ands.w	r2, r3, #1
 8007832:	d00a      	beq.n	800784a <__swsetup_r+0x9a>
 8007834:	2200      	movs	r2, #0
 8007836:	60a2      	str	r2, [r4, #8]
 8007838:	6962      	ldr	r2, [r4, #20]
 800783a:	4252      	negs	r2, r2
 800783c:	61a2      	str	r2, [r4, #24]
 800783e:	6922      	ldr	r2, [r4, #16]
 8007840:	b942      	cbnz	r2, 8007854 <__swsetup_r+0xa4>
 8007842:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007846:	d1c5      	bne.n	80077d4 <__swsetup_r+0x24>
 8007848:	bd38      	pop	{r3, r4, r5, pc}
 800784a:	0799      	lsls	r1, r3, #30
 800784c:	bf58      	it	pl
 800784e:	6962      	ldrpl	r2, [r4, #20]
 8007850:	60a2      	str	r2, [r4, #8]
 8007852:	e7f4      	b.n	800783e <__swsetup_r+0x8e>
 8007854:	2000      	movs	r0, #0
 8007856:	e7f7      	b.n	8007848 <__swsetup_r+0x98>
 8007858:	200000b4 	.word	0x200000b4

0800785c <_raise_r>:
 800785c:	291f      	cmp	r1, #31
 800785e:	b538      	push	{r3, r4, r5, lr}
 8007860:	4605      	mov	r5, r0
 8007862:	460c      	mov	r4, r1
 8007864:	d904      	bls.n	8007870 <_raise_r+0x14>
 8007866:	2316      	movs	r3, #22
 8007868:	6003      	str	r3, [r0, #0]
 800786a:	f04f 30ff 	mov.w	r0, #4294967295
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007872:	b112      	cbz	r2, 800787a <_raise_r+0x1e>
 8007874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007878:	b94b      	cbnz	r3, 800788e <_raise_r+0x32>
 800787a:	4628      	mov	r0, r5
 800787c:	f000 f830 	bl	80078e0 <_getpid_r>
 8007880:	4622      	mov	r2, r4
 8007882:	4601      	mov	r1, r0
 8007884:	4628      	mov	r0, r5
 8007886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800788a:	f000 b817 	b.w	80078bc <_kill_r>
 800788e:	2b01      	cmp	r3, #1
 8007890:	d00a      	beq.n	80078a8 <_raise_r+0x4c>
 8007892:	1c59      	adds	r1, r3, #1
 8007894:	d103      	bne.n	800789e <_raise_r+0x42>
 8007896:	2316      	movs	r3, #22
 8007898:	6003      	str	r3, [r0, #0]
 800789a:	2001      	movs	r0, #1
 800789c:	e7e7      	b.n	800786e <_raise_r+0x12>
 800789e:	2100      	movs	r1, #0
 80078a0:	4620      	mov	r0, r4
 80078a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80078a6:	4798      	blx	r3
 80078a8:	2000      	movs	r0, #0
 80078aa:	e7e0      	b.n	800786e <_raise_r+0x12>

080078ac <raise>:
 80078ac:	4b02      	ldr	r3, [pc, #8]	@ (80078b8 <raise+0xc>)
 80078ae:	4601      	mov	r1, r0
 80078b0:	6818      	ldr	r0, [r3, #0]
 80078b2:	f7ff bfd3 	b.w	800785c <_raise_r>
 80078b6:	bf00      	nop
 80078b8:	200000b4 	.word	0x200000b4

080078bc <_kill_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	2300      	movs	r3, #0
 80078c0:	4d06      	ldr	r5, [pc, #24]	@ (80078dc <_kill_r+0x20>)
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	602b      	str	r3, [r5, #0]
 80078ca:	f7fc fa56 	bl	8003d7a <_kill>
 80078ce:	1c43      	adds	r3, r0, #1
 80078d0:	d102      	bne.n	80078d8 <_kill_r+0x1c>
 80078d2:	682b      	ldr	r3, [r5, #0]
 80078d4:	b103      	cbz	r3, 80078d8 <_kill_r+0x1c>
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	bf00      	nop
 80078dc:	2000084c 	.word	0x2000084c

080078e0 <_getpid_r>:
 80078e0:	f7fc ba44 	b.w	8003d6c <_getpid>

080078e4 <__swhatbuf_r>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	460c      	mov	r4, r1
 80078e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ec:	4615      	mov	r5, r2
 80078ee:	2900      	cmp	r1, #0
 80078f0:	461e      	mov	r6, r3
 80078f2:	b096      	sub	sp, #88	@ 0x58
 80078f4:	da0c      	bge.n	8007910 <__swhatbuf_r+0x2c>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	2100      	movs	r1, #0
 80078fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80078fe:	bf14      	ite	ne
 8007900:	2340      	movne	r3, #64	@ 0x40
 8007902:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007906:	2000      	movs	r0, #0
 8007908:	6031      	str	r1, [r6, #0]
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	b016      	add	sp, #88	@ 0x58
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	466a      	mov	r2, sp
 8007912:	f000 f849 	bl	80079a8 <_fstat_r>
 8007916:	2800      	cmp	r0, #0
 8007918:	dbed      	blt.n	80078f6 <__swhatbuf_r+0x12>
 800791a:	9901      	ldr	r1, [sp, #4]
 800791c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007920:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007924:	4259      	negs	r1, r3
 8007926:	4159      	adcs	r1, r3
 8007928:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800792c:	e7eb      	b.n	8007906 <__swhatbuf_r+0x22>

0800792e <__smakebuf_r>:
 800792e:	898b      	ldrh	r3, [r1, #12]
 8007930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007932:	079d      	lsls	r5, r3, #30
 8007934:	4606      	mov	r6, r0
 8007936:	460c      	mov	r4, r1
 8007938:	d507      	bpl.n	800794a <__smakebuf_r+0x1c>
 800793a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800793e:	6023      	str	r3, [r4, #0]
 8007940:	6123      	str	r3, [r4, #16]
 8007942:	2301      	movs	r3, #1
 8007944:	6163      	str	r3, [r4, #20]
 8007946:	b003      	add	sp, #12
 8007948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800794a:	466a      	mov	r2, sp
 800794c:	ab01      	add	r3, sp, #4
 800794e:	f7ff ffc9 	bl	80078e4 <__swhatbuf_r>
 8007952:	9f00      	ldr	r7, [sp, #0]
 8007954:	4605      	mov	r5, r0
 8007956:	4639      	mov	r1, r7
 8007958:	4630      	mov	r0, r6
 800795a:	f7fe fec7 	bl	80066ec <_malloc_r>
 800795e:	b948      	cbnz	r0, 8007974 <__smakebuf_r+0x46>
 8007960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007964:	059a      	lsls	r2, r3, #22
 8007966:	d4ee      	bmi.n	8007946 <__smakebuf_r+0x18>
 8007968:	f023 0303 	bic.w	r3, r3, #3
 800796c:	f043 0302 	orr.w	r3, r3, #2
 8007970:	81a3      	strh	r3, [r4, #12]
 8007972:	e7e2      	b.n	800793a <__smakebuf_r+0xc>
 8007974:	89a3      	ldrh	r3, [r4, #12]
 8007976:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800797a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800797e:	81a3      	strh	r3, [r4, #12]
 8007980:	9b01      	ldr	r3, [sp, #4]
 8007982:	6020      	str	r0, [r4, #0]
 8007984:	b15b      	cbz	r3, 800799e <__smakebuf_r+0x70>
 8007986:	4630      	mov	r0, r6
 8007988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800798c:	f000 f81e 	bl	80079cc <_isatty_r>
 8007990:	b128      	cbz	r0, 800799e <__smakebuf_r+0x70>
 8007992:	89a3      	ldrh	r3, [r4, #12]
 8007994:	f023 0303 	bic.w	r3, r3, #3
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	431d      	orrs	r5, r3
 80079a2:	81a5      	strh	r5, [r4, #12]
 80079a4:	e7cf      	b.n	8007946 <__smakebuf_r+0x18>
	...

080079a8 <_fstat_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	2300      	movs	r3, #0
 80079ac:	4d06      	ldr	r5, [pc, #24]	@ (80079c8 <_fstat_r+0x20>)
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	4611      	mov	r1, r2
 80079b4:	602b      	str	r3, [r5, #0]
 80079b6:	f7fc fa3f 	bl	8003e38 <_fstat>
 80079ba:	1c43      	adds	r3, r0, #1
 80079bc:	d102      	bne.n	80079c4 <_fstat_r+0x1c>
 80079be:	682b      	ldr	r3, [r5, #0]
 80079c0:	b103      	cbz	r3, 80079c4 <_fstat_r+0x1c>
 80079c2:	6023      	str	r3, [r4, #0]
 80079c4:	bd38      	pop	{r3, r4, r5, pc}
 80079c6:	bf00      	nop
 80079c8:	2000084c 	.word	0x2000084c

080079cc <_isatty_r>:
 80079cc:	b538      	push	{r3, r4, r5, lr}
 80079ce:	2300      	movs	r3, #0
 80079d0:	4d05      	ldr	r5, [pc, #20]	@ (80079e8 <_isatty_r+0x1c>)
 80079d2:	4604      	mov	r4, r0
 80079d4:	4608      	mov	r0, r1
 80079d6:	602b      	str	r3, [r5, #0]
 80079d8:	f7fc fa3d 	bl	8003e56 <_isatty>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_isatty_r+0x1a>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_isatty_r+0x1a>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	2000084c 	.word	0x2000084c

080079ec <_init>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr

080079f8 <_fini>:
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	bf00      	nop
 80079fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fe:	bc08      	pop	{r3}
 8007a00:	469e      	mov	lr, r3
 8007a02:	4770      	bx	lr
