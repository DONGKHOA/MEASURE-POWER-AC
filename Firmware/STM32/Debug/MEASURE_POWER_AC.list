
MEASURE_POWER_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006994  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08006aa8  08006aa8  00007aa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f50  08006f50  00008230  2**0
                  CONTENTS
  4 .ARM          00000008  08006f50  08006f50  00007f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f58  08006f58  00008230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f58  08006f58  00007f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f5c  08006f5c  00007f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000230  20000000  08006f60  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  20000230  08007190  00008230  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08007190  000087ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008230  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a556  00000000  00000000  00008259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7d  00000000  00000000  000127af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00015430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092e  00000000  00000000  000160f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165c9  00000000  00000000  00016a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bba9  00000000  00000000  0002cfe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e900  00000000  00000000  00038b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a7490  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f8  00000000  00000000  000a74d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ab7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000230 	.word	0x20000230
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a8c 	.word	0x08006a8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000234 	.word	0x20000234
 800014c:	08006a8c 	.word	0x08006a8c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__gesf2>:
 8000d58:	f04f 3cff 	mov.w	ip, #4294967295
 8000d5c:	e006      	b.n	8000d6c <__cmpsf2+0x4>
 8000d5e:	bf00      	nop

08000d60 <__lesf2>:
 8000d60:	f04f 0c01 	mov.w	ip, #1
 8000d64:	e002      	b.n	8000d6c <__cmpsf2+0x4>
 8000d66:	bf00      	nop

08000d68 <__cmpsf2>:
 8000d68:	f04f 0c01 	mov.w	ip, #1
 8000d6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d7c:	bf18      	it	ne
 8000d7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d82:	d011      	beq.n	8000da8 <__cmpsf2+0x40>
 8000d84:	b001      	add	sp, #4
 8000d86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d8a:	bf18      	it	ne
 8000d8c:	ea90 0f01 	teqne	r0, r1
 8000d90:	bf58      	it	pl
 8000d92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d96:	bf88      	it	hi
 8000d98:	17c8      	asrhi	r0, r1, #31
 8000d9a:	bf38      	it	cc
 8000d9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000da0:	bf18      	it	ne
 8000da2:	f040 0001 	orrne.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dac:	d102      	bne.n	8000db4 <__cmpsf2+0x4c>
 8000dae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000db2:	d105      	bne.n	8000dc0 <__cmpsf2+0x58>
 8000db4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000db8:	d1e4      	bne.n	8000d84 <__cmpsf2+0x1c>
 8000dba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dbe:	d0e1      	beq.n	8000d84 <__cmpsf2+0x1c>
 8000dc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_cfrcmple>:
 8000dc8:	4684      	mov	ip, r0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	4661      	mov	r1, ip
 8000dce:	e7ff      	b.n	8000dd0 <__aeabi_cfcmpeq>

08000dd0 <__aeabi_cfcmpeq>:
 8000dd0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dd2:	f7ff ffc9 	bl	8000d68 <__cmpsf2>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	bf48      	it	mi
 8000dda:	f110 0f00 	cmnmi.w	r0, #0
 8000dde:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000de0 <__aeabi_fcmpeq>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff fff4 	bl	8000dd0 <__aeabi_cfcmpeq>
 8000de8:	bf0c      	ite	eq
 8000dea:	2001      	moveq	r0, #1
 8000dec:	2000      	movne	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmplt>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffea 	bl	8000dd0 <__aeabi_cfcmpeq>
 8000dfc:	bf34      	ite	cc
 8000dfe:	2001      	movcc	r0, #1
 8000e00:	2000      	movcs	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmple>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffe0 	bl	8000dd0 <__aeabi_cfcmpeq>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpge>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffd2 	bl	8000dc8 <__aeabi_cfrcmple>
 8000e24:	bf94      	ite	ls
 8000e26:	2001      	movls	r0, #1
 8000e28:	2000      	movhi	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <__aeabi_fcmpgt>:
 8000e30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e34:	f7ff ffc8 	bl	8000dc8 <__aeabi_cfrcmple>
 8000e38:	bf34      	ite	cc
 8000e3a:	2001      	movcc	r0, #1
 8000e3c:	2000      	movcs	r0, #0
 8000e3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e42:	bf00      	nop

08000e44 <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  char          *pcChar;
  uint_fast8_t   ui8Argc;
  bool           bFindArg = true;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]

  /**
   * Initialize the argument counter, and point to the beginning of the
   * command line string.
   */
  ui8Argc = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  pcChar  = pcCmdLine;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	617b      	str	r3, [r7, #20]

  /**
   * Advance through the command line until a zero character is found.
   */
  while (*pcChar)
 8000e58:	e01f      	b.n	8000e9a <CmdLineProcess+0x56>
  {
    /**
     * If there is a space, then replace it with a zero, and set the flag
     * to search for the next argument.
     */
    if (*pcChar == ' ')
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	d105      	bne.n	8000e6e <CmdLineProcess+0x2a>
    {
      *pcChar  = 0;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
      bFindArg = true;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e012      	b.n	8000e94 <CmdLineProcess+0x50>
    {
      /**
       * If bFindArg is set, then that means we are looking for the start
       * of the next argument.
       */
      if (bFindArg)
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d00f      	beq.n	8000e94 <CmdLineProcess+0x50>
        /**
         * As long as the maximum number of arguments has not been
         * reached, then save the pointer to the start of this new arg
         * in the argv array, and increment the count of args, argc.
         */
        if (ui8Argc < CMDLINE_MAX_ARGS)
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	2b07      	cmp	r3, #7
 8000e78:	d80a      	bhi.n	8000e90 <CmdLineProcess+0x4c>
        {
          g_ppcArgv[ui8Argc] = pcChar;
 8000e7a:	491d      	ldr	r1, [pc, #116]	@ (8000ef0 <CmdLineProcess+0xac>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	697a      	ldr	r2, [r7, #20]
 8000e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          ui8Argc++;
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	3301      	adds	r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
          bFindArg = false;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <CmdLineProcess+0x50>
         * The maximum number of arguments has been reached so return
         * the error.
         */
        else
        {
          return (CMDLINE_TOO_MANY_ARGS);
 8000e90:	2302      	movs	r3, #2
 8000e92:	e028      	b.n	8000ee6 <CmdLineProcess+0xa2>
      }
    }
    /**
     * Advance to the next character in the command line.
     */
    pcChar++;
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3301      	adds	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
  while (*pcChar)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1db      	bne.n	8000e5a <CmdLineProcess+0x16>
  }

  /**
   * If one or more arguments was found, then process the command.
   */
  if (ui8Argc)
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d01d      	beq.n	8000ee4 <CmdLineProcess+0xa0>
  {
    /**
     * Start at the beginning of the command table, to look for a matching
     * command.
     */
    psCmdEntry = &g_psCmdTable[0];
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <CmdLineProcess+0xb0>)
 8000eaa:	60bb      	str	r3, [r7, #8]

    /**
     * Search through the command table until a null command string is
     * found, which marks the end of the table.
     */
    while (psCmdEntry->pcCmd)
 8000eac:	e016      	b.n	8000edc <CmdLineProcess+0x98>
      /**
       * If this command entry command string matches argv[0], then call
       * the function for this command, passing the command line
       * arguments.
       */
      if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <CmdLineProcess+0xac>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4610      	mov	r0, r2
 8000eba:	f7ff f949 	bl	8000150 <strcmp>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d108      	bne.n	8000ed6 <CmdLineProcess+0x92>
      {
        return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4909      	ldr	r1, [pc, #36]	@ (8000ef0 <CmdLineProcess+0xac>)
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4798      	blx	r3
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	e007      	b.n	8000ee6 <CmdLineProcess+0xa2>
      }
      /**
       * Not found, so advance to the next entry.
       */
      psCmdEntry++;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	330c      	adds	r3, #12
 8000eda:	60bb      	str	r3, [r7, #8]
    while (psCmdEntry->pcCmd)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1e4      	bne.n	8000eae <CmdLineProcess+0x6a>

  /**
   * Fall through to here means that no matching command was found, so return
   * an error.
   */
  return (CMDLINE_BAD_CMD);
 8000ee4:	2301      	movs	r3, #1
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000024c 	.word	0x2000024c
 8000ef4:	20000028 	.word	0x20000028

08000ef8 <APP_COMMAND_Init>:
 * The function `APP_COMMAND_Init` initializes UART configuration and sends a
 * string message for LLC control firmware.
 */
void
APP_COMMAND_Init (void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  uart_cfg_cml = (uart_cfg_t *)&s_data_system.s_uart_cmd;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <APP_COMMAND_Init+0x30>)
 8000efe:	4a0b      	ldr	r2, [pc, #44]	@ (8000f2c <APP_COMMAND_Init+0x34>)
 8000f00:	601a      	str	r2, [r3, #0]
  BSP_UART_Config(uart_cfg_cml, USART3, USART3_IRQn);
 8000f02:	4b09      	ldr	r3, [pc, #36]	@ (8000f28 <APP_COMMAND_Init+0x30>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2227      	movs	r2, #39	@ 0x27
 8000f08:	4909      	ldr	r1, [pc, #36]	@ (8000f30 <APP_COMMAND_Init+0x38>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 f8e2 	bl	80020d4 <BSP_UART_Config>
  BSP_UART_SendString(uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <APP_COMMAND_Init+0x30>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4907      	ldr	r1, [pc, #28]	@ (8000f34 <APP_COMMAND_Init+0x3c>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 f946 	bl	80021a8 <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <APP_COMMAND_Init+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000370 	.word	0x20000370
 8000f2c:	20000550 	.word	0x20000550
 8000f30:	40004800 	.word	0x40004800
 8000f34:	08006b58 	.word	0x08006b58
 8000f38:	2000036f 	.word	0x2000036f

08000f3c <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 8000f40:	4902      	ldr	r1, [pc, #8]	@ (8000f4c <APP_COMMAND_CreateTask+0x10>)
 8000f42:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <APP_COMMAND_CreateTask+0x14>)
 8000f44:	f003 f8a8 	bl	8004098 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000001c 	.word	0x2000001c
 8000f50:	20000018 	.word	0x20000018

08000f54 <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(uart_cfg_cml, "\nAvailable commands\r\n");
 8000f5e:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <APP_COMMAND_Help+0x6c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4918      	ldr	r1, [pc, #96]	@ (8000fc4 <APP_COMMAND_Help+0x70>)
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 f91f 	bl	80021a8 <BSP_UART_SendString>
  BSP_UART_SendString(uart_cfg_cml, "------------------\r\n");
 8000f6a:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <APP_COMMAND_Help+0x6c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4916      	ldr	r1, [pc, #88]	@ (8000fc8 <APP_COMMAND_Help+0x74>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 f919 	bl	80021a8 <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <APP_COMMAND_Help+0x78>)
 8000f78:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 8000f7a:	e018      	b.n	8000fae <APP_COMMAND_Help+0x5a>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcCmd);
 8000f7c:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <APP_COMMAND_Help+0x6c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	4610      	mov	r0, r2
 8000f88:	f001 f90e 	bl	80021a8 <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcHelp);
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <APP_COMMAND_Help+0x6c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4610      	mov	r0, r2
 8000f98:	f001 f906 	bl	80021a8 <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, "\r\n");
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <APP_COMMAND_Help+0x6c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	490b      	ldr	r1, [pc, #44]	@ (8000fd0 <APP_COMMAND_Help+0x7c>)
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f900 	bl	80021a8 <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	330c      	adds	r3, #12
 8000fac:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1e2      	bne.n	8000f7c <APP_COMMAND_Help+0x28>
  }

  return (CMDLINE_OK);
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000370 	.word	0x20000370
 8000fc4:	08006b74 	.word	0x08006b74
 8000fc8:	08006b8c 	.word	0x08006b8c
 8000fcc:	20000028 	.word	0x20000028
 8000fd0:	08006ba4 	.word	0x08006ba4

08000fd4 <APP_COMMAND_TaskUpdate>:
 * processes commands based on the received data, and sends responses back
 * through UART.
 */
static void
APP_COMMAND_TaskUpdate (void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 8000fda:	e067      	b.n	80010ac <APP_COMMAND_TaskUpdate+0xd8>
  {
    rxData = BSP_UART_ReadChar(uart_cfg_cml);
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 f8f8 	bl	80021d6 <BSP_UART_ReadChar>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(uart_cfg_cml, rxData);
 8000fea:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	79fa      	ldrb	r2, [r7, #7]
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 f8a2 	bl	800213c <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b0d      	cmp	r3, #13
 8000ffc:	d002      	beq.n	8001004 <APP_COMMAND_TaskUpdate+0x30>
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b0a      	cmp	r3, #10
 8001002:	d136      	bne.n	8001072 <APP_COMMAND_TaskUpdate+0x9e>
    {
      if (s_commandBufferIndex > 0)
 8001004:	4b31      	ldr	r3, [pc, #196]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02b      	beq.n	8001064 <APP_COMMAND_TaskUpdate+0x90>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 800100c:	4b2f      	ldr	r3, [pc, #188]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <APP_COMMAND_TaskUpdate+0xfc>)
 8001014:	2100      	movs	r1, #0
 8001016:	5499      	strb	r1, [r3, r2]
        s_commandBufferIndex++;
 8001018:	4b2c      	ldr	r3, [pc, #176]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001022:	701a      	strb	r2, [r3, #0]
        retVal               = CmdLineProcess(s_commandBuffer);
 8001024:	482a      	ldr	r0, [pc, #168]	@ (80010d0 <APP_COMMAND_TaskUpdate+0xfc>)
 8001026:	f7ff ff0d 	bl	8000e44 <CmdLineProcess>
 800102a:	4603      	mov	r3, r0
 800102c:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 800102e:	4b27      	ldr	r3, [pc, #156]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]

        // Send status command in terminal.
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001034:	4b24      	ldr	r3, [pc, #144]	@ (80010c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4926      	ldr	r1, [pc, #152]	@ (80010d4 <APP_COMMAND_TaskUpdate+0x100>)
 800103a:	4618      	mov	r0, r3
 800103c:	f001 f8b4 	bl	80021a8 <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, ErrorCode[retVal]);
 8001040:	4b21      	ldr	r3, [pc, #132]	@ (80010c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001048:	4923      	ldr	r1, [pc, #140]	@ (80010d8 <APP_COMMAND_TaskUpdate+0x104>)
 800104a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800104e:	4619      	mov	r1, r3
 8001050:	4610      	mov	r0, r2
 8001052:	f001 f8a9 	bl	80021a8 <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, "> ");
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4920      	ldr	r1, [pc, #128]	@ (80010dc <APP_COMMAND_TaskUpdate+0x108>)
 800105c:	4618      	mov	r0, r3
 800105e:	f001 f8a3 	bl	80021a8 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001062:	e023      	b.n	80010ac <APP_COMMAND_TaskUpdate+0xd8>
      }
      else
      {
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <APP_COMMAND_TaskUpdate+0xf4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	491a      	ldr	r1, [pc, #104]	@ (80010d4 <APP_COMMAND_TaskUpdate+0x100>)
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f89c 	bl	80021a8 <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 8001070:	e01c      	b.n	80010ac <APP_COMMAND_TaskUpdate+0xd8>
      }
    }
    else if ((rxData == 8)
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b08      	cmp	r3, #8
 8001076:	d002      	beq.n	800107e <APP_COMMAND_TaskUpdate+0xaa>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b7f      	cmp	r3, #127	@ 0x7f
 800107c:	d10a      	bne.n	8001094 <APP_COMMAND_TaskUpdate+0xc0>
    {
      if (s_commandBufferIndex > 0)
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d012      	beq.n	80010ac <APP_COMMAND_TaskUpdate+0xd8>
      {
        s_commandBufferIndex--;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001090:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 8001092:	e00b      	b.n	80010ac <APP_COMMAND_TaskUpdate+0xd8>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4a0d      	ldr	r2, [pc, #52]	@ (80010d0 <APP_COMMAND_TaskUpdate+0xfc>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <APP_COMMAND_TaskUpdate+0xf8>)
 80010aa:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <APP_COMMAND_TaskUpdate+0xf4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f001 f831 	bl	8002118 <BSP_UART_IsAvailableDataReceive>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d18f      	bne.n	8000fdc <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000370 	.word	0x20000370
 80010cc:	2000036f 	.word	0x2000036f
 80010d0:	20000270 	.word	0x20000270
 80010d4:	08006ba8 	.word	0x08006ba8
 80010d8:	20000000 	.word	0x20000000
 80010dc:	08006bb0 	.word	0x08006bb0

080010e0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4013      	ands	r3, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	bf0c      	ite	eq
 80010f6:	2301      	moveq	r3, #1
 80010f8:	2300      	movne	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40010400 	.word	0x40010400

0800110c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001114:	4a03      	ldr	r2, [pc, #12]	@ (8001124 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6153      	str	r3, [r2, #20]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr
 8001124:	40010400 	.word	0x40010400

08001128 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f043 0201 	orr.w	r2, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	601a      	str	r2, [r3, #0]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 0201 	bic.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <LL_TIM_IsEnabledCounter+0x18>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <LL_TIM_IsEnabledCounter+0x1a>
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <APP_CALCULATOR_PF_CreateTask>:
 * The function APP_CALCULATOR_PF_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_CALCULATOR_PF_CreateTask (void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 80011bc:	4902      	ldr	r1, [pc, #8]	@ (80011c8 <APP_CALCULATOR_PF_CreateTask+0x10>)
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <APP_CALCULATOR_PF_CreateTask+0x14>)
 80011c0:	f002 ff6a 	bl	8004098 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000038 	.word	0x20000038
 80011cc:	20000034 	.word	0x20000034

080011d0 <APP_CALCULATOR_PF_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_CALCULATOR_PF_Init (void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_calculator_pf.p_PF_buffer     = &s_data_system.s_PF_buffer;
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <APP_CALCULATOR_PF_Init+0x28>)
 80011d6:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <APP_CALCULATOR_PF_Init+0x2c>)
 80011d8:	605a      	str	r2, [r3, #4]
  s_calculator_pf.p_PF_buffer_irq = &s_data_system.s_PF_buffer_irq;
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <APP_CALCULATOR_PF_Init+0x28>)
 80011dc:	4a08      	ldr	r2, [pc, #32]	@ (8001200 <APP_CALCULATOR_PF_Init+0x30>)
 80011de:	601a      	str	r2, [r3, #0]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer);
 80011e0:	4b05      	ldr	r3, [pc, #20]	@ (80011f8 <APP_CALCULATOR_PF_Init+0x28>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f002 feaf 	bl	8003f48 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 80011ea:	4b03      	ldr	r3, [pc, #12]	@ (80011f8 <APP_CALCULATOR_PF_Init+0x28>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 feaa 	bl	8003f48 <RING_BUFFER_Init>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000374 	.word	0x20000374
 80011fc:	200003cc 	.word	0x200003cc
 8001200:	20000380 	.word	0x20000380

08001204 <APP_CALCULATOR_PF_EXTI_IRQHandler>:
 * The function `APP_CALCULATOR_PF_EXTI_IRQHandler` handles EXTI interrupts for
 * lines 5 and 6, updating a buffer with timer values.
 */
void
APP_CALCULATOR_PF_EXTI_IRQHandler (void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001208:	2020      	movs	r0, #32
 800120a:	f7ff ff69 	bl	80010e0 <LL_EXTI_IsActiveFlag_0_31>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d03a      	beq.n	800128a <APP_CALCULATOR_PF_EXTI_IRQHandler+0x86>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001214:	2020      	movs	r0, #32
 8001216:	f7ff ff79 	bl	800110c <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 800121a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800121e:	f7ff ffa1 	bl	8001164 <LL_TIM_IsEnabledCounter>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d027      	beq.n	8001278 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x74>
    {
      LL_TIM_DisableCounter(TIM2);
 8001228:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800122c:	f7ff ff8b 	bl	8001146 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)(LL_TIM_GetCounter(TIM2) >> 8);
 8001230:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001234:	f7ff ffb5 	bl	80011a2 <LL_TIM_GetCounter>
 8001238:	4603      	mov	r3, r0
 800123a:	0a1b      	lsrs	r3, r3, #8
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001240:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)LL_TIM_GetCounter(TIM2);
 8001242:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001246:	f7ff ffac 	bl	80011a2 <LL_TIM_GetCounter>
 800124a:	4603      	mov	r3, r0
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b32      	ldr	r3, [pc, #200]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001250:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001252:	4b31      	ldr	r3, [pc, #196]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001254:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 8001256:	4a30      	ldr	r2, [pc, #192]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001258:	7a12      	ldrb	r2, [r2, #8]
 800125a:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f002 feb6 	bl	8003fd0 <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001264:	4b2c      	ldr	r3, [pc, #176]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 8001266:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 8001268:	4a2b      	ldr	r2, [pc, #172]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 800126a:	7a52      	ldrb	r2, [r2, #9]
 800126c:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f002 fead 	bl	8003fd0 <RING_BUFFER_Push_Data>
 8001276:	e008      	b.n	800128a <APP_CALCULATOR_PF_EXTI_IRQHandler+0x86>
    }
    else
    {
      START_COUNTER(TIM2)
 8001278:	2100      	movs	r1, #0
 800127a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800127e:	f7ff ff83 	bl	8001188 <LL_TIM_SetCounter>
 8001282:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001286:	f7ff ff4f 	bl	8001128 <LL_TIM_EnableCounter>
    }
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 800128a:	2040      	movs	r0, #64	@ 0x40
 800128c:	f7ff ff28 	bl	80010e0 <LL_EXTI_IsActiveFlag_0_31>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d03d      	beq.n	8001312 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x10e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001296:	2040      	movs	r0, #64	@ 0x40
 8001298:	f7ff ff38 	bl	800110c <LL_EXTI_ClearFlag_0_31>
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 800129c:	2020      	movs	r0, #32
 800129e:	f7ff ff35 	bl	800110c <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 80012a2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012a6:	f7ff ff5d 	bl	8001164 <LL_TIM_IsEnabledCounter>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d027      	beq.n	8001300 <APP_CALCULATOR_PF_EXTI_IRQHandler+0xfc>
    {
      LL_TIM_DisableCounter(TIM2);
 80012b0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012b4:	f7ff ff47 	bl	8001146 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)(LL_TIM_GetCounter(TIM2) >> 8);
 80012b8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012bc:	f7ff ff71 	bl	80011a2 <LL_TIM_GetCounter>
 80012c0:	4603      	mov	r3, r0
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80012c8:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)LL_TIM_GetCounter(TIM2);
 80012ca:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80012ce:	f7ff ff68 	bl	80011a2 <LL_TIM_GetCounter>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80012d8:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80012dc:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80012e0:	7a12      	ldrb	r2, [r2, #8]
 80012e2:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fe72 	bl	8003fd0 <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80012ee:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 80012f0:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80012f2:	7a52      	ldrb	r2, [r2, #9]
 80012f4:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fe69 	bl	8003fd0 <RING_BUFFER_Push_Data>
    else
    {
      START_COUNTER(TIM2)
    }
  }
}
 80012fe:	e008      	b.n	8001312 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x10e>
      START_COUNTER(TIM2)
 8001300:	2100      	movs	r1, #0
 8001302:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001306:	f7ff ff3f 	bl	8001188 <LL_TIM_SetCounter>
 800130a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800130e:	f7ff ff0b 	bl	8001128 <LL_TIM_EnableCounter>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000374 	.word	0x20000374

0800131c <APP_CALCULATOR_PF_TaskUpdate>:
 * The function `APP_CALCULATOR_PF_TaskUpdate` checks if a ring buffer is not
 * empty, and if not, transfers data from one buffer to another in chunks of 4.
 */
static void
APP_CALCULATOR_PF_TaskUpdate (void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq))
 8001320:	4b03      	ldr	r3, [pc, #12]	@ (8001330 <APP_CALCULATOR_PF_TaskUpdate+0x14>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fe33 	bl	8003f90 <RING_BUFFER_Is_Empty>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
  {
    return;
  }
}
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000374 	.word	0x20000374

08001334 <APP_DATA_TRANSMISSION_CreateTask>:
 * The function APP_DATA_TRANSMISSION_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_DATA_TRANSMISSION_CreateTask (void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001338:	4902      	ldr	r1, [pc, #8]	@ (8001344 <APP_DATA_TRANSMISSION_CreateTask+0x10>)
 800133a:	4803      	ldr	r0, [pc, #12]	@ (8001348 <APP_DATA_TRANSMISSION_CreateTask+0x14>)
 800133c:	f002 feac 	bl	8004098 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000048 	.word	0x20000048
 8001348:	20000044 	.word	0x20000044

0800134c <APP_DATA_TRANSMISSION_Init>:

void
APP_DATA_TRANSMISSION_Init (void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_data_trans.p_PF_buffer       = &s_data_system.s_PF_buffer;
 8001350:	4b0f      	ldr	r3, [pc, #60]	@ (8001390 <APP_DATA_TRANSMISSION_Init+0x44>)
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <APP_DATA_TRANSMISSION_Init+0x48>)
 8001354:	601a      	str	r2, [r3, #0]
  s_data_trans.p_vol_cur_buffer  = &s_data_system.s_vol_cur_buffer;
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <APP_DATA_TRANSMISSION_Init+0x44>)
 8001358:	4a0f      	ldr	r2, [pc, #60]	@ (8001398 <APP_DATA_TRANSMISSION_Init+0x4c>)
 800135a:	605a      	str	r2, [r3, #4]
  s_data_trans.p_uart_data_trans = &s_data_system.s_uart_data_trans;
 800135c:	4b0c      	ldr	r3, [pc, #48]	@ (8001390 <APP_DATA_TRANSMISSION_Init+0x44>)
 800135e:	4a0f      	ldr	r2, [pc, #60]	@ (800139c <APP_DATA_TRANSMISSION_Init+0x50>)
 8001360:	609a      	str	r2, [r3, #8]

  // Reset data filed of variable s_data_trans
  s_data_trans.flag_update_PF      = FLAG_NOT_UPDATED;
 8001362:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <APP_DATA_TRANSMISSION_Init+0x44>)
 8001364:	f892 3023 	ldrb.w	r3, [r2, #35]	@ 0x23
 8001368:	f36f 0300 	bfc	r3, #0, #1
 800136c:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
  s_data_trans.flag_update_vol_cur = FLAG_NOT_UPDATED;
 8001370:	4a07      	ldr	r2, [pc, #28]	@ (8001390 <APP_DATA_TRANSMISSION_Init+0x44>)
 8001372:	f892 3023 	ldrb.w	r3, [r2, #35]	@ 0x23
 8001376:	f36f 0341 	bfc	r3, #1, #1
 800137a:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23

  // Config UART
  BSP_UART_Config(
      (uart_cfg_t *)s_data_trans.p_uart_data_trans, USART1, USART1_IRQn);
 800137e:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <APP_DATA_TRANSMISSION_Init+0x44>)
 8001380:	689b      	ldr	r3, [r3, #8]
  BSP_UART_Config(
 8001382:	2225      	movs	r2, #37	@ 0x25
 8001384:	4906      	ldr	r1, [pc, #24]	@ (80013a0 <APP_DATA_TRANSMISSION_Init+0x54>)
 8001386:	4618      	mov	r0, r3
 8001388:	f000 fea4 	bl	80020d4 <BSP_UART_Config>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000600 	.word	0x20000600
 8001394:	200003cc 	.word	0x200003cc
 8001398:	20000464 	.word	0x20000464
 800139c:	200004b0 	.word	0x200004b0
 80013a0:	40013800 	.word	0x40013800

080013a4 <APP_DATA_TRANSMISSION_TaskUpdate>:
 *  PRIVATE FUNCTION
 *****************************************************************************/

static void
APP_DATA_TRANSMISSION_TaskUpdate (void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans.p_PF_buffer))
 80013a8:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f002 fdef 	bl	8003f90 <RING_BUFFER_Is_Empty>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <APP_DATA_TRANSMISSION_TaskUpdate+0x28>
  {

    s_data_trans.flag_update_PF = FLAG_UPDATED;
 80013be:	4a1c      	ldr	r2, [pc, #112]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 80013c0:	f892 3023 	ldrb.w	r3, [r2, #35]	@ 0x23
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
  }

  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans.p_vol_cur_buffer))
 80013cc:	4b18      	ldr	r3, [pc, #96]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fddd 	bl	8003f90 <RING_BUFFER_Is_Empty>
 80013d6:	4603      	mov	r3, r0
 80013d8:	f083 0301 	eor.w	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <APP_DATA_TRANSMISSION_TaskUpdate+0x4c>
  {
    s_data_trans.flag_update_vol_cur = FLAG_UPDATED;
 80013e2:	4a13      	ldr	r2, [pc, #76]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 80013e4:	f892 3023 	ldrb.w	r3, [r2, #35]	@ 0x23
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
  }

  if ((s_data_trans.flag_update_PF == FLAG_UPDATED)
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 80013f2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80013f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d115      	bne.n	800142c <APP_DATA_TRANSMISSION_TaskUpdate+0x88>
      && (s_data_trans.flag_update_vol_cur == FLAG_UPDATED))
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 8001402:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001406:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10d      	bne.n	800142c <APP_DATA_TRANSMISSION_TaskUpdate+0x88>
  {
    s_data_trans.flag_update_PF      = FLAG_NOT_UPDATED;
 8001410:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 8001412:	f892 3023 	ldrb.w	r3, [r2, #35]	@ 0x23
 8001416:	f36f 0300 	bfc	r3, #0, #1
 800141a:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
    s_data_trans.flag_update_vol_cur = FLAG_NOT_UPDATED;
 800141e:	4a04      	ldr	r2, [pc, #16]	@ (8001430 <APP_DATA_TRANSMISSION_TaskUpdate+0x8c>)
 8001420:	f892 3023 	ldrb.w	r3, [r2, #35]	@ 0x23
 8001424:	f36f 0341 	bfc	r3, #1, #1
 8001428:	f882 3023 	strb.w	r3, [r2, #35]	@ 0x23
  }
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000600 	.word	0x20000600

08001434 <BSP_GPIO_SetState>:
   * should be set to a low state (`GPIO_LOW`) or a high state (`GPIO_HIGH`).
   */
  static inline void BSP_GPIO_SetState (GPIO_TypeDef *gpio_port,
                                        uint32_t      gpio_pin,
                                        gpio_state_t  state)
  {
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	71fb      	strb	r3, [r7, #7]
    if (state == GPIO_LOW)
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <BSP_GPIO_SetState+0x1c>
    {
      gpio_port->BSRR = gpio_pin;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	611a      	str	r2, [r3, #16]
    }
    else
    {
      gpio_port->BSRR = gpio_pin << 16;
    }
  }
 800144e:	e003      	b.n	8001458 <BSP_GPIO_SetState+0x24>
      gpio_port->BSRR = gpio_pin << 16;
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	041a      	lsls	r2, r3, #16
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	611a      	str	r2, [r3, #16]
  }
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
	...

08001464 <APP_READ_DATA_CreateTask>:
 * The function APP_READ_DATA_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_READ_DATA_CreateTask (void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001468:	4902      	ldr	r1, [pc, #8]	@ (8001474 <APP_READ_DATA_CreateTask+0x10>)
 800146a:	4803      	ldr	r0, [pc, #12]	@ (8001478 <APP_READ_DATA_CreateTask+0x14>)
 800146c:	f002 fe14 	bl	8004098 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001470:	bf00      	nop
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000058 	.word	0x20000058
 8001478:	20000054 	.word	0x20000054

0800147c <APP_READ_DATA_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_READ_DATA_Init (void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_read_data.p_vol_cur_buffer     = &s_data_system.s_vol_cur_buffer;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <APP_READ_DATA_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <APP_READ_DATA_Init+0x50>)
 8001484:	605a      	str	r2, [r3, #4]
  s_read_data.p_vol_cur_buffer_irq = &s_data_system.s_vol_cur_buffer_irq;
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <APP_READ_DATA_Init+0x4c>)
 8001488:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <APP_READ_DATA_Init+0x54>)
 800148a:	601a      	str	r2, [r3, #0]
  s_read_data.p_voltage            = &s_data_system.f_voltage;
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <APP_READ_DATA_Init+0x4c>)
 800148e:	4a11      	ldr	r2, [pc, #68]	@ (80014d4 <APP_READ_DATA_Init+0x58>)
 8001490:	609a      	str	r2, [r3, #8]
  s_read_data.p_current            = &s_data_system.f_current;
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <APP_READ_DATA_Init+0x4c>)
 8001494:	4a10      	ldr	r2, [pc, #64]	@ (80014d8 <APP_READ_DATA_Init+0x5c>)
 8001496:	60da      	str	r2, [r3, #12]

  // Reset data filed of variable s_read_data
  s_read_data.u8_range_current = CURRENT_RANGE_0_30A;
 8001498:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <APP_READ_DATA_Init+0x4c>)
 800149a:	7d13      	ldrb	r3, [r2, #20]
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	7513      	strb	r3, [r2, #20]
  ENABLE_RANGE_0_30A;
 80014a2:	2200      	movs	r2, #0
 80014a4:	f248 0180 	movw	r1, #32896	@ 0x8080
 80014a8:	480c      	ldr	r0, [pc, #48]	@ (80014dc <APP_READ_DATA_Init+0x60>)
 80014aa:	f7ff ffc3 	bl	8001434 <BSP_GPIO_SetState>

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer);
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <APP_READ_DATA_Init+0x4c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fd48 	bl	8003f48 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <APP_READ_DATA_Init+0x4c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 fd43 	bl	8003f48 <RING_BUFFER_Init>
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000624 	.word	0x20000624
 80014cc:	20000464 	.word	0x20000464
 80014d0:	20000418 	.word	0x20000418
 80014d4:	200005f0 	.word	0x200005f0
 80014d8:	200005f4 	.word	0x200005f4
 80014dc:	40010800 	.word	0x40010800

080014e0 <APP_READ_DATA_HandleDMA_IRQ>:

void
APP_READ_DATA_HandleDMA_IRQ (flagIRQ_dma_t status)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if (status == FLAG_TRANSFER_COMPLETE)
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d143      	bne.n	8001578 <APP_READ_DATA_HandleDMA_IRQ+0x98>
  {
    s_read_data.value_temp_irq[0]
        = (uint8_t)(s_data_system.u16_adc_value[0] >> 8);
 80014f0:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80014f2:	f8b3 327c 	ldrh.w	r3, [r3, #636]	@ 0x27c
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	0a1b      	lsrs	r3, r3, #8
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b21      	ldr	r3, [pc, #132]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001500:	741a      	strb	r2, [r3, #16]
    s_read_data.value_temp_irq[1] = (uint8_t)(s_data_system.u16_adc_value[0]);
 8001502:	4b1f      	ldr	r3, [pc, #124]	@ (8001580 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 8001504:	f8b3 327c 	ldrh.w	r3, [r3, #636]	@ 0x27c
 8001508:	b29b      	uxth	r3, r3
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800150e:	745a      	strb	r2, [r3, #17]

    s_read_data.value_temp_irq[2]
        = (uint8_t)(s_data_system.u16_adc_value[1] >> 8);
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 8001512:	f8b3 327e 	ldrh.w	r3, [r3, #638]	@ 0x27e
 8001516:	b29b      	uxth	r3, r3
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	b29b      	uxth	r3, r3
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001520:	749a      	strb	r2, [r3, #18]
    s_read_data.value_temp_irq[3] = (uint8_t)(s_data_system.u16_adc_value[0]);
 8001522:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 8001524:	f8b3 327c 	ldrh.w	r3, [r3, #636]	@ 0x27c
 8001528:	b29b      	uxth	r3, r3
 800152a:	b2da      	uxtb	r2, r3
 800152c:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800152e:	74da      	strb	r2, [r3, #19]

    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001532:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[0]);
 8001534:	4a13      	ldr	r2, [pc, #76]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001536:	7c12      	ldrb	r2, [r2, #16]
 8001538:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f002 fd47 	bl	8003fd0 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001544:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[1]);
 8001546:	4a0f      	ldr	r2, [pc, #60]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001548:	7c52      	ldrb	r2, [r2, #17]
 800154a:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fd3e 	bl	8003fd0 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001556:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[2]);
 8001558:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800155a:	7c92      	ldrb	r2, [r2, #18]
 800155c:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fd35 	bl	8003fd0 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8001568:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[3]);
 800156a:	4a06      	ldr	r2, [pc, #24]	@ (8001584 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800156c:	7cd2      	ldrb	r2, [r2, #19]
 800156e:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fd2c 	bl	8003fd0 <RING_BUFFER_Push_Data>
  }
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000380 	.word	0x20000380
 8001584:	20000624 	.word	0x20000624

08001588 <APP_READ_DATA_TaskUpdate>:
 * The function `APP_READ_DATA_TaskUpdate` checks if a ring buffer is not
 * empty, and if not, transfers data from one buffer to another in chunks of 4.
 */
static void
APP_READ_DATA_TaskUpdate (void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq))
 800158e:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f002 fcfc 	bl	8003f90 <RING_BUFFER_Is_Empty>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d16c      	bne.n	8001678 <APP_READ_DATA_TaskUpdate+0xf0>
  uint16_t u16_value_temp;
  uint8_t  u8_value_adc[4];

  // u8_value_adc[0] 8 bit high of adc-channel 1
  u8_value_adc[0] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 800159e:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
  u8_value_adc[0] = RING_BUFFER_Pull_Data(
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 fd39 	bl	800401a <RING_BUFFER_Pull_Data>
 80015a8:	4603      	mov	r3, r0
 80015aa:	703b      	strb	r3, [r7, #0]

  // u8_value_adc[1] 8 bit low of adc-channel 1
  u8_value_adc[1] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80015ac:	4b34      	ldr	r3, [pc, #208]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
  u8_value_adc[1] = RING_BUFFER_Pull_Data(
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fd32 	bl	800401a <RING_BUFFER_Pull_Data>
 80015b6:	4603      	mov	r3, r0
 80015b8:	707b      	strb	r3, [r7, #1]

  // u8_value_adc[2] 8 bit high of adc-channel 2
  u8_value_adc[2] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
  u8_value_adc[2] = RING_BUFFER_Pull_Data(
 80015be:	4618      	mov	r0, r3
 80015c0:	f002 fd2b 	bl	800401a <RING_BUFFER_Pull_Data>
 80015c4:	4603      	mov	r3, r0
 80015c6:	70bb      	strb	r3, [r7, #2]

  // u8_value_adc[3] 8 bit low of adc-channel 2
  u8_value_adc[3] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80015c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
  u8_value_adc[3] = RING_BUFFER_Pull_Data(
 80015cc:	4618      	mov	r0, r3
 80015ce:	f002 fd24 	bl	800401a <RING_BUFFER_Pull_Data>
 80015d2:	4603      	mov	r3, r0
 80015d4:	70fb      	strb	r3, [r7, #3]

  u16_value_temp = (uint16_t)((u8_value_adc[0] << 8) | (u8_value_adc[1]));
 80015d6:	783b      	ldrb	r3, [r7, #0]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	80fb      	strh	r3, [r7, #6]
  APP_READ_DATA_ConvertVoltage(u16_value_temp);
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f84f 	bl	800168c <APP_READ_DATA_ConvertVoltage>

  u16_value_temp = (uint16_t)((u8_value_adc[2] << 8) | (u8_value_adc[3]));
 80015ee:	78bb      	ldrb	r3, [r7, #2]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21a      	sxth	r2, r3
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4313      	orrs	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	80fb      	strh	r3, [r7, #6]
  APP_READ_DATA_ConvertCurrent(u16_value_temp);
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 f881 	bl	8001708 <APP_READ_DATA_ConvertCurrent>

  // CHANGE RANGE OF CURRENT
  // if current > 10A, change from range 0-10 (A) to 0-30 (A)
  // if current < 10A, change from range 0-30 (A) to 0-10 (A)

  if ((*s_read_data.p_current > 10)
 8001606:	4b1e      	ldr	r3, [pc, #120]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	491d      	ldr	r1, [pc, #116]	@ (8001684 <APP_READ_DATA_TaskUpdate+0xfc>)
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fc0e 	bl	8000e30 <__aeabi_fcmpgt>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d011      	beq.n	800163e <APP_READ_DATA_TaskUpdate+0xb6>
      && (s_read_data.u8_range_current == CURRENT_RANGE_0_10A))
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 800161c:	7d1b      	ldrb	r3, [r3, #20]
 800161e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <APP_READ_DATA_TaskUpdate+0xb6>
  {
    s_read_data.u8_range_current = CURRENT_RANGE_0_30A;
 8001628:	4a15      	ldr	r2, [pc, #84]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 800162a:	7d13      	ldrb	r3, [r2, #20]
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	7513      	strb	r3, [r2, #20]
    ENABLE_RANGE_0_30A;
 8001632:	2200      	movs	r2, #0
 8001634:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001638:	4813      	ldr	r0, [pc, #76]	@ (8001688 <APP_READ_DATA_TaskUpdate+0x100>)
 800163a:	f7ff fefb 	bl	8001434 <BSP_GPIO_SetState>
  }
  if ((*s_read_data.p_current < 10)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	490f      	ldr	r1, [pc, #60]	@ (8001684 <APP_READ_DATA_TaskUpdate+0xfc>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fbd4 	bl	8000df4 <__aeabi_fcmplt>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d013      	beq.n	800167a <APP_READ_DATA_TaskUpdate+0xf2>
      && (s_read_data.u8_range_current == CURRENT_RANGE_0_30A))
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 8001654:	7d1b      	ldrb	r3, [r3, #20]
 8001656:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d10c      	bne.n	800167a <APP_READ_DATA_TaskUpdate+0xf2>
  {
    s_read_data.u8_range_current = CURRENT_RANGE_0_10A;
 8001660:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <APP_READ_DATA_TaskUpdate+0xf8>)
 8001662:	7d13      	ldrb	r3, [r2, #20]
 8001664:	f36f 0300 	bfc	r3, #0, #1
 8001668:	7513      	strb	r3, [r2, #20]
    ENABLE_RANGE_0_10A;
 800166a:	2201      	movs	r2, #1
 800166c:	f248 0180 	movw	r1, #32896	@ 0x8080
 8001670:	4805      	ldr	r0, [pc, #20]	@ (8001688 <APP_READ_DATA_TaskUpdate+0x100>)
 8001672:	f7ff fedf 	bl	8001434 <BSP_GPIO_SetState>
 8001676:	e000      	b.n	800167a <APP_READ_DATA_TaskUpdate+0xf2>
    return;
 8001678:	bf00      	nop
  }
}
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000624 	.word	0x20000624
 8001684:	41200000 	.word	0x41200000
 8001688:	40010800 	.word	0x40010800

0800168c <APP_READ_DATA_ConvertVoltage>:
 * @param u16_adc_value_voltage The parameter `u16_adc_value_voltage` is a
 * 16-bit unsigned integer representing the ADC value of the voltage being read.
 */
static void
APP_READ_DATA_ConvertVoltage (uint16_t u16_adc_value_voltage)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8001696:	88fb      	ldrh	r3, [r7, #6]
 8001698:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b15      	ldr	r3, [pc, #84]	@ (80016f8 <APP_READ_DATA_ConvertVoltage+0x6c>)
 80016a4:	fba3 1302 	umull	r1, r3, r3, r2
 80016a8:	1ad2      	subs	r2, r2, r3
 80016aa:	0852      	lsrs	r2, r2, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	0adb      	lsrs	r3, r3, #11
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff faf9 	bl	8000ca8 <__aeabi_ui2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_voltage, LL_ADC_RESOLUTION_12B);

  *s_read_data.p_voltage = f_mVolt * 10.0 / 82.0;
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7fe febe 	bl	800043c <__aeabi_f2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <APP_READ_DATA_ConvertVoltage+0x70>)
 80016c6:	f7fe ff11 	bl	80004ec <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <APP_READ_DATA_ConvertVoltage+0x74>)
 80016d8:	f7ff f832 	bl	8000740 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4908      	ldr	r1, [pc, #32]	@ (8001704 <APP_READ_DATA_ConvertVoltage+0x78>)
 80016e2:	688c      	ldr	r4, [r1, #8]
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff f9d8 	bl	8000a9c <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	6023      	str	r3, [r4, #0]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	00100101 	.word	0x00100101
 80016fc:	40240000 	.word	0x40240000
 8001700:	40548000 	.word	0x40548000
 8001704:	20000624 	.word	0x20000624

08001708 <APP_READ_DATA_ConvertCurrent>:

static void
APP_READ_DATA_ConvertCurrent (uint16_t u16_adc_value_current)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001718:	fb02 f303 	mul.w	r3, r2, r3
 800171c:	461a      	mov	r2, r3
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <APP_READ_DATA_ConvertCurrent+0xd8>)
 8001720:	fba3 1302 	umull	r1, r3, r3, r2
 8001724:	1ad2      	subs	r2, r2, r3
 8001726:	0852      	lsrs	r2, r2, #1
 8001728:	4413      	add	r3, r2
 800172a:	0adb      	lsrs	r3, r3, #11
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fabb 	bl	8000ca8 <__aeabi_ui2f>
 8001732:	4603      	mov	r3, r0
 8001734:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_current, LL_ADC_RESOLUTION_12B);

  if (s_read_data.u8_range_current == CURRENT_RANGE_0_30A)
 8001736:	4b2b      	ldr	r3, [pc, #172]	@ (80017e4 <APP_READ_DATA_ConvertCurrent+0xdc>)
 8001738:	7d1b      	ldrb	r3, [r3, #20]
 800173a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d11b      	bne.n	800177c <APP_READ_DATA_ConvertCurrent+0x74>
  {
    *s_read_data.p_current = f_mVolt * 62.0 / 10000.0;
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f7fe fe79 	bl	800043c <__aeabi_f2d>
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	4b26      	ldr	r3, [pc, #152]	@ (80017e8 <APP_READ_DATA_ConvertCurrent+0xe0>)
 8001750:	f7fe fecc 	bl	80004ec <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	a31a      	add	r3, pc, #104	@ (adr r3, 80017c8 <APP_READ_DATA_ConvertCurrent+0xc0>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe ffed 	bl	8000740 <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	491e      	ldr	r1, [pc, #120]	@ (80017e4 <APP_READ_DATA_ConvertCurrent+0xdc>)
 800176c:	68cc      	ldr	r4, [r1, #12]
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f993 	bl	8000a9c <__aeabi_d2f>
 8001776:	4603      	mov	r3, r0
 8001778:	6023      	str	r3, [r4, #0]
  }
  else if (s_read_data.u8_range_current == CURRENT_RANGE_0_10A)
  {
    *s_read_data.p_current = f_mVolt * 215.0 / 100000.0;
  }
}
 800177a:	e021      	b.n	80017c0 <APP_READ_DATA_ConvertCurrent+0xb8>
  else if (s_read_data.u8_range_current == CURRENT_RANGE_0_10A)
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <APP_READ_DATA_ConvertCurrent+0xdc>)
 800177e:	7d1b      	ldrb	r3, [r3, #20]
 8001780:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11a      	bne.n	80017c0 <APP_READ_DATA_ConvertCurrent+0xb8>
    *s_read_data.p_current = f_mVolt * 215.0 / 100000.0;
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f7fe fe56 	bl	800043c <__aeabi_f2d>
 8001790:	a30f      	add	r3, pc, #60	@ (adr r3, 80017d0 <APP_READ_DATA_ConvertCurrent+0xc8>)
 8001792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001796:	f7fe fea9 	bl	80004ec <__aeabi_dmul>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80017d8 <APP_READ_DATA_ConvertCurrent+0xd0>)
 80017a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a8:	f7fe ffca 	bl	8000740 <__aeabi_ddiv>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <APP_READ_DATA_ConvertCurrent+0xdc>)
 80017b2:	68cc      	ldr	r4, [r1, #12]
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	f7ff f970 	bl	8000a9c <__aeabi_d2f>
 80017bc:	4603      	mov	r3, r0
 80017be:	6023      	str	r3, [r4, #0]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}
 80017c8:	00000000 	.word	0x00000000
 80017cc:	40c38800 	.word	0x40c38800
 80017d0:	00000000 	.word	0x00000000
 80017d4:	406ae000 	.word	0x406ae000
 80017d8:	00000000 	.word	0x00000000
 80017dc:	40f86a00 	.word	0x40f86a00
 80017e0:	00100101 	.word	0x00100101
 80017e4:	20000624 	.word	0x20000624
 80017e8:	404f0000 	.word	0x404f0000

080017ec <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d103      	bne.n	8001808 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	334c      	adds	r3, #76	@ 0x4c
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e001      	b.n	800180c <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 8001808:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <LL_ADC_DMA_GetRegAddr+0x2c>)
 800180a:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 800180c:	68fb      	ldr	r3, [r7, #12]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	4001244c 	.word	0x4001244c

0800181c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL) == (LL_ADC_REG_TRIG_SOFTWARE));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800182c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	609a      	str	r2, [r3, #8]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr

08001866 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f043 0201 	orr.w	r2, r3, #1
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	609a      	str	r2, [r3, #8]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <LL_ADC_Disable>:
  * @rmtoll CR2      ADON           LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 0201 	bic.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f043 0204 	orr.w	r2, r3, #4
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	609a      	str	r2, [r3, #8]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f06f 0202 	mvn.w	r2, #2
 8001930:	601a      	str	r2, [r3, #0]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <BSP_ADC_ConversionStop_Disable>:
 *   INLINE PRIVATE FUNCTION
 *****************************************************************************/

static inline void
BSP_ADC_ConversionStop_Disable (ADC_TypeDef *p_ADC)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  // Disable the ADC peripheral
  LL_ADC_Disable(p_ADC);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff9d 	bl	8001884 <LL_ADC_Disable>

  // Wait for ADC effectively disabled
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <BSP_ADC_ConversionStop_Disable+0x38>)
 800194c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001950:	601a      	str	r2, [r3, #0]
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 8001952:	e003      	b.n	800195c <BSP_ADC_ConversionStop_Disable+0x20>
  {
    if (u32_adc_timeout == 0)
 8001954:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <BSP_ADC_ConversionStop_Disable+0x38>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <BSP_ADC_ConversionStop_Disable+0x2e>
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ffa0 	bl	80018a2 <LL_ADC_IsEnabled>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f5      	bne.n	8001954 <BSP_ADC_ConversionStop_Disable+0x18>
 8001968:	e000      	b.n	800196c <BSP_ADC_ConversionStop_Disable+0x30>
    {
      return;
 800196a:	bf00      	nop
    }
  }
}
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000063c 	.word	0x2000063c

08001978 <BSP_ADC_Enable>:

static inline void
BSP_ADC_Enable (ADC_TypeDef *p_ADC)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if (LL_ADC_IsEnabled(p_ADC) == RESET)
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff8e 	bl	80018a2 <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d113      	bne.n	80019b4 <BSP_ADC_Enable+0x3c>
  {
    LL_ADC_Enable(p_ADC);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff6a 	bl	8001866 <LL_ADC_Enable>
    // Wait for ADC effectively enabled
    u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <BSP_ADC_Enable+0x44>)
 8001994:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001998:	601a      	str	r2, [r3, #0]
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 800199a:	e003      	b.n	80019a4 <BSP_ADC_Enable+0x2c>
    {
      if (u32_adc_timeout == 0)
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <BSP_ADC_Enable+0x44>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <BSP_ADC_Enable+0x3a>
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff7c 	bl	80018a2 <LL_ADC_IsEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f5      	beq.n	800199c <BSP_ADC_Enable+0x24>
 80019b0:	e000      	b.n	80019b4 <BSP_ADC_Enable+0x3c>
      {
        return;
 80019b2:	bf00      	nop
      }
    }
  }
}
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000063c 	.word	0x2000063c

080019c0 <BSP_ADC_Start_Calibration>:
 *   PUBLIC FUNCTION
 *****************************************************************************/

void
BSP_ADC_Start_Calibration (ADC_TypeDef *p_ADC)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  // 1. Disable ADC peripheral
  BSP_ADC_ConversionStop_Disable(p_ADC);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ffb7 	bl	800193c <BSP_ADC_ConversionStop_Disable>

  // 2. Calibration prerequisite delay before starting the calibration.
  // - ADC must be enabled for at least two ADC clock cycles
  BSP_ADC_Enable(p_ADC);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffd2 	bl	8001978 <BSP_ADC_Enable>

  // Hardware prerequisite: delay before starting the calibration.
  //  - Computation of CPU clock cycles corresponding to ADC clock cycles.
  //  - Wait for the expected ADC clock cycles delay
  LL_mDelay(10);
 80019d4:	200a      	movs	r0, #10
 80019d6:	f002 fa85 	bl	8003ee4 <LL_mDelay>

  // 3. Resets ADC calibration registers
  p_ADC->CR2 |= ADC_CR2_RSTCAL;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f043 0208 	orr.w	r2, r3, #8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 80019e6:	4b14      	ldr	r3, [pc, #80]	@ (8001a38 <BSP_ADC_Start_Calibration+0x78>)
 80019e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019ec:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 80019ee:	e003      	b.n	80019f8 <BSP_ADC_Start_Calibration+0x38>
  {
    if (u32_adc_timeout == 0)
 80019f0:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <BSP_ADC_Start_Calibration+0x78>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d018      	beq.n	8001a2a <BSP_ADC_Start_Calibration+0x6a>
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f5      	bne.n	80019f0 <BSP_ADC_Start_Calibration+0x30>
      return;
    }
  }

  // 4. Start ADC calibration
  LL_ADC_StartCalibration(p_ADC);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff5e 	bl	80018c6 <LL_ADC_StartCalibration>

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <BSP_ADC_Start_Calibration+0x78>)
 8001a0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a10:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 8001a12:	e003      	b.n	8001a1c <BSP_ADC_Start_Calibration+0x5c>
  {
    if (u32_adc_timeout == 0)
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <BSP_ADC_Start_Calibration+0x78>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d008      	beq.n	8001a2e <BSP_ADC_Start_Calibration+0x6e>
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f5      	bne.n	8001a14 <BSP_ADC_Start_Calibration+0x54>
 8001a28:	e002      	b.n	8001a30 <BSP_ADC_Start_Calibration+0x70>
      return;
 8001a2a:	bf00      	nop
 8001a2c:	e000      	b.n	8001a30 <BSP_ADC_Start_Calibration+0x70>
    {
      return;
 8001a2e:	bf00      	nop
    }
  }
}
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000063c 	.word	0x2000063c

08001a3c <BSP_ADC_Start_DMA>:

// Using with >= 2 Channel in ADC
void
BSP_ADC_Start_DMA (ADC_TypeDef *p_ADC, uint16_t *pData, uint32_t Length)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  // Enable the ADC peripheral
  BSP_ADC_Enable(p_ADC);
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f7ff ff95 	bl	8001978 <BSP_ADC_Enable>

  // Clear previous flags (EOC)
  LL_ADC_ClearFlag_EOS(p_ADC);
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f7ff ff67 	bl	8001922 <LL_ADC_ClearFlag_EOS>

  LL_ADC_REG_SetDMATransfer(p_ADC, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8001a54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f7ff fef2 	bl	8001842 <LL_ADC_REG_SetDMATransfer>

  BSP_DMA_Start_IT(DMA1,
 8001a5e:	2100      	movs	r1, #0
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff fec3 	bl	80017ec <LL_ADC_DMA_GetRegAddr>
 8001a66:	4601      	mov	r1, r0
 8001a68:	68ba      	ldr	r2, [r7, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	460a      	mov	r2, r1
 8001a72:	2101      	movs	r1, #1
 8001a74:	480a      	ldr	r0, [pc, #40]	@ (8001aa0 <BSP_ADC_Start_DMA+0x64>)
 8001a76:	f000 f9c5 	bl	8001e04 <BSP_DMA_Start_IT>
                   LL_ADC_DMA_GetRegAddr(p_ADC, LL_ADC_DMA_REG_REGULAR_DATA),
                   (uint32_t)pData,
                   Length);

  // Start ADC conversion
  if (LL_ADC_REG_IsTriggerSourceSWStart(p_ADC))
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f7ff fece 	bl	800181c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <BSP_ADC_Start_DMA+0x52>
  {
    // If software start is selected
    LL_ADC_REG_StartConversionSWStart(p_ADC);
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff ff2c 	bl	80018e4 <LL_ADC_REG_StartConversionSWStart>
  else
  {
    // If external trigger is selected
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
  }
}
 8001a8c:	e004      	b.n	8001a98 <BSP_ADC_Start_DMA+0x5c>
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
 8001a8e:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff ff35 	bl	8001902 <LL_ADC_REG_StartConversionExtTrig>
}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40020000 	.word	0x40020000

08001aa4 <BSP_ADC_TimeOut>:

void
BSP_ADC_TimeOut (void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  if (u32_adc_timeout != 0)
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <BSP_ADC_TimeOut+0x20>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d004      	beq.n	8001aba <BSP_ADC_TimeOut+0x16>
  {
    u32_adc_timeout--;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <BSP_ADC_TimeOut+0x20>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	4a03      	ldr	r2, [pc, #12]	@ (8001ac4 <BSP_ADC_TimeOut+0x20>)
 8001ab8:	6013      	str	r3, [r2, #0]
  }
}
 8001aba:	bf00      	nop
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2000063c 	.word	0x2000063c

08001ac8 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b00 <LL_DMA_EnableChannel+0x38>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	4906      	ldr	r1, [pc, #24]	@ (8001b00 <LL_DMA_EnableChannel+0x38>)
 8001ae8:	5c8a      	ldrb	r2, [r1, r2]
 8001aea:	4611      	mov	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	440a      	add	r2, r1
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6013      	str	r3, [r2, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	08006bb4 	.word	0x08006bb4

08001b04 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3b01      	subs	r3, #1
 8001b12:	4a0a      	ldr	r2, [pc, #40]	@ (8001b3c <LL_DMA_DisableChannel+0x38>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	3a01      	subs	r2, #1
 8001b22:	4906      	ldr	r1, [pc, #24]	@ (8001b3c <LL_DMA_DisableChannel+0x38>)
 8001b24:	5c8a      	ldrb	r2, [r1, r2]
 8001b26:	4611      	mov	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	440a      	add	r2, r1
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6013      	str	r3, [r2, #0]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	08006bb4 	.word	0x08006bb4

08001b40 <LL_DMA_GetMode>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  */
__STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	4a06      	ldr	r2, [pc, #24]	@ (8001b68 <LL_DMA_GetMode+0x28>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
                   DMA_CCR_CIRC));
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	08006bb4 	.word	0x08006bb4

08001b6c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <LL_DMA_SetDataLength+0x40>)
 8001b7e:	5cd3      	ldrb	r3, [r2, r3]
 8001b80:	461a      	mov	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4413      	add	r3, r2
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	3a01      	subs	r2, #1
 8001b90:	4906      	ldr	r1, [pc, #24]	@ (8001bac <LL_DMA_SetDataLength+0x40>)
 8001b92:	5c8a      	ldrb	r2, [r1, r2]
 8001b94:	4611      	mov	r1, r2
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	440a      	add	r2, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	08006bb4 	.word	0x08006bb4

08001bb0 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
 8001bbc:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d114      	bne.n	8001bee <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	4a15      	ldr	r2, [pc, #84]	@ (8001c20 <LL_DMA_ConfigAddresses+0x70>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	4a10      	ldr	r2, [pc, #64]	@ (8001c20 <LL_DMA_ConfigAddresses+0x70>)
 8001bde:	5cd3      	ldrb	r3, [r2, r3]
 8001be0:	461a      	mov	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4413      	add	r3, r2
 8001be6:	461a      	mov	r2, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8001bec:	e013      	b.n	8001c16 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	@ (8001c20 <LL_DMA_ConfigAddresses+0x70>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	4a06      	ldr	r2, [pc, #24]	@ (8001c20 <LL_DMA_ConfigAddresses+0x70>)
 8001c08:	5cd3      	ldrb	r3, [r2, r3]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4413      	add	r3, r2
 8001c10:	461a      	mov	r2, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	60d3      	str	r3, [r2, #12]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	08006bb4 	.word	0x08006bb4

08001c24 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	605a      	str	r2, [r3, #4]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	605a      	str	r2, [r3, #4]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	605a      	str	r2, [r3, #4]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <LL_DMA_EnableIT_TC+0x38>)
 8001ce8:	5cd3      	ldrb	r3, [r2, r3]
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	3a01      	subs	r2, #1
 8001cf6:	4906      	ldr	r1, [pc, #24]	@ (8001d10 <LL_DMA_EnableIT_TC+0x38>)
 8001cf8:	5c8a      	ldrb	r2, [r1, r2]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	440a      	add	r2, r1
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6013      	str	r3, [r2, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	08006bb4 	.word	0x08006bb4

08001d14 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <LL_DMA_EnableIT_TE+0x38>)
 8001d24:	5cd3      	ldrb	r3, [r2, r3]
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	3a01      	subs	r2, #1
 8001d32:	4906      	ldr	r1, [pc, #24]	@ (8001d4c <LL_DMA_EnableIT_TE+0x38>)
 8001d34:	5c8a      	ldrb	r2, [r1, r2]
 8001d36:	4611      	mov	r1, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	440a      	add	r2, r1
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	6013      	str	r3, [r2, #0]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	08006bb4 	.word	0x08006bb4

08001d50 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <LL_DMA_DisableIT_TC+0x38>)
 8001d60:	5cd3      	ldrb	r3, [r2, r3]
 8001d62:	461a      	mov	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	3a01      	subs	r2, #1
 8001d6e:	4906      	ldr	r1, [pc, #24]	@ (8001d88 <LL_DMA_DisableIT_TC+0x38>)
 8001d70:	5c8a      	ldrb	r2, [r1, r2]
 8001d72:	4611      	mov	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	440a      	add	r2, r1
 8001d78:	f023 0302 	bic.w	r3, r3, #2
 8001d7c:	6013      	str	r3, [r2, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	08006bb4 	.word	0x08006bb4

08001d8c <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc4 <LL_DMA_DisableIT_HT+0x38>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	3a01      	subs	r2, #1
 8001daa:	4906      	ldr	r1, [pc, #24]	@ (8001dc4 <LL_DMA_DisableIT_HT+0x38>)
 8001dac:	5c8a      	ldrb	r2, [r1, r2]
 8001dae:	4611      	mov	r1, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	440a      	add	r2, r1
 8001db4:	f023 0304 	bic.w	r3, r3, #4
 8001db8:	6013      	str	r3, [r2, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	08006bb4 	.word	0x08006bb4

08001dc8 <LL_DMA_DisableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LL_DMA_DisableIT_TE+0x38>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	3a01      	subs	r2, #1
 8001de6:	4906      	ldr	r1, [pc, #24]	@ (8001e00 <LL_DMA_DisableIT_TE+0x38>)
 8001de8:	5c8a      	ldrb	r2, [r1, r2]
 8001dea:	4611      	mov	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	440a      	add	r2, r1
 8001df0:	f023 0308 	bic.w	r3, r3, #8
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	08006bb4 	.word	0x08006bb4

08001e04 <BSP_DMA_Start_IT>:
BSP_DMA_Start_IT (DMA_TypeDef *p_DMA,
                  uint32_t     Channel,
                  uint32_t     SrcAddress,
                  uint32_t     DstAddress,
                  uint32_t     DataLength)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	603b      	str	r3, [r7, #0]
  LL_DMA_DisableChannel(p_DMA, Channel);
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff fe75 	bl	8001b04 <LL_DMA_DisableChannel>

  LL_DMA_ConfigAddresses(p_DMA,
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f7ff fec3 	bl	8001bb0 <LL_DMA_ConfigAddresses>
                         Channel,
                         SrcAddress,
                         (uint32_t)DstAddress,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  LL_DMA_SetDataLength(p_DMA, Channel, DataLength);
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f7ff fe9c 	bl	8001b6c <LL_DMA_SetDataLength>

//  LL_DMA_EnableIT_HT(p_DMA, Channel);
  LL_DMA_EnableIT_TC(p_DMA, Channel);
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff ff4e 	bl	8001cd8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(p_DMA, Channel);
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	f7ff ff68 	bl	8001d14 <LL_DMA_EnableIT_TE>

  LL_DMA_EnableChannel(p_DMA, Channel);
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f7ff fe3e 	bl	8001ac8 <LL_DMA_EnableChannel>
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <BSP_DMA_IRQ_Channel1_Handler>:
 * `DMA_TypeDef`, which is likely a data structure representing a Direct Memory
 * Access (DMA) controller in a micro-controller or embedded system.
 */
flagIRQ_dma_t
BSP_DMA_IRQ_Channel1_Handler (DMA_TypeDef *p_DMA)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Half Transfer Complete Interrupt management ******************************/
  if (LL_DMA_IsActiveFlag_HT1(p_DMA))
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fef3 	bl	8001c48 <LL_DMA_IsActiveFlag_HT1>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00f      	beq.n	8001e88 <BSP_DMA_IRQ_Channel1_Handler+0x34>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8001e68:	2101      	movs	r1, #1
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe68 	bl	8001b40 <LL_DMA_GetMode>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <BSP_DMA_IRQ_Channel1_Handler+0x2a>
    {
      LL_DMA_DisableIT_HT(p_DMA, LL_DMA_CHANNEL_1);
 8001e76:	2101      	movs	r1, #1
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff87 	bl	8001d8c <LL_DMA_DisableIT_HT>
    }
    LL_DMA_ClearFlag_HT1(p_DMA);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ff12 	bl	8001ca8 <LL_DMA_ClearFlag_HT1>
    return FLAG_HALF_TRANSFER_COMPLETE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e02c      	b.n	8001ee2 <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if (LL_DMA_IsActiveFlag_TC1(p_DMA))
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff fecb 	bl	8001c24 <LL_DMA_IsActiveFlag_TC1>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00f      	beq.n	8001eb4 <BSP_DMA_IRQ_Channel1_Handler+0x60>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8001e94:	2101      	movs	r1, #1
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fe52 	bl	8001b40 <LL_DMA_GetMode>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d103      	bne.n	8001eaa <BSP_DMA_IRQ_Channel1_Handler+0x56>
    {
      LL_DMA_DisableIT_TC(p_DMA, LL_DMA_CHANNEL_1);
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff53 	bl	8001d50 <LL_DMA_DisableIT_TC>
    }
    LL_DMA_ClearFlag_TC1(p_DMA);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fef0 	bl	8001c90 <LL_DMA_ClearFlag_TC1>
    return FLAG_TRANSFER_COMPLETE;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e016      	b.n	8001ee2 <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Error Interrupt management **************************************/
  else if (LL_DMA_IsActiveFlag_TE1(p_DMA))
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fed9 	bl	8001c6c <LL_DMA_IsActiveFlag_TE1>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00f      	beq.n	8001ee0 <BSP_DMA_IRQ_Channel1_Handler+0x8c>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff fe3c 	bl	8001b40 <LL_DMA_GetMode>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <BSP_DMA_IRQ_Channel1_Handler+0x82>
    {
      LL_DMA_DisableIT_TE(p_DMA, LL_DMA_CHANNEL_1);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff79 	bl	8001dc8 <LL_DMA_DisableIT_TE>
    }
    LL_DMA_ClearFlag_TE1(p_DMA);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fef2 	bl	8001cc0 <LL_DMA_ClearFlag_TE1>
    return FLAG_TRANSFER_ERROR;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e000      	b.n	8001ee2 <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  return FLAG_NONE;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	@ (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f7ff ffc2 	bl	8001eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	@ (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk);
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <BSP_SYSTICK_TimerStart+0x18>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a03      	ldr	r2, [pc, #12]	@ (8001f9c <BSP_SYSTICK_TimerStart+0x18>)
 8001f8e:	f043 0303 	orr.w	r3, r3, #3
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	e000e010 	.word	0xe000e010

08001fa0 <BSP_SYSTICK_TimerInit>:
 * This function configures the SysTick timer to generate interrupts at a rate
 * of 1 millisecond, based on the system core clock.
 */
void
BSP_SYSTICK_TimerInit (void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  SysTick_Config(SystemCoreClock / 1000);
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <BSP_SYSTICK_TimerInit+0x1c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <BSP_SYSTICK_TimerInit+0x20>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ffc5 	bl	8001f40 <SysTick_Config>
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000064 	.word	0x20000064
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	@ 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	330c      	adds	r3, #12
 8001fd0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	330c      	adds	r3, #12
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	61ba      	str	r2, [r7, #24]
 8001fea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fec:	6979      	ldr	r1, [r7, #20]
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	e841 2300 	strex	r3, r2, [r1]
 8001ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e7      	bne.n	8001fcc <LL_USART_EnableIT_RXNE+0x8>
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3724      	adds	r7, #36	@ 0x24
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	330c      	adds	r3, #12
 8002014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	60bb      	str	r3, [r7, #8]
   return(result);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	330c      	adds	r3, #12
 800202a:	69fa      	ldr	r2, [r7, #28]
 800202c:	61ba      	str	r2, [r7, #24]
 800202e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002030:	6979      	ldr	r1, [r7, #20]
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	e841 2300 	strex	r3, r2, [r1]
 8002038:	613b      	str	r3, [r7, #16]
   return(result);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e7      	bne.n	8002010 <LL_USART_EnableIT_TXE+0x8>
}
 8002040:	bf00      	nop
 8002042:	bf00      	nop
 8002044:	3724      	adds	r7, #36	@ 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3314      	adds	r3, #20
 8002058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	e853 3f00 	ldrex	r3, [r3]
 8002060:	60bb      	str	r3, [r7, #8]
   return(result);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3314      	adds	r3, #20
 800206e:	69fa      	ldr	r2, [r7, #28]
 8002070:	61ba      	str	r2, [r7, #24]
 8002072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	e841 2300 	strex	r3, r2, [r1]
 800207c:	613b      	str	r3, [r7, #16]
   return(result);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e7      	bne.n	8002054 <LL_USART_EnableIT_ERROR+0x8>
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	330c      	adds	r3, #12
 800209c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	e853 3f00 	ldrex	r3, [r3]
 80020a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	f023 0320 	bic.w	r3, r3, #32
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	330c      	adds	r3, #12
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	61ba      	str	r2, [r7, #24]
 80020b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b8:	6979      	ldr	r1, [r7, #20]
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	e841 2300 	strex	r3, r2, [r1]
 80020c0:	613b      	str	r3, [r7, #16]
   return(result);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e7      	bne.n	8002098 <LL_USART_DisableIT_RXNE+0x8>
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  uartstdio_device->e_uart_irqn = uart_irqn;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	79fa      	ldrb	r2, [r7, #7]
 80020ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	334c      	adds	r3, #76	@ 0x4c
 80020f6:	4618      	mov	r0, r3
 80020f8:	f001 ff26 	bl	8003f48 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4618      	mov	r0, r3
 8002100:	f001 ff22 	bl	8003f48 <RING_BUFFER_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 8002104:	68b8      	ldr	r0, [r7, #8]
 8002106:	f7ff ffa1 	bl	800204c <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 800210a:	68b8      	ldr	r0, [r7, #8]
 800210c:	f7ff ff5a 	bl	8001fc4 <LL_USART_EnableIT_RXNE>
}
 8002110:	bf00      	nop
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4618      	mov	r0, r3
 8002124:	f001 ff34 	bl	8003f90 <RING_BUFFER_Is_Empty>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 8002148:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800214c:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 800214e:	e005      	b.n	800215c <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d024      	beq.n	80021a0 <BSP_UART_SendChar+0x64>
    {
      return;
    }
    u32_uart_timeout--;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3b01      	subs	r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	334c      	adds	r3, #76	@ 0x4c
 8002160:	4618      	mov	r0, r3
 8002162:	f001 ff25 	bl	8003fb0 <RING_BUFFER_Is_Full>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f1      	bne.n	8002150 <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff8c 	bl	8002090 <LL_USART_DisableIT_RXNE>
  RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	334c      	adds	r3, #76	@ 0x4c
 800217c:	78fa      	ldrb	r2, [r7, #3]
 800217e:	4611      	mov	r1, r2
 8002180:	4618      	mov	r0, r3
 8002182:	f001 ff25 	bl	8003fd0 <RING_BUFFER_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff19 	bl	8001fc4 <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff35 	bl	8002008 <LL_USART_EnableIT_TXE>
 800219e:	e000      	b.n	80021a2 <BSP_UART_SendChar+0x66>
      return;
 80021a0:	bf00      	nop
}
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  while (*s)
 80021b2:	e007      	b.n	80021c4 <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	603a      	str	r2, [r7, #0]
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff ffbc 	bl	800213c <BSP_UART_SendChar>
  while (*s)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f3      	bne.n	80021b4 <BSP_UART_SendString+0xc>
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 80021d6:	b590      	push	{r4, r7, lr}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 80021de:	2400      	movs	r4, #0
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f001 fed4 	bl	8003f90 <RING_BUFFER_Is_Empty>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f083 0301 	eor.w	r3, r3, #1
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <BSP_UART_ReadChar+0x46>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff48 	bl	8002090 <LL_USART_DisableIT_RXNE>
    c = (char)RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4618      	mov	r0, r3
 8002204:	f001 ff09 	bl	800401a <RING_BUFFER_Pull_Data>
 8002208:	4603      	mov	r3, r0
 800220a:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fed6 	bl	8001fc4 <LL_USART_EnableIT_RXNE>
    return c;
 8002218:	4623      	mov	r3, r4
 800221a:	e000      	b.n	800221e <BSP_UART_ReadChar+0x48>
  }
  return c;
 800221c:	4623      	mov	r3, r4
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bd90      	pop	{r4, r7, pc}
	...

08002228 <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <BSP_UART_TimeOut+0x20>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8002234:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <BSP_UART_TimeOut+0x20>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3b01      	subs	r3, #1
 800223a:	4a03      	ldr	r2, [pc, #12]	@ (8002248 <BSP_UART_TimeOut+0x20>)
 800223c:	6013      	str	r3, [r2, #0]
  }
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000640 	.word	0x20000640

0800224c <__NVIC_SetPriorityGrouping>:
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4906      	ldr	r1, [pc, #24]	@ (80022e4 <__NVIC_EnableIRQ+0x34>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	@ (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	@ (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	@ 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	bc80      	pop	{r7}
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_REG_SetSequencerRanks>:
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	@ 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	332c      	adds	r3, #44	@ 0x2c
 80023b0:	4619      	mov	r1, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023b8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80023bc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	fa92 f2a2 	rbit	r2, r2
 80023c4:	617a      	str	r2, [r7, #20]
  return result;
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	fab2 f282 	clz	r2, r2
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	40d3      	lsrs	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	211f      	movs	r1, #31
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	401a      	ands	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f003 011f 	and.w	r1, r3, #31
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	431a      	orrs	r2, r3
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	3724      	adds	r7, #36	@ 0x24
 8002404:	46bd      	mov	sp, r7
 8002406:	bc80      	pop	{r7}
 8002408:	4770      	bx	lr

0800240a <LL_ADC_SetChannelSamplingTime>:
{
 800240a:	b480      	push	{r7}
 800240c:	b08d      	sub	sp, #52	@ 0x34
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	330c      	adds	r3, #12
 800241a:	4619      	mov	r1, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	fa92 f2a2 	rbit	r2, r2
 800242e:	617a      	str	r2, [r7, #20]
  return result;
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	fab2 f282 	clz	r2, r2
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	40d3      	lsrs	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(*preg,
 8002440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800244a:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800244e:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6a39      	ldr	r1, [r7, #32]
 8002452:	fa91 f1a1 	rbit	r1, r1
 8002456:	61f9      	str	r1, [r7, #28]
  return result;
 8002458:	69f9      	ldr	r1, [r7, #28]
 800245a:	fab1 f181 	clz	r1, r1
 800245e:	b2c9      	uxtb	r1, r1
 8002460:	40cb      	lsrs	r3, r1
 8002462:	2107      	movs	r1, #7
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8002472:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8002476:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800247a:	fa91 f1a1 	rbit	r1, r1
 800247e:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8002480:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002482:	fab1 f181 	clz	r1, r1
 8002486:	b2c9      	uxtb	r1, r1
 8002488:	40cb      	lsrs	r3, r1
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	fa01 f303 	lsl.w	r3, r1, r3
 8002490:	431a      	orrs	r2, r3
 8002492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002494:	601a      	str	r2, [r3, #0]
}
 8002496:	bf00      	nop
 8002498:	3734      	adds	r7, #52	@ 0x34
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <LL_DMA_SetDataTransferDirection>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	4a0c      	ldr	r2, [pc, #48]	@ (80024e4 <LL_DMA_SetDataTransferDirection+0x44>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024c0:	f023 0310 	bic.w	r3, r3, #16
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	3a01      	subs	r2, #1
 80024c8:	4906      	ldr	r1, [pc, #24]	@ (80024e4 <LL_DMA_SetDataTransferDirection+0x44>)
 80024ca:	5c8a      	ldrb	r2, [r1, r2]
 80024cc:	4611      	mov	r1, r2
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	440a      	add	r2, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	08006bbc 	.word	0x08006bbc

080024e8 <LL_DMA_SetMode>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002528 <LL_DMA_SetMode+0x40>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	461a      	mov	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 0220 	bic.w	r2, r3, #32
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3b01      	subs	r3, #1
 800250c:	4906      	ldr	r1, [pc, #24]	@ (8002528 <LL_DMA_SetMode+0x40>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	4619      	mov	r1, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	440b      	add	r3, r1
 8002516:	4619      	mov	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	08006bbc 	.word	0x08006bbc

0800252c <LL_DMA_SetPeriphIncMode>:
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	3b01      	subs	r3, #1
 800253c:	4a0b      	ldr	r2, [pc, #44]	@ (800256c <LL_DMA_SetPeriphIncMode+0x40>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	461a      	mov	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4413      	add	r3, r2
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	3b01      	subs	r3, #1
 8002550:	4906      	ldr	r1, [pc, #24]	@ (800256c <LL_DMA_SetPeriphIncMode+0x40>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	4619      	mov	r1, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	440b      	add	r3, r1
 800255a:	4619      	mov	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bc80      	pop	{r7}
 800256a:	4770      	bx	lr
 800256c:	08006bbc 	.word	0x08006bbc

08002570 <LL_DMA_SetMemoryIncMode>:
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3b01      	subs	r3, #1
 8002580:	4a0b      	ldr	r2, [pc, #44]	@ (80025b0 <LL_DMA_SetMemoryIncMode+0x40>)
 8002582:	5cd3      	ldrb	r3, [r2, r3]
 8002584:	461a      	mov	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	4413      	add	r3, r2
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	3b01      	subs	r3, #1
 8002594:	4906      	ldr	r1, [pc, #24]	@ (80025b0 <LL_DMA_SetMemoryIncMode+0x40>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	4619      	mov	r1, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	440b      	add	r3, r1
 800259e:	4619      	mov	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	08006bbc 	.word	0x08006bbc

080025b4 <LL_DMA_SetPeriphSize>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <LL_DMA_SetPeriphSize+0x40>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4413      	add	r3, r2
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	4906      	ldr	r1, [pc, #24]	@ (80025f4 <LL_DMA_SetPeriphSize+0x40>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	4619      	mov	r1, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	440b      	add	r3, r1
 80025e2:	4619      	mov	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	08006bbc 	.word	0x08006bbc

080025f8 <LL_DMA_SetMemorySize>:
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	4a0b      	ldr	r2, [pc, #44]	@ (8002638 <LL_DMA_SetMemorySize+0x40>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	461a      	mov	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	3b01      	subs	r3, #1
 800261c:	4906      	ldr	r1, [pc, #24]	@ (8002638 <LL_DMA_SetMemorySize+0x40>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	4619      	mov	r1, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	440b      	add	r3, r1
 8002626:	4619      	mov	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]
}
 800262e:	bf00      	nop
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr
 8002638:	08006bbc 	.word	0x08006bbc

0800263c <LL_DMA_SetChannelPriorityLevel>:
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	3b01      	subs	r3, #1
 800264c:	4a0b      	ldr	r2, [pc, #44]	@ (800267c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3b01      	subs	r3, #1
 8002660:	4906      	ldr	r1, [pc, #24]	@ (800267c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	4619      	mov	r1, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	440b      	add	r3, r1
 800266a:	4619      	mov	r1, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4313      	orrs	r3, r2
 8002670:	600b      	str	r3, [r1, #0]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	08006bbc 	.word	0x08006bbc

08002680 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002684:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <LL_RCC_HSE_Enable+0x18>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a03      	ldr	r2, [pc, #12]	@ (8002698 <LL_RCC_HSE_Enable+0x18>)
 800268a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000

0800269c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <LL_RCC_HSE_IsReady+0x20>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026ac:	bf0c      	ite	eq
 80026ae:	2301      	moveq	r3, #1
 80026b0:	2300      	movne	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	40021000 	.word	0x40021000

080026c0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <LL_RCC_SetSysClkSource+0x24>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f023 0203 	bic.w	r2, r3, #3
 80026d0:	4904      	ldr	r1, [pc, #16]	@ (80026e4 <LL_RCC_SetSysClkSource+0x24>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40021000 	.word	0x40021000

080026e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <LL_RCC_GetSysClkSource+0x14>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 030c 	and.w	r3, r3, #12
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bc80      	pop	{r7}
 80026fa:	4770      	bx	lr
 80026fc:	40021000 	.word	0x40021000

08002700 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <LL_RCC_SetAHBPrescaler+0x24>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002710:	4904      	ldr	r1, [pc, #16]	@ (8002724 <LL_RCC_SetAHBPrescaler+0x24>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4313      	orrs	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000

08002728 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002730:	4b06      	ldr	r3, [pc, #24]	@ (800274c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002738:	4904      	ldr	r1, [pc, #16]	@ (800274c <LL_RCC_SetAPB1Prescaler+0x24>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000

08002750 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002758:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <LL_RCC_SetAPB2Prescaler+0x24>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002760:	4904      	ldr	r1, [pc, #16]	@ (8002774 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000

08002778 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <LL_RCC_SetADCClockSource+0x24>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002788:	4904      	ldr	r1, [pc, #16]	@ (800279c <LL_RCC_SetADCClockSource+0x24>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40021000 	.word	0x40021000

080027a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <LL_RCC_PLL_Enable+0x18>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a03      	ldr	r2, [pc, #12]	@ (80027b8 <LL_RCC_PLL_Enable+0x18>)
 80027aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027ae:	6013      	str	r3, [r2, #0]
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr
 80027b8:	40021000 	.word	0x40021000

080027bc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <LL_RCC_PLL_IsReady+0x20>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027cc:	bf0c      	ite	eq
 80027ce:	2301      	moveq	r3, #1
 80027d0:	2300      	movne	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	40021000 	.word	0x40021000

080027e0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80027ea:	4b08      	ldr	r3, [pc, #32]	@ (800280c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	430b      	orrs	r3, r1
 80027fc:	4903      	ldr	r1, [pc, #12]	@ (800280c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	40021000 	.word	0x40021000

08002810 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	4907      	ldr	r1, [pc, #28]	@ (800283c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4313      	orrs	r3, r2
 8002822:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000

08002840 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002848:	4b08      	ldr	r3, [pc, #32]	@ (800286c <LL_APB1_GRP1_EnableClock+0x2c>)
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	4907      	ldr	r1, [pc, #28]	@ (800286c <LL_APB1_GRP1_EnableClock+0x2c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4313      	orrs	r3, r2
 8002852:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800285e:	68fb      	ldr	r3, [r7, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000

08002870 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002878:	4b08      	ldr	r3, [pc, #32]	@ (800289c <LL_APB2_GRP1_EnableClock+0x2c>)
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	4907      	ldr	r1, [pc, #28]	@ (800289c <LL_APB2_GRP1_EnableClock+0x2c>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <LL_APB2_GRP1_EnableClock+0x2c>)
 8002886:	699a      	ldr	r2, [r3, #24]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4013      	ands	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40021000 	.word	0x40021000

080028a0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <LL_FLASH_SetLatency+0x24>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 0207 	bic.w	r2, r3, #7
 80028b0:	4904      	ldr	r1, [pc, #16]	@ (80028c4 <LL_FLASH_SetLatency+0x24>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40022000 	.word	0x40022000

080028c8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <LL_FLASH_GetLatency+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	40022000 	.word	0x40022000

080028e0 <LL_TIM_DisableARRPreload>:
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	601a      	str	r2, [r3, #0]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr

080028fe <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002910:	f023 0307 	bic.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	605a      	str	r2, [r3, #4]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	609a      	str	r2, [r3, #8]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_USART_Enable>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <LL_USART_ConfigAsyncMode>:
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80029b0:	b490      	push	{r4, r7}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	0e1b      	lsrs	r3, r3, #24
 80029c4:	4413      	add	r3, r2
 80029c6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80029c8:	6822      	ldr	r2, [r4, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa93 f3a3 	rbit	r3, r3
 80029d4:	613b      	str	r3, [r7, #16]
  return result;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	210f      	movs	r1, #15
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	401a      	ands	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	61bb      	str	r3, [r7, #24]
  return result;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	fab3 f383 	clz	r3, r3
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	4313      	orrs	r3, r2
 8002a08:	6023      	str	r3, [r4, #0]
}
 8002a0a:	bf00      	nop
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc90      	pop	{r4, r7}
 8002a12:	4770      	bx	lr

08002a14 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	0a1b      	lsrs	r3, r3, #8
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa93 f3a3 	rbit	r3, r3
 8002a38:	613b      	str	r3, [r7, #16]
  return result;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4619      	mov	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	408b      	lsls	r3, r1
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	60da      	str	r2, [r3, #12]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	615a      	str	r2, [r3, #20]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
	...

08002a78 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a84:	4a03      	ldr	r2, [pc, #12]	@ (8002a94 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8002a86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a8a:	6053      	str	r3, [r2, #4]
}
 8002a8c:	bf00      	nop
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40010000 	.word	0x40010000

08002a98 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8002aa2:	4a13      	ldr	r2, [pc, #76]	@ (8002af0 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	0c1b      	lsrs	r3, r3, #16
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	ea02 0103 	and.w	r1, r2, r3
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	0c1b      	lsrs	r3, r3, #16
 8002abc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	60bb      	str	r3, [r7, #8]
  return result;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	fa03 f202 	lsl.w	r2, r3, r2
 8002ad6:	4806      	ldr	r0, [pc, #24]	@ (8002af0 <LL_GPIO_AF_SetEXTISource+0x58>)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	430a      	orrs	r2, r1
 8002ade:	3302      	adds	r3, #2
 8002ae0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	40010000 	.word	0x40010000

08002af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8002af8:	2001      	movs	r0, #1
 8002afa:	f7ff feb9 	bl	8002870 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8002afe:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8002b02:	f7ff fe9d 	bl	8002840 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b06:	2003      	movs	r0, #3
 8002b08:	f7ff fba0 	bl	800224c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002b0c:	f7ff fbc2 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2200      	movs	r2, #0
 8002b14:	210f      	movs	r1, #15
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fc10 	bl	800233c <NVIC_EncodePriority>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f7ff fbe0 	bl	80022e8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8002b28:	f7ff ffa6 	bl	8002a78 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b2c:	f000 f83a 	bl	8002ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b30:	f000 fa4e 	bl	8002fd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002b34:	f000 fa34 	bl	8002fa0 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b38:	f000 f876 	bl	8002c28 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002b3c:	f000 f970 	bl	8002e20 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002b40:	f000 f9d6 	bl	8002ef0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002b44:	f000 f90a 	bl	8002d5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b48:	f000 f93a 	bl	8002dc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Application Initialize
  APP_READ_DATA_Init();
 8002b4c:	f7fe fc96 	bl	800147c <APP_READ_DATA_Init>
  APP_CALCULATOR_PF_Init();
 8002b50:	f7fe fb3e 	bl	80011d0 <APP_CALCULATOR_PF_Init>
  APP_DATA_TRANSMISSION_Init();
 8002b54:	f7fe fbfa 	bl	800134c <APP_DATA_TRANSMISSION_Init>
  APP_COMMAND_Init();
 8002b58:	f7fe f9ce 	bl	8000ef8 <APP_COMMAND_Init>

  // Initialize Scheduler
  SCH_Initialize();
 8002b5c:	f001 fa80 	bl	8004060 <SCH_Initialize>

  // Application Create Task
  APP_READ_DATA_CreateTask();
 8002b60:	f7fe fc80 	bl	8001464 <APP_READ_DATA_CreateTask>
  APP_CALCULATOR_PF_CreateTask();
 8002b64:	f7fe fb28 	bl	80011b8 <APP_CALCULATOR_PF_CreateTask>
  APP_DATA_TRANSMISSION_CreateTask();
 8002b68:	f7fe fbe4 	bl	8001334 <APP_DATA_TRANSMISSION_CreateTask>
  APP_COMMAND_CreateTask();
 8002b6c:	f7fe f9e6 	bl	8000f3c <APP_COMMAND_CreateTask>

  // Start Scheduler
  SCH_StartScheduler();
 8002b70:	f001 fa9f 	bl	80040b2 <SCH_StartScheduler>

  // Start ADC - TIM3
  BSP_ADC_Start_Calibration(ADC1);
 8002b74:	4808      	ldr	r0, [pc, #32]	@ (8002b98 <main+0xa4>)
 8002b76:	f7fe ff23 	bl	80019c0 <BSP_ADC_Start_Calibration>
  BSP_ADC_Start_DMA(ADC1, (uint16_t *)s_data_system.u16_adc_value, 2);
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	4907      	ldr	r1, [pc, #28]	@ (8002b9c <main+0xa8>)
 8002b7e:	4806      	ldr	r0, [pc, #24]	@ (8002b98 <main+0xa4>)
 8002b80:	f7fe ff5c 	bl	8001a3c <BSP_ADC_Start_DMA>
  TIM3->CR1 |= TIM_CR1_CEN;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <main+0xac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <main+0xac>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8002b90:	f001 fa96 	bl	80040c0 <SCH_HandleScheduledTask>
 8002b94:	e7fc      	b.n	8002b90 <main+0x9c>
 8002b96:	bf00      	nop
 8002b98:	40012400 	.word	0x40012400
 8002b9c:	200005fc 	.word	0x200005fc
 8002ba0:	40000400 	.word	0x40000400

08002ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002ba8:	2002      	movs	r0, #2
 8002baa:	f7ff fe79 	bl	80028a0 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002bae:	bf00      	nop
 8002bb0:	f7ff fe8a 	bl	80028c8 <LL_FLASH_GetLatency>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d1fa      	bne.n	8002bb0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8002bba:	f7ff fd61 	bl	8002680 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002bbe:	bf00      	nop
 8002bc0:	f7ff fd6c 	bl	800269c <LL_RCC_HSE_IsReady>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d1fa      	bne.n	8002bc0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_7);
 8002bca:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
 8002bce:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002bd2:	f7ff fe05 	bl	80027e0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8002bd6:	f7ff fde3 	bl	80027a0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002bda:	bf00      	nop
 8002bdc:	f7ff fdee 	bl	80027bc <LL_RCC_PLL_IsReady>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d1fa      	bne.n	8002bdc <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f7ff fd8a 	bl	8002700 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002bec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002bf0:	f7ff fd9a 	bl	8002728 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff fdab 	bl	8002750 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002bfa:	2002      	movs	r0, #2
 8002bfc:	f7ff fd60 	bl	80026c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002c00:	bf00      	nop
 8002c02:	f7ff fd71 	bl	80026e8 <LL_RCC_GetSysClkSource>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d1fa      	bne.n	8002c02 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(56000000);
 8002c0c:	4805      	ldr	r0, [pc, #20]	@ (8002c24 <SystemClock_Config+0x80>)
 8002c0e:	f001 f95b 	bl	8003ec8 <LL_Init1msTick>
  LL_SetSystemCoreClock(56000000);
 8002c12:	4804      	ldr	r0, [pc, #16]	@ (8002c24 <SystemClock_Config+0x80>)
 8002c14:	f001 f98a 	bl	8003f2c <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_4);
 8002c18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002c1c:	f7ff fdac 	bl	8002778 <LL_RCC_SetADCClockSource>
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	03567e00 	.word	0x03567e00

08002c28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b08e      	sub	sp, #56	@ 0x38
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8002c2e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002c3c:	f107 0318 	add.w	r3, r7, #24
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	1d3b      	adds	r3, r7, #4
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	609a      	str	r2, [r3, #8]
 8002c56:	60da      	str	r2, [r3, #12]
 8002c58:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8002c5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002c5e:	f7ff fe07 	bl	8002870 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002c62:	2004      	movs	r0, #4
 8002c64:	f7ff fe04 	bl	8002870 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8002c68:	f240 6306 	movw	r3, #1542	@ 0x606
 8002c6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	4619      	mov	r1, r3
 8002c76:	4834      	ldr	r0, [pc, #208]	@ (8002d48 <MX_ADC1_Init+0x120>)
 8002c78:	f000 fe09 	bl	800388e <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2101      	movs	r1, #1
 8002c80:	4832      	ldr	r0, [pc, #200]	@ (8002d4c <MX_ADC1_Init+0x124>)
 8002c82:	f7ff fc0d 	bl	80024a0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4830      	ldr	r0, [pc, #192]	@ (8002d4c <MX_ADC1_Init+0x124>)
 8002c8c:	f7ff fcd6 	bl	800263c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002c90:	2220      	movs	r2, #32
 8002c92:	2101      	movs	r1, #1
 8002c94:	482d      	ldr	r0, [pc, #180]	@ (8002d4c <MX_ADC1_Init+0x124>)
 8002c96:	f7ff fc27 	bl	80024e8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	482b      	ldr	r0, [pc, #172]	@ (8002d4c <MX_ADC1_Init+0x124>)
 8002ca0:	f7ff fc44 	bl	800252c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002ca4:	2280      	movs	r2, #128	@ 0x80
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4828      	ldr	r0, [pc, #160]	@ (8002d4c <MX_ADC1_Init+0x124>)
 8002caa:	f7ff fc61 	bl	8002570 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 8002cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4825      	ldr	r0, [pc, #148]	@ (8002d4c <MX_ADC1_Init+0x124>)
 8002cb6:	f7ff fc7d 	bl	80025b4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 8002cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4822      	ldr	r0, [pc, #136]	@ (8002d4c <MX_ADC1_Init+0x124>)
 8002cc2:	f7ff fc99 	bl	80025f8 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8002cca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cce:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002cd0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	481e      	ldr	r0, [pc, #120]	@ (8002d50 <MX_ADC1_Init+0x128>)
 8002cd8:	f000 fba4 	bl	8003424 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002ce0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	481a      	ldr	r0, [pc, #104]	@ (8002d50 <MX_ADC1_Init+0x128>)
 8002ce8:	f000 fb6a 	bl	80033c0 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 8002cec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002cf0:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8002cf2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002cf6:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8002d06:	f107 0318 	add.w	r3, r7, #24
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4810      	ldr	r0, [pc, #64]	@ (8002d50 <MX_ADC1_Init+0x128>)
 8002d0e:	f000 fbb0 	bl	8003472 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8002d12:	4a10      	ldr	r2, [pc, #64]	@ (8002d54 <MX_ADC1_Init+0x12c>)
 8002d14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d18:	480d      	ldr	r0, [pc, #52]	@ (8002d50 <MX_ADC1_Init+0x128>)
 8002d1a:	f7ff fb41 	bl	80023a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002d1e:	2207      	movs	r2, #7
 8002d20:	490c      	ldr	r1, [pc, #48]	@ (8002d54 <MX_ADC1_Init+0x12c>)
 8002d22:	480b      	ldr	r0, [pc, #44]	@ (8002d50 <MX_ADC1_Init+0x128>)
 8002d24:	f7ff fb71 	bl	800240a <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8002d28:	4a0b      	ldr	r2, [pc, #44]	@ (8002d58 <MX_ADC1_Init+0x130>)
 8002d2a:	f240 2105 	movw	r1, #517	@ 0x205
 8002d2e:	4808      	ldr	r0, [pc, #32]	@ (8002d50 <MX_ADC1_Init+0x128>)
 8002d30:	f7ff fb36 	bl	80023a0 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8002d34:	2207      	movs	r2, #7
 8002d36:	4908      	ldr	r1, [pc, #32]	@ (8002d58 <MX_ADC1_Init+0x130>)
 8002d38:	4805      	ldr	r0, [pc, #20]	@ (8002d50 <MX_ADC1_Init+0x128>)
 8002d3a:	f7ff fb66 	bl	800240a <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d3e:	bf00      	nop
 8002d40:	3738      	adds	r7, #56	@ 0x38
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40010800 	.word	0x40010800
 8002d4c:	40020000 	.word	0x40020000
 8002d50:	40012400 	.word	0x40012400
 8002d54:	02300001 	.word	0x02300001
 8002d58:	02600002 	.word	0x02600002

08002d5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	605a      	str	r2, [r3, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
 8002d6c:	60da      	str	r2, [r3, #12]
 8002d6e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7ff fd65 	bl	8002840 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8002d7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d82:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002d90:	f000 ff2c 	bl	8003bec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002d94:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002d98:	f7ff fda2 	bl	80028e0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002da2:	f7ff fdac 	bl	80028fe <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002da6:	2100      	movs	r1, #0
 8002da8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002dac:	f7ff fdbb 	bl	8002926 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002db0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002db4:	f7ff fdc9 	bl	800294a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002db8:	bf00      	nop
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f7ff fd33 	bl	8002840 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 55999;
 8002dda:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8002dde:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19;
 8002de4:	2313      	movs	r3, #19
 8002de6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	480a      	ldr	r0, [pc, #40]	@ (8002e1c <MX_TIM3_Init+0x5c>)
 8002df2:	f000 fefb 	bl	8003bec <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002df6:	4809      	ldr	r0, [pc, #36]	@ (8002e1c <MX_TIM3_Init+0x5c>)
 8002df8:	f7ff fd72 	bl	80028e0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4807      	ldr	r0, [pc, #28]	@ (8002e1c <MX_TIM3_Init+0x5c>)
 8002e00:	f7ff fd7d 	bl	80028fe <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 8002e04:	2120      	movs	r1, #32
 8002e06:	4805      	ldr	r0, [pc, #20]	@ (8002e1c <MX_TIM3_Init+0x5c>)
 8002e08:	f7ff fd8d 	bl	8002926 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002e0c:	4803      	ldr	r0, [pc, #12]	@ (8002e1c <MX_TIM3_Init+0x5c>)
 8002e0e:	f7ff fd9c 	bl	800294a <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40000400 	.word	0x40000400

08002e20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	@ 0x30
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	60da      	str	r2, [r3, #12]
 8002e34:	611a      	str	r2, [r3, #16]
 8002e36:	615a      	str	r2, [r3, #20]
 8002e38:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3a:	463b      	mov	r3, r7
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002e48:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002e4c:	f7ff fd10 	bl	8002870 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002e50:	2004      	movs	r0, #4
 8002e52:	f7ff fd0d 	bl	8002870 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002e56:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <MX_USART1_UART_Init+0xc0>)
 8002e58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	463b      	mov	r3, r7
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481e      	ldr	r0, [pc, #120]	@ (8002ee4 <MX_USART1_UART_Init+0xc4>)
 8002e6c:	f000 fd0f 	bl	800388e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002e70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee8 <MX_USART1_UART_Init+0xc8>)
 8002e72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002e74:	2304      	movs	r3, #4
 8002e76:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	463b      	mov	r3, r7
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	4819      	ldr	r0, [pc, #100]	@ (8002ee4 <MX_USART1_UART_Init+0xc4>)
 8002e7e:	f000 fd06 	bl	800388e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8002e82:	f7ff fa07 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2103      	movs	r1, #3
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fa55 	bl	800233c <NVIC_EncodePriority>
 8002e92:	4603      	mov	r3, r0
 8002e94:	4619      	mov	r1, r3
 8002e96:	2025      	movs	r0, #37	@ 0x25
 8002e98:	f7ff fa26 	bl	80022e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002e9c:	2025      	movs	r0, #37	@ 0x25
 8002e9e:	f7ff fa07 	bl	80022b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002ea2:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002ea6:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002eac:	2300      	movs	r3, #0
 8002eae:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002ec0:	f107 0314 	add.w	r3, r7, #20
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4809      	ldr	r0, [pc, #36]	@ (8002eec <MX_USART1_UART_Init+0xcc>)
 8002ec8:	f000 ff84 	bl	8003dd4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002ecc:	4807      	ldr	r0, [pc, #28]	@ (8002eec <MX_USART1_UART_Init+0xcc>)
 8002ece:	f7ff fd5a 	bl	8002986 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002ed2:	4806      	ldr	r0, [pc, #24]	@ (8002eec <MX_USART1_UART_Init+0xcc>)
 8002ed4:	f7ff fd48 	bl	8002968 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ed8:	bf00      	nop
 8002eda:	3730      	adds	r7, #48	@ 0x30
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	04020002 	.word	0x04020002
 8002ee4:	40010800 	.word	0x40010800
 8002ee8:	04040004 	.word	0x04040004
 8002eec:	40013800 	.word	0x40013800

08002ef0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08c      	sub	sp, #48	@ 0x30
 8002ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002ef6:	f107 0314 	add.w	r3, r7, #20
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]
 8002f06:	615a      	str	r2, [r3, #20]
 8002f08:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0a:	463b      	mov	r3, r7
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8002f18:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8002f1c:	f7ff fc90 	bl	8002840 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002f20:	2008      	movs	r0, #8
 8002f22:	f7ff fca5 	bl	8002870 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002f26:	4b1a      	ldr	r3, [pc, #104]	@ (8002f90 <MX_USART3_UART_Init+0xa0>)
 8002f28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f2a:	2309      	movs	r3, #9
 8002f2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f36:	463b      	mov	r3, r7
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4816      	ldr	r0, [pc, #88]	@ (8002f94 <MX_USART3_UART_Init+0xa4>)
 8002f3c:	f000 fca7 	bl	800388e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002f40:	4b15      	ldr	r3, [pc, #84]	@ (8002f98 <MX_USART3_UART_Init+0xa8>)
 8002f42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002f44:	2304      	movs	r3, #4
 8002f46:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f48:	463b      	mov	r3, r7
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4811      	ldr	r0, [pc, #68]	@ (8002f94 <MX_USART3_UART_Init+0xa4>)
 8002f4e:	f000 fc9e 	bl	800388e <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002f52:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002f56:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002f64:	230c      	movs	r3, #12
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8002f70:	f107 0314 	add.w	r3, r7, #20
 8002f74:	4619      	mov	r1, r3
 8002f76:	4809      	ldr	r0, [pc, #36]	@ (8002f9c <MX_USART3_UART_Init+0xac>)
 8002f78:	f000 ff2c 	bl	8003dd4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002f7c:	4807      	ldr	r0, [pc, #28]	@ (8002f9c <MX_USART3_UART_Init+0xac>)
 8002f7e:	f7ff fd02 	bl	8002986 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002f82:	4806      	ldr	r0, [pc, #24]	@ (8002f9c <MX_USART3_UART_Init+0xac>)
 8002f84:	f7ff fcf0 	bl	8002968 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f88:	bf00      	nop
 8002f8a:	3730      	adds	r7, #48	@ 0x30
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	04040004 	.word	0x04040004
 8002f94:	40010c00 	.word	0x40010c00
 8002f98:	04080008 	.word	0x04080008
 8002f9c:	40004800 	.word	0x40004800

08002fa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7ff fc33 	bl	8002810 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8002faa:	f7ff f973 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff f9c1 	bl	800233c <NVIC_EncodePriority>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	200b      	movs	r0, #11
 8002fc0:	f7ff f992 	bl	80022e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fc4:	200b      	movs	r0, #11
 8002fc6:	f7ff f973 	bl	80022b0 <__NVIC_EnableIRQ>

}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8002fd6:	f107 0318 	add.w	r3, r7, #24
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8002fee:	2010      	movs	r0, #16
 8002ff0:	f7ff fc3e 	bl	8002870 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8002ff4:	2020      	movs	r0, #32
 8002ff6:	f7ff fc3b 	bl	8002870 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002ffa:	2004      	movs	r0, #4
 8002ffc:	f7ff fc38 	bl	8002870 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003000:	2008      	movs	r0, #8
 8003002:	f7ff fc35 	bl	8002870 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 8003006:	4939      	ldr	r1, [pc, #228]	@ (80030ec <MX_GPIO_Init+0x11c>)
 8003008:	4839      	ldr	r0, [pc, #228]	@ (80030f0 <MX_GPIO_Init+0x120>)
 800300a:	f7ff fd25 	bl	8002a58 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 800300e:	f248 0180 	movw	r1, #32896	@ 0x8080
 8003012:	4838      	ldr	r0, [pc, #224]	@ (80030f4 <MX_GPIO_Init+0x124>)
 8003014:	f7ff fd20 	bl	8002a58 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 8003018:	4b34      	ldr	r3, [pc, #208]	@ (80030ec <MX_GPIO_Init+0x11c>)
 800301a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800301c:	2301      	movs	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003020:	2302      	movs	r3, #2
 8003022:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4830      	ldr	r0, [pc, #192]	@ (80030f0 <MX_GPIO_Init+0x120>)
 800302e:	f000 fc2e 	bl	800388e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8003032:	f248 0380 	movw	r3, #32896	@ 0x8080
 8003036:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003038:	2301      	movs	r3, #1
 800303a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800303c:	2302      	movs	r3, #2
 800303e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	4619      	mov	r1, r3
 8003048:	482a      	ldr	r0, [pc, #168]	@ (80030f4 <MX_GPIO_Init+0x124>)
 800304a:	f000 fc20 	bl	800388e <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE5);
 800304e:	492a      	ldr	r1, [pc, #168]	@ (80030f8 <MX_GPIO_Init+0x128>)
 8003050:	2000      	movs	r0, #0
 8003052:	f7ff fd21 	bl	8002a98 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE6);
 8003056:	4929      	ldr	r1, [pc, #164]	@ (80030fc <MX_GPIO_Init+0x12c>)
 8003058:	2000      	movs	r0, #0
 800305a:	f7ff fd1d 	bl	8002a98 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 800305e:	2320      	movs	r3, #32
 8003060:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8003062:	2301      	movs	r3, #1
 8003064:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003066:	2300      	movs	r3, #0
 8003068:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800306a:	2301      	movs	r3, #1
 800306c:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800306e:	f107 0318 	add.w	r3, r7, #24
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fad4 	bl	8003620 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8003078:	2340      	movs	r3, #64	@ 0x40
 800307a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 800307c:	2301      	movs	r3, #1
 800307e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003080:	2300      	movs	r3, #0
 8003082:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8003084:	2301      	movs	r3, #1
 8003086:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003088:	f107 0318 	add.w	r3, r7, #24
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fac7 	bl	8003620 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_DOWN);
 8003092:	2200      	movs	r2, #0
 8003094:	f242 0120 	movw	r1, #8224	@ 0x2020
 8003098:	4816      	ldr	r0, [pc, #88]	@ (80030f4 <MX_GPIO_Init+0x124>)
 800309a:	f7ff fcbb 	bl	8002a14 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_DOWN);
 800309e:	2200      	movs	r2, #0
 80030a0:	f244 0140 	movw	r1, #16448	@ 0x4040
 80030a4:	4813      	ldr	r0, [pc, #76]	@ (80030f4 <MX_GPIO_Init+0x124>)
 80030a6:	f7ff fcb5 	bl	8002a14 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 80030aa:	2208      	movs	r2, #8
 80030ac:	f242 0120 	movw	r1, #8224	@ 0x2020
 80030b0:	4810      	ldr	r0, [pc, #64]	@ (80030f4 <MX_GPIO_Init+0x124>)
 80030b2:	f7ff fc7d 	bl	80029b0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 80030b6:	2208      	movs	r2, #8
 80030b8:	f244 0140 	movw	r1, #16448	@ 0x4040
 80030bc:	480d      	ldr	r0, [pc, #52]	@ (80030f4 <MX_GPIO_Init+0x124>)
 80030be:	f7ff fc77 	bl	80029b0 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80030c2:	f7ff f8e7 	bl	8002294 <__NVIC_GetPriorityGrouping>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2200      	movs	r2, #0
 80030ca:	2102      	movs	r1, #2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f935 	bl	800233c <NVIC_EncodePriority>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4619      	mov	r1, r3
 80030d6:	2017      	movs	r0, #23
 80030d8:	f7ff f906 	bl	80022e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80030dc:	2017      	movs	r0, #23
 80030de:	f7ff f8e7 	bl	80022b0 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030e2:	bf00      	nop
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	04e000e0 	.word	0x04e000e0
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40010800 	.word	0x40010800
 80030f8:	00f00001 	.word	0x00f00001
 80030fc:	0f000001 	.word	0x0f000001

08003100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <NMI_Handler+0x4>

08003108 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800310c:	bf00      	nop
 800310e:	e7fd      	b.n	800310c <HardFault_Handler+0x4>

08003110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <MemManage_Handler+0x4>

08003118 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800311c:	bf00      	nop
 800311e:	e7fd      	b.n	800311c <BusFault_Handler+0x4>

08003120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <UsageFault_Handler+0x4>

08003128 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  BSP_ADC_TimeOut();
 8003150:	f7fe fca8 	bl	8001aa4 <BSP_ADC_TimeOut>
  BSP_UART_TimeOut();
 8003154:	f7ff f868 	bl	8002228 <BSP_UART_TimeOut>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}

0800315c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  status = BSP_DMA_IRQ_Channel1_Handler(DMA1);
 8003160:	4806      	ldr	r0, [pc, #24]	@ (800317c <DMA1_Channel1_IRQHandler+0x20>)
 8003162:	f7fe fe77 	bl	8001e54 <BSP_DMA_IRQ_Channel1_Handler>
 8003166:	4603      	mov	r3, r0
 8003168:	461a      	mov	r2, r3
 800316a:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <DMA1_Channel1_IRQHandler+0x24>)
 800316c:	701a      	strb	r2, [r3, #0]
  APP_READ_DATA_HandleDMA_IRQ(status);
 800316e:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <DMA1_Channel1_IRQHandler+0x24>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe f9b4 	bl	80014e0 <APP_READ_DATA_HandleDMA_IRQ>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003178:	bf00      	nop
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40020000 	.word	0x40020000
 8003180:	20000644 	.word	0x20000644

08003184 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  APP_CALCULATOR_PF_EXTI_IRQHandler();
 8003188:	f7fe f83c 	bl	8001204 <APP_CALCULATOR_PF_EXTI_IRQHandler>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}

08003190 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr

0800319c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr

080031aa <_kill>:

int _kill(int pid, int sig)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
 80031b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031b4:	f001 fd92 	bl	8004cdc <__errno>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2216      	movs	r2, #22
 80031bc:	601a      	str	r2, [r3, #0]
  return -1;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <_exit>:

void _exit (int status)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031d2:	f04f 31ff 	mov.w	r1, #4294967295
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffe7 	bl	80031aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <_exit+0x12>

080031e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e00a      	b.n	8003208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f2:	f3af 8000 	nop.w
 80031f6:	4601      	mov	r1, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	b2ca      	uxtb	r2, r1
 8003200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	dbf0      	blt.n	80031f2 <_read+0x12>
  }

  return len;
 8003210:	687b      	ldr	r3, [r7, #4]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e009      	b.n	8003240 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	60ba      	str	r2, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbf1      	blt.n	800322c <_write+0x12>
  }
  return len;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_close>:

int _close(int file)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003278:	605a      	str	r2, [r3, #4]
  return 0;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <_isatty>:

int _isatty(int file)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800328e:	2301      	movs	r3, #1
}
 8003290:	4618      	mov	r0, r3
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032bc:	4a14      	ldr	r2, [pc, #80]	@ (8003310 <_sbrk+0x5c>)
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <_sbrk+0x60>)
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d0:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <_sbrk+0x64>)
 80032d2:	4a12      	ldr	r2, [pc, #72]	@ (800331c <_sbrk+0x68>)
 80032d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <_sbrk+0x64>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d207      	bcs.n	80032f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032e4:	f001 fcfa 	bl	8004cdc <__errno>
 80032e8:	4603      	mov	r3, r0
 80032ea:	220c      	movs	r2, #12
 80032ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ee:	f04f 33ff 	mov.w	r3, #4294967295
 80032f2:	e009      	b.n	8003308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032f4:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <_sbrk+0x64>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032fa:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <_sbrk+0x64>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	4a05      	ldr	r2, [pc, #20]	@ (8003318 <_sbrk+0x64>)
 8003304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003306:	68fb      	ldr	r3, [r7, #12]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20005000 	.word	0x20005000
 8003314:	00000400 	.word	0x00000400
 8003318:	20000648 	.word	0x20000648
 800331c:	200007b0 	.word	0x200007b0

08003320 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800332c:	f7ff fff8 	bl	8003320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003330:	480b      	ldr	r0, [pc, #44]	@ (8003360 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003332:	490c      	ldr	r1, [pc, #48]	@ (8003364 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003334:	4a0c      	ldr	r2, [pc, #48]	@ (8003368 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003338:	e002      	b.n	8003340 <LoopCopyDataInit>

0800333a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800333a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800333c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800333e:	3304      	adds	r3, #4

08003340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003344:	d3f9      	bcc.n	800333a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003346:	4a09      	ldr	r2, [pc, #36]	@ (800336c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003348:	4c09      	ldr	r4, [pc, #36]	@ (8003370 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800334a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800334c:	e001      	b.n	8003352 <LoopFillZerobss>

0800334e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800334e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003350:	3204      	adds	r2, #4

08003352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003354:	d3fb      	bcc.n	800334e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003356:	f001 fcc7 	bl	8004ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800335a:	f7ff fbcb 	bl	8002af4 <main>
  bx lr
 800335e:	4770      	bx	lr
  ldr r0, =_sdata
 8003360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003364:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8003368:	08006f60 	.word	0x08006f60
  ldr r2, =_sbss
 800336c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003370:	200007ac 	.word	0x200007ac

08003374 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003374:	e7fe      	b.n	8003374 <ADC1_2_IRQHandler>

08003376 <LL_ADC_REG_SetSequencerLength>:
{
 8003376:	b480      	push	{r7}
 8003378:	b083      	sub	sp, #12
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <LL_ADC_IsEnabled>:
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bc80      	pop	{r7}
 80033bc:	4770      	bx	lr
	...

080033c0 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80033ce:	4813      	ldr	r0, [pc, #76]	@ (800341c <LL_ADC_CommonInit+0x5c>)
 80033d0:	f7ff ffe3 	bl	800339a <LL_ADC_IsEnabled>
 80033d4:	4604      	mov	r4, r0
 80033d6:	4812      	ldr	r0, [pc, #72]	@ (8003420 <LL_ADC_CommonInit+0x60>)
 80033d8:	f7ff ffdf 	bl	800339a <LL_ADC_IsEnabled>
 80033dc:	4603      	mov	r3, r0
 80033de:	4323      	orrs	r3, r4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d114      	bne.n	800340e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d009      	beq.n	8003400 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	e008      	b.n	8003412 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	e001      	b.n	8003412 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bd90      	pop	{r4, r7, pc}
 800341c:	40012400 	.word	0x40012400
 8003420:	40012800 	.word	0x40012800

08003424 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffb1 	bl	800339a <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d112      	bne.n	8003464 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
 8003462:	e001      	b.n	8003468 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff8a 	bl	800339a <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d131      	bne.n	80034f0 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	6859      	ldr	r1, [r3, #4]
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	e008      	b.n	80034c0 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80034c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	6811      	ldr	r1, [r2, #0]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	68d2      	ldr	r2, [r2, #12]
 80034d4:	4311      	orrs	r1, r2
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	6912      	ldr	r2, [r2, #16]
 80034da:	430a      	orrs	r2, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	4619      	mov	r1, r3
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff44 	bl	8003376 <LL_ADC_REG_SetSequencerLength>
 80034ee:	e001      	b.n	80034f4 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <LL_EXTI_EnableIT_0_31>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <LL_EXTI_EnableIT_0_31+0x20>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4904      	ldr	r1, [pc, #16]	@ (8003520 <LL_EXTI_EnableIT_0_31+0x20>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40010400 	.word	0x40010400

08003524 <LL_EXTI_DisableIT_0_31>:
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <LL_EXTI_DisableIT_0_31+0x20>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	43db      	mvns	r3, r3
 8003534:	4903      	ldr	r1, [pc, #12]	@ (8003544 <LL_EXTI_DisableIT_0_31+0x20>)
 8003536:	4013      	ands	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	40010400 	.word	0x40010400

08003548 <LL_EXTI_EnableEvent_0_31>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003550:	4b05      	ldr	r3, [pc, #20]	@ (8003568 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	4904      	ldr	r1, [pc, #16]	@ (8003568 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	bc80      	pop	{r7}
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010400 	.word	0x40010400

0800356c <LL_EXTI_DisableEvent_0_31>:
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <LL_EXTI_DisableEvent_0_31+0x20>)
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	43db      	mvns	r3, r3
 800357c:	4903      	ldr	r1, [pc, #12]	@ (800358c <LL_EXTI_DisableEvent_0_31+0x20>)
 800357e:	4013      	ands	r3, r2
 8003580:	604b      	str	r3, [r1, #4]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr
 800358c:	40010400 	.word	0x40010400

08003590 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	608b      	str	r3, [r1, #8]
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40010400 	.word	0x40010400

080035b4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80035bc:	4b05      	ldr	r3, [pc, #20]	@ (80035d4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	4903      	ldr	r1, [pc, #12]	@ (80035d4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr
 80035d4:	40010400 	.word	0x40010400

080035d8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80035e0:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4904      	ldr	r1, [pc, #16]	@ (80035f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60cb      	str	r3, [r1, #12]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bc80      	pop	{r7}
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40010400 	.word	0x40010400

080035fc <LL_EXTI_DisableFallingTrig_0_31>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8003604:	4b05      	ldr	r3, [pc, #20]	@ (800361c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	43db      	mvns	r3, r3
 800360c:	4903      	ldr	r1, [pc, #12]	@ (800361c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800360e:	4013      	ands	r3, r2
 8003610:	60cb      	str	r3, [r1, #12]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40010400 	.word	0x40010400

08003620 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8003628:	2300      	movs	r3, #0
 800362a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	791b      	ldrb	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d065      	beq.n	8003700 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d06b      	beq.n	8003714 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	795b      	ldrb	r3, [r3, #5]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d01c      	beq.n	800367e <LL_EXTI_Init+0x5e>
 8003644:	2b02      	cmp	r3, #2
 8003646:	dc25      	bgt.n	8003694 <LL_EXTI_Init+0x74>
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <LL_EXTI_Init+0x32>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d00b      	beq.n	8003668 <LL_EXTI_Init+0x48>
 8003650:	e020      	b.n	8003694 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff ff88 	bl	800356c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff ff4d 	bl	8003500 <LL_EXTI_EnableIT_0_31>
          break;
 8003666:	e018      	b.n	800369a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff59 	bl	8003524 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff66 	bl	8003548 <LL_EXTI_EnableEvent_0_31>
          break;
 800367c:	e00d      	b.n	800369a <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff ff3c 	bl	8003500 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5b 	bl	8003548 <LL_EXTI_EnableEvent_0_31>
          break;
 8003692:	e002      	b.n	800369a <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	73fb      	strb	r3, [r7, #15]
          break;
 8003698:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	799b      	ldrb	r3, [r3, #6]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d038      	beq.n	8003714 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	799b      	ldrb	r3, [r3, #6]
 80036a6:	2b03      	cmp	r3, #3
 80036a8:	d01c      	beq.n	80036e4 <LL_EXTI_Init+0xc4>
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	dc25      	bgt.n	80036fa <LL_EXTI_Init+0xda>
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d002      	beq.n	80036b8 <LL_EXTI_Init+0x98>
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d00b      	beq.n	80036ce <LL_EXTI_Init+0xae>
 80036b6:	e020      	b.n	80036fa <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff9d 	bl	80035fc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff ff62 	bl	8003590 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80036cc:	e022      	b.n	8003714 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ff6e 	bl	80035b4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff ff7b 	bl	80035d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80036e2:	e017      	b.n	8003714 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff51 	bl	8003590 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff ff70 	bl	80035d8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80036f8:	e00c      	b.n	8003714 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
            break;
 80036fe:	e009      	b.n	8003714 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff0d 	bl	8003524 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff ff2c 	bl	800356c <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
}
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <LL_GPIO_SetPinMode>:
{
 800371e:	b490      	push	{r4, r7}
 8003720:	b088      	sub	sp, #32
 8003722:	af00      	add	r7, sp, #0
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	0e1b      	lsrs	r3, r3, #24
 8003732:	4413      	add	r3, r2
 8003734:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	613b      	str	r3, [r7, #16]
  return result;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	210f      	movs	r1, #15
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	401a      	ands	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	61bb      	str	r3, [r7, #24]
  return result;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	fab3 f383 	clz	r3, r3
 800376a:	b2db      	uxtb	r3, r3
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	fa01 f303 	lsl.w	r3, r1, r3
 8003774:	4313      	orrs	r3, r2
 8003776:	6023      	str	r3, [r4, #0]
}
 8003778:	bf00      	nop
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bc90      	pop	{r4, r7}
 8003780:	4770      	bx	lr

08003782 <LL_GPIO_SetPinSpeed>:
{
 8003782:	b490      	push	{r4, r7}
 8003784:	b088      	sub	sp, #32
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	461a      	mov	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	0e1b      	lsrs	r3, r3, #24
 8003796:	4413      	add	r3, r2
 8003798:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800379a:	6822      	ldr	r2, [r4, #0]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	613b      	str	r3, [r7, #16]
  return result;
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	2103      	movs	r1, #3
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	401a      	ands	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	61bb      	str	r3, [r7, #24]
  return result;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	fab3 f383 	clz	r3, r3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	fa01 f303 	lsl.w	r3, r1, r3
 80037d8:	4313      	orrs	r3, r2
 80037da:	6023      	str	r3, [r4, #0]
}
 80037dc:	bf00      	nop
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc90      	pop	{r4, r7}
 80037e4:	4770      	bx	lr

080037e6 <LL_GPIO_SetPinOutputType>:
{
 80037e6:	b490      	push	{r4, r7}
 80037e8:	b088      	sub	sp, #32
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	0e1b      	lsrs	r3, r3, #24
 80037fa:	4413      	add	r3, r2
 80037fc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80037fe:	6822      	ldr	r2, [r4, #0]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa93 f3a3 	rbit	r3, r3
 800380a:	613b      	str	r3, [r7, #16]
  return result;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	2104      	movs	r1, #4
 8003818:	fa01 f303 	lsl.w	r3, r1, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	401a      	ands	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	fa93 f3a3 	rbit	r3, r3
 800382a:	61bb      	str	r3, [r7, #24]
  return result;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	fab3 f383 	clz	r3, r3
 8003832:	b2db      	uxtb	r3, r3
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	fa01 f303 	lsl.w	r3, r1, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	6023      	str	r3, [r4, #0]
}
 8003840:	bf00      	nop
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bc90      	pop	{r4, r7}
 8003848:	4770      	bx	lr

0800384a <LL_GPIO_SetPinPull>:
{
 800384a:	b480      	push	{r7}
 800384c:	b087      	sub	sp, #28
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	0a1b      	lsrs	r3, r3, #8
 800385e:	43db      	mvns	r3, r3
 8003860:	401a      	ands	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa93 f3a3 	rbit	r3, r3
 800386e:	613b      	str	r3, [r7, #16]
  return result;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	fab3 f383 	clz	r3, r3
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4619      	mov	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	408b      	lsls	r3, r1
 800387e:	431a      	orrs	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	60da      	str	r2, [r3, #12]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b088      	sub	sp, #32
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	0c1b      	lsrs	r3, r3, #16
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	60fb      	str	r3, [r7, #12]
  return result;
 80038ae:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80038b0:	fab3 f383 	clz	r3, r3
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80038b8:	e044      	b.n	8003944 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80038ba:	2201      	movs	r2, #1
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	409a      	lsls	r2, r3
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d03a      	beq.n	800393e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	d806      	bhi.n	80038dc <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80038ce:	f240 1201 	movw	r2, #257	@ 0x101
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	e008      	b.n	80038ee <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3b08      	subs	r3, #8
 80038e0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038ec:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d106      	bne.n	8003904 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	461a      	mov	r2, r3
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ffa3 	bl	800384a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	461a      	mov	r2, r3
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff06 	bl	800371e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d003      	beq.n	8003922 <LL_GPIO_Init+0x94>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b09      	cmp	r3, #9
 8003920:	d10d      	bne.n	800393e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	461a      	mov	r2, r3
 8003928:	69b9      	ldr	r1, [r7, #24]
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ff29 	bl	8003782 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	461a      	mov	r2, r3
 8003936:	69b9      	ldr	r1, [r7, #24]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff54 	bl	80037e6 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	3301      	adds	r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1b4      	bne.n	80038ba <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <LL_RCC_GetSysClkSource>:
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003960:	4b03      	ldr	r3, [pc, #12]	@ (8003970 <LL_RCC_GetSysClkSource+0x14>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 030c 	and.w	r3, r3, #12
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40021000 	.word	0x40021000

08003974 <LL_RCC_GetAHBPrescaler>:
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <LL_RCC_GetAHBPrescaler+0x14>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	40021000 	.word	0x40021000

0800398c <LL_RCC_GetAPB1Prescaler>:
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003990:	4b03      	ldr	r3, [pc, #12]	@ (80039a0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	40021000 	.word	0x40021000

080039a4 <LL_RCC_GetAPB2Prescaler>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80039a8:	4b03      	ldr	r3, [pc, #12]	@ (80039b8 <LL_RCC_GetAPB2Prescaler+0x14>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40021000 	.word	0x40021000

080039bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80039c0:	4b03      	ldr	r3, [pc, #12]	@ (80039d0 <LL_RCC_PLL_GetMainSource+0x14>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bc80      	pop	{r7}
 80039ce:	4770      	bx	lr
 80039d0:	40021000 	.word	0x40021000

080039d4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80039d8:	4b03      	ldr	r3, [pc, #12]	@ (80039e8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr
 80039e8:	40021000 	.word	0x40021000

080039ec <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80039f0:	4b04      	ldr	r3, [pc, #16]	@ (8003a04 <LL_RCC_PLL_GetPrediv+0x18>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	0c5b      	lsrs	r3, r3, #17
 80039f6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000

08003a08 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003a10:	f000 f820 	bl	8003a54 <RCC_GetSystemClockFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f83e 	bl	8003aa0 <RCC_GetHCLKClockFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f84c 	bl	8003acc <RCC_GetPCLK1ClockFreq>
 8003a34:	4602      	mov	r2, r0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f858 	bl	8003af4 <RCC_GetPCLK2ClockFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60da      	str	r2, [r3, #12]
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003a5e:	f7ff ff7d 	bl	800395c <LL_RCC_GetSysClkSource>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d00c      	beq.n	8003a82 <RCC_GetSystemClockFreq+0x2e>
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d80e      	bhi.n	8003a8a <RCC_GetSystemClockFreq+0x36>
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <RCC_GetSystemClockFreq+0x22>
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d003      	beq.n	8003a7c <RCC_GetSystemClockFreq+0x28>
 8003a74:	e009      	b.n	8003a8a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003a76:	4b09      	ldr	r3, [pc, #36]	@ (8003a9c <RCC_GetSystemClockFreq+0x48>)
 8003a78:	607b      	str	r3, [r7, #4]
      break;
 8003a7a:	e009      	b.n	8003a90 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003a7c:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <RCC_GetSystemClockFreq+0x48>)
 8003a7e:	607b      	str	r3, [r7, #4]
      break;
 8003a80:	e006      	b.n	8003a90 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003a82:	f000 f84b 	bl	8003b1c <RCC_PLL_GetFreqDomain_SYS>
 8003a86:	6078      	str	r0, [r7, #4]
      break;
 8003a88:	e002      	b.n	8003a90 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003a8a:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <RCC_GetSystemClockFreq+0x48>)
 8003a8c:	607b      	str	r3, [r7, #4]
      break;
 8003a8e:	bf00      	nop
  }

  return frequency;
 8003a90:	687b      	ldr	r3, [r7, #4]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	007a1200 	.word	0x007a1200

08003aa0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003aa8:	f7ff ff64 	bl	8003974 <LL_RCC_GetAHBPrescaler>
 8003aac:	4603      	mov	r3, r0
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	f003 030f 	and.w	r3, r3, #15
 8003ab4:	4a04      	ldr	r2, [pc, #16]	@ (8003ac8 <RCC_GetHCLKClockFreq+0x28>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	40d3      	lsrs	r3, r2
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	08006bc4 	.word	0x08006bc4

08003acc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ad4:	f7ff ff5a 	bl	800398c <LL_RCC_GetAPB1Prescaler>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	0a1b      	lsrs	r3, r3, #8
 8003adc:	4a04      	ldr	r2, [pc, #16]	@ (8003af0 <RCC_GetPCLK1ClockFreq+0x24>)
 8003ade:	5cd3      	ldrb	r3, [r2, r3]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	40d3      	lsrs	r3, r2
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	08006bd4 	.word	0x08006bd4

08003af4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003afc:	f7ff ff52 	bl	80039a4 <LL_RCC_GetAPB2Prescaler>
 8003b00:	4603      	mov	r3, r0
 8003b02:	0adb      	lsrs	r3, r3, #11
 8003b04:	4a04      	ldr	r2, [pc, #16]	@ (8003b18 <RCC_GetPCLK2ClockFreq+0x24>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	40d3      	lsrs	r3, r2
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	08006bd4 	.word	0x08006bd4

08003b1c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	2300      	movs	r3, #0
 8003b28:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003b2a:	f7ff ff47 	bl	80039bc <LL_RCC_PLL_GetMainSource>
 8003b2e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b3c:	d003      	beq.n	8003b46 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003b3e:	e00b      	b.n	8003b58 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003b40:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003b42:	607b      	str	r3, [r7, #4]
      break;
 8003b44:	e00b      	b.n	8003b5e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8003b46:	f7ff ff51 	bl	80039ec <LL_RCC_PLL_GetPrediv>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b7c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	607b      	str	r3, [r7, #4]
      break;
 8003b56:	e002      	b.n	8003b5e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8003b58:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8003b5a:	607b      	str	r3, [r7, #4]
      break;
 8003b5c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8003b5e:	f7ff ff39 	bl	80039d4 <LL_RCC_PLL_GetMultiplicator>
 8003b62:	4603      	mov	r3, r0
 8003b64:	0c9b      	lsrs	r3, r3, #18
 8003b66:	3302      	adds	r3, #2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	003d0900 	.word	0x003d0900
 8003b7c:	007a1200 	.word	0x007a1200

08003b80 <LL_TIM_SetPrescaler>:
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <LL_TIM_SetAutoReload>:
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <LL_TIM_SetRepetitionCounter>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	615a      	str	r2, [r3, #20]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr

08003bec <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a27      	ldr	r2, [pc, #156]	@ (8003c9c <LL_TIM_Init+0xb0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00b      	beq.n	8003c1c <LL_TIM_Init+0x30>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0a:	d007      	beq.n	8003c1c <LL_TIM_Init+0x30>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a24      	ldr	r2, [pc, #144]	@ (8003ca0 <LL_TIM_Init+0xb4>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d003      	beq.n	8003c1c <LL_TIM_Init+0x30>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a23      	ldr	r2, [pc, #140]	@ (8003ca4 <LL_TIM_Init+0xb8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d106      	bne.n	8003c2a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c9c <LL_TIM_Init+0xb0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <LL_TIM_Init+0x5e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c38:	d007      	beq.n	8003c4a <LL_TIM_Init+0x5e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a18      	ldr	r2, [pc, #96]	@ (8003ca0 <LL_TIM_Init+0xb4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <LL_TIM_Init+0x5e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a17      	ldr	r2, [pc, #92]	@ (8003ca4 <LL_TIM_Init+0xb8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d106      	bne.n	8003c58 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	4619      	mov	r1, r3
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff ff98 	bl	8003b9a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff85 	bl	8003b80 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a08      	ldr	r2, [pc, #32]	@ (8003c9c <LL_TIM_Init+0xb0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d105      	bne.n	8003c8a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff95 	bl	8003bb4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ff9f 	bl	8003bce <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40000400 	.word	0x40000400
 8003ca4:	40000800 	.word	0x40000800

08003ca8 <LL_USART_IsEnabled>:
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cbc:	bf0c      	ite	eq
 8003cbe:	2301      	moveq	r3, #1
 8003cc0:	2300      	movne	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <LL_USART_SetStopBitsLength>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	611a      	str	r2, [r3, #16]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr

08003cf2 <LL_USART_SetHWFlowCtrl>:
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	615a      	str	r2, [r3, #20]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bc80      	pop	{r7}
 8003d14:	4770      	bx	lr
	...

08003d18 <LL_USART_SetBaudRate>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009a      	lsls	r2, r3, #2
 8003d2e:	441a      	add	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d38:	4a25      	ldr	r2, [pc, #148]	@ (8003dd0 <LL_USART_SetBaudRate+0xb8>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	b299      	uxth	r1, r3
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009a      	lsls	r2, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <LL_USART_SetBaudRate+0xb8>)
 8003d5c:	fba3 0302 	umull	r0, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2064      	movs	r0, #100	@ 0x64
 8003d64:	fb00 f303 	mul.w	r3, r0, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	3332      	adds	r3, #50	@ 0x32
 8003d6e:	4a18      	ldr	r2, [pc, #96]	@ (8003dd0 <LL_USART_SetBaudRate+0xb8>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	440b      	add	r3, r1
 8003d80:	b299      	uxth	r1, r3
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	009a      	lsls	r2, r3, #2
 8003d8c:	441a      	add	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d96:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <LL_USART_SetBaudRate+0xb8>)
 8003d98:	fba3 0302 	umull	r0, r3, r3, r2
 8003d9c:	095b      	lsrs	r3, r3, #5
 8003d9e:	2064      	movs	r0, #100	@ 0x64
 8003da0:	fb00 f303 	mul.w	r3, r0, r3
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	3332      	adds	r3, #50	@ 0x32
 8003daa:	4a09      	ldr	r2, [pc, #36]	@ (8003dd0 <LL_USART_SetBaudRate+0xb8>)
 8003dac:	fba2 2303 	umull	r2, r3, r2, r3
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	440b      	add	r3, r1
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	51eb851f 	.word	0x51eb851f

08003dd4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7ff ff5e 	bl	8003ca8 <LL_USART_IsEnabled>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d145      	bne.n	8003e7e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003dfa:	f023 030c 	bic.w	r3, r3, #12
 8003dfe:	683a      	ldr	r2, [r7, #0]
 8003e00:	6851      	ldr	r1, [r2, #4]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	68d2      	ldr	r2, [r2, #12]
 8003e06:	4311      	orrs	r1, r2
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	6912      	ldr	r2, [r2, #16]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7ff ff57 	bl	8003cce <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7ff ff63 	bl	8003cf2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003e2c:	f107 0308 	add.w	r3, r7, #8
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fde9 	bl	8003a08 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <LL_USART_Init+0xb4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d102      	bne.n	8003e44 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	e00c      	b.n	8003e5e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a11      	ldr	r2, [pc, #68]	@ (8003e8c <LL_USART_Init+0xb8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d102      	bne.n	8003e52 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e005      	b.n	8003e5e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a0e      	ldr	r2, [pc, #56]	@ (8003e90 <LL_USART_Init+0xbc>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d101      	bne.n	8003e5e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00c      	beq.n	8003e7e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003e74:	461a      	mov	r2, r3
 8003e76:	69b9      	ldr	r1, [r7, #24]
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ff4d 	bl	8003d18 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003e7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40013800 	.word	0x40013800
 8003e8c:	40004400 	.word	0x40004400
 8003e90:	40004800 	.word	0x40004800

08003e94 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	4a07      	ldr	r2, [pc, #28]	@ (8003ec4 <LL_InitTick+0x30>)
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003eac:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <LL_InitTick+0x30>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eb2:	4b04      	ldr	r3, [pc, #16]	@ (8003ec4 <LL_InitTick+0x30>)
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000e010 	.word	0xe000e010

08003ec8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003ed0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ffdd 	bl	8003e94 <LL_InitTick>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003eec:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <LL_mDelay+0x44>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003ef2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d00c      	beq.n	8003f16 <LL_mDelay+0x32>
  {
    Delay++;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3301      	adds	r3, #1
 8003f00:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003f02:	e008      	b.n	8003f16 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003f04:	4b08      	ldr	r3, [pc, #32]	@ (8003f28 <LL_mDelay+0x44>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <LL_mDelay+0x32>
    {
      Delay--;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f3      	bne.n	8003f04 <LL_mDelay+0x20>
    }
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	e000e010 	.word	0xe000e010

08003f2c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003f34:	4a03      	ldr	r2, [pc, #12]	@ (8003f44 <LL_SetSystemCoreClock+0x18>)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6013      	str	r3, [r2, #0]
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	20000064 	.word	0x20000064

08003f48 <RING_BUFFER_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
RING_BUFFER_Init (ring_buffer_t *rb)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_out   = 0;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count = 0;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_out   = 0;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count = 0;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <RING_BUFFER_Is_Empty>:
 * the count of elements in the ring buffer is 0, indicating that the buffer is
 * empty, and `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <RING_BUFFER_Is_Full>:
 * either `true` or `false`, based on whether the count of elements in the ring
 * buffer `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbc:	2b40      	cmp	r3, #64	@ 0x40
 8003fbe:	bf0c      	ite	eq
 8003fc0:	2301      	moveq	r3, #1
 8003fc2:	2300      	movne	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <RING_BUFFER_Push_Data>:
 * buffer. It is of type `char`, which means it can store a single character (1
 * byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	460b      	mov	r3, r1
 8003fda:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ffe7 	bl	8003fb0 <RING_BUFFER_Is_Full>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ffbf 	bl	8003f6c <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff4:	4413      	add	r3, r2
 8003ff6:	78fa      	ldrb	r2, [r7, #3]
 8003ff8:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	3301      	adds	r3, #1
 8004000:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40
  rb->u32_count++;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data
 * value from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 800401a:	b590      	push	{r4, r7, lr}
 800401c:	b083      	sub	sp, #12
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffb4 	bl	8003f90 <RING_BUFFER_Is_Empty>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 800402e:	23ff      	movs	r3, #255	@ 0xff
 8004030:	e012      	b.n	8004058 <RING_BUFFER_Pull_Data+0x3e>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	4413      	add	r3, r2
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	3301      	adds	r3, #1
 8004044:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	645a      	str	r2, [r3, #68]	@ 0x44
  rb->u32_count--;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	649a      	str	r2, [r3, #72]	@ 0x48

  return data;
 8004056:	4623      	mov	r3, r4
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	bd90      	pop	{r4, r7, pc}

08004060 <SCH_Initialize>:
 * scheduler context, including task and timer contexts, as well as soft timers.
 * It also initializes the SysTick timer for scheduler operations.
 */
void
SCH_Initialize (void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  s_SystemTick         = RESET; /**< @brief Reset system tick counter. */
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <SCH_Initialize+0x28>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET; /**< @brief Reset number of scheduled tasks. */
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <SCH_Initialize+0x2c>)
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers        = RESET; /**< @brief Reset number of timers. */
 8004070:	4b07      	ldr	r3, [pc, #28]	@ (8004090 <SCH_Initialize+0x30>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
  memset((uint8_t *)&s_TimerContext[0],
         RESET,
         (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));

  /**< @brief Clear soft timers array. */
  memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8004076:	2208      	movs	r2, #8
 8004078:	2100      	movs	r1, #0
 800407a:	4806      	ldr	r0, [pc, #24]	@ (8004094 <SCH_Initialize+0x34>)
 800407c:	f000 fddb 	bl	8004c36 <memset>

  /**< @brief Initialize SysTick timer. */
  BSP_SYSTICK_TimerInit();
 8004080:	f7fd ff8e 	bl	8001fa0 <BSP_SYSTICK_TimerInit>
}
 8004084:	bf00      	nop
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000654 	.word	0x20000654
 800408c:	2000064c 	.word	0x2000064c
 8004090:	20000650 	.word	0x20000650
 8004094:	20000658 	.word	0x20000658

08004098 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  status_t status
 80040a2:	2301      	movs	r3, #1
 80040a4:	73fb      	strb	r3, [r7, #15]
      status = STS_DONE;
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 80040b6:	f7fd ff65 	bl	8001f84 <BSP_SYSTICK_TimerStart>
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	e01e      	b.n	800410a <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4a23      	ldr	r2, [pc, #140]	@ (8004164 <SCH_HandleScheduledTask+0xa4>)
 80040d8:	4413      	add	r3, r2
 80040da:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	885b      	ldrh	r3, [r3, #2]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d10f      	bne.n	8004104 <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10b      	bne.n	8004104 <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d003      	beq.n	8004104 <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	3301      	adds	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <SCH_HandleScheduledTask+0xa8>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	429a      	cmp	r2, r3
 8004112:	d3db      	bcc.n	80040cc <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8004114:	2300      	movs	r3, #0
 8004116:	73bb      	strb	r3, [r7, #14]
 8004118:	e01a      	b.n	8004150 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 800411a:	7bba      	ldrb	r2, [r7, #14]
 800411c:	4613      	mov	r3, r2
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4a11      	ldr	r2, [pc, #68]	@ (800416c <SCH_HandleScheduledTask+0xac>)
 8004126:	4413      	add	r3, r2
 8004128:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	885b      	ldrh	r3, [r3, #2]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10b      	bne.n	800414a <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2200      	movs	r2, #0
 8004136:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800414a:	7bbb      	ldrb	r3, [r7, #14]
 800414c:	3301      	adds	r3, #1
 800414e:	73bb      	strb	r3, [r7, #14]
 8004150:	4b07      	ldr	r3, [pc, #28]	@ (8004170 <SCH_HandleScheduledTask+0xb0>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	7bba      	ldrb	r2, [r7, #14]
 8004156:	429a      	cmp	r2, r3
 8004158:	d3df      	bcc.n	800411a <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 800415a:	bf00      	nop
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000064c 	.word	0x2000064c
 8004168:	2000064c 	.word	0x2000064c
 800416c:	20000650 	.word	0x20000650
 8004170:	20000650 	.word	0x20000650

08004174 <__cvt>:
 8004174:	2b00      	cmp	r3, #0
 8004176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800417a:	461d      	mov	r5, r3
 800417c:	bfbb      	ittet	lt
 800417e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004182:	461d      	movlt	r5, r3
 8004184:	2300      	movge	r3, #0
 8004186:	232d      	movlt	r3, #45	@ 0x2d
 8004188:	b088      	sub	sp, #32
 800418a:	4614      	mov	r4, r2
 800418c:	bfb8      	it	lt
 800418e:	4614      	movlt	r4, r2
 8004190:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004192:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004194:	7013      	strb	r3, [r2, #0]
 8004196:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004198:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800419c:	f023 0820 	bic.w	r8, r3, #32
 80041a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80041a4:	d005      	beq.n	80041b2 <__cvt+0x3e>
 80041a6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80041aa:	d100      	bne.n	80041ae <__cvt+0x3a>
 80041ac:	3601      	adds	r6, #1
 80041ae:	2302      	movs	r3, #2
 80041b0:	e000      	b.n	80041b4 <__cvt+0x40>
 80041b2:	2303      	movs	r3, #3
 80041b4:	aa07      	add	r2, sp, #28
 80041b6:	9204      	str	r2, [sp, #16]
 80041b8:	aa06      	add	r2, sp, #24
 80041ba:	e9cd a202 	strd	sl, r2, [sp, #8]
 80041be:	e9cd 3600 	strd	r3, r6, [sp]
 80041c2:	4622      	mov	r2, r4
 80041c4:	462b      	mov	r3, r5
 80041c6:	f000 fe4f 	bl	8004e68 <_dtoa_r>
 80041ca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80041ce:	4607      	mov	r7, r0
 80041d0:	d119      	bne.n	8004206 <__cvt+0x92>
 80041d2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80041d4:	07db      	lsls	r3, r3, #31
 80041d6:	d50e      	bpl.n	80041f6 <__cvt+0x82>
 80041d8:	eb00 0906 	add.w	r9, r0, r6
 80041dc:	2200      	movs	r2, #0
 80041de:	2300      	movs	r3, #0
 80041e0:	4620      	mov	r0, r4
 80041e2:	4629      	mov	r1, r5
 80041e4:	f7fc fbea 	bl	80009bc <__aeabi_dcmpeq>
 80041e8:	b108      	cbz	r0, 80041ee <__cvt+0x7a>
 80041ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80041ee:	2230      	movs	r2, #48	@ 0x30
 80041f0:	9b07      	ldr	r3, [sp, #28]
 80041f2:	454b      	cmp	r3, r9
 80041f4:	d31e      	bcc.n	8004234 <__cvt+0xc0>
 80041f6:	4638      	mov	r0, r7
 80041f8:	9b07      	ldr	r3, [sp, #28]
 80041fa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80041fc:	1bdb      	subs	r3, r3, r7
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	b008      	add	sp, #32
 8004202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004206:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800420a:	eb00 0906 	add.w	r9, r0, r6
 800420e:	d1e5      	bne.n	80041dc <__cvt+0x68>
 8004210:	7803      	ldrb	r3, [r0, #0]
 8004212:	2b30      	cmp	r3, #48	@ 0x30
 8004214:	d10a      	bne.n	800422c <__cvt+0xb8>
 8004216:	2200      	movs	r2, #0
 8004218:	2300      	movs	r3, #0
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fc fbcd 	bl	80009bc <__aeabi_dcmpeq>
 8004222:	b918      	cbnz	r0, 800422c <__cvt+0xb8>
 8004224:	f1c6 0601 	rsb	r6, r6, #1
 8004228:	f8ca 6000 	str.w	r6, [sl]
 800422c:	f8da 3000 	ldr.w	r3, [sl]
 8004230:	4499      	add	r9, r3
 8004232:	e7d3      	b.n	80041dc <__cvt+0x68>
 8004234:	1c59      	adds	r1, r3, #1
 8004236:	9107      	str	r1, [sp, #28]
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e7d9      	b.n	80041f0 <__cvt+0x7c>

0800423c <__exponent>:
 800423c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800423e:	2900      	cmp	r1, #0
 8004240:	bfb6      	itet	lt
 8004242:	232d      	movlt	r3, #45	@ 0x2d
 8004244:	232b      	movge	r3, #43	@ 0x2b
 8004246:	4249      	neglt	r1, r1
 8004248:	2909      	cmp	r1, #9
 800424a:	7002      	strb	r2, [r0, #0]
 800424c:	7043      	strb	r3, [r0, #1]
 800424e:	dd29      	ble.n	80042a4 <__exponent+0x68>
 8004250:	f10d 0307 	add.w	r3, sp, #7
 8004254:	461d      	mov	r5, r3
 8004256:	270a      	movs	r7, #10
 8004258:	fbb1 f6f7 	udiv	r6, r1, r7
 800425c:	461a      	mov	r2, r3
 800425e:	fb07 1416 	mls	r4, r7, r6, r1
 8004262:	3430      	adds	r4, #48	@ 0x30
 8004264:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004268:	460c      	mov	r4, r1
 800426a:	2c63      	cmp	r4, #99	@ 0x63
 800426c:	4631      	mov	r1, r6
 800426e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004272:	dcf1      	bgt.n	8004258 <__exponent+0x1c>
 8004274:	3130      	adds	r1, #48	@ 0x30
 8004276:	1e94      	subs	r4, r2, #2
 8004278:	f803 1c01 	strb.w	r1, [r3, #-1]
 800427c:	4623      	mov	r3, r4
 800427e:	1c41      	adds	r1, r0, #1
 8004280:	42ab      	cmp	r3, r5
 8004282:	d30a      	bcc.n	800429a <__exponent+0x5e>
 8004284:	f10d 0309 	add.w	r3, sp, #9
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	42ac      	cmp	r4, r5
 800428c:	bf88      	it	hi
 800428e:	2300      	movhi	r3, #0
 8004290:	3302      	adds	r3, #2
 8004292:	4403      	add	r3, r0
 8004294:	1a18      	subs	r0, r3, r0
 8004296:	b003      	add	sp, #12
 8004298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800429e:	f801 6f01 	strb.w	r6, [r1, #1]!
 80042a2:	e7ed      	b.n	8004280 <__exponent+0x44>
 80042a4:	2330      	movs	r3, #48	@ 0x30
 80042a6:	3130      	adds	r1, #48	@ 0x30
 80042a8:	7083      	strb	r3, [r0, #2]
 80042aa:	70c1      	strb	r1, [r0, #3]
 80042ac:	1d03      	adds	r3, r0, #4
 80042ae:	e7f1      	b.n	8004294 <__exponent+0x58>

080042b0 <_printf_float>:
 80042b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b4:	b091      	sub	sp, #68	@ 0x44
 80042b6:	460c      	mov	r4, r1
 80042b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80042bc:	4616      	mov	r6, r2
 80042be:	461f      	mov	r7, r3
 80042c0:	4605      	mov	r5, r0
 80042c2:	f000 fcc1 	bl	8004c48 <_localeconv_r>
 80042c6:	6803      	ldr	r3, [r0, #0]
 80042c8:	4618      	mov	r0, r3
 80042ca:	9308      	str	r3, [sp, #32]
 80042cc:	f7fb ff4a 	bl	8000164 <strlen>
 80042d0:	2300      	movs	r3, #0
 80042d2:	930e      	str	r3, [sp, #56]	@ 0x38
 80042d4:	f8d8 3000 	ldr.w	r3, [r8]
 80042d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80042da:	3307      	adds	r3, #7
 80042dc:	f023 0307 	bic.w	r3, r3, #7
 80042e0:	f103 0208 	add.w	r2, r3, #8
 80042e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80042e8:	f8d4 b000 	ldr.w	fp, [r4]
 80042ec:	f8c8 2000 	str.w	r2, [r8]
 80042f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80042f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80042fa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004306:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800430a:	4b9c      	ldr	r3, [pc, #624]	@ (800457c <_printf_float+0x2cc>)
 800430c:	f7fc fb88 	bl	8000a20 <__aeabi_dcmpun>
 8004310:	bb70      	cbnz	r0, 8004370 <_printf_float+0xc0>
 8004312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004316:	f04f 32ff 	mov.w	r2, #4294967295
 800431a:	4b98      	ldr	r3, [pc, #608]	@ (800457c <_printf_float+0x2cc>)
 800431c:	f7fc fb62 	bl	80009e4 <__aeabi_dcmple>
 8004320:	bb30      	cbnz	r0, 8004370 <_printf_float+0xc0>
 8004322:	2200      	movs	r2, #0
 8004324:	2300      	movs	r3, #0
 8004326:	4640      	mov	r0, r8
 8004328:	4649      	mov	r1, r9
 800432a:	f7fc fb51 	bl	80009d0 <__aeabi_dcmplt>
 800432e:	b110      	cbz	r0, 8004336 <_printf_float+0x86>
 8004330:	232d      	movs	r3, #45	@ 0x2d
 8004332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004336:	4a92      	ldr	r2, [pc, #584]	@ (8004580 <_printf_float+0x2d0>)
 8004338:	4b92      	ldr	r3, [pc, #584]	@ (8004584 <_printf_float+0x2d4>)
 800433a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800433e:	bf94      	ite	ls
 8004340:	4690      	movls	r8, r2
 8004342:	4698      	movhi	r8, r3
 8004344:	2303      	movs	r3, #3
 8004346:	f04f 0900 	mov.w	r9, #0
 800434a:	6123      	str	r3, [r4, #16]
 800434c:	f02b 0304 	bic.w	r3, fp, #4
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	4633      	mov	r3, r6
 8004354:	4621      	mov	r1, r4
 8004356:	4628      	mov	r0, r5
 8004358:	9700      	str	r7, [sp, #0]
 800435a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800435c:	f000 f9d4 	bl	8004708 <_printf_common>
 8004360:	3001      	adds	r0, #1
 8004362:	f040 8090 	bne.w	8004486 <_printf_float+0x1d6>
 8004366:	f04f 30ff 	mov.w	r0, #4294967295
 800436a:	b011      	add	sp, #68	@ 0x44
 800436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004370:	4642      	mov	r2, r8
 8004372:	464b      	mov	r3, r9
 8004374:	4640      	mov	r0, r8
 8004376:	4649      	mov	r1, r9
 8004378:	f7fc fb52 	bl	8000a20 <__aeabi_dcmpun>
 800437c:	b148      	cbz	r0, 8004392 <_printf_float+0xe2>
 800437e:	464b      	mov	r3, r9
 8004380:	2b00      	cmp	r3, #0
 8004382:	bfb8      	it	lt
 8004384:	232d      	movlt	r3, #45	@ 0x2d
 8004386:	4a80      	ldr	r2, [pc, #512]	@ (8004588 <_printf_float+0x2d8>)
 8004388:	bfb8      	it	lt
 800438a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800438e:	4b7f      	ldr	r3, [pc, #508]	@ (800458c <_printf_float+0x2dc>)
 8004390:	e7d3      	b.n	800433a <_printf_float+0x8a>
 8004392:	6863      	ldr	r3, [r4, #4]
 8004394:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	d13f      	bne.n	800441c <_printf_float+0x16c>
 800439c:	2306      	movs	r3, #6
 800439e:	6063      	str	r3, [r4, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	9206      	str	r2, [sp, #24]
 80043aa:	aa0e      	add	r2, sp, #56	@ 0x38
 80043ac:	e9cd a204 	strd	sl, r2, [sp, #16]
 80043b0:	aa0d      	add	r2, sp, #52	@ 0x34
 80043b2:	9203      	str	r2, [sp, #12]
 80043b4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80043b8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	4642      	mov	r2, r8
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4628      	mov	r0, r5
 80043c4:	464b      	mov	r3, r9
 80043c6:	910a      	str	r1, [sp, #40]	@ 0x28
 80043c8:	f7ff fed4 	bl	8004174 <__cvt>
 80043cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80043ce:	4680      	mov	r8, r0
 80043d0:	2947      	cmp	r1, #71	@ 0x47
 80043d2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80043d4:	d128      	bne.n	8004428 <_printf_float+0x178>
 80043d6:	1cc8      	adds	r0, r1, #3
 80043d8:	db02      	blt.n	80043e0 <_printf_float+0x130>
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	4299      	cmp	r1, r3
 80043de:	dd40      	ble.n	8004462 <_printf_float+0x1b2>
 80043e0:	f1aa 0a02 	sub.w	sl, sl, #2
 80043e4:	fa5f fa8a 	uxtb.w	sl, sl
 80043e8:	4652      	mov	r2, sl
 80043ea:	3901      	subs	r1, #1
 80043ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80043f0:	910d      	str	r1, [sp, #52]	@ 0x34
 80043f2:	f7ff ff23 	bl	800423c <__exponent>
 80043f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80043f8:	4681      	mov	r9, r0
 80043fa:	1813      	adds	r3, r2, r0
 80043fc:	2a01      	cmp	r2, #1
 80043fe:	6123      	str	r3, [r4, #16]
 8004400:	dc02      	bgt.n	8004408 <_printf_float+0x158>
 8004402:	6822      	ldr	r2, [r4, #0]
 8004404:	07d2      	lsls	r2, r2, #31
 8004406:	d501      	bpl.n	800440c <_printf_float+0x15c>
 8004408:	3301      	adds	r3, #1
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004410:	2b00      	cmp	r3, #0
 8004412:	d09e      	beq.n	8004352 <_printf_float+0xa2>
 8004414:	232d      	movs	r3, #45	@ 0x2d
 8004416:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800441a:	e79a      	b.n	8004352 <_printf_float+0xa2>
 800441c:	2947      	cmp	r1, #71	@ 0x47
 800441e:	d1bf      	bne.n	80043a0 <_printf_float+0xf0>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1bd      	bne.n	80043a0 <_printf_float+0xf0>
 8004424:	2301      	movs	r3, #1
 8004426:	e7ba      	b.n	800439e <_printf_float+0xee>
 8004428:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800442c:	d9dc      	bls.n	80043e8 <_printf_float+0x138>
 800442e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004432:	d118      	bne.n	8004466 <_printf_float+0x1b6>
 8004434:	2900      	cmp	r1, #0
 8004436:	6863      	ldr	r3, [r4, #4]
 8004438:	dd0b      	ble.n	8004452 <_printf_float+0x1a2>
 800443a:	6121      	str	r1, [r4, #16]
 800443c:	b913      	cbnz	r3, 8004444 <_printf_float+0x194>
 800443e:	6822      	ldr	r2, [r4, #0]
 8004440:	07d0      	lsls	r0, r2, #31
 8004442:	d502      	bpl.n	800444a <_printf_float+0x19a>
 8004444:	3301      	adds	r3, #1
 8004446:	440b      	add	r3, r1
 8004448:	6123      	str	r3, [r4, #16]
 800444a:	f04f 0900 	mov.w	r9, #0
 800444e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004450:	e7dc      	b.n	800440c <_printf_float+0x15c>
 8004452:	b913      	cbnz	r3, 800445a <_printf_float+0x1aa>
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	07d2      	lsls	r2, r2, #31
 8004458:	d501      	bpl.n	800445e <_printf_float+0x1ae>
 800445a:	3302      	adds	r3, #2
 800445c:	e7f4      	b.n	8004448 <_printf_float+0x198>
 800445e:	2301      	movs	r3, #1
 8004460:	e7f2      	b.n	8004448 <_printf_float+0x198>
 8004462:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004466:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004468:	4299      	cmp	r1, r3
 800446a:	db05      	blt.n	8004478 <_printf_float+0x1c8>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	6121      	str	r1, [r4, #16]
 8004470:	07d8      	lsls	r0, r3, #31
 8004472:	d5ea      	bpl.n	800444a <_printf_float+0x19a>
 8004474:	1c4b      	adds	r3, r1, #1
 8004476:	e7e7      	b.n	8004448 <_printf_float+0x198>
 8004478:	2900      	cmp	r1, #0
 800447a:	bfcc      	ite	gt
 800447c:	2201      	movgt	r2, #1
 800447e:	f1c1 0202 	rsble	r2, r1, #2
 8004482:	4413      	add	r3, r2
 8004484:	e7e0      	b.n	8004448 <_printf_float+0x198>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	055a      	lsls	r2, r3, #21
 800448a:	d407      	bmi.n	800449c <_printf_float+0x1ec>
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	4642      	mov	r2, r8
 8004490:	4631      	mov	r1, r6
 8004492:	4628      	mov	r0, r5
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	d12b      	bne.n	80044f2 <_printf_float+0x242>
 800449a:	e764      	b.n	8004366 <_printf_float+0xb6>
 800449c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80044a0:	f240 80dc 	bls.w	800465c <_printf_float+0x3ac>
 80044a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044a8:	2200      	movs	r2, #0
 80044aa:	2300      	movs	r3, #0
 80044ac:	f7fc fa86 	bl	80009bc <__aeabi_dcmpeq>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d033      	beq.n	800451c <_printf_float+0x26c>
 80044b4:	2301      	movs	r3, #1
 80044b6:	4631      	mov	r1, r6
 80044b8:	4628      	mov	r0, r5
 80044ba:	4a35      	ldr	r2, [pc, #212]	@ (8004590 <_printf_float+0x2e0>)
 80044bc:	47b8      	blx	r7
 80044be:	3001      	adds	r0, #1
 80044c0:	f43f af51 	beq.w	8004366 <_printf_float+0xb6>
 80044c4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80044c8:	4543      	cmp	r3, r8
 80044ca:	db02      	blt.n	80044d2 <_printf_float+0x222>
 80044cc:	6823      	ldr	r3, [r4, #0]
 80044ce:	07d8      	lsls	r0, r3, #31
 80044d0:	d50f      	bpl.n	80044f2 <_printf_float+0x242>
 80044d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	f43f af42 	beq.w	8004366 <_printf_float+0xb6>
 80044e2:	f04f 0900 	mov.w	r9, #0
 80044e6:	f108 38ff 	add.w	r8, r8, #4294967295
 80044ea:	f104 0a1a 	add.w	sl, r4, #26
 80044ee:	45c8      	cmp	r8, r9
 80044f0:	dc09      	bgt.n	8004506 <_printf_float+0x256>
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	079b      	lsls	r3, r3, #30
 80044f6:	f100 8102 	bmi.w	80046fe <_printf_float+0x44e>
 80044fa:	68e0      	ldr	r0, [r4, #12]
 80044fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80044fe:	4298      	cmp	r0, r3
 8004500:	bfb8      	it	lt
 8004502:	4618      	movlt	r0, r3
 8004504:	e731      	b.n	800436a <_printf_float+0xba>
 8004506:	2301      	movs	r3, #1
 8004508:	4652      	mov	r2, sl
 800450a:	4631      	mov	r1, r6
 800450c:	4628      	mov	r0, r5
 800450e:	47b8      	blx	r7
 8004510:	3001      	adds	r0, #1
 8004512:	f43f af28 	beq.w	8004366 <_printf_float+0xb6>
 8004516:	f109 0901 	add.w	r9, r9, #1
 800451a:	e7e8      	b.n	80044ee <_printf_float+0x23e>
 800451c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800451e:	2b00      	cmp	r3, #0
 8004520:	dc38      	bgt.n	8004594 <_printf_float+0x2e4>
 8004522:	2301      	movs	r3, #1
 8004524:	4631      	mov	r1, r6
 8004526:	4628      	mov	r0, r5
 8004528:	4a19      	ldr	r2, [pc, #100]	@ (8004590 <_printf_float+0x2e0>)
 800452a:	47b8      	blx	r7
 800452c:	3001      	adds	r0, #1
 800452e:	f43f af1a 	beq.w	8004366 <_printf_float+0xb6>
 8004532:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004536:	ea59 0303 	orrs.w	r3, r9, r3
 800453a:	d102      	bne.n	8004542 <_printf_float+0x292>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	07d9      	lsls	r1, r3, #31
 8004540:	d5d7      	bpl.n	80044f2 <_printf_float+0x242>
 8004542:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004546:	4631      	mov	r1, r6
 8004548:	4628      	mov	r0, r5
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	f43f af0a 	beq.w	8004366 <_printf_float+0xb6>
 8004552:	f04f 0a00 	mov.w	sl, #0
 8004556:	f104 0b1a 	add.w	fp, r4, #26
 800455a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800455c:	425b      	negs	r3, r3
 800455e:	4553      	cmp	r3, sl
 8004560:	dc01      	bgt.n	8004566 <_printf_float+0x2b6>
 8004562:	464b      	mov	r3, r9
 8004564:	e793      	b.n	800448e <_printf_float+0x1de>
 8004566:	2301      	movs	r3, #1
 8004568:	465a      	mov	r2, fp
 800456a:	4631      	mov	r1, r6
 800456c:	4628      	mov	r0, r5
 800456e:	47b8      	blx	r7
 8004570:	3001      	adds	r0, #1
 8004572:	f43f aef8 	beq.w	8004366 <_printf_float+0xb6>
 8004576:	f10a 0a01 	add.w	sl, sl, #1
 800457a:	e7ee      	b.n	800455a <_printf_float+0x2aa>
 800457c:	7fefffff 	.word	0x7fefffff
 8004580:	08006bdc 	.word	0x08006bdc
 8004584:	08006be0 	.word	0x08006be0
 8004588:	08006be4 	.word	0x08006be4
 800458c:	08006be8 	.word	0x08006be8
 8004590:	08006bec 	.word	0x08006bec
 8004594:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004596:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800459a:	4553      	cmp	r3, sl
 800459c:	bfa8      	it	ge
 800459e:	4653      	movge	r3, sl
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	4699      	mov	r9, r3
 80045a4:	dc36      	bgt.n	8004614 <_printf_float+0x364>
 80045a6:	f04f 0b00 	mov.w	fp, #0
 80045aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045ae:	f104 021a 	add.w	r2, r4, #26
 80045b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80045b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80045b6:	eba3 0309 	sub.w	r3, r3, r9
 80045ba:	455b      	cmp	r3, fp
 80045bc:	dc31      	bgt.n	8004622 <_printf_float+0x372>
 80045be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045c0:	459a      	cmp	sl, r3
 80045c2:	dc3a      	bgt.n	800463a <_printf_float+0x38a>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	07da      	lsls	r2, r3, #31
 80045c8:	d437      	bmi.n	800463a <_printf_float+0x38a>
 80045ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045cc:	ebaa 0903 	sub.w	r9, sl, r3
 80045d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80045d2:	ebaa 0303 	sub.w	r3, sl, r3
 80045d6:	4599      	cmp	r9, r3
 80045d8:	bfa8      	it	ge
 80045da:	4699      	movge	r9, r3
 80045dc:	f1b9 0f00 	cmp.w	r9, #0
 80045e0:	dc33      	bgt.n	800464a <_printf_float+0x39a>
 80045e2:	f04f 0800 	mov.w	r8, #0
 80045e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045ea:	f104 0b1a 	add.w	fp, r4, #26
 80045ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80045f0:	ebaa 0303 	sub.w	r3, sl, r3
 80045f4:	eba3 0309 	sub.w	r3, r3, r9
 80045f8:	4543      	cmp	r3, r8
 80045fa:	f77f af7a 	ble.w	80044f2 <_printf_float+0x242>
 80045fe:	2301      	movs	r3, #1
 8004600:	465a      	mov	r2, fp
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f aeac 	beq.w	8004366 <_printf_float+0xb6>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	e7ec      	b.n	80045ee <_printf_float+0x33e>
 8004614:	4642      	mov	r2, r8
 8004616:	4631      	mov	r1, r6
 8004618:	4628      	mov	r0, r5
 800461a:	47b8      	blx	r7
 800461c:	3001      	adds	r0, #1
 800461e:	d1c2      	bne.n	80045a6 <_printf_float+0x2f6>
 8004620:	e6a1      	b.n	8004366 <_printf_float+0xb6>
 8004622:	2301      	movs	r3, #1
 8004624:	4631      	mov	r1, r6
 8004626:	4628      	mov	r0, r5
 8004628:	920a      	str	r2, [sp, #40]	@ 0x28
 800462a:	47b8      	blx	r7
 800462c:	3001      	adds	r0, #1
 800462e:	f43f ae9a 	beq.w	8004366 <_printf_float+0xb6>
 8004632:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004634:	f10b 0b01 	add.w	fp, fp, #1
 8004638:	e7bb      	b.n	80045b2 <_printf_float+0x302>
 800463a:	4631      	mov	r1, r6
 800463c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004640:	4628      	mov	r0, r5
 8004642:	47b8      	blx	r7
 8004644:	3001      	adds	r0, #1
 8004646:	d1c0      	bne.n	80045ca <_printf_float+0x31a>
 8004648:	e68d      	b.n	8004366 <_printf_float+0xb6>
 800464a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800464c:	464b      	mov	r3, r9
 800464e:	4631      	mov	r1, r6
 8004650:	4628      	mov	r0, r5
 8004652:	4442      	add	r2, r8
 8004654:	47b8      	blx	r7
 8004656:	3001      	adds	r0, #1
 8004658:	d1c3      	bne.n	80045e2 <_printf_float+0x332>
 800465a:	e684      	b.n	8004366 <_printf_float+0xb6>
 800465c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004660:	f1ba 0f01 	cmp.w	sl, #1
 8004664:	dc01      	bgt.n	800466a <_printf_float+0x3ba>
 8004666:	07db      	lsls	r3, r3, #31
 8004668:	d536      	bpl.n	80046d8 <_printf_float+0x428>
 800466a:	2301      	movs	r3, #1
 800466c:	4642      	mov	r2, r8
 800466e:	4631      	mov	r1, r6
 8004670:	4628      	mov	r0, r5
 8004672:	47b8      	blx	r7
 8004674:	3001      	adds	r0, #1
 8004676:	f43f ae76 	beq.w	8004366 <_printf_float+0xb6>
 800467a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800467e:	4631      	mov	r1, r6
 8004680:	4628      	mov	r0, r5
 8004682:	47b8      	blx	r7
 8004684:	3001      	adds	r0, #1
 8004686:	f43f ae6e 	beq.w	8004366 <_printf_float+0xb6>
 800468a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800468e:	2200      	movs	r2, #0
 8004690:	2300      	movs	r3, #0
 8004692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004696:	f7fc f991 	bl	80009bc <__aeabi_dcmpeq>
 800469a:	b9c0      	cbnz	r0, 80046ce <_printf_float+0x41e>
 800469c:	4653      	mov	r3, sl
 800469e:	f108 0201 	add.w	r2, r8, #1
 80046a2:	4631      	mov	r1, r6
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b8      	blx	r7
 80046a8:	3001      	adds	r0, #1
 80046aa:	d10c      	bne.n	80046c6 <_printf_float+0x416>
 80046ac:	e65b      	b.n	8004366 <_printf_float+0xb6>
 80046ae:	2301      	movs	r3, #1
 80046b0:	465a      	mov	r2, fp
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	47b8      	blx	r7
 80046b8:	3001      	adds	r0, #1
 80046ba:	f43f ae54 	beq.w	8004366 <_printf_float+0xb6>
 80046be:	f108 0801 	add.w	r8, r8, #1
 80046c2:	45d0      	cmp	r8, sl
 80046c4:	dbf3      	blt.n	80046ae <_printf_float+0x3fe>
 80046c6:	464b      	mov	r3, r9
 80046c8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80046cc:	e6e0      	b.n	8004490 <_printf_float+0x1e0>
 80046ce:	f04f 0800 	mov.w	r8, #0
 80046d2:	f104 0b1a 	add.w	fp, r4, #26
 80046d6:	e7f4      	b.n	80046c2 <_printf_float+0x412>
 80046d8:	2301      	movs	r3, #1
 80046da:	4642      	mov	r2, r8
 80046dc:	e7e1      	b.n	80046a2 <_printf_float+0x3f2>
 80046de:	2301      	movs	r3, #1
 80046e0:	464a      	mov	r2, r9
 80046e2:	4631      	mov	r1, r6
 80046e4:	4628      	mov	r0, r5
 80046e6:	47b8      	blx	r7
 80046e8:	3001      	adds	r0, #1
 80046ea:	f43f ae3c 	beq.w	8004366 <_printf_float+0xb6>
 80046ee:	f108 0801 	add.w	r8, r8, #1
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80046f6:	1a5b      	subs	r3, r3, r1
 80046f8:	4543      	cmp	r3, r8
 80046fa:	dcf0      	bgt.n	80046de <_printf_float+0x42e>
 80046fc:	e6fd      	b.n	80044fa <_printf_float+0x24a>
 80046fe:	f04f 0800 	mov.w	r8, #0
 8004702:	f104 0919 	add.w	r9, r4, #25
 8004706:	e7f4      	b.n	80046f2 <_printf_float+0x442>

08004708 <_printf_common>:
 8004708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800470c:	4616      	mov	r6, r2
 800470e:	4698      	mov	r8, r3
 8004710:	688a      	ldr	r2, [r1, #8]
 8004712:	690b      	ldr	r3, [r1, #16]
 8004714:	4607      	mov	r7, r0
 8004716:	4293      	cmp	r3, r2
 8004718:	bfb8      	it	lt
 800471a:	4613      	movlt	r3, r2
 800471c:	6033      	str	r3, [r6, #0]
 800471e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004722:	460c      	mov	r4, r1
 8004724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004728:	b10a      	cbz	r2, 800472e <_printf_common+0x26>
 800472a:	3301      	adds	r3, #1
 800472c:	6033      	str	r3, [r6, #0]
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	0699      	lsls	r1, r3, #26
 8004732:	bf42      	ittt	mi
 8004734:	6833      	ldrmi	r3, [r6, #0]
 8004736:	3302      	addmi	r3, #2
 8004738:	6033      	strmi	r3, [r6, #0]
 800473a:	6825      	ldr	r5, [r4, #0]
 800473c:	f015 0506 	ands.w	r5, r5, #6
 8004740:	d106      	bne.n	8004750 <_printf_common+0x48>
 8004742:	f104 0a19 	add.w	sl, r4, #25
 8004746:	68e3      	ldr	r3, [r4, #12]
 8004748:	6832      	ldr	r2, [r6, #0]
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	42ab      	cmp	r3, r5
 800474e:	dc2b      	bgt.n	80047a8 <_printf_common+0xa0>
 8004750:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004754:	6822      	ldr	r2, [r4, #0]
 8004756:	3b00      	subs	r3, #0
 8004758:	bf18      	it	ne
 800475a:	2301      	movne	r3, #1
 800475c:	0692      	lsls	r2, r2, #26
 800475e:	d430      	bmi.n	80047c2 <_printf_common+0xba>
 8004760:	4641      	mov	r1, r8
 8004762:	4638      	mov	r0, r7
 8004764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004768:	47c8      	blx	r9
 800476a:	3001      	adds	r0, #1
 800476c:	d023      	beq.n	80047b6 <_printf_common+0xae>
 800476e:	6823      	ldr	r3, [r4, #0]
 8004770:	6922      	ldr	r2, [r4, #16]
 8004772:	f003 0306 	and.w	r3, r3, #6
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf14      	ite	ne
 800477a:	2500      	movne	r5, #0
 800477c:	6833      	ldreq	r3, [r6, #0]
 800477e:	f04f 0600 	mov.w	r6, #0
 8004782:	bf08      	it	eq
 8004784:	68e5      	ldreq	r5, [r4, #12]
 8004786:	f104 041a 	add.w	r4, r4, #26
 800478a:	bf08      	it	eq
 800478c:	1aed      	subeq	r5, r5, r3
 800478e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004792:	bf08      	it	eq
 8004794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004798:	4293      	cmp	r3, r2
 800479a:	bfc4      	itt	gt
 800479c:	1a9b      	subgt	r3, r3, r2
 800479e:	18ed      	addgt	r5, r5, r3
 80047a0:	42b5      	cmp	r5, r6
 80047a2:	d11a      	bne.n	80047da <_printf_common+0xd2>
 80047a4:	2000      	movs	r0, #0
 80047a6:	e008      	b.n	80047ba <_printf_common+0xb2>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4652      	mov	r2, sl
 80047ac:	4641      	mov	r1, r8
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c8      	blx	r9
 80047b2:	3001      	adds	r0, #1
 80047b4:	d103      	bne.n	80047be <_printf_common+0xb6>
 80047b6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047be:	3501      	adds	r5, #1
 80047c0:	e7c1      	b.n	8004746 <_printf_common+0x3e>
 80047c2:	2030      	movs	r0, #48	@ 0x30
 80047c4:	18e1      	adds	r1, r4, r3
 80047c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80047d0:	4422      	add	r2, r4
 80047d2:	3302      	adds	r3, #2
 80047d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80047d8:	e7c2      	b.n	8004760 <_printf_common+0x58>
 80047da:	2301      	movs	r3, #1
 80047dc:	4622      	mov	r2, r4
 80047de:	4641      	mov	r1, r8
 80047e0:	4638      	mov	r0, r7
 80047e2:	47c8      	blx	r9
 80047e4:	3001      	adds	r0, #1
 80047e6:	d0e6      	beq.n	80047b6 <_printf_common+0xae>
 80047e8:	3601      	adds	r6, #1
 80047ea:	e7d9      	b.n	80047a0 <_printf_common+0x98>

080047ec <_printf_i>:
 80047ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	7e0f      	ldrb	r7, [r1, #24]
 80047f2:	4691      	mov	r9, r2
 80047f4:	2f78      	cmp	r7, #120	@ 0x78
 80047f6:	4680      	mov	r8, r0
 80047f8:	460c      	mov	r4, r1
 80047fa:	469a      	mov	sl, r3
 80047fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80047fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004802:	d807      	bhi.n	8004814 <_printf_i+0x28>
 8004804:	2f62      	cmp	r7, #98	@ 0x62
 8004806:	d80a      	bhi.n	800481e <_printf_i+0x32>
 8004808:	2f00      	cmp	r7, #0
 800480a:	f000 80d3 	beq.w	80049b4 <_printf_i+0x1c8>
 800480e:	2f58      	cmp	r7, #88	@ 0x58
 8004810:	f000 80ba 	beq.w	8004988 <_printf_i+0x19c>
 8004814:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004818:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800481c:	e03a      	b.n	8004894 <_printf_i+0xa8>
 800481e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004822:	2b15      	cmp	r3, #21
 8004824:	d8f6      	bhi.n	8004814 <_printf_i+0x28>
 8004826:	a101      	add	r1, pc, #4	@ (adr r1, 800482c <_printf_i+0x40>)
 8004828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800482c:	08004885 	.word	0x08004885
 8004830:	08004899 	.word	0x08004899
 8004834:	08004815 	.word	0x08004815
 8004838:	08004815 	.word	0x08004815
 800483c:	08004815 	.word	0x08004815
 8004840:	08004815 	.word	0x08004815
 8004844:	08004899 	.word	0x08004899
 8004848:	08004815 	.word	0x08004815
 800484c:	08004815 	.word	0x08004815
 8004850:	08004815 	.word	0x08004815
 8004854:	08004815 	.word	0x08004815
 8004858:	0800499b 	.word	0x0800499b
 800485c:	080048c3 	.word	0x080048c3
 8004860:	08004955 	.word	0x08004955
 8004864:	08004815 	.word	0x08004815
 8004868:	08004815 	.word	0x08004815
 800486c:	080049bd 	.word	0x080049bd
 8004870:	08004815 	.word	0x08004815
 8004874:	080048c3 	.word	0x080048c3
 8004878:	08004815 	.word	0x08004815
 800487c:	08004815 	.word	0x08004815
 8004880:	0800495d 	.word	0x0800495d
 8004884:	6833      	ldr	r3, [r6, #0]
 8004886:	1d1a      	adds	r2, r3, #4
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6032      	str	r2, [r6, #0]
 800488c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004890:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004894:	2301      	movs	r3, #1
 8004896:	e09e      	b.n	80049d6 <_printf_i+0x1ea>
 8004898:	6833      	ldr	r3, [r6, #0]
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	1d19      	adds	r1, r3, #4
 800489e:	6031      	str	r1, [r6, #0]
 80048a0:	0606      	lsls	r6, r0, #24
 80048a2:	d501      	bpl.n	80048a8 <_printf_i+0xbc>
 80048a4:	681d      	ldr	r5, [r3, #0]
 80048a6:	e003      	b.n	80048b0 <_printf_i+0xc4>
 80048a8:	0645      	lsls	r5, r0, #25
 80048aa:	d5fb      	bpl.n	80048a4 <_printf_i+0xb8>
 80048ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80048b0:	2d00      	cmp	r5, #0
 80048b2:	da03      	bge.n	80048bc <_printf_i+0xd0>
 80048b4:	232d      	movs	r3, #45	@ 0x2d
 80048b6:	426d      	negs	r5, r5
 80048b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048bc:	230a      	movs	r3, #10
 80048be:	4859      	ldr	r0, [pc, #356]	@ (8004a24 <_printf_i+0x238>)
 80048c0:	e011      	b.n	80048e6 <_printf_i+0xfa>
 80048c2:	6821      	ldr	r1, [r4, #0]
 80048c4:	6833      	ldr	r3, [r6, #0]
 80048c6:	0608      	lsls	r0, r1, #24
 80048c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80048cc:	d402      	bmi.n	80048d4 <_printf_i+0xe8>
 80048ce:	0649      	lsls	r1, r1, #25
 80048d0:	bf48      	it	mi
 80048d2:	b2ad      	uxthmi	r5, r5
 80048d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80048d6:	6033      	str	r3, [r6, #0]
 80048d8:	bf14      	ite	ne
 80048da:	230a      	movne	r3, #10
 80048dc:	2308      	moveq	r3, #8
 80048de:	4851      	ldr	r0, [pc, #324]	@ (8004a24 <_printf_i+0x238>)
 80048e0:	2100      	movs	r1, #0
 80048e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80048e6:	6866      	ldr	r6, [r4, #4]
 80048e8:	2e00      	cmp	r6, #0
 80048ea:	bfa8      	it	ge
 80048ec:	6821      	ldrge	r1, [r4, #0]
 80048ee:	60a6      	str	r6, [r4, #8]
 80048f0:	bfa4      	itt	ge
 80048f2:	f021 0104 	bicge.w	r1, r1, #4
 80048f6:	6021      	strge	r1, [r4, #0]
 80048f8:	b90d      	cbnz	r5, 80048fe <_printf_i+0x112>
 80048fa:	2e00      	cmp	r6, #0
 80048fc:	d04b      	beq.n	8004996 <_printf_i+0x1aa>
 80048fe:	4616      	mov	r6, r2
 8004900:	fbb5 f1f3 	udiv	r1, r5, r3
 8004904:	fb03 5711 	mls	r7, r3, r1, r5
 8004908:	5dc7      	ldrb	r7, [r0, r7]
 800490a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800490e:	462f      	mov	r7, r5
 8004910:	42bb      	cmp	r3, r7
 8004912:	460d      	mov	r5, r1
 8004914:	d9f4      	bls.n	8004900 <_printf_i+0x114>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d10b      	bne.n	8004932 <_printf_i+0x146>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	07df      	lsls	r7, r3, #31
 800491e:	d508      	bpl.n	8004932 <_printf_i+0x146>
 8004920:	6923      	ldr	r3, [r4, #16]
 8004922:	6861      	ldr	r1, [r4, #4]
 8004924:	4299      	cmp	r1, r3
 8004926:	bfde      	ittt	le
 8004928:	2330      	movle	r3, #48	@ 0x30
 800492a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800492e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004932:	1b92      	subs	r2, r2, r6
 8004934:	6122      	str	r2, [r4, #16]
 8004936:	464b      	mov	r3, r9
 8004938:	4621      	mov	r1, r4
 800493a:	4640      	mov	r0, r8
 800493c:	f8cd a000 	str.w	sl, [sp]
 8004940:	aa03      	add	r2, sp, #12
 8004942:	f7ff fee1 	bl	8004708 <_printf_common>
 8004946:	3001      	adds	r0, #1
 8004948:	d14a      	bne.n	80049e0 <_printf_i+0x1f4>
 800494a:	f04f 30ff 	mov.w	r0, #4294967295
 800494e:	b004      	add	sp, #16
 8004950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	f043 0320 	orr.w	r3, r3, #32
 800495a:	6023      	str	r3, [r4, #0]
 800495c:	2778      	movs	r7, #120	@ 0x78
 800495e:	4832      	ldr	r0, [pc, #200]	@ (8004a28 <_printf_i+0x23c>)
 8004960:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	6831      	ldr	r1, [r6, #0]
 8004968:	061f      	lsls	r7, r3, #24
 800496a:	f851 5b04 	ldr.w	r5, [r1], #4
 800496e:	d402      	bmi.n	8004976 <_printf_i+0x18a>
 8004970:	065f      	lsls	r7, r3, #25
 8004972:	bf48      	it	mi
 8004974:	b2ad      	uxthmi	r5, r5
 8004976:	6031      	str	r1, [r6, #0]
 8004978:	07d9      	lsls	r1, r3, #31
 800497a:	bf44      	itt	mi
 800497c:	f043 0320 	orrmi.w	r3, r3, #32
 8004980:	6023      	strmi	r3, [r4, #0]
 8004982:	b11d      	cbz	r5, 800498c <_printf_i+0x1a0>
 8004984:	2310      	movs	r3, #16
 8004986:	e7ab      	b.n	80048e0 <_printf_i+0xf4>
 8004988:	4826      	ldr	r0, [pc, #152]	@ (8004a24 <_printf_i+0x238>)
 800498a:	e7e9      	b.n	8004960 <_printf_i+0x174>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	f023 0320 	bic.w	r3, r3, #32
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	e7f6      	b.n	8004984 <_printf_i+0x198>
 8004996:	4616      	mov	r6, r2
 8004998:	e7bd      	b.n	8004916 <_printf_i+0x12a>
 800499a:	6833      	ldr	r3, [r6, #0]
 800499c:	6825      	ldr	r5, [r4, #0]
 800499e:	1d18      	adds	r0, r3, #4
 80049a0:	6961      	ldr	r1, [r4, #20]
 80049a2:	6030      	str	r0, [r6, #0]
 80049a4:	062e      	lsls	r6, r5, #24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	d501      	bpl.n	80049ae <_printf_i+0x1c2>
 80049aa:	6019      	str	r1, [r3, #0]
 80049ac:	e002      	b.n	80049b4 <_printf_i+0x1c8>
 80049ae:	0668      	lsls	r0, r5, #25
 80049b0:	d5fb      	bpl.n	80049aa <_printf_i+0x1be>
 80049b2:	8019      	strh	r1, [r3, #0]
 80049b4:	2300      	movs	r3, #0
 80049b6:	4616      	mov	r6, r2
 80049b8:	6123      	str	r3, [r4, #16]
 80049ba:	e7bc      	b.n	8004936 <_printf_i+0x14a>
 80049bc:	6833      	ldr	r3, [r6, #0]
 80049be:	2100      	movs	r1, #0
 80049c0:	1d1a      	adds	r2, r3, #4
 80049c2:	6032      	str	r2, [r6, #0]
 80049c4:	681e      	ldr	r6, [r3, #0]
 80049c6:	6862      	ldr	r2, [r4, #4]
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f9b4 	bl	8004d36 <memchr>
 80049ce:	b108      	cbz	r0, 80049d4 <_printf_i+0x1e8>
 80049d0:	1b80      	subs	r0, r0, r6
 80049d2:	6060      	str	r0, [r4, #4]
 80049d4:	6863      	ldr	r3, [r4, #4]
 80049d6:	6123      	str	r3, [r4, #16]
 80049d8:	2300      	movs	r3, #0
 80049da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049de:	e7aa      	b.n	8004936 <_printf_i+0x14a>
 80049e0:	4632      	mov	r2, r6
 80049e2:	4649      	mov	r1, r9
 80049e4:	4640      	mov	r0, r8
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	47d0      	blx	sl
 80049ea:	3001      	adds	r0, #1
 80049ec:	d0ad      	beq.n	800494a <_printf_i+0x15e>
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	079b      	lsls	r3, r3, #30
 80049f2:	d413      	bmi.n	8004a1c <_printf_i+0x230>
 80049f4:	68e0      	ldr	r0, [r4, #12]
 80049f6:	9b03      	ldr	r3, [sp, #12]
 80049f8:	4298      	cmp	r0, r3
 80049fa:	bfb8      	it	lt
 80049fc:	4618      	movlt	r0, r3
 80049fe:	e7a6      	b.n	800494e <_printf_i+0x162>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4632      	mov	r2, r6
 8004a04:	4649      	mov	r1, r9
 8004a06:	4640      	mov	r0, r8
 8004a08:	47d0      	blx	sl
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d09d      	beq.n	800494a <_printf_i+0x15e>
 8004a0e:	3501      	adds	r5, #1
 8004a10:	68e3      	ldr	r3, [r4, #12]
 8004a12:	9903      	ldr	r1, [sp, #12]
 8004a14:	1a5b      	subs	r3, r3, r1
 8004a16:	42ab      	cmp	r3, r5
 8004a18:	dcf2      	bgt.n	8004a00 <_printf_i+0x214>
 8004a1a:	e7eb      	b.n	80049f4 <_printf_i+0x208>
 8004a1c:	2500      	movs	r5, #0
 8004a1e:	f104 0619 	add.w	r6, r4, #25
 8004a22:	e7f5      	b.n	8004a10 <_printf_i+0x224>
 8004a24:	08006bee 	.word	0x08006bee
 8004a28:	08006bff 	.word	0x08006bff

08004a2c <std>:
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	4604      	mov	r4, r0
 8004a32:	e9c0 3300 	strd	r3, r3, [r0]
 8004a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a3a:	6083      	str	r3, [r0, #8]
 8004a3c:	8181      	strh	r1, [r0, #12]
 8004a3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004a40:	81c2      	strh	r2, [r0, #14]
 8004a42:	6183      	str	r3, [r0, #24]
 8004a44:	4619      	mov	r1, r3
 8004a46:	2208      	movs	r2, #8
 8004a48:	305c      	adds	r0, #92	@ 0x5c
 8004a4a:	f000 f8f4 	bl	8004c36 <memset>
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <std+0x58>)
 8004a50:	6224      	str	r4, [r4, #32]
 8004a52:	6263      	str	r3, [r4, #36]	@ 0x24
 8004a54:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <std+0x5c>)
 8004a56:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <std+0x60>)
 8004a5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <std+0x64>)
 8004a5e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004a60:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <std+0x68>)
 8004a62:	429c      	cmp	r4, r3
 8004a64:	d006      	beq.n	8004a74 <std+0x48>
 8004a66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004a6a:	4294      	cmp	r4, r2
 8004a6c:	d002      	beq.n	8004a74 <std+0x48>
 8004a6e:	33d0      	adds	r3, #208	@ 0xd0
 8004a70:	429c      	cmp	r4, r3
 8004a72:	d105      	bne.n	8004a80 <std+0x54>
 8004a74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a7c:	f000 b958 	b.w	8004d30 <__retarget_lock_init_recursive>
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	bf00      	nop
 8004a84:	08004bb1 	.word	0x08004bb1
 8004a88:	08004bd3 	.word	0x08004bd3
 8004a8c:	08004c0b 	.word	0x08004c0b
 8004a90:	08004c2f 	.word	0x08004c2f
 8004a94:	20000660 	.word	0x20000660

08004a98 <stdio_exit_handler>:
 8004a98:	4a02      	ldr	r2, [pc, #8]	@ (8004aa4 <stdio_exit_handler+0xc>)
 8004a9a:	4903      	ldr	r1, [pc, #12]	@ (8004aa8 <stdio_exit_handler+0x10>)
 8004a9c:	4803      	ldr	r0, [pc, #12]	@ (8004aac <stdio_exit_handler+0x14>)
 8004a9e:	f000 b869 	b.w	8004b74 <_fwalk_sglue>
 8004aa2:	bf00      	nop
 8004aa4:	20000068 	.word	0x20000068
 8004aa8:	080063f5 	.word	0x080063f5
 8004aac:	20000078 	.word	0x20000078

08004ab0 <cleanup_stdio>:
 8004ab0:	6841      	ldr	r1, [r0, #4]
 8004ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae4 <cleanup_stdio+0x34>)
 8004ab4:	b510      	push	{r4, lr}
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	4604      	mov	r4, r0
 8004aba:	d001      	beq.n	8004ac0 <cleanup_stdio+0x10>
 8004abc:	f001 fc9a 	bl	80063f4 <_fflush_r>
 8004ac0:	68a1      	ldr	r1, [r4, #8]
 8004ac2:	4b09      	ldr	r3, [pc, #36]	@ (8004ae8 <cleanup_stdio+0x38>)
 8004ac4:	4299      	cmp	r1, r3
 8004ac6:	d002      	beq.n	8004ace <cleanup_stdio+0x1e>
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f001 fc93 	bl	80063f4 <_fflush_r>
 8004ace:	68e1      	ldr	r1, [r4, #12]
 8004ad0:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <cleanup_stdio+0x3c>)
 8004ad2:	4299      	cmp	r1, r3
 8004ad4:	d004      	beq.n	8004ae0 <cleanup_stdio+0x30>
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004adc:	f001 bc8a 	b.w	80063f4 <_fflush_r>
 8004ae0:	bd10      	pop	{r4, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000660 	.word	0x20000660
 8004ae8:	200006c8 	.word	0x200006c8
 8004aec:	20000730 	.word	0x20000730

08004af0 <global_stdio_init.part.0>:
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b20 <global_stdio_init.part.0+0x30>)
 8004af4:	4c0b      	ldr	r4, [pc, #44]	@ (8004b24 <global_stdio_init.part.0+0x34>)
 8004af6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b28 <global_stdio_init.part.0+0x38>)
 8004af8:	4620      	mov	r0, r4
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	2104      	movs	r1, #4
 8004afe:	2200      	movs	r2, #0
 8004b00:	f7ff ff94 	bl	8004a2c <std>
 8004b04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b08:	2201      	movs	r2, #1
 8004b0a:	2109      	movs	r1, #9
 8004b0c:	f7ff ff8e 	bl	8004a2c <std>
 8004b10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b14:	2202      	movs	r2, #2
 8004b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b1a:	2112      	movs	r1, #18
 8004b1c:	f7ff bf86 	b.w	8004a2c <std>
 8004b20:	20000798 	.word	0x20000798
 8004b24:	20000660 	.word	0x20000660
 8004b28:	08004a99 	.word	0x08004a99

08004b2c <__sfp_lock_acquire>:
 8004b2c:	4801      	ldr	r0, [pc, #4]	@ (8004b34 <__sfp_lock_acquire+0x8>)
 8004b2e:	f000 b900 	b.w	8004d32 <__retarget_lock_acquire_recursive>
 8004b32:	bf00      	nop
 8004b34:	200007a1 	.word	0x200007a1

08004b38 <__sfp_lock_release>:
 8004b38:	4801      	ldr	r0, [pc, #4]	@ (8004b40 <__sfp_lock_release+0x8>)
 8004b3a:	f000 b8fb 	b.w	8004d34 <__retarget_lock_release_recursive>
 8004b3e:	bf00      	nop
 8004b40:	200007a1 	.word	0x200007a1

08004b44 <__sinit>:
 8004b44:	b510      	push	{r4, lr}
 8004b46:	4604      	mov	r4, r0
 8004b48:	f7ff fff0 	bl	8004b2c <__sfp_lock_acquire>
 8004b4c:	6a23      	ldr	r3, [r4, #32]
 8004b4e:	b11b      	cbz	r3, 8004b58 <__sinit+0x14>
 8004b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b54:	f7ff bff0 	b.w	8004b38 <__sfp_lock_release>
 8004b58:	4b04      	ldr	r3, [pc, #16]	@ (8004b6c <__sinit+0x28>)
 8004b5a:	6223      	str	r3, [r4, #32]
 8004b5c:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <__sinit+0x2c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f5      	bne.n	8004b50 <__sinit+0xc>
 8004b64:	f7ff ffc4 	bl	8004af0 <global_stdio_init.part.0>
 8004b68:	e7f2      	b.n	8004b50 <__sinit+0xc>
 8004b6a:	bf00      	nop
 8004b6c:	08004ab1 	.word	0x08004ab1
 8004b70:	20000798 	.word	0x20000798

08004b74 <_fwalk_sglue>:
 8004b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b78:	4607      	mov	r7, r0
 8004b7a:	4688      	mov	r8, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	2600      	movs	r6, #0
 8004b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b84:	f1b9 0901 	subs.w	r9, r9, #1
 8004b88:	d505      	bpl.n	8004b96 <_fwalk_sglue+0x22>
 8004b8a:	6824      	ldr	r4, [r4, #0]
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	d1f7      	bne.n	8004b80 <_fwalk_sglue+0xc>
 8004b90:	4630      	mov	r0, r6
 8004b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b96:	89ab      	ldrh	r3, [r5, #12]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d907      	bls.n	8004bac <_fwalk_sglue+0x38>
 8004b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	d003      	beq.n	8004bac <_fwalk_sglue+0x38>
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	47c0      	blx	r8
 8004baa:	4306      	orrs	r6, r0
 8004bac:	3568      	adds	r5, #104	@ 0x68
 8004bae:	e7e9      	b.n	8004b84 <_fwalk_sglue+0x10>

08004bb0 <__sread>:
 8004bb0:	b510      	push	{r4, lr}
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb8:	f000 f86c 	bl	8004c94 <_read_r>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	bfab      	itete	ge
 8004bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8004bc4:	181b      	addge	r3, r3, r0
 8004bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004bca:	bfac      	ite	ge
 8004bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004bce:	81a3      	strhlt	r3, [r4, #12]
 8004bd0:	bd10      	pop	{r4, pc}

08004bd2 <__swrite>:
 8004bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd6:	461f      	mov	r7, r3
 8004bd8:	898b      	ldrh	r3, [r1, #12]
 8004bda:	4605      	mov	r5, r0
 8004bdc:	05db      	lsls	r3, r3, #23
 8004bde:	460c      	mov	r4, r1
 8004be0:	4616      	mov	r6, r2
 8004be2:	d505      	bpl.n	8004bf0 <__swrite+0x1e>
 8004be4:	2302      	movs	r3, #2
 8004be6:	2200      	movs	r2, #0
 8004be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bec:	f000 f840 	bl	8004c70 <_lseek_r>
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004bf8:	81a3      	strh	r3, [r4, #12]
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	463b      	mov	r3, r7
 8004bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c06:	f000 b857 	b.w	8004cb8 <_write_r>

08004c0a <__sseek>:
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c12:	f000 f82d 	bl	8004c70 <_lseek_r>
 8004c16:	1c43      	adds	r3, r0, #1
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	bf15      	itete	ne
 8004c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004c26:	81a3      	strheq	r3, [r4, #12]
 8004c28:	bf18      	it	ne
 8004c2a:	81a3      	strhne	r3, [r4, #12]
 8004c2c:	bd10      	pop	{r4, pc}

08004c2e <__sclose>:
 8004c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c32:	f000 b80d 	b.w	8004c50 <_close_r>

08004c36 <memset>:
 8004c36:	4603      	mov	r3, r0
 8004c38:	4402      	add	r2, r0
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d100      	bne.n	8004c40 <memset+0xa>
 8004c3e:	4770      	bx	lr
 8004c40:	f803 1b01 	strb.w	r1, [r3], #1
 8004c44:	e7f9      	b.n	8004c3a <memset+0x4>
	...

08004c48 <_localeconv_r>:
 8004c48:	4800      	ldr	r0, [pc, #0]	@ (8004c4c <_localeconv_r+0x4>)
 8004c4a:	4770      	bx	lr
 8004c4c:	200001b4 	.word	0x200001b4

08004c50 <_close_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	2300      	movs	r3, #0
 8004c54:	4d05      	ldr	r5, [pc, #20]	@ (8004c6c <_close_r+0x1c>)
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	602b      	str	r3, [r5, #0]
 8004c5c:	f7fe faf9 	bl	8003252 <_close>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_close_r+0x1a>
 8004c64:	682b      	ldr	r3, [r5, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_close_r+0x1a>
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	2000079c 	.word	0x2000079c

08004c70 <_lseek_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4604      	mov	r4, r0
 8004c74:	4608      	mov	r0, r1
 8004c76:	4611      	mov	r1, r2
 8004c78:	2200      	movs	r2, #0
 8004c7a:	4d05      	ldr	r5, [pc, #20]	@ (8004c90 <_lseek_r+0x20>)
 8004c7c:	602a      	str	r2, [r5, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f7fe fb0b 	bl	800329a <_lseek>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_lseek_r+0x1e>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_lseek_r+0x1e>
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	2000079c 	.word	0x2000079c

08004c94 <_read_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4604      	mov	r4, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	4611      	mov	r1, r2
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4d05      	ldr	r5, [pc, #20]	@ (8004cb4 <_read_r+0x20>)
 8004ca0:	602a      	str	r2, [r5, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f7fe fa9c 	bl	80031e0 <_read>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_read_r+0x1e>
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_read_r+0x1e>
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	2000079c 	.word	0x2000079c

08004cb8 <_write_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	4d05      	ldr	r5, [pc, #20]	@ (8004cd8 <_write_r+0x20>)
 8004cc4:	602a      	str	r2, [r5, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	f7fe faa7 	bl	800321a <_write>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_write_r+0x1e>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_write_r+0x1e>
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	2000079c 	.word	0x2000079c

08004cdc <__errno>:
 8004cdc:	4b01      	ldr	r3, [pc, #4]	@ (8004ce4 <__errno+0x8>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20000074 	.word	0x20000074

08004ce8 <__libc_init_array>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	2600      	movs	r6, #0
 8004cec:	4d0c      	ldr	r5, [pc, #48]	@ (8004d20 <__libc_init_array+0x38>)
 8004cee:	4c0d      	ldr	r4, [pc, #52]	@ (8004d24 <__libc_init_array+0x3c>)
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	42a6      	cmp	r6, r4
 8004cf6:	d109      	bne.n	8004d0c <__libc_init_array+0x24>
 8004cf8:	f001 fec8 	bl	8006a8c <_init>
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	4d0a      	ldr	r5, [pc, #40]	@ (8004d28 <__libc_init_array+0x40>)
 8004d00:	4c0a      	ldr	r4, [pc, #40]	@ (8004d2c <__libc_init_array+0x44>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	42a6      	cmp	r6, r4
 8004d08:	d105      	bne.n	8004d16 <__libc_init_array+0x2e>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d10:	4798      	blx	r3
 8004d12:	3601      	adds	r6, #1
 8004d14:	e7ee      	b.n	8004cf4 <__libc_init_array+0xc>
 8004d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1a:	4798      	blx	r3
 8004d1c:	3601      	adds	r6, #1
 8004d1e:	e7f2      	b.n	8004d06 <__libc_init_array+0x1e>
 8004d20:	08006f58 	.word	0x08006f58
 8004d24:	08006f58 	.word	0x08006f58
 8004d28:	08006f58 	.word	0x08006f58
 8004d2c:	08006f5c 	.word	0x08006f5c

08004d30 <__retarget_lock_init_recursive>:
 8004d30:	4770      	bx	lr

08004d32 <__retarget_lock_acquire_recursive>:
 8004d32:	4770      	bx	lr

08004d34 <__retarget_lock_release_recursive>:
 8004d34:	4770      	bx	lr

08004d36 <memchr>:
 8004d36:	4603      	mov	r3, r0
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	b2c9      	uxtb	r1, r1
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	4618      	mov	r0, r3
 8004d42:	d101      	bne.n	8004d48 <memchr+0x12>
 8004d44:	2000      	movs	r0, #0
 8004d46:	e003      	b.n	8004d50 <memchr+0x1a>
 8004d48:	7804      	ldrb	r4, [r0, #0]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	428c      	cmp	r4, r1
 8004d4e:	d1f6      	bne.n	8004d3e <memchr+0x8>
 8004d50:	bd10      	pop	{r4, pc}

08004d52 <quorem>:
 8004d52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d56:	6903      	ldr	r3, [r0, #16]
 8004d58:	690c      	ldr	r4, [r1, #16]
 8004d5a:	4607      	mov	r7, r0
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	db7e      	blt.n	8004e5e <quorem+0x10c>
 8004d60:	3c01      	subs	r4, #1
 8004d62:	00a3      	lsls	r3, r4, #2
 8004d64:	f100 0514 	add.w	r5, r0, #20
 8004d68:	f101 0814 	add.w	r8, r1, #20
 8004d6c:	9300      	str	r3, [sp, #0]
 8004d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d72:	9301      	str	r3, [sp, #4]
 8004d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d88:	d32e      	bcc.n	8004de8 <quorem+0x96>
 8004d8a:	f04f 0a00 	mov.w	sl, #0
 8004d8e:	46c4      	mov	ip, r8
 8004d90:	46ae      	mov	lr, r5
 8004d92:	46d3      	mov	fp, sl
 8004d94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d98:	b298      	uxth	r0, r3
 8004d9a:	fb06 a000 	mla	r0, r6, r0, sl
 8004d9e:	0c1b      	lsrs	r3, r3, #16
 8004da0:	0c02      	lsrs	r2, r0, #16
 8004da2:	fb06 2303 	mla	r3, r6, r3, r2
 8004da6:	f8de 2000 	ldr.w	r2, [lr]
 8004daa:	b280      	uxth	r0, r0
 8004dac:	b292      	uxth	r2, r2
 8004dae:	1a12      	subs	r2, r2, r0
 8004db0:	445a      	add	r2, fp
 8004db2:	f8de 0000 	ldr.w	r0, [lr]
 8004db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004dc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004dca:	45e1      	cmp	r9, ip
 8004dcc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004dd0:	f84e 2b04 	str.w	r2, [lr], #4
 8004dd4:	d2de      	bcs.n	8004d94 <quorem+0x42>
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	58eb      	ldr	r3, [r5, r3]
 8004dda:	b92b      	cbnz	r3, 8004de8 <quorem+0x96>
 8004ddc:	9b01      	ldr	r3, [sp, #4]
 8004dde:	3b04      	subs	r3, #4
 8004de0:	429d      	cmp	r5, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	d32f      	bcc.n	8004e46 <quorem+0xf4>
 8004de6:	613c      	str	r4, [r7, #16]
 8004de8:	4638      	mov	r0, r7
 8004dea:	f001 f97b 	bl	80060e4 <__mcmp>
 8004dee:	2800      	cmp	r0, #0
 8004df0:	db25      	blt.n	8004e3e <quorem+0xec>
 8004df2:	4629      	mov	r1, r5
 8004df4:	2000      	movs	r0, #0
 8004df6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004dfa:	f8d1 c000 	ldr.w	ip, [r1]
 8004dfe:	fa1f fe82 	uxth.w	lr, r2
 8004e02:	fa1f f38c 	uxth.w	r3, ip
 8004e06:	eba3 030e 	sub.w	r3, r3, lr
 8004e0a:	4403      	add	r3, r0
 8004e0c:	0c12      	lsrs	r2, r2, #16
 8004e0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004e12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e1c:	45c1      	cmp	r9, r8
 8004e1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004e22:	f841 3b04 	str.w	r3, [r1], #4
 8004e26:	d2e6      	bcs.n	8004df6 <quorem+0xa4>
 8004e28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e30:	b922      	cbnz	r2, 8004e3c <quorem+0xea>
 8004e32:	3b04      	subs	r3, #4
 8004e34:	429d      	cmp	r5, r3
 8004e36:	461a      	mov	r2, r3
 8004e38:	d30b      	bcc.n	8004e52 <quorem+0x100>
 8004e3a:	613c      	str	r4, [r7, #16]
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	4630      	mov	r0, r6
 8004e40:	b003      	add	sp, #12
 8004e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	3b04      	subs	r3, #4
 8004e4a:	2a00      	cmp	r2, #0
 8004e4c:	d1cb      	bne.n	8004de6 <quorem+0x94>
 8004e4e:	3c01      	subs	r4, #1
 8004e50:	e7c6      	b.n	8004de0 <quorem+0x8e>
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	2a00      	cmp	r2, #0
 8004e58:	d1ef      	bne.n	8004e3a <quorem+0xe8>
 8004e5a:	3c01      	subs	r4, #1
 8004e5c:	e7ea      	b.n	8004e34 <quorem+0xe2>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	e7ee      	b.n	8004e40 <quorem+0xee>
 8004e62:	0000      	movs	r0, r0
 8004e64:	0000      	movs	r0, r0
	...

08004e68 <_dtoa_r>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	69c7      	ldr	r7, [r0, #28]
 8004e72:	b097      	sub	sp, #92	@ 0x5c
 8004e74:	4683      	mov	fp, r0
 8004e76:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004e7a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8004e7c:	b97f      	cbnz	r7, 8004e9e <_dtoa_r+0x36>
 8004e7e:	2010      	movs	r0, #16
 8004e80:	f000 fe02 	bl	8005a88 <malloc>
 8004e84:	4602      	mov	r2, r0
 8004e86:	f8cb 001c 	str.w	r0, [fp, #28]
 8004e8a:	b920      	cbnz	r0, 8004e96 <_dtoa_r+0x2e>
 8004e8c:	21ef      	movs	r1, #239	@ 0xef
 8004e8e:	4ba8      	ldr	r3, [pc, #672]	@ (8005130 <_dtoa_r+0x2c8>)
 8004e90:	48a8      	ldr	r0, [pc, #672]	@ (8005134 <_dtoa_r+0x2cc>)
 8004e92:	f001 faf5 	bl	8006480 <__assert_func>
 8004e96:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e9a:	6007      	str	r7, [r0, #0]
 8004e9c:	60c7      	str	r7, [r0, #12]
 8004e9e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	b159      	cbz	r1, 8004ebe <_dtoa_r+0x56>
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4093      	lsls	r3, r2
 8004eac:	604a      	str	r2, [r1, #4]
 8004eae:	608b      	str	r3, [r1, #8]
 8004eb0:	4658      	mov	r0, fp
 8004eb2:	f000 fedf 	bl	8005c74 <_Bfree>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	1e2b      	subs	r3, r5, #0
 8004ec0:	bfaf      	iteee	ge
 8004ec2:	2300      	movge	r3, #0
 8004ec4:	2201      	movlt	r2, #1
 8004ec6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004eca:	9303      	strlt	r3, [sp, #12]
 8004ecc:	bfa8      	it	ge
 8004ece:	6033      	strge	r3, [r6, #0]
 8004ed0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ed4:	4b98      	ldr	r3, [pc, #608]	@ (8005138 <_dtoa_r+0x2d0>)
 8004ed6:	bfb8      	it	lt
 8004ed8:	6032      	strlt	r2, [r6, #0]
 8004eda:	ea33 0308 	bics.w	r3, r3, r8
 8004ede:	d112      	bne.n	8004f06 <_dtoa_r+0x9e>
 8004ee0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004ee4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004eec:	4323      	orrs	r3, r4
 8004eee:	f000 8550 	beq.w	8005992 <_dtoa_r+0xb2a>
 8004ef2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004ef4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800513c <_dtoa_r+0x2d4>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8552 	beq.w	80059a2 <_dtoa_r+0xb3a>
 8004efe:	f10a 0303 	add.w	r3, sl, #3
 8004f02:	f000 bd4c 	b.w	800599e <_dtoa_r+0xb36>
 8004f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8004f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f12:	2200      	movs	r2, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	f7fb fd51 	bl	80009bc <__aeabi_dcmpeq>
 8004f1a:	4607      	mov	r7, r0
 8004f1c:	b158      	cbz	r0, 8004f36 <_dtoa_r+0xce>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004f26:	b113      	cbz	r3, 8004f2e <_dtoa_r+0xc6>
 8004f28:	4b85      	ldr	r3, [pc, #532]	@ (8005140 <_dtoa_r+0x2d8>)
 8004f2a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005144 <_dtoa_r+0x2dc>
 8004f32:	f000 bd36 	b.w	80059a2 <_dtoa_r+0xb3a>
 8004f36:	ab14      	add	r3, sp, #80	@ 0x50
 8004f38:	9301      	str	r3, [sp, #4]
 8004f3a:	ab15      	add	r3, sp, #84	@ 0x54
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	4658      	mov	r0, fp
 8004f40:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004f44:	f001 f97e 	bl	8006244 <__d2b>
 8004f48:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8004f4c:	4681      	mov	r9, r0
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	d077      	beq.n	8005042 <_dtoa_r+0x1da>
 8004f52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f58:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f60:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f64:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f68:	9712      	str	r7, [sp, #72]	@ 0x48
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4b76      	ldr	r3, [pc, #472]	@ (8005148 <_dtoa_r+0x2e0>)
 8004f70:	f7fb f904 	bl	800017c <__aeabi_dsub>
 8004f74:	a368      	add	r3, pc, #416	@ (adr r3, 8005118 <_dtoa_r+0x2b0>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f7fb fab7 	bl	80004ec <__aeabi_dmul>
 8004f7e:	a368      	add	r3, pc, #416	@ (adr r3, 8005120 <_dtoa_r+0x2b8>)
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f7fb f8fc 	bl	8000180 <__adddf3>
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	f7fb fa43 	bl	8000418 <__aeabi_i2d>
 8004f92:	a365      	add	r3, pc, #404	@ (adr r3, 8005128 <_dtoa_r+0x2c0>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f7fb faa8 	bl	80004ec <__aeabi_dmul>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb f8ec 	bl	8000180 <__adddf3>
 8004fa8:	4604      	mov	r4, r0
 8004faa:	460d      	mov	r5, r1
 8004fac:	f7fb fd4e 	bl	8000a4c <__aeabi_d2iz>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	4607      	mov	r7, r0
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	4629      	mov	r1, r5
 8004fba:	f7fb fd09 	bl	80009d0 <__aeabi_dcmplt>
 8004fbe:	b140      	cbz	r0, 8004fd2 <_dtoa_r+0x16a>
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	f7fb fa29 	bl	8000418 <__aeabi_i2d>
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	f7fb fcf7 	bl	80009bc <__aeabi_dcmpeq>
 8004fce:	b900      	cbnz	r0, 8004fd2 <_dtoa_r+0x16a>
 8004fd0:	3f01      	subs	r7, #1
 8004fd2:	2f16      	cmp	r7, #22
 8004fd4:	d853      	bhi.n	800507e <_dtoa_r+0x216>
 8004fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fda:	4b5c      	ldr	r3, [pc, #368]	@ (800514c <_dtoa_r+0x2e4>)
 8004fdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb fcf4 	bl	80009d0 <__aeabi_dcmplt>
 8004fe8:	2800      	cmp	r0, #0
 8004fea:	d04a      	beq.n	8005082 <_dtoa_r+0x21a>
 8004fec:	2300      	movs	r3, #0
 8004fee:	3f01      	subs	r7, #1
 8004ff0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004ff2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ff4:	1b9b      	subs	r3, r3, r6
 8004ff6:	1e5a      	subs	r2, r3, #1
 8004ff8:	bf46      	itte	mi
 8004ffa:	f1c3 0801 	rsbmi	r8, r3, #1
 8004ffe:	2300      	movmi	r3, #0
 8005000:	f04f 0800 	movpl.w	r8, #0
 8005004:	9209      	str	r2, [sp, #36]	@ 0x24
 8005006:	bf48      	it	mi
 8005008:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800500a:	2f00      	cmp	r7, #0
 800500c:	db3b      	blt.n	8005086 <_dtoa_r+0x21e>
 800500e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005010:	970e      	str	r7, [sp, #56]	@ 0x38
 8005012:	443b      	add	r3, r7
 8005014:	9309      	str	r3, [sp, #36]	@ 0x24
 8005016:	2300      	movs	r3, #0
 8005018:	930a      	str	r3, [sp, #40]	@ 0x28
 800501a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800501c:	2b09      	cmp	r3, #9
 800501e:	d866      	bhi.n	80050ee <_dtoa_r+0x286>
 8005020:	2b05      	cmp	r3, #5
 8005022:	bfc4      	itt	gt
 8005024:	3b04      	subgt	r3, #4
 8005026:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005028:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800502a:	bfc8      	it	gt
 800502c:	2400      	movgt	r4, #0
 800502e:	f1a3 0302 	sub.w	r3, r3, #2
 8005032:	bfd8      	it	le
 8005034:	2401      	movle	r4, #1
 8005036:	2b03      	cmp	r3, #3
 8005038:	d864      	bhi.n	8005104 <_dtoa_r+0x29c>
 800503a:	e8df f003 	tbb	[pc, r3]
 800503e:	382b      	.short	0x382b
 8005040:	5636      	.short	0x5636
 8005042:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005046:	441e      	add	r6, r3
 8005048:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800504c:	2b20      	cmp	r3, #32
 800504e:	bfc1      	itttt	gt
 8005050:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005054:	fa08 f803 	lslgt.w	r8, r8, r3
 8005058:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800505c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005060:	bfd6      	itet	le
 8005062:	f1c3 0320 	rsble	r3, r3, #32
 8005066:	ea48 0003 	orrgt.w	r0, r8, r3
 800506a:	fa04 f003 	lslle.w	r0, r4, r3
 800506e:	f7fb f9c3 	bl	80003f8 <__aeabi_ui2d>
 8005072:	2201      	movs	r2, #1
 8005074:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005078:	3e01      	subs	r6, #1
 800507a:	9212      	str	r2, [sp, #72]	@ 0x48
 800507c:	e775      	b.n	8004f6a <_dtoa_r+0x102>
 800507e:	2301      	movs	r3, #1
 8005080:	e7b6      	b.n	8004ff0 <_dtoa_r+0x188>
 8005082:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005084:	e7b5      	b.n	8004ff2 <_dtoa_r+0x18a>
 8005086:	427b      	negs	r3, r7
 8005088:	930a      	str	r3, [sp, #40]	@ 0x28
 800508a:	2300      	movs	r3, #0
 800508c:	eba8 0807 	sub.w	r8, r8, r7
 8005090:	930e      	str	r3, [sp, #56]	@ 0x38
 8005092:	e7c2      	b.n	800501a <_dtoa_r+0x1b2>
 8005094:	2300      	movs	r3, #0
 8005096:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005098:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800509a:	2b00      	cmp	r3, #0
 800509c:	dc35      	bgt.n	800510a <_dtoa_r+0x2a2>
 800509e:	2301      	movs	r3, #1
 80050a0:	461a      	mov	r2, r3
 80050a2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80050a6:	9221      	str	r2, [sp, #132]	@ 0x84
 80050a8:	e00b      	b.n	80050c2 <_dtoa_r+0x25a>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e7f3      	b.n	8005096 <_dtoa_r+0x22e>
 80050ae:	2300      	movs	r3, #0
 80050b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	9308      	str	r3, [sp, #32]
 80050b8:	3301      	adds	r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	9307      	str	r3, [sp, #28]
 80050be:	bfb8      	it	lt
 80050c0:	2301      	movlt	r3, #1
 80050c2:	2100      	movs	r1, #0
 80050c4:	2204      	movs	r2, #4
 80050c6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80050ca:	f102 0514 	add.w	r5, r2, #20
 80050ce:	429d      	cmp	r5, r3
 80050d0:	d91f      	bls.n	8005112 <_dtoa_r+0x2aa>
 80050d2:	6041      	str	r1, [r0, #4]
 80050d4:	4658      	mov	r0, fp
 80050d6:	f000 fd8d 	bl	8005bf4 <_Balloc>
 80050da:	4682      	mov	sl, r0
 80050dc:	2800      	cmp	r0, #0
 80050de:	d139      	bne.n	8005154 <_dtoa_r+0x2ec>
 80050e0:	4602      	mov	r2, r0
 80050e2:	f240 11af 	movw	r1, #431	@ 0x1af
 80050e6:	4b1a      	ldr	r3, [pc, #104]	@ (8005150 <_dtoa_r+0x2e8>)
 80050e8:	e6d2      	b.n	8004e90 <_dtoa_r+0x28>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e7e0      	b.n	80050b0 <_dtoa_r+0x248>
 80050ee:	2401      	movs	r4, #1
 80050f0:	2300      	movs	r3, #0
 80050f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80050f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295
 80050fa:	2200      	movs	r2, #0
 80050fc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005100:	2312      	movs	r3, #18
 8005102:	e7d0      	b.n	80050a6 <_dtoa_r+0x23e>
 8005104:	2301      	movs	r3, #1
 8005106:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005108:	e7f5      	b.n	80050f6 <_dtoa_r+0x28e>
 800510a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800510c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005110:	e7d7      	b.n	80050c2 <_dtoa_r+0x25a>
 8005112:	3101      	adds	r1, #1
 8005114:	0052      	lsls	r2, r2, #1
 8005116:	e7d8      	b.n	80050ca <_dtoa_r+0x262>
 8005118:	636f4361 	.word	0x636f4361
 800511c:	3fd287a7 	.word	0x3fd287a7
 8005120:	8b60c8b3 	.word	0x8b60c8b3
 8005124:	3fc68a28 	.word	0x3fc68a28
 8005128:	509f79fb 	.word	0x509f79fb
 800512c:	3fd34413 	.word	0x3fd34413
 8005130:	08006c1d 	.word	0x08006c1d
 8005134:	08006c34 	.word	0x08006c34
 8005138:	7ff00000 	.word	0x7ff00000
 800513c:	08006c19 	.word	0x08006c19
 8005140:	08006bed 	.word	0x08006bed
 8005144:	08006bec 	.word	0x08006bec
 8005148:	3ff80000 	.word	0x3ff80000
 800514c:	08006d30 	.word	0x08006d30
 8005150:	08006c8c 	.word	0x08006c8c
 8005154:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005158:	6018      	str	r0, [r3, #0]
 800515a:	9b07      	ldr	r3, [sp, #28]
 800515c:	2b0e      	cmp	r3, #14
 800515e:	f200 80a4 	bhi.w	80052aa <_dtoa_r+0x442>
 8005162:	2c00      	cmp	r4, #0
 8005164:	f000 80a1 	beq.w	80052aa <_dtoa_r+0x442>
 8005168:	2f00      	cmp	r7, #0
 800516a:	dd33      	ble.n	80051d4 <_dtoa_r+0x36c>
 800516c:	4b86      	ldr	r3, [pc, #536]	@ (8005388 <_dtoa_r+0x520>)
 800516e:	f007 020f 	and.w	r2, r7, #15
 8005172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005176:	05f8      	lsls	r0, r7, #23
 8005178:	e9d3 3400 	ldrd	r3, r4, [r3]
 800517c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005184:	d516      	bpl.n	80051b4 <_dtoa_r+0x34c>
 8005186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800518a:	4b80      	ldr	r3, [pc, #512]	@ (800538c <_dtoa_r+0x524>)
 800518c:	2603      	movs	r6, #3
 800518e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005192:	f7fb fad5 	bl	8000740 <__aeabi_ddiv>
 8005196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800519a:	f004 040f 	and.w	r4, r4, #15
 800519e:	4d7b      	ldr	r5, [pc, #492]	@ (800538c <_dtoa_r+0x524>)
 80051a0:	b954      	cbnz	r4, 80051b8 <_dtoa_r+0x350>
 80051a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051aa:	f7fb fac9 	bl	8000740 <__aeabi_ddiv>
 80051ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b2:	e028      	b.n	8005206 <_dtoa_r+0x39e>
 80051b4:	2602      	movs	r6, #2
 80051b6:	e7f2      	b.n	800519e <_dtoa_r+0x336>
 80051b8:	07e1      	lsls	r1, r4, #31
 80051ba:	d508      	bpl.n	80051ce <_dtoa_r+0x366>
 80051bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051c4:	f7fb f992 	bl	80004ec <__aeabi_dmul>
 80051c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051cc:	3601      	adds	r6, #1
 80051ce:	1064      	asrs	r4, r4, #1
 80051d0:	3508      	adds	r5, #8
 80051d2:	e7e5      	b.n	80051a0 <_dtoa_r+0x338>
 80051d4:	f000 80d2 	beq.w	800537c <_dtoa_r+0x514>
 80051d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051dc:	427c      	negs	r4, r7
 80051de:	4b6a      	ldr	r3, [pc, #424]	@ (8005388 <_dtoa_r+0x520>)
 80051e0:	f004 020f 	and.w	r2, r4, #15
 80051e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	f7fb f97e 	bl	80004ec <__aeabi_dmul>
 80051f0:	2602      	movs	r6, #2
 80051f2:	2300      	movs	r3, #0
 80051f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051f8:	4d64      	ldr	r5, [pc, #400]	@ (800538c <_dtoa_r+0x524>)
 80051fa:	1124      	asrs	r4, r4, #4
 80051fc:	2c00      	cmp	r4, #0
 80051fe:	f040 80b2 	bne.w	8005366 <_dtoa_r+0x4fe>
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1d3      	bne.n	80051ae <_dtoa_r+0x346>
 8005206:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800520a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 80b7 	beq.w	8005380 <_dtoa_r+0x518>
 8005212:	2200      	movs	r2, #0
 8005214:	4620      	mov	r0, r4
 8005216:	4629      	mov	r1, r5
 8005218:	4b5d      	ldr	r3, [pc, #372]	@ (8005390 <_dtoa_r+0x528>)
 800521a:	f7fb fbd9 	bl	80009d0 <__aeabi_dcmplt>
 800521e:	2800      	cmp	r0, #0
 8005220:	f000 80ae 	beq.w	8005380 <_dtoa_r+0x518>
 8005224:	9b07      	ldr	r3, [sp, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80aa 	beq.w	8005380 <_dtoa_r+0x518>
 800522c:	9b08      	ldr	r3, [sp, #32]
 800522e:	2b00      	cmp	r3, #0
 8005230:	dd37      	ble.n	80052a2 <_dtoa_r+0x43a>
 8005232:	1e7b      	subs	r3, r7, #1
 8005234:	4620      	mov	r0, r4
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	2200      	movs	r2, #0
 800523a:	4629      	mov	r1, r5
 800523c:	4b55      	ldr	r3, [pc, #340]	@ (8005394 <_dtoa_r+0x52c>)
 800523e:	f7fb f955 	bl	80004ec <__aeabi_dmul>
 8005242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005246:	9c08      	ldr	r4, [sp, #32]
 8005248:	3601      	adds	r6, #1
 800524a:	4630      	mov	r0, r6
 800524c:	f7fb f8e4 	bl	8000418 <__aeabi_i2d>
 8005250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005254:	f7fb f94a 	bl	80004ec <__aeabi_dmul>
 8005258:	2200      	movs	r2, #0
 800525a:	4b4f      	ldr	r3, [pc, #316]	@ (8005398 <_dtoa_r+0x530>)
 800525c:	f7fa ff90 	bl	8000180 <__adddf3>
 8005260:	4605      	mov	r5, r0
 8005262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005266:	2c00      	cmp	r4, #0
 8005268:	f040 809a 	bne.w	80053a0 <_dtoa_r+0x538>
 800526c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005270:	2200      	movs	r2, #0
 8005272:	4b4a      	ldr	r3, [pc, #296]	@ (800539c <_dtoa_r+0x534>)
 8005274:	f7fa ff82 	bl	800017c <__aeabi_dsub>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005280:	462a      	mov	r2, r5
 8005282:	4633      	mov	r3, r6
 8005284:	f7fb fbc2 	bl	8000a0c <__aeabi_dcmpgt>
 8005288:	2800      	cmp	r0, #0
 800528a:	f040 828e 	bne.w	80057aa <_dtoa_r+0x942>
 800528e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005292:	462a      	mov	r2, r5
 8005294:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005298:	f7fb fb9a 	bl	80009d0 <__aeabi_dcmplt>
 800529c:	2800      	cmp	r0, #0
 800529e:	f040 8127 	bne.w	80054f0 <_dtoa_r+0x688>
 80052a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80052a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80052aa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f2c0 8163 	blt.w	8005578 <_dtoa_r+0x710>
 80052b2:	2f0e      	cmp	r7, #14
 80052b4:	f300 8160 	bgt.w	8005578 <_dtoa_r+0x710>
 80052b8:	4b33      	ldr	r3, [pc, #204]	@ (8005388 <_dtoa_r+0x520>)
 80052ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80052be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80052c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da03      	bge.n	80052d4 <_dtoa_r+0x46c>
 80052cc:	9b07      	ldr	r3, [sp, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f340 8100 	ble.w	80054d4 <_dtoa_r+0x66c>
 80052d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80052d8:	4656      	mov	r6, sl
 80052da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052de:	4620      	mov	r0, r4
 80052e0:	4629      	mov	r1, r5
 80052e2:	f7fb fa2d 	bl	8000740 <__aeabi_ddiv>
 80052e6:	f7fb fbb1 	bl	8000a4c <__aeabi_d2iz>
 80052ea:	4680      	mov	r8, r0
 80052ec:	f7fb f894 	bl	8000418 <__aeabi_i2d>
 80052f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f4:	f7fb f8fa 	bl	80004ec <__aeabi_dmul>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4620      	mov	r0, r4
 80052fe:	4629      	mov	r1, r5
 8005300:	f7fa ff3c 	bl	800017c <__aeabi_dsub>
 8005304:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005308:	9d07      	ldr	r5, [sp, #28]
 800530a:	f806 4b01 	strb.w	r4, [r6], #1
 800530e:	eba6 040a 	sub.w	r4, r6, sl
 8005312:	42a5      	cmp	r5, r4
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	f040 8116 	bne.w	8005548 <_dtoa_r+0x6e0>
 800531c:	f7fa ff30 	bl	8000180 <__adddf3>
 8005320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005324:	4604      	mov	r4, r0
 8005326:	460d      	mov	r5, r1
 8005328:	f7fb fb70 	bl	8000a0c <__aeabi_dcmpgt>
 800532c:	2800      	cmp	r0, #0
 800532e:	f040 80f8 	bne.w	8005522 <_dtoa_r+0x6ba>
 8005332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005336:	4620      	mov	r0, r4
 8005338:	4629      	mov	r1, r5
 800533a:	f7fb fb3f 	bl	80009bc <__aeabi_dcmpeq>
 800533e:	b118      	cbz	r0, 8005348 <_dtoa_r+0x4e0>
 8005340:	f018 0f01 	tst.w	r8, #1
 8005344:	f040 80ed 	bne.w	8005522 <_dtoa_r+0x6ba>
 8005348:	4649      	mov	r1, r9
 800534a:	4658      	mov	r0, fp
 800534c:	f000 fc92 	bl	8005c74 <_Bfree>
 8005350:	2300      	movs	r3, #0
 8005352:	7033      	strb	r3, [r6, #0]
 8005354:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005356:	3701      	adds	r7, #1
 8005358:	601f      	str	r7, [r3, #0]
 800535a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8320 	beq.w	80059a2 <_dtoa_r+0xb3a>
 8005362:	601e      	str	r6, [r3, #0]
 8005364:	e31d      	b.n	80059a2 <_dtoa_r+0xb3a>
 8005366:	07e2      	lsls	r2, r4, #31
 8005368:	d505      	bpl.n	8005376 <_dtoa_r+0x50e>
 800536a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800536e:	f7fb f8bd 	bl	80004ec <__aeabi_dmul>
 8005372:	2301      	movs	r3, #1
 8005374:	3601      	adds	r6, #1
 8005376:	1064      	asrs	r4, r4, #1
 8005378:	3508      	adds	r5, #8
 800537a:	e73f      	b.n	80051fc <_dtoa_r+0x394>
 800537c:	2602      	movs	r6, #2
 800537e:	e742      	b.n	8005206 <_dtoa_r+0x39e>
 8005380:	9c07      	ldr	r4, [sp, #28]
 8005382:	9704      	str	r7, [sp, #16]
 8005384:	e761      	b.n	800524a <_dtoa_r+0x3e2>
 8005386:	bf00      	nop
 8005388:	08006d30 	.word	0x08006d30
 800538c:	08006d08 	.word	0x08006d08
 8005390:	3ff00000 	.word	0x3ff00000
 8005394:	40240000 	.word	0x40240000
 8005398:	401c0000 	.word	0x401c0000
 800539c:	40140000 	.word	0x40140000
 80053a0:	4b70      	ldr	r3, [pc, #448]	@ (8005564 <_dtoa_r+0x6fc>)
 80053a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80053a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80053a8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053ac:	4454      	add	r4, sl
 80053ae:	2900      	cmp	r1, #0
 80053b0:	d045      	beq.n	800543e <_dtoa_r+0x5d6>
 80053b2:	2000      	movs	r0, #0
 80053b4:	496c      	ldr	r1, [pc, #432]	@ (8005568 <_dtoa_r+0x700>)
 80053b6:	f7fb f9c3 	bl	8000740 <__aeabi_ddiv>
 80053ba:	4633      	mov	r3, r6
 80053bc:	462a      	mov	r2, r5
 80053be:	f7fa fedd 	bl	800017c <__aeabi_dsub>
 80053c2:	4656      	mov	r6, sl
 80053c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80053c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053cc:	f7fb fb3e 	bl	8000a4c <__aeabi_d2iz>
 80053d0:	4605      	mov	r5, r0
 80053d2:	f7fb f821 	bl	8000418 <__aeabi_i2d>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053de:	f7fa fecd 	bl	800017c <__aeabi_dsub>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	3530      	adds	r5, #48	@ 0x30
 80053e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80053ec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053f0:	f806 5b01 	strb.w	r5, [r6], #1
 80053f4:	f7fb faec 	bl	80009d0 <__aeabi_dcmplt>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d163      	bne.n	80054c4 <_dtoa_r+0x65c>
 80053fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005400:	2000      	movs	r0, #0
 8005402:	495a      	ldr	r1, [pc, #360]	@ (800556c <_dtoa_r+0x704>)
 8005404:	f7fa feba 	bl	800017c <__aeabi_dsub>
 8005408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800540c:	f7fb fae0 	bl	80009d0 <__aeabi_dcmplt>
 8005410:	2800      	cmp	r0, #0
 8005412:	f040 8087 	bne.w	8005524 <_dtoa_r+0x6bc>
 8005416:	42a6      	cmp	r6, r4
 8005418:	f43f af43 	beq.w	80052a2 <_dtoa_r+0x43a>
 800541c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005420:	2200      	movs	r2, #0
 8005422:	4b53      	ldr	r3, [pc, #332]	@ (8005570 <_dtoa_r+0x708>)
 8005424:	f7fb f862 	bl	80004ec <__aeabi_dmul>
 8005428:	2200      	movs	r2, #0
 800542a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800542e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005432:	4b4f      	ldr	r3, [pc, #316]	@ (8005570 <_dtoa_r+0x708>)
 8005434:	f7fb f85a 	bl	80004ec <__aeabi_dmul>
 8005438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800543c:	e7c4      	b.n	80053c8 <_dtoa_r+0x560>
 800543e:	4631      	mov	r1, r6
 8005440:	4628      	mov	r0, r5
 8005442:	f7fb f853 	bl	80004ec <__aeabi_dmul>
 8005446:	4656      	mov	r6, sl
 8005448:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800544c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800544e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005452:	f7fb fafb 	bl	8000a4c <__aeabi_d2iz>
 8005456:	4605      	mov	r5, r0
 8005458:	f7fa ffde 	bl	8000418 <__aeabi_i2d>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005464:	f7fa fe8a 	bl	800017c <__aeabi_dsub>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	3530      	adds	r5, #48	@ 0x30
 800546e:	f806 5b01 	strb.w	r5, [r6], #1
 8005472:	42a6      	cmp	r6, r4
 8005474:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	d124      	bne.n	80054c8 <_dtoa_r+0x660>
 800547e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005482:	4b39      	ldr	r3, [pc, #228]	@ (8005568 <_dtoa_r+0x700>)
 8005484:	f7fa fe7c 	bl	8000180 <__adddf3>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005490:	f7fb fabc 	bl	8000a0c <__aeabi_dcmpgt>
 8005494:	2800      	cmp	r0, #0
 8005496:	d145      	bne.n	8005524 <_dtoa_r+0x6bc>
 8005498:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800549c:	2000      	movs	r0, #0
 800549e:	4932      	ldr	r1, [pc, #200]	@ (8005568 <_dtoa_r+0x700>)
 80054a0:	f7fa fe6c 	bl	800017c <__aeabi_dsub>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ac:	f7fb fa90 	bl	80009d0 <__aeabi_dcmplt>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	f43f aef6 	beq.w	80052a2 <_dtoa_r+0x43a>
 80054b6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80054b8:	1e73      	subs	r3, r6, #1
 80054ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80054bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80054c0:	2b30      	cmp	r3, #48	@ 0x30
 80054c2:	d0f8      	beq.n	80054b6 <_dtoa_r+0x64e>
 80054c4:	9f04      	ldr	r7, [sp, #16]
 80054c6:	e73f      	b.n	8005348 <_dtoa_r+0x4e0>
 80054c8:	4b29      	ldr	r3, [pc, #164]	@ (8005570 <_dtoa_r+0x708>)
 80054ca:	f7fb f80f 	bl	80004ec <__aeabi_dmul>
 80054ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054d2:	e7bc      	b.n	800544e <_dtoa_r+0x5e6>
 80054d4:	d10c      	bne.n	80054f0 <_dtoa_r+0x688>
 80054d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054da:	2200      	movs	r2, #0
 80054dc:	4b25      	ldr	r3, [pc, #148]	@ (8005574 <_dtoa_r+0x70c>)
 80054de:	f7fb f805 	bl	80004ec <__aeabi_dmul>
 80054e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054e6:	f7fb fa87 	bl	80009f8 <__aeabi_dcmpge>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	f000 815b 	beq.w	80057a6 <_dtoa_r+0x93e>
 80054f0:	2400      	movs	r4, #0
 80054f2:	4625      	mov	r5, r4
 80054f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054f6:	4656      	mov	r6, sl
 80054f8:	43db      	mvns	r3, r3
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	2700      	movs	r7, #0
 80054fe:	4621      	mov	r1, r4
 8005500:	4658      	mov	r0, fp
 8005502:	f000 fbb7 	bl	8005c74 <_Bfree>
 8005506:	2d00      	cmp	r5, #0
 8005508:	d0dc      	beq.n	80054c4 <_dtoa_r+0x65c>
 800550a:	b12f      	cbz	r7, 8005518 <_dtoa_r+0x6b0>
 800550c:	42af      	cmp	r7, r5
 800550e:	d003      	beq.n	8005518 <_dtoa_r+0x6b0>
 8005510:	4639      	mov	r1, r7
 8005512:	4658      	mov	r0, fp
 8005514:	f000 fbae 	bl	8005c74 <_Bfree>
 8005518:	4629      	mov	r1, r5
 800551a:	4658      	mov	r0, fp
 800551c:	f000 fbaa 	bl	8005c74 <_Bfree>
 8005520:	e7d0      	b.n	80054c4 <_dtoa_r+0x65c>
 8005522:	9704      	str	r7, [sp, #16]
 8005524:	4633      	mov	r3, r6
 8005526:	461e      	mov	r6, r3
 8005528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800552c:	2a39      	cmp	r2, #57	@ 0x39
 800552e:	d107      	bne.n	8005540 <_dtoa_r+0x6d8>
 8005530:	459a      	cmp	sl, r3
 8005532:	d1f8      	bne.n	8005526 <_dtoa_r+0x6be>
 8005534:	9a04      	ldr	r2, [sp, #16]
 8005536:	3201      	adds	r2, #1
 8005538:	9204      	str	r2, [sp, #16]
 800553a:	2230      	movs	r2, #48	@ 0x30
 800553c:	f88a 2000 	strb.w	r2, [sl]
 8005540:	781a      	ldrb	r2, [r3, #0]
 8005542:	3201      	adds	r2, #1
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	e7bd      	b.n	80054c4 <_dtoa_r+0x65c>
 8005548:	2200      	movs	r2, #0
 800554a:	4b09      	ldr	r3, [pc, #36]	@ (8005570 <_dtoa_r+0x708>)
 800554c:	f7fa ffce 	bl	80004ec <__aeabi_dmul>
 8005550:	2200      	movs	r2, #0
 8005552:	2300      	movs	r3, #0
 8005554:	4604      	mov	r4, r0
 8005556:	460d      	mov	r5, r1
 8005558:	f7fb fa30 	bl	80009bc <__aeabi_dcmpeq>
 800555c:	2800      	cmp	r0, #0
 800555e:	f43f aebc 	beq.w	80052da <_dtoa_r+0x472>
 8005562:	e6f1      	b.n	8005348 <_dtoa_r+0x4e0>
 8005564:	08006d30 	.word	0x08006d30
 8005568:	3fe00000 	.word	0x3fe00000
 800556c:	3ff00000 	.word	0x3ff00000
 8005570:	40240000 	.word	0x40240000
 8005574:	40140000 	.word	0x40140000
 8005578:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800557a:	2a00      	cmp	r2, #0
 800557c:	f000 80db 	beq.w	8005736 <_dtoa_r+0x8ce>
 8005580:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005582:	2a01      	cmp	r2, #1
 8005584:	f300 80bf 	bgt.w	8005706 <_dtoa_r+0x89e>
 8005588:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800558a:	2a00      	cmp	r2, #0
 800558c:	f000 80b7 	beq.w	80056fe <_dtoa_r+0x896>
 8005590:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005594:	4646      	mov	r6, r8
 8005596:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005598:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800559a:	2101      	movs	r1, #1
 800559c:	441a      	add	r2, r3
 800559e:	4658      	mov	r0, fp
 80055a0:	4498      	add	r8, r3
 80055a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055a4:	f000 fc1a 	bl	8005ddc <__i2b>
 80055a8:	4605      	mov	r5, r0
 80055aa:	b15e      	cbz	r6, 80055c4 <_dtoa_r+0x75c>
 80055ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	dd08      	ble.n	80055c4 <_dtoa_r+0x75c>
 80055b2:	42b3      	cmp	r3, r6
 80055b4:	bfa8      	it	ge
 80055b6:	4633      	movge	r3, r6
 80055b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055ba:	eba8 0803 	sub.w	r8, r8, r3
 80055be:	1af6      	subs	r6, r6, r3
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055c6:	b1f3      	cbz	r3, 8005606 <_dtoa_r+0x79e>
 80055c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80b7 	beq.w	800573e <_dtoa_r+0x8d6>
 80055d0:	b18c      	cbz	r4, 80055f6 <_dtoa_r+0x78e>
 80055d2:	4629      	mov	r1, r5
 80055d4:	4622      	mov	r2, r4
 80055d6:	4658      	mov	r0, fp
 80055d8:	f000 fcbe 	bl	8005f58 <__pow5mult>
 80055dc:	464a      	mov	r2, r9
 80055de:	4601      	mov	r1, r0
 80055e0:	4605      	mov	r5, r0
 80055e2:	4658      	mov	r0, fp
 80055e4:	f000 fc10 	bl	8005e08 <__multiply>
 80055e8:	4649      	mov	r1, r9
 80055ea:	9004      	str	r0, [sp, #16]
 80055ec:	4658      	mov	r0, fp
 80055ee:	f000 fb41 	bl	8005c74 <_Bfree>
 80055f2:	9b04      	ldr	r3, [sp, #16]
 80055f4:	4699      	mov	r9, r3
 80055f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055f8:	1b1a      	subs	r2, r3, r4
 80055fa:	d004      	beq.n	8005606 <_dtoa_r+0x79e>
 80055fc:	4649      	mov	r1, r9
 80055fe:	4658      	mov	r0, fp
 8005600:	f000 fcaa 	bl	8005f58 <__pow5mult>
 8005604:	4681      	mov	r9, r0
 8005606:	2101      	movs	r1, #1
 8005608:	4658      	mov	r0, fp
 800560a:	f000 fbe7 	bl	8005ddc <__i2b>
 800560e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005610:	4604      	mov	r4, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 81c9 	beq.w	80059aa <_dtoa_r+0xb42>
 8005618:	461a      	mov	r2, r3
 800561a:	4601      	mov	r1, r0
 800561c:	4658      	mov	r0, fp
 800561e:	f000 fc9b 	bl	8005f58 <__pow5mult>
 8005622:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005624:	4604      	mov	r4, r0
 8005626:	2b01      	cmp	r3, #1
 8005628:	f300 808f 	bgt.w	800574a <_dtoa_r+0x8e2>
 800562c:	9b02      	ldr	r3, [sp, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f040 8087 	bne.w	8005742 <_dtoa_r+0x8da>
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800563a:	2b00      	cmp	r3, #0
 800563c:	f040 8083 	bne.w	8005746 <_dtoa_r+0x8de>
 8005640:	9b03      	ldr	r3, [sp, #12]
 8005642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005646:	0d1b      	lsrs	r3, r3, #20
 8005648:	051b      	lsls	r3, r3, #20
 800564a:	b12b      	cbz	r3, 8005658 <_dtoa_r+0x7f0>
 800564c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800564e:	f108 0801 	add.w	r8, r8, #1
 8005652:	3301      	adds	r3, #1
 8005654:	9309      	str	r3, [sp, #36]	@ 0x24
 8005656:	2301      	movs	r3, #1
 8005658:	930a      	str	r3, [sp, #40]	@ 0x28
 800565a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 81aa 	beq.w	80059b6 <_dtoa_r+0xb4e>
 8005662:	6923      	ldr	r3, [r4, #16]
 8005664:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005668:	6918      	ldr	r0, [r3, #16]
 800566a:	f000 fb6b 	bl	8005d44 <__hi0bits>
 800566e:	f1c0 0020 	rsb	r0, r0, #32
 8005672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005674:	4418      	add	r0, r3
 8005676:	f010 001f 	ands.w	r0, r0, #31
 800567a:	d071      	beq.n	8005760 <_dtoa_r+0x8f8>
 800567c:	f1c0 0320 	rsb	r3, r0, #32
 8005680:	2b04      	cmp	r3, #4
 8005682:	dd65      	ble.n	8005750 <_dtoa_r+0x8e8>
 8005684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005686:	f1c0 001c 	rsb	r0, r0, #28
 800568a:	4403      	add	r3, r0
 800568c:	4480      	add	r8, r0
 800568e:	4406      	add	r6, r0
 8005690:	9309      	str	r3, [sp, #36]	@ 0x24
 8005692:	f1b8 0f00 	cmp.w	r8, #0
 8005696:	dd05      	ble.n	80056a4 <_dtoa_r+0x83c>
 8005698:	4649      	mov	r1, r9
 800569a:	4642      	mov	r2, r8
 800569c:	4658      	mov	r0, fp
 800569e:	f000 fcb5 	bl	800600c <__lshift>
 80056a2:	4681      	mov	r9, r0
 80056a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dd05      	ble.n	80056b6 <_dtoa_r+0x84e>
 80056aa:	4621      	mov	r1, r4
 80056ac:	461a      	mov	r2, r3
 80056ae:	4658      	mov	r0, fp
 80056b0:	f000 fcac 	bl	800600c <__lshift>
 80056b4:	4604      	mov	r4, r0
 80056b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d053      	beq.n	8005764 <_dtoa_r+0x8fc>
 80056bc:	4621      	mov	r1, r4
 80056be:	4648      	mov	r0, r9
 80056c0:	f000 fd10 	bl	80060e4 <__mcmp>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	da4d      	bge.n	8005764 <_dtoa_r+0x8fc>
 80056c8:	1e7b      	subs	r3, r7, #1
 80056ca:	4649      	mov	r1, r9
 80056cc:	9304      	str	r3, [sp, #16]
 80056ce:	220a      	movs	r2, #10
 80056d0:	2300      	movs	r3, #0
 80056d2:	4658      	mov	r0, fp
 80056d4:	f000 faf0 	bl	8005cb8 <__multadd>
 80056d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056da:	4681      	mov	r9, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f000 816c 	beq.w	80059ba <_dtoa_r+0xb52>
 80056e2:	2300      	movs	r3, #0
 80056e4:	4629      	mov	r1, r5
 80056e6:	220a      	movs	r2, #10
 80056e8:	4658      	mov	r0, fp
 80056ea:	f000 fae5 	bl	8005cb8 <__multadd>
 80056ee:	9b08      	ldr	r3, [sp, #32]
 80056f0:	4605      	mov	r5, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	dc61      	bgt.n	80057ba <_dtoa_r+0x952>
 80056f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	dc3b      	bgt.n	8005774 <_dtoa_r+0x90c>
 80056fc:	e05d      	b.n	80057ba <_dtoa_r+0x952>
 80056fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005700:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005704:	e746      	b.n	8005594 <_dtoa_r+0x72c>
 8005706:	9b07      	ldr	r3, [sp, #28]
 8005708:	1e5c      	subs	r4, r3, #1
 800570a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800570c:	42a3      	cmp	r3, r4
 800570e:	bfbf      	itttt	lt
 8005710:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005712:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005714:	1ae3      	sublt	r3, r4, r3
 8005716:	18d2      	addlt	r2, r2, r3
 8005718:	bfa8      	it	ge
 800571a:	1b1c      	subge	r4, r3, r4
 800571c:	9b07      	ldr	r3, [sp, #28]
 800571e:	bfbe      	ittt	lt
 8005720:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005722:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005724:	2400      	movlt	r4, #0
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb5      	itete	lt
 800572a:	eba8 0603 	sublt.w	r6, r8, r3
 800572e:	4646      	movge	r6, r8
 8005730:	2300      	movlt	r3, #0
 8005732:	9b07      	ldrge	r3, [sp, #28]
 8005734:	e730      	b.n	8005598 <_dtoa_r+0x730>
 8005736:	4646      	mov	r6, r8
 8005738:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800573a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800573c:	e735      	b.n	80055aa <_dtoa_r+0x742>
 800573e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005740:	e75c      	b.n	80055fc <_dtoa_r+0x794>
 8005742:	2300      	movs	r3, #0
 8005744:	e788      	b.n	8005658 <_dtoa_r+0x7f0>
 8005746:	9b02      	ldr	r3, [sp, #8]
 8005748:	e786      	b.n	8005658 <_dtoa_r+0x7f0>
 800574a:	2300      	movs	r3, #0
 800574c:	930a      	str	r3, [sp, #40]	@ 0x28
 800574e:	e788      	b.n	8005662 <_dtoa_r+0x7fa>
 8005750:	d09f      	beq.n	8005692 <_dtoa_r+0x82a>
 8005752:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005754:	331c      	adds	r3, #28
 8005756:	441a      	add	r2, r3
 8005758:	4498      	add	r8, r3
 800575a:	441e      	add	r6, r3
 800575c:	9209      	str	r2, [sp, #36]	@ 0x24
 800575e:	e798      	b.n	8005692 <_dtoa_r+0x82a>
 8005760:	4603      	mov	r3, r0
 8005762:	e7f6      	b.n	8005752 <_dtoa_r+0x8ea>
 8005764:	9b07      	ldr	r3, [sp, #28]
 8005766:	9704      	str	r7, [sp, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	dc20      	bgt.n	80057ae <_dtoa_r+0x946>
 800576c:	9308      	str	r3, [sp, #32]
 800576e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005770:	2b02      	cmp	r3, #2
 8005772:	dd1e      	ble.n	80057b2 <_dtoa_r+0x94a>
 8005774:	9b08      	ldr	r3, [sp, #32]
 8005776:	2b00      	cmp	r3, #0
 8005778:	f47f aebc 	bne.w	80054f4 <_dtoa_r+0x68c>
 800577c:	4621      	mov	r1, r4
 800577e:	2205      	movs	r2, #5
 8005780:	4658      	mov	r0, fp
 8005782:	f000 fa99 	bl	8005cb8 <__multadd>
 8005786:	4601      	mov	r1, r0
 8005788:	4604      	mov	r4, r0
 800578a:	4648      	mov	r0, r9
 800578c:	f000 fcaa 	bl	80060e4 <__mcmp>
 8005790:	2800      	cmp	r0, #0
 8005792:	f77f aeaf 	ble.w	80054f4 <_dtoa_r+0x68c>
 8005796:	2331      	movs	r3, #49	@ 0x31
 8005798:	4656      	mov	r6, sl
 800579a:	f806 3b01 	strb.w	r3, [r6], #1
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	3301      	adds	r3, #1
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	e6aa      	b.n	80054fc <_dtoa_r+0x694>
 80057a6:	9c07      	ldr	r4, [sp, #28]
 80057a8:	9704      	str	r7, [sp, #16]
 80057aa:	4625      	mov	r5, r4
 80057ac:	e7f3      	b.n	8005796 <_dtoa_r+0x92e>
 80057ae:	9b07      	ldr	r3, [sp, #28]
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 8104 	beq.w	80059c2 <_dtoa_r+0xb5a>
 80057ba:	2e00      	cmp	r6, #0
 80057bc:	dd05      	ble.n	80057ca <_dtoa_r+0x962>
 80057be:	4629      	mov	r1, r5
 80057c0:	4632      	mov	r2, r6
 80057c2:	4658      	mov	r0, fp
 80057c4:	f000 fc22 	bl	800600c <__lshift>
 80057c8:	4605      	mov	r5, r0
 80057ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d05a      	beq.n	8005886 <_dtoa_r+0xa1e>
 80057d0:	4658      	mov	r0, fp
 80057d2:	6869      	ldr	r1, [r5, #4]
 80057d4:	f000 fa0e 	bl	8005bf4 <_Balloc>
 80057d8:	4606      	mov	r6, r0
 80057da:	b928      	cbnz	r0, 80057e8 <_dtoa_r+0x980>
 80057dc:	4602      	mov	r2, r0
 80057de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057e2:	4b83      	ldr	r3, [pc, #524]	@ (80059f0 <_dtoa_r+0xb88>)
 80057e4:	f7ff bb54 	b.w	8004e90 <_dtoa_r+0x28>
 80057e8:	692a      	ldr	r2, [r5, #16]
 80057ea:	f105 010c 	add.w	r1, r5, #12
 80057ee:	3202      	adds	r2, #2
 80057f0:	0092      	lsls	r2, r2, #2
 80057f2:	300c      	adds	r0, #12
 80057f4:	f000 fe36 	bl	8006464 <memcpy>
 80057f8:	2201      	movs	r2, #1
 80057fa:	4631      	mov	r1, r6
 80057fc:	4658      	mov	r0, fp
 80057fe:	f000 fc05 	bl	800600c <__lshift>
 8005802:	462f      	mov	r7, r5
 8005804:	4605      	mov	r5, r0
 8005806:	f10a 0301 	add.w	r3, sl, #1
 800580a:	9307      	str	r3, [sp, #28]
 800580c:	9b08      	ldr	r3, [sp, #32]
 800580e:	4453      	add	r3, sl
 8005810:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005812:	9b02      	ldr	r3, [sp, #8]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	930a      	str	r3, [sp, #40]	@ 0x28
 800581a:	9b07      	ldr	r3, [sp, #28]
 800581c:	4621      	mov	r1, r4
 800581e:	3b01      	subs	r3, #1
 8005820:	4648      	mov	r0, r9
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	f7ff fa95 	bl	8004d52 <quorem>
 8005828:	4639      	mov	r1, r7
 800582a:	9008      	str	r0, [sp, #32]
 800582c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005830:	4648      	mov	r0, r9
 8005832:	f000 fc57 	bl	80060e4 <__mcmp>
 8005836:	462a      	mov	r2, r5
 8005838:	9009      	str	r0, [sp, #36]	@ 0x24
 800583a:	4621      	mov	r1, r4
 800583c:	4658      	mov	r0, fp
 800583e:	f000 fc6d 	bl	800611c <__mdiff>
 8005842:	68c2      	ldr	r2, [r0, #12]
 8005844:	4606      	mov	r6, r0
 8005846:	bb02      	cbnz	r2, 800588a <_dtoa_r+0xa22>
 8005848:	4601      	mov	r1, r0
 800584a:	4648      	mov	r0, r9
 800584c:	f000 fc4a 	bl	80060e4 <__mcmp>
 8005850:	4602      	mov	r2, r0
 8005852:	4631      	mov	r1, r6
 8005854:	4658      	mov	r0, fp
 8005856:	920c      	str	r2, [sp, #48]	@ 0x30
 8005858:	f000 fa0c 	bl	8005c74 <_Bfree>
 800585c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800585e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005860:	9e07      	ldr	r6, [sp, #28]
 8005862:	ea43 0102 	orr.w	r1, r3, r2
 8005866:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005868:	4319      	orrs	r1, r3
 800586a:	d110      	bne.n	800588e <_dtoa_r+0xa26>
 800586c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005870:	d029      	beq.n	80058c6 <_dtoa_r+0xa5e>
 8005872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	dd02      	ble.n	800587e <_dtoa_r+0xa16>
 8005878:	9b08      	ldr	r3, [sp, #32]
 800587a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800587e:	9b02      	ldr	r3, [sp, #8]
 8005880:	f883 8000 	strb.w	r8, [r3]
 8005884:	e63b      	b.n	80054fe <_dtoa_r+0x696>
 8005886:	4628      	mov	r0, r5
 8005888:	e7bb      	b.n	8005802 <_dtoa_r+0x99a>
 800588a:	2201      	movs	r2, #1
 800588c:	e7e1      	b.n	8005852 <_dtoa_r+0x9ea>
 800588e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005890:	2b00      	cmp	r3, #0
 8005892:	db04      	blt.n	800589e <_dtoa_r+0xa36>
 8005894:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005896:	430b      	orrs	r3, r1
 8005898:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800589a:	430b      	orrs	r3, r1
 800589c:	d120      	bne.n	80058e0 <_dtoa_r+0xa78>
 800589e:	2a00      	cmp	r2, #0
 80058a0:	dded      	ble.n	800587e <_dtoa_r+0xa16>
 80058a2:	4649      	mov	r1, r9
 80058a4:	2201      	movs	r2, #1
 80058a6:	4658      	mov	r0, fp
 80058a8:	f000 fbb0 	bl	800600c <__lshift>
 80058ac:	4621      	mov	r1, r4
 80058ae:	4681      	mov	r9, r0
 80058b0:	f000 fc18 	bl	80060e4 <__mcmp>
 80058b4:	2800      	cmp	r0, #0
 80058b6:	dc03      	bgt.n	80058c0 <_dtoa_r+0xa58>
 80058b8:	d1e1      	bne.n	800587e <_dtoa_r+0xa16>
 80058ba:	f018 0f01 	tst.w	r8, #1
 80058be:	d0de      	beq.n	800587e <_dtoa_r+0xa16>
 80058c0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058c4:	d1d8      	bne.n	8005878 <_dtoa_r+0xa10>
 80058c6:	2339      	movs	r3, #57	@ 0x39
 80058c8:	9a02      	ldr	r2, [sp, #8]
 80058ca:	7013      	strb	r3, [r2, #0]
 80058cc:	4633      	mov	r3, r6
 80058ce:	461e      	mov	r6, r3
 80058d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	2a39      	cmp	r2, #57	@ 0x39
 80058d8:	d052      	beq.n	8005980 <_dtoa_r+0xb18>
 80058da:	3201      	adds	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e60e      	b.n	80054fe <_dtoa_r+0x696>
 80058e0:	2a00      	cmp	r2, #0
 80058e2:	dd07      	ble.n	80058f4 <_dtoa_r+0xa8c>
 80058e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80058e8:	d0ed      	beq.n	80058c6 <_dtoa_r+0xa5e>
 80058ea:	9a02      	ldr	r2, [sp, #8]
 80058ec:	f108 0301 	add.w	r3, r8, #1
 80058f0:	7013      	strb	r3, [r2, #0]
 80058f2:	e604      	b.n	80054fe <_dtoa_r+0x696>
 80058f4:	9b07      	ldr	r3, [sp, #28]
 80058f6:	9a07      	ldr	r2, [sp, #28]
 80058f8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80058fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058fe:	4293      	cmp	r3, r2
 8005900:	d028      	beq.n	8005954 <_dtoa_r+0xaec>
 8005902:	4649      	mov	r1, r9
 8005904:	2300      	movs	r3, #0
 8005906:	220a      	movs	r2, #10
 8005908:	4658      	mov	r0, fp
 800590a:	f000 f9d5 	bl	8005cb8 <__multadd>
 800590e:	42af      	cmp	r7, r5
 8005910:	4681      	mov	r9, r0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	f04f 020a 	mov.w	r2, #10
 800591a:	4639      	mov	r1, r7
 800591c:	4658      	mov	r0, fp
 800591e:	d107      	bne.n	8005930 <_dtoa_r+0xac8>
 8005920:	f000 f9ca 	bl	8005cb8 <__multadd>
 8005924:	4607      	mov	r7, r0
 8005926:	4605      	mov	r5, r0
 8005928:	9b07      	ldr	r3, [sp, #28]
 800592a:	3301      	adds	r3, #1
 800592c:	9307      	str	r3, [sp, #28]
 800592e:	e774      	b.n	800581a <_dtoa_r+0x9b2>
 8005930:	f000 f9c2 	bl	8005cb8 <__multadd>
 8005934:	4629      	mov	r1, r5
 8005936:	4607      	mov	r7, r0
 8005938:	2300      	movs	r3, #0
 800593a:	220a      	movs	r2, #10
 800593c:	4658      	mov	r0, fp
 800593e:	f000 f9bb 	bl	8005cb8 <__multadd>
 8005942:	4605      	mov	r5, r0
 8005944:	e7f0      	b.n	8005928 <_dtoa_r+0xac0>
 8005946:	9b08      	ldr	r3, [sp, #32]
 8005948:	2700      	movs	r7, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	bfcc      	ite	gt
 800594e:	461e      	movgt	r6, r3
 8005950:	2601      	movle	r6, #1
 8005952:	4456      	add	r6, sl
 8005954:	4649      	mov	r1, r9
 8005956:	2201      	movs	r2, #1
 8005958:	4658      	mov	r0, fp
 800595a:	f000 fb57 	bl	800600c <__lshift>
 800595e:	4621      	mov	r1, r4
 8005960:	4681      	mov	r9, r0
 8005962:	f000 fbbf 	bl	80060e4 <__mcmp>
 8005966:	2800      	cmp	r0, #0
 8005968:	dcb0      	bgt.n	80058cc <_dtoa_r+0xa64>
 800596a:	d102      	bne.n	8005972 <_dtoa_r+0xb0a>
 800596c:	f018 0f01 	tst.w	r8, #1
 8005970:	d1ac      	bne.n	80058cc <_dtoa_r+0xa64>
 8005972:	4633      	mov	r3, r6
 8005974:	461e      	mov	r6, r3
 8005976:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800597a:	2a30      	cmp	r2, #48	@ 0x30
 800597c:	d0fa      	beq.n	8005974 <_dtoa_r+0xb0c>
 800597e:	e5be      	b.n	80054fe <_dtoa_r+0x696>
 8005980:	459a      	cmp	sl, r3
 8005982:	d1a4      	bne.n	80058ce <_dtoa_r+0xa66>
 8005984:	9b04      	ldr	r3, [sp, #16]
 8005986:	3301      	adds	r3, #1
 8005988:	9304      	str	r3, [sp, #16]
 800598a:	2331      	movs	r3, #49	@ 0x31
 800598c:	f88a 3000 	strb.w	r3, [sl]
 8005990:	e5b5      	b.n	80054fe <_dtoa_r+0x696>
 8005992:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005994:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80059f4 <_dtoa_r+0xb8c>
 8005998:	b11b      	cbz	r3, 80059a2 <_dtoa_r+0xb3a>
 800599a:	f10a 0308 	add.w	r3, sl, #8
 800599e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	4650      	mov	r0, sl
 80059a4:	b017      	add	sp, #92	@ 0x5c
 80059a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059aa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f77f ae3d 	ble.w	800562c <_dtoa_r+0x7c4>
 80059b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059b4:	930a      	str	r3, [sp, #40]	@ 0x28
 80059b6:	2001      	movs	r0, #1
 80059b8:	e65b      	b.n	8005672 <_dtoa_r+0x80a>
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f77f aed6 	ble.w	800576e <_dtoa_r+0x906>
 80059c2:	4656      	mov	r6, sl
 80059c4:	4621      	mov	r1, r4
 80059c6:	4648      	mov	r0, r9
 80059c8:	f7ff f9c3 	bl	8004d52 <quorem>
 80059cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80059d0:	9b08      	ldr	r3, [sp, #32]
 80059d2:	f806 8b01 	strb.w	r8, [r6], #1
 80059d6:	eba6 020a 	sub.w	r2, r6, sl
 80059da:	4293      	cmp	r3, r2
 80059dc:	ddb3      	ble.n	8005946 <_dtoa_r+0xade>
 80059de:	4649      	mov	r1, r9
 80059e0:	2300      	movs	r3, #0
 80059e2:	220a      	movs	r2, #10
 80059e4:	4658      	mov	r0, fp
 80059e6:	f000 f967 	bl	8005cb8 <__multadd>
 80059ea:	4681      	mov	r9, r0
 80059ec:	e7ea      	b.n	80059c4 <_dtoa_r+0xb5c>
 80059ee:	bf00      	nop
 80059f0:	08006c8c 	.word	0x08006c8c
 80059f4:	08006c10 	.word	0x08006c10

080059f8 <_free_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4605      	mov	r5, r0
 80059fc:	2900      	cmp	r1, #0
 80059fe:	d040      	beq.n	8005a82 <_free_r+0x8a>
 8005a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a04:	1f0c      	subs	r4, r1, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bfb8      	it	lt
 8005a0a:	18e4      	addlt	r4, r4, r3
 8005a0c:	f000 f8e6 	bl	8005bdc <__malloc_lock>
 8005a10:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <_free_r+0x8c>)
 8005a12:	6813      	ldr	r3, [r2, #0]
 8005a14:	b933      	cbnz	r3, 8005a24 <_free_r+0x2c>
 8005a16:	6063      	str	r3, [r4, #4]
 8005a18:	6014      	str	r4, [r2, #0]
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a20:	f000 b8e2 	b.w	8005be8 <__malloc_unlock>
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	d908      	bls.n	8005a3a <_free_r+0x42>
 8005a28:	6820      	ldr	r0, [r4, #0]
 8005a2a:	1821      	adds	r1, r4, r0
 8005a2c:	428b      	cmp	r3, r1
 8005a2e:	bf01      	itttt	eq
 8005a30:	6819      	ldreq	r1, [r3, #0]
 8005a32:	685b      	ldreq	r3, [r3, #4]
 8005a34:	1809      	addeq	r1, r1, r0
 8005a36:	6021      	streq	r1, [r4, #0]
 8005a38:	e7ed      	b.n	8005a16 <_free_r+0x1e>
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	b10b      	cbz	r3, 8005a44 <_free_r+0x4c>
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d9fa      	bls.n	8005a3a <_free_r+0x42>
 8005a44:	6811      	ldr	r1, [r2, #0]
 8005a46:	1850      	adds	r0, r2, r1
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	d10b      	bne.n	8005a64 <_free_r+0x6c>
 8005a4c:	6820      	ldr	r0, [r4, #0]
 8005a4e:	4401      	add	r1, r0
 8005a50:	1850      	adds	r0, r2, r1
 8005a52:	4283      	cmp	r3, r0
 8005a54:	6011      	str	r1, [r2, #0]
 8005a56:	d1e0      	bne.n	8005a1a <_free_r+0x22>
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	4408      	add	r0, r1
 8005a5e:	6010      	str	r0, [r2, #0]
 8005a60:	6053      	str	r3, [r2, #4]
 8005a62:	e7da      	b.n	8005a1a <_free_r+0x22>
 8005a64:	d902      	bls.n	8005a6c <_free_r+0x74>
 8005a66:	230c      	movs	r3, #12
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	e7d6      	b.n	8005a1a <_free_r+0x22>
 8005a6c:	6820      	ldr	r0, [r4, #0]
 8005a6e:	1821      	adds	r1, r4, r0
 8005a70:	428b      	cmp	r3, r1
 8005a72:	bf01      	itttt	eq
 8005a74:	6819      	ldreq	r1, [r3, #0]
 8005a76:	685b      	ldreq	r3, [r3, #4]
 8005a78:	1809      	addeq	r1, r1, r0
 8005a7a:	6021      	streq	r1, [r4, #0]
 8005a7c:	6063      	str	r3, [r4, #4]
 8005a7e:	6054      	str	r4, [r2, #4]
 8005a80:	e7cb      	b.n	8005a1a <_free_r+0x22>
 8005a82:	bd38      	pop	{r3, r4, r5, pc}
 8005a84:	200007a8 	.word	0x200007a8

08005a88 <malloc>:
 8005a88:	4b02      	ldr	r3, [pc, #8]	@ (8005a94 <malloc+0xc>)
 8005a8a:	4601      	mov	r1, r0
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	f000 b825 	b.w	8005adc <_malloc_r>
 8005a92:	bf00      	nop
 8005a94:	20000074 	.word	0x20000074

08005a98 <sbrk_aligned>:
 8005a98:	b570      	push	{r4, r5, r6, lr}
 8005a9a:	4e0f      	ldr	r6, [pc, #60]	@ (8005ad8 <sbrk_aligned+0x40>)
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	6831      	ldr	r1, [r6, #0]
 8005aa0:	4605      	mov	r5, r0
 8005aa2:	b911      	cbnz	r1, 8005aaa <sbrk_aligned+0x12>
 8005aa4:	f000 fcce 	bl	8006444 <_sbrk_r>
 8005aa8:	6030      	str	r0, [r6, #0]
 8005aaa:	4621      	mov	r1, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	f000 fcc9 	bl	8006444 <_sbrk_r>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d103      	bne.n	8005abe <sbrk_aligned+0x26>
 8005ab6:	f04f 34ff 	mov.w	r4, #4294967295
 8005aba:	4620      	mov	r0, r4
 8005abc:	bd70      	pop	{r4, r5, r6, pc}
 8005abe:	1cc4      	adds	r4, r0, #3
 8005ac0:	f024 0403 	bic.w	r4, r4, #3
 8005ac4:	42a0      	cmp	r0, r4
 8005ac6:	d0f8      	beq.n	8005aba <sbrk_aligned+0x22>
 8005ac8:	1a21      	subs	r1, r4, r0
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 fcba 	bl	8006444 <_sbrk_r>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d1f2      	bne.n	8005aba <sbrk_aligned+0x22>
 8005ad4:	e7ef      	b.n	8005ab6 <sbrk_aligned+0x1e>
 8005ad6:	bf00      	nop
 8005ad8:	200007a4 	.word	0x200007a4

08005adc <_malloc_r>:
 8005adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae0:	1ccd      	adds	r5, r1, #3
 8005ae2:	f025 0503 	bic.w	r5, r5, #3
 8005ae6:	3508      	adds	r5, #8
 8005ae8:	2d0c      	cmp	r5, #12
 8005aea:	bf38      	it	cc
 8005aec:	250c      	movcc	r5, #12
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	4606      	mov	r6, r0
 8005af2:	db01      	blt.n	8005af8 <_malloc_r+0x1c>
 8005af4:	42a9      	cmp	r1, r5
 8005af6:	d904      	bls.n	8005b02 <_malloc_r+0x26>
 8005af8:	230c      	movs	r3, #12
 8005afa:	6033      	str	r3, [r6, #0]
 8005afc:	2000      	movs	r0, #0
 8005afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005bd8 <_malloc_r+0xfc>
 8005b06:	f000 f869 	bl	8005bdc <__malloc_lock>
 8005b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b0e:	461c      	mov	r4, r3
 8005b10:	bb44      	cbnz	r4, 8005b64 <_malloc_r+0x88>
 8005b12:	4629      	mov	r1, r5
 8005b14:	4630      	mov	r0, r6
 8005b16:	f7ff ffbf 	bl	8005a98 <sbrk_aligned>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	d158      	bne.n	8005bd2 <_malloc_r+0xf6>
 8005b20:	f8d8 4000 	ldr.w	r4, [r8]
 8005b24:	4627      	mov	r7, r4
 8005b26:	2f00      	cmp	r7, #0
 8005b28:	d143      	bne.n	8005bb2 <_malloc_r+0xd6>
 8005b2a:	2c00      	cmp	r4, #0
 8005b2c:	d04b      	beq.n	8005bc6 <_malloc_r+0xea>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	eb04 0903 	add.w	r9, r4, r3
 8005b38:	f000 fc84 	bl	8006444 <_sbrk_r>
 8005b3c:	4581      	cmp	r9, r0
 8005b3e:	d142      	bne.n	8005bc6 <_malloc_r+0xea>
 8005b40:	6821      	ldr	r1, [r4, #0]
 8005b42:	4630      	mov	r0, r6
 8005b44:	1a6d      	subs	r5, r5, r1
 8005b46:	4629      	mov	r1, r5
 8005b48:	f7ff ffa6 	bl	8005a98 <sbrk_aligned>
 8005b4c:	3001      	adds	r0, #1
 8005b4e:	d03a      	beq.n	8005bc6 <_malloc_r+0xea>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	442b      	add	r3, r5
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	f8d8 3000 	ldr.w	r3, [r8]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	bb62      	cbnz	r2, 8005bb8 <_malloc_r+0xdc>
 8005b5e:	f8c8 7000 	str.w	r7, [r8]
 8005b62:	e00f      	b.n	8005b84 <_malloc_r+0xa8>
 8005b64:	6822      	ldr	r2, [r4, #0]
 8005b66:	1b52      	subs	r2, r2, r5
 8005b68:	d420      	bmi.n	8005bac <_malloc_r+0xd0>
 8005b6a:	2a0b      	cmp	r2, #11
 8005b6c:	d917      	bls.n	8005b9e <_malloc_r+0xc2>
 8005b6e:	1961      	adds	r1, r4, r5
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	6025      	str	r5, [r4, #0]
 8005b74:	bf18      	it	ne
 8005b76:	6059      	strne	r1, [r3, #4]
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	bf08      	it	eq
 8005b7c:	f8c8 1000 	streq.w	r1, [r8]
 8005b80:	5162      	str	r2, [r4, r5]
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	4630      	mov	r0, r6
 8005b86:	f000 f82f 	bl	8005be8 <__malloc_unlock>
 8005b8a:	f104 000b 	add.w	r0, r4, #11
 8005b8e:	1d23      	adds	r3, r4, #4
 8005b90:	f020 0007 	bic.w	r0, r0, #7
 8005b94:	1ac2      	subs	r2, r0, r3
 8005b96:	bf1c      	itt	ne
 8005b98:	1a1b      	subne	r3, r3, r0
 8005b9a:	50a3      	strne	r3, [r4, r2]
 8005b9c:	e7af      	b.n	8005afe <_malloc_r+0x22>
 8005b9e:	6862      	ldr	r2, [r4, #4]
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	bf0c      	ite	eq
 8005ba4:	f8c8 2000 	streq.w	r2, [r8]
 8005ba8:	605a      	strne	r2, [r3, #4]
 8005baa:	e7eb      	b.n	8005b84 <_malloc_r+0xa8>
 8005bac:	4623      	mov	r3, r4
 8005bae:	6864      	ldr	r4, [r4, #4]
 8005bb0:	e7ae      	b.n	8005b10 <_malloc_r+0x34>
 8005bb2:	463c      	mov	r4, r7
 8005bb4:	687f      	ldr	r7, [r7, #4]
 8005bb6:	e7b6      	b.n	8005b26 <_malloc_r+0x4a>
 8005bb8:	461a      	mov	r2, r3
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d1fb      	bne.n	8005bb8 <_malloc_r+0xdc>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6053      	str	r3, [r2, #4]
 8005bc4:	e7de      	b.n	8005b84 <_malloc_r+0xa8>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	4630      	mov	r0, r6
 8005bca:	6033      	str	r3, [r6, #0]
 8005bcc:	f000 f80c 	bl	8005be8 <__malloc_unlock>
 8005bd0:	e794      	b.n	8005afc <_malloc_r+0x20>
 8005bd2:	6005      	str	r5, [r0, #0]
 8005bd4:	e7d6      	b.n	8005b84 <_malloc_r+0xa8>
 8005bd6:	bf00      	nop
 8005bd8:	200007a8 	.word	0x200007a8

08005bdc <__malloc_lock>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	@ (8005be4 <__malloc_lock+0x8>)
 8005bde:	f7ff b8a8 	b.w	8004d32 <__retarget_lock_acquire_recursive>
 8005be2:	bf00      	nop
 8005be4:	200007a0 	.word	0x200007a0

08005be8 <__malloc_unlock>:
 8005be8:	4801      	ldr	r0, [pc, #4]	@ (8005bf0 <__malloc_unlock+0x8>)
 8005bea:	f7ff b8a3 	b.w	8004d34 <__retarget_lock_release_recursive>
 8005bee:	bf00      	nop
 8005bf0:	200007a0 	.word	0x200007a0

08005bf4 <_Balloc>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	69c6      	ldr	r6, [r0, #28]
 8005bf8:	4604      	mov	r4, r0
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	b976      	cbnz	r6, 8005c1c <_Balloc+0x28>
 8005bfe:	2010      	movs	r0, #16
 8005c00:	f7ff ff42 	bl	8005a88 <malloc>
 8005c04:	4602      	mov	r2, r0
 8005c06:	61e0      	str	r0, [r4, #28]
 8005c08:	b920      	cbnz	r0, 8005c14 <_Balloc+0x20>
 8005c0a:	216b      	movs	r1, #107	@ 0x6b
 8005c0c:	4b17      	ldr	r3, [pc, #92]	@ (8005c6c <_Balloc+0x78>)
 8005c0e:	4818      	ldr	r0, [pc, #96]	@ (8005c70 <_Balloc+0x7c>)
 8005c10:	f000 fc36 	bl	8006480 <__assert_func>
 8005c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c18:	6006      	str	r6, [r0, #0]
 8005c1a:	60c6      	str	r6, [r0, #12]
 8005c1c:	69e6      	ldr	r6, [r4, #28]
 8005c1e:	68f3      	ldr	r3, [r6, #12]
 8005c20:	b183      	cbz	r3, 8005c44 <_Balloc+0x50>
 8005c22:	69e3      	ldr	r3, [r4, #28]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c2a:	b9b8      	cbnz	r0, 8005c5c <_Balloc+0x68>
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	fa01 f605 	lsl.w	r6, r1, r5
 8005c32:	1d72      	adds	r2, r6, #5
 8005c34:	4620      	mov	r0, r4
 8005c36:	0092      	lsls	r2, r2, #2
 8005c38:	f000 fc40 	bl	80064bc <_calloc_r>
 8005c3c:	b160      	cbz	r0, 8005c58 <_Balloc+0x64>
 8005c3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c42:	e00e      	b.n	8005c62 <_Balloc+0x6e>
 8005c44:	2221      	movs	r2, #33	@ 0x21
 8005c46:	2104      	movs	r1, #4
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f000 fc37 	bl	80064bc <_calloc_r>
 8005c4e:	69e3      	ldr	r3, [r4, #28]
 8005c50:	60f0      	str	r0, [r6, #12]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e4      	bne.n	8005c22 <_Balloc+0x2e>
 8005c58:	2000      	movs	r0, #0
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	6802      	ldr	r2, [r0, #0]
 8005c5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c62:	2300      	movs	r3, #0
 8005c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c68:	e7f7      	b.n	8005c5a <_Balloc+0x66>
 8005c6a:	bf00      	nop
 8005c6c:	08006c1d 	.word	0x08006c1d
 8005c70:	08006c9d 	.word	0x08006c9d

08005c74 <_Bfree>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	69c6      	ldr	r6, [r0, #28]
 8005c78:	4605      	mov	r5, r0
 8005c7a:	460c      	mov	r4, r1
 8005c7c:	b976      	cbnz	r6, 8005c9c <_Bfree+0x28>
 8005c7e:	2010      	movs	r0, #16
 8005c80:	f7ff ff02 	bl	8005a88 <malloc>
 8005c84:	4602      	mov	r2, r0
 8005c86:	61e8      	str	r0, [r5, #28]
 8005c88:	b920      	cbnz	r0, 8005c94 <_Bfree+0x20>
 8005c8a:	218f      	movs	r1, #143	@ 0x8f
 8005c8c:	4b08      	ldr	r3, [pc, #32]	@ (8005cb0 <_Bfree+0x3c>)
 8005c8e:	4809      	ldr	r0, [pc, #36]	@ (8005cb4 <_Bfree+0x40>)
 8005c90:	f000 fbf6 	bl	8006480 <__assert_func>
 8005c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c98:	6006      	str	r6, [r0, #0]
 8005c9a:	60c6      	str	r6, [r0, #12]
 8005c9c:	b13c      	cbz	r4, 8005cae <_Bfree+0x3a>
 8005c9e:	69eb      	ldr	r3, [r5, #28]
 8005ca0:	6862      	ldr	r2, [r4, #4]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ca8:	6021      	str	r1, [r4, #0]
 8005caa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cae:	bd70      	pop	{r4, r5, r6, pc}
 8005cb0:	08006c1d 	.word	0x08006c1d
 8005cb4:	08006c9d 	.word	0x08006c9d

08005cb8 <__multadd>:
 8005cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	461e      	mov	r6, r3
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	690d      	ldr	r5, [r1, #16]
 8005cc6:	f101 0c14 	add.w	ip, r1, #20
 8005cca:	f8dc 3000 	ldr.w	r3, [ip]
 8005cce:	3001      	adds	r0, #1
 8005cd0:	b299      	uxth	r1, r3
 8005cd2:	fb02 6101 	mla	r1, r2, r1, r6
 8005cd6:	0c1e      	lsrs	r6, r3, #16
 8005cd8:	0c0b      	lsrs	r3, r1, #16
 8005cda:	fb02 3306 	mla	r3, r2, r6, r3
 8005cde:	b289      	uxth	r1, r1
 8005ce0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ce4:	4285      	cmp	r5, r0
 8005ce6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cea:	f84c 1b04 	str.w	r1, [ip], #4
 8005cee:	dcec      	bgt.n	8005cca <__multadd+0x12>
 8005cf0:	b30e      	cbz	r6, 8005d36 <__multadd+0x7e>
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	42ab      	cmp	r3, r5
 8005cf6:	dc19      	bgt.n	8005d2c <__multadd+0x74>
 8005cf8:	6861      	ldr	r1, [r4, #4]
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	3101      	adds	r1, #1
 8005cfe:	f7ff ff79 	bl	8005bf4 <_Balloc>
 8005d02:	4680      	mov	r8, r0
 8005d04:	b928      	cbnz	r0, 8005d12 <__multadd+0x5a>
 8005d06:	4602      	mov	r2, r0
 8005d08:	21ba      	movs	r1, #186	@ 0xba
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <__multadd+0x84>)
 8005d0c:	480c      	ldr	r0, [pc, #48]	@ (8005d40 <__multadd+0x88>)
 8005d0e:	f000 fbb7 	bl	8006480 <__assert_func>
 8005d12:	6922      	ldr	r2, [r4, #16]
 8005d14:	f104 010c 	add.w	r1, r4, #12
 8005d18:	3202      	adds	r2, #2
 8005d1a:	0092      	lsls	r2, r2, #2
 8005d1c:	300c      	adds	r0, #12
 8005d1e:	f000 fba1 	bl	8006464 <memcpy>
 8005d22:	4621      	mov	r1, r4
 8005d24:	4638      	mov	r0, r7
 8005d26:	f7ff ffa5 	bl	8005c74 <_Bfree>
 8005d2a:	4644      	mov	r4, r8
 8005d2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d30:	3501      	adds	r5, #1
 8005d32:	615e      	str	r6, [r3, #20]
 8005d34:	6125      	str	r5, [r4, #16]
 8005d36:	4620      	mov	r0, r4
 8005d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d3c:	08006c8c 	.word	0x08006c8c
 8005d40:	08006c9d 	.word	0x08006c9d

08005d44 <__hi0bits>:
 8005d44:	4603      	mov	r3, r0
 8005d46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d4a:	bf3a      	itte	cc
 8005d4c:	0403      	lslcc	r3, r0, #16
 8005d4e:	2010      	movcc	r0, #16
 8005d50:	2000      	movcs	r0, #0
 8005d52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d56:	bf3c      	itt	cc
 8005d58:	021b      	lslcc	r3, r3, #8
 8005d5a:	3008      	addcc	r0, #8
 8005d5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d60:	bf3c      	itt	cc
 8005d62:	011b      	lslcc	r3, r3, #4
 8005d64:	3004      	addcc	r0, #4
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6a:	bf3c      	itt	cc
 8005d6c:	009b      	lslcc	r3, r3, #2
 8005d6e:	3002      	addcc	r0, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	db05      	blt.n	8005d80 <__hi0bits+0x3c>
 8005d74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005d78:	f100 0001 	add.w	r0, r0, #1
 8005d7c:	bf08      	it	eq
 8005d7e:	2020      	moveq	r0, #32
 8005d80:	4770      	bx	lr

08005d82 <__lo0bits>:
 8005d82:	6803      	ldr	r3, [r0, #0]
 8005d84:	4602      	mov	r2, r0
 8005d86:	f013 0007 	ands.w	r0, r3, #7
 8005d8a:	d00b      	beq.n	8005da4 <__lo0bits+0x22>
 8005d8c:	07d9      	lsls	r1, r3, #31
 8005d8e:	d421      	bmi.n	8005dd4 <__lo0bits+0x52>
 8005d90:	0798      	lsls	r0, r3, #30
 8005d92:	bf49      	itett	mi
 8005d94:	085b      	lsrmi	r3, r3, #1
 8005d96:	089b      	lsrpl	r3, r3, #2
 8005d98:	2001      	movmi	r0, #1
 8005d9a:	6013      	strmi	r3, [r2, #0]
 8005d9c:	bf5c      	itt	pl
 8005d9e:	2002      	movpl	r0, #2
 8005da0:	6013      	strpl	r3, [r2, #0]
 8005da2:	4770      	bx	lr
 8005da4:	b299      	uxth	r1, r3
 8005da6:	b909      	cbnz	r1, 8005dac <__lo0bits+0x2a>
 8005da8:	2010      	movs	r0, #16
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	b2d9      	uxtb	r1, r3
 8005dae:	b909      	cbnz	r1, 8005db4 <__lo0bits+0x32>
 8005db0:	3008      	adds	r0, #8
 8005db2:	0a1b      	lsrs	r3, r3, #8
 8005db4:	0719      	lsls	r1, r3, #28
 8005db6:	bf04      	itt	eq
 8005db8:	091b      	lsreq	r3, r3, #4
 8005dba:	3004      	addeq	r0, #4
 8005dbc:	0799      	lsls	r1, r3, #30
 8005dbe:	bf04      	itt	eq
 8005dc0:	089b      	lsreq	r3, r3, #2
 8005dc2:	3002      	addeq	r0, #2
 8005dc4:	07d9      	lsls	r1, r3, #31
 8005dc6:	d403      	bmi.n	8005dd0 <__lo0bits+0x4e>
 8005dc8:	085b      	lsrs	r3, r3, #1
 8005dca:	f100 0001 	add.w	r0, r0, #1
 8005dce:	d003      	beq.n	8005dd8 <__lo0bits+0x56>
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	4770      	bx	lr
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	4770      	bx	lr
 8005dd8:	2020      	movs	r0, #32
 8005dda:	4770      	bx	lr

08005ddc <__i2b>:
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	460c      	mov	r4, r1
 8005de0:	2101      	movs	r1, #1
 8005de2:	f7ff ff07 	bl	8005bf4 <_Balloc>
 8005de6:	4602      	mov	r2, r0
 8005de8:	b928      	cbnz	r0, 8005df6 <__i2b+0x1a>
 8005dea:	f240 1145 	movw	r1, #325	@ 0x145
 8005dee:	4b04      	ldr	r3, [pc, #16]	@ (8005e00 <__i2b+0x24>)
 8005df0:	4804      	ldr	r0, [pc, #16]	@ (8005e04 <__i2b+0x28>)
 8005df2:	f000 fb45 	bl	8006480 <__assert_func>
 8005df6:	2301      	movs	r3, #1
 8005df8:	6144      	str	r4, [r0, #20]
 8005dfa:	6103      	str	r3, [r0, #16]
 8005dfc:	bd10      	pop	{r4, pc}
 8005dfe:	bf00      	nop
 8005e00:	08006c8c 	.word	0x08006c8c
 8005e04:	08006c9d 	.word	0x08006c9d

08005e08 <__multiply>:
 8005e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0c:	4614      	mov	r4, r2
 8005e0e:	690a      	ldr	r2, [r1, #16]
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	460f      	mov	r7, r1
 8005e14:	429a      	cmp	r2, r3
 8005e16:	bfa2      	ittt	ge
 8005e18:	4623      	movge	r3, r4
 8005e1a:	460c      	movge	r4, r1
 8005e1c:	461f      	movge	r7, r3
 8005e1e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005e22:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	6861      	ldr	r1, [r4, #4]
 8005e2a:	eb0a 0609 	add.w	r6, sl, r9
 8005e2e:	42b3      	cmp	r3, r6
 8005e30:	b085      	sub	sp, #20
 8005e32:	bfb8      	it	lt
 8005e34:	3101      	addlt	r1, #1
 8005e36:	f7ff fedd 	bl	8005bf4 <_Balloc>
 8005e3a:	b930      	cbnz	r0, 8005e4a <__multiply+0x42>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e42:	4b43      	ldr	r3, [pc, #268]	@ (8005f50 <__multiply+0x148>)
 8005e44:	4843      	ldr	r0, [pc, #268]	@ (8005f54 <__multiply+0x14c>)
 8005e46:	f000 fb1b 	bl	8006480 <__assert_func>
 8005e4a:	f100 0514 	add.w	r5, r0, #20
 8005e4e:	462b      	mov	r3, r5
 8005e50:	2200      	movs	r2, #0
 8005e52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e56:	4543      	cmp	r3, r8
 8005e58:	d321      	bcc.n	8005e9e <__multiply+0x96>
 8005e5a:	f107 0114 	add.w	r1, r7, #20
 8005e5e:	f104 0214 	add.w	r2, r4, #20
 8005e62:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005e66:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005e6a:	9302      	str	r3, [sp, #8]
 8005e6c:	1b13      	subs	r3, r2, r4
 8005e6e:	3b15      	subs	r3, #21
 8005e70:	f023 0303 	bic.w	r3, r3, #3
 8005e74:	3304      	adds	r3, #4
 8005e76:	f104 0715 	add.w	r7, r4, #21
 8005e7a:	42ba      	cmp	r2, r7
 8005e7c:	bf38      	it	cc
 8005e7e:	2304      	movcc	r3, #4
 8005e80:	9301      	str	r3, [sp, #4]
 8005e82:	9b02      	ldr	r3, [sp, #8]
 8005e84:	9103      	str	r1, [sp, #12]
 8005e86:	428b      	cmp	r3, r1
 8005e88:	d80c      	bhi.n	8005ea4 <__multiply+0x9c>
 8005e8a:	2e00      	cmp	r6, #0
 8005e8c:	dd03      	ble.n	8005e96 <__multiply+0x8e>
 8005e8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d05a      	beq.n	8005f4c <__multiply+0x144>
 8005e96:	6106      	str	r6, [r0, #16]
 8005e98:	b005      	add	sp, #20
 8005e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e9e:	f843 2b04 	str.w	r2, [r3], #4
 8005ea2:	e7d8      	b.n	8005e56 <__multiply+0x4e>
 8005ea4:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ea8:	f1ba 0f00 	cmp.w	sl, #0
 8005eac:	d023      	beq.n	8005ef6 <__multiply+0xee>
 8005eae:	46a9      	mov	r9, r5
 8005eb0:	f04f 0c00 	mov.w	ip, #0
 8005eb4:	f104 0e14 	add.w	lr, r4, #20
 8005eb8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005ebc:	f8d9 3000 	ldr.w	r3, [r9]
 8005ec0:	fa1f fb87 	uxth.w	fp, r7
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	fb0a 330b 	mla	r3, sl, fp, r3
 8005eca:	4463      	add	r3, ip
 8005ecc:	f8d9 c000 	ldr.w	ip, [r9]
 8005ed0:	0c3f      	lsrs	r7, r7, #16
 8005ed2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005ed6:	fb0a c707 	mla	r7, sl, r7, ip
 8005eda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005ee4:	4572      	cmp	r2, lr
 8005ee6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005eea:	f849 3b04 	str.w	r3, [r9], #4
 8005eee:	d8e3      	bhi.n	8005eb8 <__multiply+0xb0>
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	f845 c003 	str.w	ip, [r5, r3]
 8005ef6:	9b03      	ldr	r3, [sp, #12]
 8005ef8:	3104      	adds	r1, #4
 8005efa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005efe:	f1b9 0f00 	cmp.w	r9, #0
 8005f02:	d021      	beq.n	8005f48 <__multiply+0x140>
 8005f04:	46ae      	mov	lr, r5
 8005f06:	f04f 0a00 	mov.w	sl, #0
 8005f0a:	682b      	ldr	r3, [r5, #0]
 8005f0c:	f104 0c14 	add.w	ip, r4, #20
 8005f10:	f8bc b000 	ldrh.w	fp, [ip]
 8005f14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	fb09 770b 	mla	r7, r9, fp, r7
 8005f1e:	4457      	add	r7, sl
 8005f20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005f24:	f84e 3b04 	str.w	r3, [lr], #4
 8005f28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005f2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f30:	f8be 3000 	ldrh.w	r3, [lr]
 8005f34:	4562      	cmp	r2, ip
 8005f36:	fb09 330a 	mla	r3, r9, sl, r3
 8005f3a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005f3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f42:	d8e5      	bhi.n	8005f10 <__multiply+0x108>
 8005f44:	9f01      	ldr	r7, [sp, #4]
 8005f46:	51eb      	str	r3, [r5, r7]
 8005f48:	3504      	adds	r5, #4
 8005f4a:	e79a      	b.n	8005e82 <__multiply+0x7a>
 8005f4c:	3e01      	subs	r6, #1
 8005f4e:	e79c      	b.n	8005e8a <__multiply+0x82>
 8005f50:	08006c8c 	.word	0x08006c8c
 8005f54:	08006c9d 	.word	0x08006c9d

08005f58 <__pow5mult>:
 8005f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	f012 0203 	ands.w	r2, r2, #3
 8005f62:	4607      	mov	r7, r0
 8005f64:	460e      	mov	r6, r1
 8005f66:	d007      	beq.n	8005f78 <__pow5mult+0x20>
 8005f68:	4c25      	ldr	r4, [pc, #148]	@ (8006000 <__pow5mult+0xa8>)
 8005f6a:	3a01      	subs	r2, #1
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f72:	f7ff fea1 	bl	8005cb8 <__multadd>
 8005f76:	4606      	mov	r6, r0
 8005f78:	10ad      	asrs	r5, r5, #2
 8005f7a:	d03d      	beq.n	8005ff8 <__pow5mult+0xa0>
 8005f7c:	69fc      	ldr	r4, [r7, #28]
 8005f7e:	b97c      	cbnz	r4, 8005fa0 <__pow5mult+0x48>
 8005f80:	2010      	movs	r0, #16
 8005f82:	f7ff fd81 	bl	8005a88 <malloc>
 8005f86:	4602      	mov	r2, r0
 8005f88:	61f8      	str	r0, [r7, #28]
 8005f8a:	b928      	cbnz	r0, 8005f98 <__pow5mult+0x40>
 8005f8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005f90:	4b1c      	ldr	r3, [pc, #112]	@ (8006004 <__pow5mult+0xac>)
 8005f92:	481d      	ldr	r0, [pc, #116]	@ (8006008 <__pow5mult+0xb0>)
 8005f94:	f000 fa74 	bl	8006480 <__assert_func>
 8005f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f9c:	6004      	str	r4, [r0, #0]
 8005f9e:	60c4      	str	r4, [r0, #12]
 8005fa0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fa8:	b94c      	cbnz	r4, 8005fbe <__pow5mult+0x66>
 8005faa:	f240 2171 	movw	r1, #625	@ 0x271
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f7ff ff14 	bl	8005ddc <__i2b>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	4604      	mov	r4, r0
 8005fb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fbc:	6003      	str	r3, [r0, #0]
 8005fbe:	f04f 0900 	mov.w	r9, #0
 8005fc2:	07eb      	lsls	r3, r5, #31
 8005fc4:	d50a      	bpl.n	8005fdc <__pow5mult+0x84>
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4622      	mov	r2, r4
 8005fca:	4638      	mov	r0, r7
 8005fcc:	f7ff ff1c 	bl	8005e08 <__multiply>
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4631      	mov	r1, r6
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	f7ff fe4d 	bl	8005c74 <_Bfree>
 8005fda:	4646      	mov	r6, r8
 8005fdc:	106d      	asrs	r5, r5, #1
 8005fde:	d00b      	beq.n	8005ff8 <__pow5mult+0xa0>
 8005fe0:	6820      	ldr	r0, [r4, #0]
 8005fe2:	b938      	cbnz	r0, 8005ff4 <__pow5mult+0x9c>
 8005fe4:	4622      	mov	r2, r4
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7ff ff0d 	bl	8005e08 <__multiply>
 8005fee:	6020      	str	r0, [r4, #0]
 8005ff0:	f8c0 9000 	str.w	r9, [r0]
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	e7e4      	b.n	8005fc2 <__pow5mult+0x6a>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ffe:	bf00      	nop
 8006000:	08006cf8 	.word	0x08006cf8
 8006004:	08006c1d 	.word	0x08006c1d
 8006008:	08006c9d 	.word	0x08006c9d

0800600c <__lshift>:
 800600c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	460c      	mov	r4, r1
 8006012:	4607      	mov	r7, r0
 8006014:	4691      	mov	r9, r2
 8006016:	6923      	ldr	r3, [r4, #16]
 8006018:	6849      	ldr	r1, [r1, #4]
 800601a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800601e:	68a3      	ldr	r3, [r4, #8]
 8006020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006024:	f108 0601 	add.w	r6, r8, #1
 8006028:	42b3      	cmp	r3, r6
 800602a:	db0b      	blt.n	8006044 <__lshift+0x38>
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff fde1 	bl	8005bf4 <_Balloc>
 8006032:	4605      	mov	r5, r0
 8006034:	b948      	cbnz	r0, 800604a <__lshift+0x3e>
 8006036:	4602      	mov	r2, r0
 8006038:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800603c:	4b27      	ldr	r3, [pc, #156]	@ (80060dc <__lshift+0xd0>)
 800603e:	4828      	ldr	r0, [pc, #160]	@ (80060e0 <__lshift+0xd4>)
 8006040:	f000 fa1e 	bl	8006480 <__assert_func>
 8006044:	3101      	adds	r1, #1
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	e7ee      	b.n	8006028 <__lshift+0x1c>
 800604a:	2300      	movs	r3, #0
 800604c:	f100 0114 	add.w	r1, r0, #20
 8006050:	f100 0210 	add.w	r2, r0, #16
 8006054:	4618      	mov	r0, r3
 8006056:	4553      	cmp	r3, sl
 8006058:	db33      	blt.n	80060c2 <__lshift+0xb6>
 800605a:	6920      	ldr	r0, [r4, #16]
 800605c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006060:	f104 0314 	add.w	r3, r4, #20
 8006064:	f019 091f 	ands.w	r9, r9, #31
 8006068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800606c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006070:	d02b      	beq.n	80060ca <__lshift+0xbe>
 8006072:	468a      	mov	sl, r1
 8006074:	2200      	movs	r2, #0
 8006076:	f1c9 0e20 	rsb	lr, r9, #32
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	fa00 f009 	lsl.w	r0, r0, r9
 8006080:	4310      	orrs	r0, r2
 8006082:	f84a 0b04 	str.w	r0, [sl], #4
 8006086:	f853 2b04 	ldr.w	r2, [r3], #4
 800608a:	459c      	cmp	ip, r3
 800608c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006090:	d8f3      	bhi.n	800607a <__lshift+0x6e>
 8006092:	ebac 0304 	sub.w	r3, ip, r4
 8006096:	3b15      	subs	r3, #21
 8006098:	f023 0303 	bic.w	r3, r3, #3
 800609c:	3304      	adds	r3, #4
 800609e:	f104 0015 	add.w	r0, r4, #21
 80060a2:	4584      	cmp	ip, r0
 80060a4:	bf38      	it	cc
 80060a6:	2304      	movcc	r3, #4
 80060a8:	50ca      	str	r2, [r1, r3]
 80060aa:	b10a      	cbz	r2, 80060b0 <__lshift+0xa4>
 80060ac:	f108 0602 	add.w	r6, r8, #2
 80060b0:	3e01      	subs	r6, #1
 80060b2:	4638      	mov	r0, r7
 80060b4:	4621      	mov	r1, r4
 80060b6:	612e      	str	r6, [r5, #16]
 80060b8:	f7ff fddc 	bl	8005c74 <_Bfree>
 80060bc:	4628      	mov	r0, r5
 80060be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80060c6:	3301      	adds	r3, #1
 80060c8:	e7c5      	b.n	8006056 <__lshift+0x4a>
 80060ca:	3904      	subs	r1, #4
 80060cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80060d0:	459c      	cmp	ip, r3
 80060d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80060d6:	d8f9      	bhi.n	80060cc <__lshift+0xc0>
 80060d8:	e7ea      	b.n	80060b0 <__lshift+0xa4>
 80060da:	bf00      	nop
 80060dc:	08006c8c 	.word	0x08006c8c
 80060e0:	08006c9d 	.word	0x08006c9d

080060e4 <__mcmp>:
 80060e4:	4603      	mov	r3, r0
 80060e6:	690a      	ldr	r2, [r1, #16]
 80060e8:	6900      	ldr	r0, [r0, #16]
 80060ea:	b530      	push	{r4, r5, lr}
 80060ec:	1a80      	subs	r0, r0, r2
 80060ee:	d10e      	bne.n	800610e <__mcmp+0x2a>
 80060f0:	3314      	adds	r3, #20
 80060f2:	3114      	adds	r1, #20
 80060f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80060f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80060fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006100:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006104:	4295      	cmp	r5, r2
 8006106:	d003      	beq.n	8006110 <__mcmp+0x2c>
 8006108:	d205      	bcs.n	8006116 <__mcmp+0x32>
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	bd30      	pop	{r4, r5, pc}
 8006110:	42a3      	cmp	r3, r4
 8006112:	d3f3      	bcc.n	80060fc <__mcmp+0x18>
 8006114:	e7fb      	b.n	800610e <__mcmp+0x2a>
 8006116:	2001      	movs	r0, #1
 8006118:	e7f9      	b.n	800610e <__mcmp+0x2a>
	...

0800611c <__mdiff>:
 800611c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	4689      	mov	r9, r1
 8006122:	4606      	mov	r6, r0
 8006124:	4611      	mov	r1, r2
 8006126:	4648      	mov	r0, r9
 8006128:	4614      	mov	r4, r2
 800612a:	f7ff ffdb 	bl	80060e4 <__mcmp>
 800612e:	1e05      	subs	r5, r0, #0
 8006130:	d112      	bne.n	8006158 <__mdiff+0x3c>
 8006132:	4629      	mov	r1, r5
 8006134:	4630      	mov	r0, r6
 8006136:	f7ff fd5d 	bl	8005bf4 <_Balloc>
 800613a:	4602      	mov	r2, r0
 800613c:	b928      	cbnz	r0, 800614a <__mdiff+0x2e>
 800613e:	f240 2137 	movw	r1, #567	@ 0x237
 8006142:	4b3e      	ldr	r3, [pc, #248]	@ (800623c <__mdiff+0x120>)
 8006144:	483e      	ldr	r0, [pc, #248]	@ (8006240 <__mdiff+0x124>)
 8006146:	f000 f99b 	bl	8006480 <__assert_func>
 800614a:	2301      	movs	r3, #1
 800614c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006150:	4610      	mov	r0, r2
 8006152:	b003      	add	sp, #12
 8006154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006158:	bfbc      	itt	lt
 800615a:	464b      	movlt	r3, r9
 800615c:	46a1      	movlt	r9, r4
 800615e:	4630      	mov	r0, r6
 8006160:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006164:	bfba      	itte	lt
 8006166:	461c      	movlt	r4, r3
 8006168:	2501      	movlt	r5, #1
 800616a:	2500      	movge	r5, #0
 800616c:	f7ff fd42 	bl	8005bf4 <_Balloc>
 8006170:	4602      	mov	r2, r0
 8006172:	b918      	cbnz	r0, 800617c <__mdiff+0x60>
 8006174:	f240 2145 	movw	r1, #581	@ 0x245
 8006178:	4b30      	ldr	r3, [pc, #192]	@ (800623c <__mdiff+0x120>)
 800617a:	e7e3      	b.n	8006144 <__mdiff+0x28>
 800617c:	f100 0b14 	add.w	fp, r0, #20
 8006180:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006184:	f109 0310 	add.w	r3, r9, #16
 8006188:	60c5      	str	r5, [r0, #12]
 800618a:	f04f 0c00 	mov.w	ip, #0
 800618e:	f109 0514 	add.w	r5, r9, #20
 8006192:	46d9      	mov	r9, fp
 8006194:	6926      	ldr	r6, [r4, #16]
 8006196:	f104 0e14 	add.w	lr, r4, #20
 800619a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800619e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80061a2:	9301      	str	r3, [sp, #4]
 80061a4:	9b01      	ldr	r3, [sp, #4]
 80061a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80061aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80061ae:	b281      	uxth	r1, r0
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	fa1f f38a 	uxth.w	r3, sl
 80061b6:	1a5b      	subs	r3, r3, r1
 80061b8:	0c00      	lsrs	r0, r0, #16
 80061ba:	4463      	add	r3, ip
 80061bc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80061c0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80061ca:	4576      	cmp	r6, lr
 80061cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80061d0:	f849 3b04 	str.w	r3, [r9], #4
 80061d4:	d8e6      	bhi.n	80061a4 <__mdiff+0x88>
 80061d6:	1b33      	subs	r3, r6, r4
 80061d8:	3b15      	subs	r3, #21
 80061da:	f023 0303 	bic.w	r3, r3, #3
 80061de:	3415      	adds	r4, #21
 80061e0:	3304      	adds	r3, #4
 80061e2:	42a6      	cmp	r6, r4
 80061e4:	bf38      	it	cc
 80061e6:	2304      	movcc	r3, #4
 80061e8:	441d      	add	r5, r3
 80061ea:	445b      	add	r3, fp
 80061ec:	461e      	mov	r6, r3
 80061ee:	462c      	mov	r4, r5
 80061f0:	4544      	cmp	r4, r8
 80061f2:	d30e      	bcc.n	8006212 <__mdiff+0xf6>
 80061f4:	f108 0103 	add.w	r1, r8, #3
 80061f8:	1b49      	subs	r1, r1, r5
 80061fa:	f021 0103 	bic.w	r1, r1, #3
 80061fe:	3d03      	subs	r5, #3
 8006200:	45a8      	cmp	r8, r5
 8006202:	bf38      	it	cc
 8006204:	2100      	movcc	r1, #0
 8006206:	440b      	add	r3, r1
 8006208:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800620c:	b199      	cbz	r1, 8006236 <__mdiff+0x11a>
 800620e:	6117      	str	r7, [r2, #16]
 8006210:	e79e      	b.n	8006150 <__mdiff+0x34>
 8006212:	46e6      	mov	lr, ip
 8006214:	f854 1b04 	ldr.w	r1, [r4], #4
 8006218:	fa1f fc81 	uxth.w	ip, r1
 800621c:	44f4      	add	ip, lr
 800621e:	0c08      	lsrs	r0, r1, #16
 8006220:	4471      	add	r1, lr
 8006222:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006226:	b289      	uxth	r1, r1
 8006228:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800622c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006230:	f846 1b04 	str.w	r1, [r6], #4
 8006234:	e7dc      	b.n	80061f0 <__mdiff+0xd4>
 8006236:	3f01      	subs	r7, #1
 8006238:	e7e6      	b.n	8006208 <__mdiff+0xec>
 800623a:	bf00      	nop
 800623c:	08006c8c 	.word	0x08006c8c
 8006240:	08006c9d 	.word	0x08006c9d

08006244 <__d2b>:
 8006244:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006248:	2101      	movs	r1, #1
 800624a:	4690      	mov	r8, r2
 800624c:	4699      	mov	r9, r3
 800624e:	9e08      	ldr	r6, [sp, #32]
 8006250:	f7ff fcd0 	bl	8005bf4 <_Balloc>
 8006254:	4604      	mov	r4, r0
 8006256:	b930      	cbnz	r0, 8006266 <__d2b+0x22>
 8006258:	4602      	mov	r2, r0
 800625a:	f240 310f 	movw	r1, #783	@ 0x30f
 800625e:	4b23      	ldr	r3, [pc, #140]	@ (80062ec <__d2b+0xa8>)
 8006260:	4823      	ldr	r0, [pc, #140]	@ (80062f0 <__d2b+0xac>)
 8006262:	f000 f90d 	bl	8006480 <__assert_func>
 8006266:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800626a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800626e:	b10d      	cbz	r5, 8006274 <__d2b+0x30>
 8006270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006274:	9301      	str	r3, [sp, #4]
 8006276:	f1b8 0300 	subs.w	r3, r8, #0
 800627a:	d024      	beq.n	80062c6 <__d2b+0x82>
 800627c:	4668      	mov	r0, sp
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	f7ff fd7f 	bl	8005d82 <__lo0bits>
 8006284:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006288:	b1d8      	cbz	r0, 80062c2 <__d2b+0x7e>
 800628a:	f1c0 0320 	rsb	r3, r0, #32
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	430b      	orrs	r3, r1
 8006294:	40c2      	lsrs	r2, r0
 8006296:	6163      	str	r3, [r4, #20]
 8006298:	9201      	str	r2, [sp, #4]
 800629a:	9b01      	ldr	r3, [sp, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	bf0c      	ite	eq
 80062a0:	2201      	moveq	r2, #1
 80062a2:	2202      	movne	r2, #2
 80062a4:	61a3      	str	r3, [r4, #24]
 80062a6:	6122      	str	r2, [r4, #16]
 80062a8:	b1ad      	cbz	r5, 80062d6 <__d2b+0x92>
 80062aa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80062ae:	4405      	add	r5, r0
 80062b0:	6035      	str	r5, [r6, #0]
 80062b2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80062b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062b8:	6018      	str	r0, [r3, #0]
 80062ba:	4620      	mov	r0, r4
 80062bc:	b002      	add	sp, #8
 80062be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80062c2:	6161      	str	r1, [r4, #20]
 80062c4:	e7e9      	b.n	800629a <__d2b+0x56>
 80062c6:	a801      	add	r0, sp, #4
 80062c8:	f7ff fd5b 	bl	8005d82 <__lo0bits>
 80062cc:	9b01      	ldr	r3, [sp, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	6163      	str	r3, [r4, #20]
 80062d2:	3020      	adds	r0, #32
 80062d4:	e7e7      	b.n	80062a6 <__d2b+0x62>
 80062d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80062da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062de:	6030      	str	r0, [r6, #0]
 80062e0:	6918      	ldr	r0, [r3, #16]
 80062e2:	f7ff fd2f 	bl	8005d44 <__hi0bits>
 80062e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062ea:	e7e4      	b.n	80062b6 <__d2b+0x72>
 80062ec:	08006c8c 	.word	0x08006c8c
 80062f0:	08006c9d 	.word	0x08006c9d

080062f4 <__sflush_r>:
 80062f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	0716      	lsls	r6, r2, #28
 80062fc:	4605      	mov	r5, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	d454      	bmi.n	80063ac <__sflush_r+0xb8>
 8006302:	684b      	ldr	r3, [r1, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc02      	bgt.n	800630e <__sflush_r+0x1a>
 8006308:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	dd48      	ble.n	80063a0 <__sflush_r+0xac>
 800630e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006310:	2e00      	cmp	r6, #0
 8006312:	d045      	beq.n	80063a0 <__sflush_r+0xac>
 8006314:	2300      	movs	r3, #0
 8006316:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800631a:	682f      	ldr	r7, [r5, #0]
 800631c:	6a21      	ldr	r1, [r4, #32]
 800631e:	602b      	str	r3, [r5, #0]
 8006320:	d030      	beq.n	8006384 <__sflush_r+0x90>
 8006322:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006324:	89a3      	ldrh	r3, [r4, #12]
 8006326:	0759      	lsls	r1, r3, #29
 8006328:	d505      	bpl.n	8006336 <__sflush_r+0x42>
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	1ad2      	subs	r2, r2, r3
 800632e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006330:	b10b      	cbz	r3, 8006336 <__sflush_r+0x42>
 8006332:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006334:	1ad2      	subs	r2, r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	4628      	mov	r0, r5
 800633a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800633c:	6a21      	ldr	r1, [r4, #32]
 800633e:	47b0      	blx	r6
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	89a3      	ldrh	r3, [r4, #12]
 8006344:	d106      	bne.n	8006354 <__sflush_r+0x60>
 8006346:	6829      	ldr	r1, [r5, #0]
 8006348:	291d      	cmp	r1, #29
 800634a:	d82b      	bhi.n	80063a4 <__sflush_r+0xb0>
 800634c:	4a28      	ldr	r2, [pc, #160]	@ (80063f0 <__sflush_r+0xfc>)
 800634e:	410a      	asrs	r2, r1
 8006350:	07d6      	lsls	r6, r2, #31
 8006352:	d427      	bmi.n	80063a4 <__sflush_r+0xb0>
 8006354:	2200      	movs	r2, #0
 8006356:	6062      	str	r2, [r4, #4]
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	04d9      	lsls	r1, r3, #19
 800635c:	6022      	str	r2, [r4, #0]
 800635e:	d504      	bpl.n	800636a <__sflush_r+0x76>
 8006360:	1c42      	adds	r2, r0, #1
 8006362:	d101      	bne.n	8006368 <__sflush_r+0x74>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b903      	cbnz	r3, 800636a <__sflush_r+0x76>
 8006368:	6560      	str	r0, [r4, #84]	@ 0x54
 800636a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800636c:	602f      	str	r7, [r5, #0]
 800636e:	b1b9      	cbz	r1, 80063a0 <__sflush_r+0xac>
 8006370:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006374:	4299      	cmp	r1, r3
 8006376:	d002      	beq.n	800637e <__sflush_r+0x8a>
 8006378:	4628      	mov	r0, r5
 800637a:	f7ff fb3d 	bl	80059f8 <_free_r>
 800637e:	2300      	movs	r3, #0
 8006380:	6363      	str	r3, [r4, #52]	@ 0x34
 8006382:	e00d      	b.n	80063a0 <__sflush_r+0xac>
 8006384:	2301      	movs	r3, #1
 8006386:	4628      	mov	r0, r5
 8006388:	47b0      	blx	r6
 800638a:	4602      	mov	r2, r0
 800638c:	1c50      	adds	r0, r2, #1
 800638e:	d1c9      	bne.n	8006324 <__sflush_r+0x30>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0c6      	beq.n	8006324 <__sflush_r+0x30>
 8006396:	2b1d      	cmp	r3, #29
 8006398:	d001      	beq.n	800639e <__sflush_r+0xaa>
 800639a:	2b16      	cmp	r3, #22
 800639c:	d11d      	bne.n	80063da <__sflush_r+0xe6>
 800639e:	602f      	str	r7, [r5, #0]
 80063a0:	2000      	movs	r0, #0
 80063a2:	e021      	b.n	80063e8 <__sflush_r+0xf4>
 80063a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a8:	b21b      	sxth	r3, r3
 80063aa:	e01a      	b.n	80063e2 <__sflush_r+0xee>
 80063ac:	690f      	ldr	r7, [r1, #16]
 80063ae:	2f00      	cmp	r7, #0
 80063b0:	d0f6      	beq.n	80063a0 <__sflush_r+0xac>
 80063b2:	0793      	lsls	r3, r2, #30
 80063b4:	bf18      	it	ne
 80063b6:	2300      	movne	r3, #0
 80063b8:	680e      	ldr	r6, [r1, #0]
 80063ba:	bf08      	it	eq
 80063bc:	694b      	ldreq	r3, [r1, #20]
 80063be:	1bf6      	subs	r6, r6, r7
 80063c0:	600f      	str	r7, [r1, #0]
 80063c2:	608b      	str	r3, [r1, #8]
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	ddeb      	ble.n	80063a0 <__sflush_r+0xac>
 80063c8:	4633      	mov	r3, r6
 80063ca:	463a      	mov	r2, r7
 80063cc:	4628      	mov	r0, r5
 80063ce:	6a21      	ldr	r1, [r4, #32]
 80063d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80063d4:	47e0      	blx	ip
 80063d6:	2800      	cmp	r0, #0
 80063d8:	dc07      	bgt.n	80063ea <__sflush_r+0xf6>
 80063da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ea:	4407      	add	r7, r0
 80063ec:	1a36      	subs	r6, r6, r0
 80063ee:	e7e9      	b.n	80063c4 <__sflush_r+0xd0>
 80063f0:	dfbffffe 	.word	0xdfbffffe

080063f4 <_fflush_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	690b      	ldr	r3, [r1, #16]
 80063f8:	4605      	mov	r5, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b913      	cbnz	r3, 8006404 <_fflush_r+0x10>
 80063fe:	2500      	movs	r5, #0
 8006400:	4628      	mov	r0, r5
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	b118      	cbz	r0, 800640e <_fflush_r+0x1a>
 8006406:	6a03      	ldr	r3, [r0, #32]
 8006408:	b90b      	cbnz	r3, 800640e <_fflush_r+0x1a>
 800640a:	f7fe fb9b 	bl	8004b44 <__sinit>
 800640e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d0f3      	beq.n	80063fe <_fflush_r+0xa>
 8006416:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006418:	07d0      	lsls	r0, r2, #31
 800641a:	d404      	bmi.n	8006426 <_fflush_r+0x32>
 800641c:	0599      	lsls	r1, r3, #22
 800641e:	d402      	bmi.n	8006426 <_fflush_r+0x32>
 8006420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006422:	f7fe fc86 	bl	8004d32 <__retarget_lock_acquire_recursive>
 8006426:	4628      	mov	r0, r5
 8006428:	4621      	mov	r1, r4
 800642a:	f7ff ff63 	bl	80062f4 <__sflush_r>
 800642e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006430:	4605      	mov	r5, r0
 8006432:	07da      	lsls	r2, r3, #31
 8006434:	d4e4      	bmi.n	8006400 <_fflush_r+0xc>
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	059b      	lsls	r3, r3, #22
 800643a:	d4e1      	bmi.n	8006400 <_fflush_r+0xc>
 800643c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800643e:	f7fe fc79 	bl	8004d34 <__retarget_lock_release_recursive>
 8006442:	e7dd      	b.n	8006400 <_fflush_r+0xc>

08006444 <_sbrk_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	2300      	movs	r3, #0
 8006448:	4d05      	ldr	r5, [pc, #20]	@ (8006460 <_sbrk_r+0x1c>)
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	602b      	str	r3, [r5, #0]
 8006450:	f7fc ff30 	bl	80032b4 <_sbrk>
 8006454:	1c43      	adds	r3, r0, #1
 8006456:	d102      	bne.n	800645e <_sbrk_r+0x1a>
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	b103      	cbz	r3, 800645e <_sbrk_r+0x1a>
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	bd38      	pop	{r3, r4, r5, pc}
 8006460:	2000079c 	.word	0x2000079c

08006464 <memcpy>:
 8006464:	440a      	add	r2, r1
 8006466:	4291      	cmp	r1, r2
 8006468:	f100 33ff 	add.w	r3, r0, #4294967295
 800646c:	d100      	bne.n	8006470 <memcpy+0xc>
 800646e:	4770      	bx	lr
 8006470:	b510      	push	{r4, lr}
 8006472:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006476:	4291      	cmp	r1, r2
 8006478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800647c:	d1f9      	bne.n	8006472 <memcpy+0xe>
 800647e:	bd10      	pop	{r4, pc}

08006480 <__assert_func>:
 8006480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006482:	4614      	mov	r4, r2
 8006484:	461a      	mov	r2, r3
 8006486:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <__assert_func+0x2c>)
 8006488:	4605      	mov	r5, r0
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68d8      	ldr	r0, [r3, #12]
 800648e:	b954      	cbnz	r4, 80064a6 <__assert_func+0x26>
 8006490:	4b07      	ldr	r3, [pc, #28]	@ (80064b0 <__assert_func+0x30>)
 8006492:	461c      	mov	r4, r3
 8006494:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006498:	9100      	str	r1, [sp, #0]
 800649a:	462b      	mov	r3, r5
 800649c:	4905      	ldr	r1, [pc, #20]	@ (80064b4 <__assert_func+0x34>)
 800649e:	f000 f841 	bl	8006524 <fiprintf>
 80064a2:	f000 f851 	bl	8006548 <abort>
 80064a6:	4b04      	ldr	r3, [pc, #16]	@ (80064b8 <__assert_func+0x38>)
 80064a8:	e7f4      	b.n	8006494 <__assert_func+0x14>
 80064aa:	bf00      	nop
 80064ac:	20000074 	.word	0x20000074
 80064b0:	08006e3d 	.word	0x08006e3d
 80064b4:	08006e0f 	.word	0x08006e0f
 80064b8:	08006e02 	.word	0x08006e02

080064bc <_calloc_r>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	fba1 5402 	umull	r5, r4, r1, r2
 80064c2:	b93c      	cbnz	r4, 80064d4 <_calloc_r+0x18>
 80064c4:	4629      	mov	r1, r5
 80064c6:	f7ff fb09 	bl	8005adc <_malloc_r>
 80064ca:	4606      	mov	r6, r0
 80064cc:	b928      	cbnz	r0, 80064da <_calloc_r+0x1e>
 80064ce:	2600      	movs	r6, #0
 80064d0:	4630      	mov	r0, r6
 80064d2:	bd70      	pop	{r4, r5, r6, pc}
 80064d4:	220c      	movs	r2, #12
 80064d6:	6002      	str	r2, [r0, #0]
 80064d8:	e7f9      	b.n	80064ce <_calloc_r+0x12>
 80064da:	462a      	mov	r2, r5
 80064dc:	4621      	mov	r1, r4
 80064de:	f7fe fbaa 	bl	8004c36 <memset>
 80064e2:	e7f5      	b.n	80064d0 <_calloc_r+0x14>

080064e4 <__ascii_mbtowc>:
 80064e4:	b082      	sub	sp, #8
 80064e6:	b901      	cbnz	r1, 80064ea <__ascii_mbtowc+0x6>
 80064e8:	a901      	add	r1, sp, #4
 80064ea:	b142      	cbz	r2, 80064fe <__ascii_mbtowc+0x1a>
 80064ec:	b14b      	cbz	r3, 8006502 <__ascii_mbtowc+0x1e>
 80064ee:	7813      	ldrb	r3, [r2, #0]
 80064f0:	600b      	str	r3, [r1, #0]
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	1e10      	subs	r0, r2, #0
 80064f6:	bf18      	it	ne
 80064f8:	2001      	movne	r0, #1
 80064fa:	b002      	add	sp, #8
 80064fc:	4770      	bx	lr
 80064fe:	4610      	mov	r0, r2
 8006500:	e7fb      	b.n	80064fa <__ascii_mbtowc+0x16>
 8006502:	f06f 0001 	mvn.w	r0, #1
 8006506:	e7f8      	b.n	80064fa <__ascii_mbtowc+0x16>

08006508 <__ascii_wctomb>:
 8006508:	4603      	mov	r3, r0
 800650a:	4608      	mov	r0, r1
 800650c:	b141      	cbz	r1, 8006520 <__ascii_wctomb+0x18>
 800650e:	2aff      	cmp	r2, #255	@ 0xff
 8006510:	d904      	bls.n	800651c <__ascii_wctomb+0x14>
 8006512:	228a      	movs	r2, #138	@ 0x8a
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	4770      	bx	lr
 800651c:	2001      	movs	r0, #1
 800651e:	700a      	strb	r2, [r1, #0]
 8006520:	4770      	bx	lr
	...

08006524 <fiprintf>:
 8006524:	b40e      	push	{r1, r2, r3}
 8006526:	b503      	push	{r0, r1, lr}
 8006528:	4601      	mov	r1, r0
 800652a:	ab03      	add	r3, sp, #12
 800652c:	4805      	ldr	r0, [pc, #20]	@ (8006544 <fiprintf+0x20>)
 800652e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006532:	6800      	ldr	r0, [r0, #0]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	f000 f835 	bl	80065a4 <_vfiprintf_r>
 800653a:	b002      	add	sp, #8
 800653c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006540:	b003      	add	sp, #12
 8006542:	4770      	bx	lr
 8006544:	20000074 	.word	0x20000074

08006548 <abort>:
 8006548:	2006      	movs	r0, #6
 800654a:	b508      	push	{r3, lr}
 800654c:	f000 f9fe 	bl	800694c <raise>
 8006550:	2001      	movs	r0, #1
 8006552:	f7fc fe3a 	bl	80031ca <_exit>

08006556 <__sfputc_r>:
 8006556:	6893      	ldr	r3, [r2, #8]
 8006558:	b410      	push	{r4}
 800655a:	3b01      	subs	r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	6093      	str	r3, [r2, #8]
 8006560:	da07      	bge.n	8006572 <__sfputc_r+0x1c>
 8006562:	6994      	ldr	r4, [r2, #24]
 8006564:	42a3      	cmp	r3, r4
 8006566:	db01      	blt.n	800656c <__sfputc_r+0x16>
 8006568:	290a      	cmp	r1, #10
 800656a:	d102      	bne.n	8006572 <__sfputc_r+0x1c>
 800656c:	bc10      	pop	{r4}
 800656e:	f000 b931 	b.w	80067d4 <__swbuf_r>
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	1c58      	adds	r0, r3, #1
 8006576:	6010      	str	r0, [r2, #0]
 8006578:	7019      	strb	r1, [r3, #0]
 800657a:	4608      	mov	r0, r1
 800657c:	bc10      	pop	{r4}
 800657e:	4770      	bx	lr

08006580 <__sfputs_r>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	4606      	mov	r6, r0
 8006584:	460f      	mov	r7, r1
 8006586:	4614      	mov	r4, r2
 8006588:	18d5      	adds	r5, r2, r3
 800658a:	42ac      	cmp	r4, r5
 800658c:	d101      	bne.n	8006592 <__sfputs_r+0x12>
 800658e:	2000      	movs	r0, #0
 8006590:	e007      	b.n	80065a2 <__sfputs_r+0x22>
 8006592:	463a      	mov	r2, r7
 8006594:	4630      	mov	r0, r6
 8006596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800659a:	f7ff ffdc 	bl	8006556 <__sfputc_r>
 800659e:	1c43      	adds	r3, r0, #1
 80065a0:	d1f3      	bne.n	800658a <__sfputs_r+0xa>
 80065a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065a4 <_vfiprintf_r>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	460d      	mov	r5, r1
 80065aa:	4614      	mov	r4, r2
 80065ac:	4698      	mov	r8, r3
 80065ae:	4606      	mov	r6, r0
 80065b0:	b09d      	sub	sp, #116	@ 0x74
 80065b2:	b118      	cbz	r0, 80065bc <_vfiprintf_r+0x18>
 80065b4:	6a03      	ldr	r3, [r0, #32]
 80065b6:	b90b      	cbnz	r3, 80065bc <_vfiprintf_r+0x18>
 80065b8:	f7fe fac4 	bl	8004b44 <__sinit>
 80065bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065be:	07d9      	lsls	r1, r3, #31
 80065c0:	d405      	bmi.n	80065ce <_vfiprintf_r+0x2a>
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	059a      	lsls	r2, r3, #22
 80065c6:	d402      	bmi.n	80065ce <_vfiprintf_r+0x2a>
 80065c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065ca:	f7fe fbb2 	bl	8004d32 <__retarget_lock_acquire_recursive>
 80065ce:	89ab      	ldrh	r3, [r5, #12]
 80065d0:	071b      	lsls	r3, r3, #28
 80065d2:	d501      	bpl.n	80065d8 <_vfiprintf_r+0x34>
 80065d4:	692b      	ldr	r3, [r5, #16]
 80065d6:	b99b      	cbnz	r3, 8006600 <_vfiprintf_r+0x5c>
 80065d8:	4629      	mov	r1, r5
 80065da:	4630      	mov	r0, r6
 80065dc:	f000 f938 	bl	8006850 <__swsetup_r>
 80065e0:	b170      	cbz	r0, 8006600 <_vfiprintf_r+0x5c>
 80065e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065e4:	07dc      	lsls	r4, r3, #31
 80065e6:	d504      	bpl.n	80065f2 <_vfiprintf_r+0x4e>
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	b01d      	add	sp, #116	@ 0x74
 80065ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065f2:	89ab      	ldrh	r3, [r5, #12]
 80065f4:	0598      	lsls	r0, r3, #22
 80065f6:	d4f7      	bmi.n	80065e8 <_vfiprintf_r+0x44>
 80065f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065fa:	f7fe fb9b 	bl	8004d34 <__retarget_lock_release_recursive>
 80065fe:	e7f3      	b.n	80065e8 <_vfiprintf_r+0x44>
 8006600:	2300      	movs	r3, #0
 8006602:	9309      	str	r3, [sp, #36]	@ 0x24
 8006604:	2320      	movs	r3, #32
 8006606:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800660a:	2330      	movs	r3, #48	@ 0x30
 800660c:	f04f 0901 	mov.w	r9, #1
 8006610:	f8cd 800c 	str.w	r8, [sp, #12]
 8006614:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80067c0 <_vfiprintf_r+0x21c>
 8006618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800661c:	4623      	mov	r3, r4
 800661e:	469a      	mov	sl, r3
 8006620:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006624:	b10a      	cbz	r2, 800662a <_vfiprintf_r+0x86>
 8006626:	2a25      	cmp	r2, #37	@ 0x25
 8006628:	d1f9      	bne.n	800661e <_vfiprintf_r+0x7a>
 800662a:	ebba 0b04 	subs.w	fp, sl, r4
 800662e:	d00b      	beq.n	8006648 <_vfiprintf_r+0xa4>
 8006630:	465b      	mov	r3, fp
 8006632:	4622      	mov	r2, r4
 8006634:	4629      	mov	r1, r5
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff ffa2 	bl	8006580 <__sfputs_r>
 800663c:	3001      	adds	r0, #1
 800663e:	f000 80a7 	beq.w	8006790 <_vfiprintf_r+0x1ec>
 8006642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006644:	445a      	add	r2, fp
 8006646:	9209      	str	r2, [sp, #36]	@ 0x24
 8006648:	f89a 3000 	ldrb.w	r3, [sl]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 809f 	beq.w	8006790 <_vfiprintf_r+0x1ec>
 8006652:	2300      	movs	r3, #0
 8006654:	f04f 32ff 	mov.w	r2, #4294967295
 8006658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800665c:	f10a 0a01 	add.w	sl, sl, #1
 8006660:	9304      	str	r3, [sp, #16]
 8006662:	9307      	str	r3, [sp, #28]
 8006664:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006668:	931a      	str	r3, [sp, #104]	@ 0x68
 800666a:	4654      	mov	r4, sl
 800666c:	2205      	movs	r2, #5
 800666e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006672:	4853      	ldr	r0, [pc, #332]	@ (80067c0 <_vfiprintf_r+0x21c>)
 8006674:	f7fe fb5f 	bl	8004d36 <memchr>
 8006678:	9a04      	ldr	r2, [sp, #16]
 800667a:	b9d8      	cbnz	r0, 80066b4 <_vfiprintf_r+0x110>
 800667c:	06d1      	lsls	r1, r2, #27
 800667e:	bf44      	itt	mi
 8006680:	2320      	movmi	r3, #32
 8006682:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006686:	0713      	lsls	r3, r2, #28
 8006688:	bf44      	itt	mi
 800668a:	232b      	movmi	r3, #43	@ 0x2b
 800668c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006690:	f89a 3000 	ldrb.w	r3, [sl]
 8006694:	2b2a      	cmp	r3, #42	@ 0x2a
 8006696:	d015      	beq.n	80066c4 <_vfiprintf_r+0x120>
 8006698:	4654      	mov	r4, sl
 800669a:	2000      	movs	r0, #0
 800669c:	f04f 0c0a 	mov.w	ip, #10
 80066a0:	9a07      	ldr	r2, [sp, #28]
 80066a2:	4621      	mov	r1, r4
 80066a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a8:	3b30      	subs	r3, #48	@ 0x30
 80066aa:	2b09      	cmp	r3, #9
 80066ac:	d94b      	bls.n	8006746 <_vfiprintf_r+0x1a2>
 80066ae:	b1b0      	cbz	r0, 80066de <_vfiprintf_r+0x13a>
 80066b0:	9207      	str	r2, [sp, #28]
 80066b2:	e014      	b.n	80066de <_vfiprintf_r+0x13a>
 80066b4:	eba0 0308 	sub.w	r3, r0, r8
 80066b8:	fa09 f303 	lsl.w	r3, r9, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	46a2      	mov	sl, r4
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	e7d2      	b.n	800666a <_vfiprintf_r+0xc6>
 80066c4:	9b03      	ldr	r3, [sp, #12]
 80066c6:	1d19      	adds	r1, r3, #4
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	9103      	str	r1, [sp, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bfbb      	ittet	lt
 80066d0:	425b      	neglt	r3, r3
 80066d2:	f042 0202 	orrlt.w	r2, r2, #2
 80066d6:	9307      	strge	r3, [sp, #28]
 80066d8:	9307      	strlt	r3, [sp, #28]
 80066da:	bfb8      	it	lt
 80066dc:	9204      	strlt	r2, [sp, #16]
 80066de:	7823      	ldrb	r3, [r4, #0]
 80066e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80066e2:	d10a      	bne.n	80066fa <_vfiprintf_r+0x156>
 80066e4:	7863      	ldrb	r3, [r4, #1]
 80066e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80066e8:	d132      	bne.n	8006750 <_vfiprintf_r+0x1ac>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	3402      	adds	r4, #2
 80066ee:	1d1a      	adds	r2, r3, #4
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	9203      	str	r2, [sp, #12]
 80066f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80067c4 <_vfiprintf_r+0x220>
 80066fe:	2203      	movs	r2, #3
 8006700:	4650      	mov	r0, sl
 8006702:	7821      	ldrb	r1, [r4, #0]
 8006704:	f7fe fb17 	bl	8004d36 <memchr>
 8006708:	b138      	cbz	r0, 800671a <_vfiprintf_r+0x176>
 800670a:	2240      	movs	r2, #64	@ 0x40
 800670c:	9b04      	ldr	r3, [sp, #16]
 800670e:	eba0 000a 	sub.w	r0, r0, sl
 8006712:	4082      	lsls	r2, r0
 8006714:	4313      	orrs	r3, r2
 8006716:	3401      	adds	r4, #1
 8006718:	9304      	str	r3, [sp, #16]
 800671a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671e:	2206      	movs	r2, #6
 8006720:	4829      	ldr	r0, [pc, #164]	@ (80067c8 <_vfiprintf_r+0x224>)
 8006722:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006726:	f7fe fb06 	bl	8004d36 <memchr>
 800672a:	2800      	cmp	r0, #0
 800672c:	d03f      	beq.n	80067ae <_vfiprintf_r+0x20a>
 800672e:	4b27      	ldr	r3, [pc, #156]	@ (80067cc <_vfiprintf_r+0x228>)
 8006730:	bb1b      	cbnz	r3, 800677a <_vfiprintf_r+0x1d6>
 8006732:	9b03      	ldr	r3, [sp, #12]
 8006734:	3307      	adds	r3, #7
 8006736:	f023 0307 	bic.w	r3, r3, #7
 800673a:	3308      	adds	r3, #8
 800673c:	9303      	str	r3, [sp, #12]
 800673e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006740:	443b      	add	r3, r7
 8006742:	9309      	str	r3, [sp, #36]	@ 0x24
 8006744:	e76a      	b.n	800661c <_vfiprintf_r+0x78>
 8006746:	460c      	mov	r4, r1
 8006748:	2001      	movs	r0, #1
 800674a:	fb0c 3202 	mla	r2, ip, r2, r3
 800674e:	e7a8      	b.n	80066a2 <_vfiprintf_r+0xfe>
 8006750:	2300      	movs	r3, #0
 8006752:	f04f 0c0a 	mov.w	ip, #10
 8006756:	4619      	mov	r1, r3
 8006758:	3401      	adds	r4, #1
 800675a:	9305      	str	r3, [sp, #20]
 800675c:	4620      	mov	r0, r4
 800675e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006762:	3a30      	subs	r2, #48	@ 0x30
 8006764:	2a09      	cmp	r2, #9
 8006766:	d903      	bls.n	8006770 <_vfiprintf_r+0x1cc>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d0c6      	beq.n	80066fa <_vfiprintf_r+0x156>
 800676c:	9105      	str	r1, [sp, #20]
 800676e:	e7c4      	b.n	80066fa <_vfiprintf_r+0x156>
 8006770:	4604      	mov	r4, r0
 8006772:	2301      	movs	r3, #1
 8006774:	fb0c 2101 	mla	r1, ip, r1, r2
 8006778:	e7f0      	b.n	800675c <_vfiprintf_r+0x1b8>
 800677a:	ab03      	add	r3, sp, #12
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	462a      	mov	r2, r5
 8006780:	4630      	mov	r0, r6
 8006782:	4b13      	ldr	r3, [pc, #76]	@ (80067d0 <_vfiprintf_r+0x22c>)
 8006784:	a904      	add	r1, sp, #16
 8006786:	f7fd fd93 	bl	80042b0 <_printf_float>
 800678a:	4607      	mov	r7, r0
 800678c:	1c78      	adds	r0, r7, #1
 800678e:	d1d6      	bne.n	800673e <_vfiprintf_r+0x19a>
 8006790:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006792:	07d9      	lsls	r1, r3, #31
 8006794:	d405      	bmi.n	80067a2 <_vfiprintf_r+0x1fe>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	059a      	lsls	r2, r3, #22
 800679a:	d402      	bmi.n	80067a2 <_vfiprintf_r+0x1fe>
 800679c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800679e:	f7fe fac9 	bl	8004d34 <__retarget_lock_release_recursive>
 80067a2:	89ab      	ldrh	r3, [r5, #12]
 80067a4:	065b      	lsls	r3, r3, #25
 80067a6:	f53f af1f 	bmi.w	80065e8 <_vfiprintf_r+0x44>
 80067aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ac:	e71e      	b.n	80065ec <_vfiprintf_r+0x48>
 80067ae:	ab03      	add	r3, sp, #12
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	462a      	mov	r2, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	4b06      	ldr	r3, [pc, #24]	@ (80067d0 <_vfiprintf_r+0x22c>)
 80067b8:	a904      	add	r1, sp, #16
 80067ba:	f7fe f817 	bl	80047ec <_printf_i>
 80067be:	e7e4      	b.n	800678a <_vfiprintf_r+0x1e6>
 80067c0:	08006f3f 	.word	0x08006f3f
 80067c4:	08006f45 	.word	0x08006f45
 80067c8:	08006f49 	.word	0x08006f49
 80067cc:	080042b1 	.word	0x080042b1
 80067d0:	08006581 	.word	0x08006581

080067d4 <__swbuf_r>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	460e      	mov	r6, r1
 80067d8:	4614      	mov	r4, r2
 80067da:	4605      	mov	r5, r0
 80067dc:	b118      	cbz	r0, 80067e6 <__swbuf_r+0x12>
 80067de:	6a03      	ldr	r3, [r0, #32]
 80067e0:	b90b      	cbnz	r3, 80067e6 <__swbuf_r+0x12>
 80067e2:	f7fe f9af 	bl	8004b44 <__sinit>
 80067e6:	69a3      	ldr	r3, [r4, #24]
 80067e8:	60a3      	str	r3, [r4, #8]
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	071a      	lsls	r2, r3, #28
 80067ee:	d501      	bpl.n	80067f4 <__swbuf_r+0x20>
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	b943      	cbnz	r3, 8006806 <__swbuf_r+0x32>
 80067f4:	4621      	mov	r1, r4
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 f82a 	bl	8006850 <__swsetup_r>
 80067fc:	b118      	cbz	r0, 8006806 <__swbuf_r+0x32>
 80067fe:	f04f 37ff 	mov.w	r7, #4294967295
 8006802:	4638      	mov	r0, r7
 8006804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	6922      	ldr	r2, [r4, #16]
 800680a:	b2f6      	uxtb	r6, r6
 800680c:	1a98      	subs	r0, r3, r2
 800680e:	6963      	ldr	r3, [r4, #20]
 8006810:	4637      	mov	r7, r6
 8006812:	4283      	cmp	r3, r0
 8006814:	dc05      	bgt.n	8006822 <__swbuf_r+0x4e>
 8006816:	4621      	mov	r1, r4
 8006818:	4628      	mov	r0, r5
 800681a:	f7ff fdeb 	bl	80063f4 <_fflush_r>
 800681e:	2800      	cmp	r0, #0
 8006820:	d1ed      	bne.n	80067fe <__swbuf_r+0x2a>
 8006822:	68a3      	ldr	r3, [r4, #8]
 8006824:	3b01      	subs	r3, #1
 8006826:	60a3      	str	r3, [r4, #8]
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	6022      	str	r2, [r4, #0]
 800682e:	701e      	strb	r6, [r3, #0]
 8006830:	6962      	ldr	r2, [r4, #20]
 8006832:	1c43      	adds	r3, r0, #1
 8006834:	429a      	cmp	r2, r3
 8006836:	d004      	beq.n	8006842 <__swbuf_r+0x6e>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	07db      	lsls	r3, r3, #31
 800683c:	d5e1      	bpl.n	8006802 <__swbuf_r+0x2e>
 800683e:	2e0a      	cmp	r6, #10
 8006840:	d1df      	bne.n	8006802 <__swbuf_r+0x2e>
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	f7ff fdd5 	bl	80063f4 <_fflush_r>
 800684a:	2800      	cmp	r0, #0
 800684c:	d0d9      	beq.n	8006802 <__swbuf_r+0x2e>
 800684e:	e7d6      	b.n	80067fe <__swbuf_r+0x2a>

08006850 <__swsetup_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4b29      	ldr	r3, [pc, #164]	@ (80068f8 <__swsetup_r+0xa8>)
 8006854:	4605      	mov	r5, r0
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	460c      	mov	r4, r1
 800685a:	b118      	cbz	r0, 8006864 <__swsetup_r+0x14>
 800685c:	6a03      	ldr	r3, [r0, #32]
 800685e:	b90b      	cbnz	r3, 8006864 <__swsetup_r+0x14>
 8006860:	f7fe f970 	bl	8004b44 <__sinit>
 8006864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006868:	0719      	lsls	r1, r3, #28
 800686a:	d422      	bmi.n	80068b2 <__swsetup_r+0x62>
 800686c:	06da      	lsls	r2, r3, #27
 800686e:	d407      	bmi.n	8006880 <__swsetup_r+0x30>
 8006870:	2209      	movs	r2, #9
 8006872:	602a      	str	r2, [r5, #0]
 8006874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	81a3      	strh	r3, [r4, #12]
 800687e:	e033      	b.n	80068e8 <__swsetup_r+0x98>
 8006880:	0758      	lsls	r0, r3, #29
 8006882:	d512      	bpl.n	80068aa <__swsetup_r+0x5a>
 8006884:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006886:	b141      	cbz	r1, 800689a <__swsetup_r+0x4a>
 8006888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800688c:	4299      	cmp	r1, r3
 800688e:	d002      	beq.n	8006896 <__swsetup_r+0x46>
 8006890:	4628      	mov	r0, r5
 8006892:	f7ff f8b1 	bl	80059f8 <_free_r>
 8006896:	2300      	movs	r3, #0
 8006898:	6363      	str	r3, [r4, #52]	@ 0x34
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80068a0:	81a3      	strh	r3, [r4, #12]
 80068a2:	2300      	movs	r3, #0
 80068a4:	6063      	str	r3, [r4, #4]
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	6023      	str	r3, [r4, #0]
 80068aa:	89a3      	ldrh	r3, [r4, #12]
 80068ac:	f043 0308 	orr.w	r3, r3, #8
 80068b0:	81a3      	strh	r3, [r4, #12]
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	b94b      	cbnz	r3, 80068ca <__swsetup_r+0x7a>
 80068b6:	89a3      	ldrh	r3, [r4, #12]
 80068b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068c0:	d003      	beq.n	80068ca <__swsetup_r+0x7a>
 80068c2:	4621      	mov	r1, r4
 80068c4:	4628      	mov	r0, r5
 80068c6:	f000 f882 	bl	80069ce <__smakebuf_r>
 80068ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ce:	f013 0201 	ands.w	r2, r3, #1
 80068d2:	d00a      	beq.n	80068ea <__swsetup_r+0x9a>
 80068d4:	2200      	movs	r2, #0
 80068d6:	60a2      	str	r2, [r4, #8]
 80068d8:	6962      	ldr	r2, [r4, #20]
 80068da:	4252      	negs	r2, r2
 80068dc:	61a2      	str	r2, [r4, #24]
 80068de:	6922      	ldr	r2, [r4, #16]
 80068e0:	b942      	cbnz	r2, 80068f4 <__swsetup_r+0xa4>
 80068e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068e6:	d1c5      	bne.n	8006874 <__swsetup_r+0x24>
 80068e8:	bd38      	pop	{r3, r4, r5, pc}
 80068ea:	0799      	lsls	r1, r3, #30
 80068ec:	bf58      	it	pl
 80068ee:	6962      	ldrpl	r2, [r4, #20]
 80068f0:	60a2      	str	r2, [r4, #8]
 80068f2:	e7f4      	b.n	80068de <__swsetup_r+0x8e>
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7f7      	b.n	80068e8 <__swsetup_r+0x98>
 80068f8:	20000074 	.word	0x20000074

080068fc <_raise_r>:
 80068fc:	291f      	cmp	r1, #31
 80068fe:	b538      	push	{r3, r4, r5, lr}
 8006900:	4605      	mov	r5, r0
 8006902:	460c      	mov	r4, r1
 8006904:	d904      	bls.n	8006910 <_raise_r+0x14>
 8006906:	2316      	movs	r3, #22
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006912:	b112      	cbz	r2, 800691a <_raise_r+0x1e>
 8006914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006918:	b94b      	cbnz	r3, 800692e <_raise_r+0x32>
 800691a:	4628      	mov	r0, r5
 800691c:	f000 f830 	bl	8006980 <_getpid_r>
 8006920:	4622      	mov	r2, r4
 8006922:	4601      	mov	r1, r0
 8006924:	4628      	mov	r0, r5
 8006926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692a:	f000 b817 	b.w	800695c <_kill_r>
 800692e:	2b01      	cmp	r3, #1
 8006930:	d00a      	beq.n	8006948 <_raise_r+0x4c>
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	d103      	bne.n	800693e <_raise_r+0x42>
 8006936:	2316      	movs	r3, #22
 8006938:	6003      	str	r3, [r0, #0]
 800693a:	2001      	movs	r0, #1
 800693c:	e7e7      	b.n	800690e <_raise_r+0x12>
 800693e:	2100      	movs	r1, #0
 8006940:	4620      	mov	r0, r4
 8006942:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006946:	4798      	blx	r3
 8006948:	2000      	movs	r0, #0
 800694a:	e7e0      	b.n	800690e <_raise_r+0x12>

0800694c <raise>:
 800694c:	4b02      	ldr	r3, [pc, #8]	@ (8006958 <raise+0xc>)
 800694e:	4601      	mov	r1, r0
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f7ff bfd3 	b.w	80068fc <_raise_r>
 8006956:	bf00      	nop
 8006958:	20000074 	.word	0x20000074

0800695c <_kill_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	2300      	movs	r3, #0
 8006960:	4d06      	ldr	r5, [pc, #24]	@ (800697c <_kill_r+0x20>)
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	f7fc fc1e 	bl	80031aa <_kill>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d102      	bne.n	8006978 <_kill_r+0x1c>
 8006972:	682b      	ldr	r3, [r5, #0]
 8006974:	b103      	cbz	r3, 8006978 <_kill_r+0x1c>
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	2000079c 	.word	0x2000079c

08006980 <_getpid_r>:
 8006980:	f7fc bc0c 	b.w	800319c <_getpid>

08006984 <__swhatbuf_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	4615      	mov	r5, r2
 800698e:	2900      	cmp	r1, #0
 8006990:	461e      	mov	r6, r3
 8006992:	b096      	sub	sp, #88	@ 0x58
 8006994:	da0c      	bge.n	80069b0 <__swhatbuf_r+0x2c>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	2100      	movs	r1, #0
 800699a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800699e:	bf14      	ite	ne
 80069a0:	2340      	movne	r3, #64	@ 0x40
 80069a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069a6:	2000      	movs	r0, #0
 80069a8:	6031      	str	r1, [r6, #0]
 80069aa:	602b      	str	r3, [r5, #0]
 80069ac:	b016      	add	sp, #88	@ 0x58
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
 80069b0:	466a      	mov	r2, sp
 80069b2:	f000 f849 	bl	8006a48 <_fstat_r>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	dbed      	blt.n	8006996 <__swhatbuf_r+0x12>
 80069ba:	9901      	ldr	r1, [sp, #4]
 80069bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069c4:	4259      	negs	r1, r3
 80069c6:	4159      	adcs	r1, r3
 80069c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069cc:	e7eb      	b.n	80069a6 <__swhatbuf_r+0x22>

080069ce <__smakebuf_r>:
 80069ce:	898b      	ldrh	r3, [r1, #12]
 80069d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069d2:	079d      	lsls	r5, r3, #30
 80069d4:	4606      	mov	r6, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	d507      	bpl.n	80069ea <__smakebuf_r+0x1c>
 80069da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	2301      	movs	r3, #1
 80069e4:	6163      	str	r3, [r4, #20]
 80069e6:	b003      	add	sp, #12
 80069e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069ea:	466a      	mov	r2, sp
 80069ec:	ab01      	add	r3, sp, #4
 80069ee:	f7ff ffc9 	bl	8006984 <__swhatbuf_r>
 80069f2:	9f00      	ldr	r7, [sp, #0]
 80069f4:	4605      	mov	r5, r0
 80069f6:	4639      	mov	r1, r7
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7ff f86f 	bl	8005adc <_malloc_r>
 80069fe:	b948      	cbnz	r0, 8006a14 <__smakebuf_r+0x46>
 8006a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d4ee      	bmi.n	80069e6 <__smakebuf_r+0x18>
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	e7e2      	b.n	80069da <__smakebuf_r+0xc>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	9b01      	ldr	r3, [sp, #4]
 8006a22:	6020      	str	r0, [r4, #0]
 8006a24:	b15b      	cbz	r3, 8006a3e <__smakebuf_r+0x70>
 8006a26:	4630      	mov	r0, r6
 8006a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a2c:	f000 f81e 	bl	8006a6c <_isatty_r>
 8006a30:	b128      	cbz	r0, 8006a3e <__smakebuf_r+0x70>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f023 0303 	bic.w	r3, r3, #3
 8006a38:	f043 0301 	orr.w	r3, r3, #1
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	89a3      	ldrh	r3, [r4, #12]
 8006a40:	431d      	orrs	r5, r3
 8006a42:	81a5      	strh	r5, [r4, #12]
 8006a44:	e7cf      	b.n	80069e6 <__smakebuf_r+0x18>
	...

08006a48 <_fstat_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4d06      	ldr	r5, [pc, #24]	@ (8006a68 <_fstat_r+0x20>)
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	4611      	mov	r1, r2
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	f7fc fc07 	bl	8003268 <_fstat>
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	d102      	bne.n	8006a64 <_fstat_r+0x1c>
 8006a5e:	682b      	ldr	r3, [r5, #0]
 8006a60:	b103      	cbz	r3, 8006a64 <_fstat_r+0x1c>
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	bd38      	pop	{r3, r4, r5, pc}
 8006a66:	bf00      	nop
 8006a68:	2000079c 	.word	0x2000079c

08006a6c <_isatty_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	2300      	movs	r3, #0
 8006a70:	4d05      	ldr	r5, [pc, #20]	@ (8006a88 <_isatty_r+0x1c>)
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fc fc05 	bl	8003286 <_isatty>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_isatty_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_isatty_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	2000079c 	.word	0x2000079c

08006a8c <_init>:
 8006a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a8e:	bf00      	nop
 8006a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a92:	bc08      	pop	{r3}
 8006a94:	469e      	mov	lr, r3
 8006a96:	4770      	bx	lr

08006a98 <_fini>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	bf00      	nop
 8006a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9e:	bc08      	pop	{r3}
 8006aa0:	469e      	mov	lr, r3
 8006aa2:	4770      	bx	lr
