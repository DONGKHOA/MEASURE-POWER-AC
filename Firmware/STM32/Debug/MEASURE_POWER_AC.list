
MEASURE_POWER_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006064  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08006178  08006178  00007178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006520  08006520  000081cc  2**0
                  CONTENTS
  4 .ARM          00000008  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006528  08006528  000081cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006528  08006528  00007528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800652c  0800652c  0000752c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  08006530  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200001cc  080066fc  000081cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000578  080066fc  00008578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007362  00000000  00000000  000081f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e67  00000000  00000000  0000f557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  000113c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b5  00000000  00000000  00011e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000154f7  00000000  00000000  00012605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007881  00000000  00000000  00027afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d7e4  00000000  00000000  0002f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009cb61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c70  00000000  00000000  0009cba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000a0814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001cc 	.word	0x200001cc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800615c 	.word	0x0800615c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d0 	.word	0x200001d0
 800014c:	0800615c 	.word	0x0800615c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d103      	bne.n	8000aa4 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	334c      	adds	r3, #76	@ 0x4c
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	e001      	b.n	8000aa8 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <LL_ADC_DMA_GetRegAddr+0x2c>)
 8000aa6:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	4001244c 	.word	0x4001244c

08000ab8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL) == (LL_ADC_REG_TRIG_SOFTWARE));
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ac8:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000acc:	bf0c      	ite	eq
 8000ace:	2301      	moveq	r3, #1
 8000ad0:	2300      	movne	r3, #0
 8000ad2:	b2db      	uxtb	r3, r3
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	609a      	str	r2, [r3, #8]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b083      	sub	sp, #12
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f043 0201 	orr.w	r2, r3, #1
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	609a      	str	r2, [r3, #8]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <LL_ADC_Disable>:
  * @rmtoll CR2      ADON           LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f023 0201 	bic.w	r2, r3, #1
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]
}
 8000b34:	bf00      	nop
 8000b36:	370c      	adds	r7, #12
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	bf0c      	ite	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	2300      	movne	r3, #0
 8000b56:	b2db      	uxtb	r3, r3
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f043 0204 	orr.w	r2, r3, #4
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	609a      	str	r2, [r3, #8]
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	609a      	str	r2, [r3, #8]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f06f 0202 	mvn.w	r2, #2
 8000bcc:	601a      	str	r2, [r3, #0]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <BSP_ADC_ConversionStop_Disable>:
 *   INLINE PRIVATE FUNCTION
 *****************************************************************************/

static inline void
BSP_ADC_ConversionStop_Disable (ADC_TypeDef *p_ADC)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  // Disable the ADC peripheral
  LL_ADC_Disable(p_ADC);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff9d 	bl	8000b20 <LL_ADC_Disable>

  // Wait for ADC effectively disabled
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <BSP_ADC_ConversionStop_Disable+0x38>)
 8000be8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bec:	601a      	str	r2, [r3, #0]
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 8000bee:	e003      	b.n	8000bf8 <BSP_ADC_ConversionStop_Disable+0x20>
  {
    if (u32_adc_timeout == 0)
 8000bf0:	4b07      	ldr	r3, [pc, #28]	@ (8000c10 <BSP_ADC_ConversionStop_Disable+0x38>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <BSP_ADC_ConversionStop_Disable+0x2e>
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff ffa0 	bl	8000b3e <LL_ADC_IsEnabled>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f5      	bne.n	8000bf0 <BSP_ADC_ConversionStop_Disable+0x18>
 8000c04:	e000      	b.n	8000c08 <BSP_ADC_ConversionStop_Disable+0x30>
    {
      return;
 8000c06:	bf00      	nop
    }
  }
}
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001e8 	.word	0x200001e8

08000c14 <BSP_ADC_Enable>:

static inline void
BSP_ADC_Enable (ADC_TypeDef *p_ADC)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if (LL_ADC_IsEnabled(p_ADC) == RESET)
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff8e 	bl	8000b3e <LL_ADC_IsEnabled>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d113      	bne.n	8000c50 <BSP_ADC_Enable+0x3c>
  {
    LL_ADC_Enable(p_ADC);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff6a 	bl	8000b02 <LL_ADC_Enable>
    // Wait for ADC effectively enabled
    u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <BSP_ADC_Enable+0x44>)
 8000c30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c34:	601a      	str	r2, [r3, #0]
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 8000c36:	e003      	b.n	8000c40 <BSP_ADC_Enable+0x2c>
    {
      if (u32_adc_timeout == 0)
 8000c38:	4b07      	ldr	r3, [pc, #28]	@ (8000c58 <BSP_ADC_Enable+0x44>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d006      	beq.n	8000c4e <BSP_ADC_Enable+0x3a>
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ff7c 	bl	8000b3e <LL_ADC_IsEnabled>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d0f5      	beq.n	8000c38 <BSP_ADC_Enable+0x24>
 8000c4c:	e000      	b.n	8000c50 <BSP_ADC_Enable+0x3c>
      {
        return;
 8000c4e:	bf00      	nop
      }
    }
  }
}
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200001e8 	.word	0x200001e8

08000c5c <BSP_ADC_Start_Calibration>:
 *   PUBLIC FUNCTION
 *****************************************************************************/

void
BSP_ADC_Start_Calibration (ADC_TypeDef *p_ADC)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  // 1. Disable ADC peripheral
  BSP_ADC_ConversionStop_Disable(p_ADC);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f7ff ffb7 	bl	8000bd8 <BSP_ADC_ConversionStop_Disable>

  // 2. Calibration prerequisite delay before starting the calibration.
  // - ADC must be enabled for at least two ADC clock cycles
  BSP_ADC_Enable(p_ADC);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffd2 	bl	8000c14 <BSP_ADC_Enable>

  // Hardware prerequisite: delay before starting the calibration.
  //  - Computation of CPU clock cycles corresponding to ADC clock cycles.
  //  - Wait for the expected ADC clock cycles delay
  LL_mDelay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f002 fb51 	bl	8003318 <LL_mDelay>

  // 3. Resets ADC calibration registers
  p_ADC->CR2 |= ADC_CR2_RSTCAL;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	f043 0208 	orr.w	r2, r3, #8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	609a      	str	r2, [r3, #8]

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8000c82:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <BSP_ADC_Start_Calibration+0x78>)
 8000c84:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000c88:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 8000c8a:	e003      	b.n	8000c94 <BSP_ADC_Start_Calibration+0x38>
  {
    if (u32_adc_timeout == 0)
 8000c8c:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <BSP_ADC_Start_Calibration+0x78>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d018      	beq.n	8000cc6 <BSP_ADC_Start_Calibration+0x6a>
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 0308 	and.w	r3, r3, #8
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1f5      	bne.n	8000c8c <BSP_ADC_Start_Calibration+0x30>
      return;
    }
  }

  // 4. Start ADC calibration
  LL_ADC_StartCalibration(p_ADC);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff5e 	bl	8000b62 <LL_ADC_StartCalibration>

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <BSP_ADC_Start_Calibration+0x78>)
 8000ca8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cac:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 8000cae:	e003      	b.n	8000cb8 <BSP_ADC_Start_Calibration+0x5c>
  {
    if (u32_adc_timeout == 0)
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <BSP_ADC_Start_Calibration+0x78>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d008      	beq.n	8000cca <BSP_ADC_Start_Calibration+0x6e>
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f5      	bne.n	8000cb0 <BSP_ADC_Start_Calibration+0x54>
 8000cc4:	e002      	b.n	8000ccc <BSP_ADC_Start_Calibration+0x70>
      return;
 8000cc6:	bf00      	nop
 8000cc8:	e000      	b.n	8000ccc <BSP_ADC_Start_Calibration+0x70>
    {
      return;
 8000cca:	bf00      	nop
    }
  }
}
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200001e8 	.word	0x200001e8

08000cd8 <BSP_ADC_Start_DMA>:

// Using with >= 2 Channel in ADC
void
BSP_ADC_Start_DMA (ADC_TypeDef *p_ADC, uint32_t *pData, uint32_t Length)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  // Enable the ADC peripheral
  BSP_ADC_Enable(p_ADC);
 8000ce4:	68f8      	ldr	r0, [r7, #12]
 8000ce6:	f7ff ff95 	bl	8000c14 <BSP_ADC_Enable>

  // Clear previous flags (EOC)
  LL_ADC_ClearFlag_EOS(p_ADC);
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f7ff ff67 	bl	8000bbe <LL_ADC_ClearFlag_EOS>

  LL_ADC_REG_SetDMATransfer(p_ADC, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8000cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cf4:	68f8      	ldr	r0, [r7, #12]
 8000cf6:	f7ff fef2 	bl	8000ade <LL_ADC_REG_SetDMATransfer>

  BSP_DMA_Start_IT(DMA1,
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f7ff fec3 	bl	8000a88 <LL_ADC_DMA_GetRegAddr>
 8000d02:	4601      	mov	r1, r0
 8000d04:	68ba      	ldr	r2, [r7, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	2101      	movs	r1, #1
 8000d10:	480a      	ldr	r0, [pc, #40]	@ (8000d3c <BSP_ADC_Start_DMA+0x64>)
 8000d12:	f000 f9e3 	bl	80010dc <BSP_DMA_Start_IT>
                   LL_ADC_DMA_GetRegAddr(p_ADC, LL_ADC_DMA_REG_REGULAR_DATA),
                   (uint32_t)pData,
                   Length);

  // Start ADC conversion
  if (LL_ADC_REG_IsTriggerSourceSWStart(p_ADC))
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fece 	bl	8000ab8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d003      	beq.n	8000d2a <BSP_ADC_Start_DMA+0x52>
  {
    // If software start is selected
    LL_ADC_REG_StartConversionSWStart(p_ADC);
 8000d22:	68f8      	ldr	r0, [r7, #12]
 8000d24:	f7ff ff2c 	bl	8000b80 <LL_ADC_REG_StartConversionSWStart>
  else
  {
    // If external trigger is selected
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
  }
}
 8000d28:	e004      	b.n	8000d34 <BSP_ADC_Start_DMA+0x5c>
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
 8000d2a:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff ff35 	bl	8000b9e <LL_ADC_REG_StartConversionExtTrig>
}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40020000 	.word	0x40020000

08000d40 <BSP_ADC_TimeOut>:

void
BSP_ADC_TimeOut (void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  if (u32_adc_timeout != 0)
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <BSP_ADC_TimeOut+0x20>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d004      	beq.n	8000d56 <BSP_ADC_TimeOut+0x16>
  {
    u32_adc_timeout--;
 8000d4c:	4b04      	ldr	r3, [pc, #16]	@ (8000d60 <BSP_ADC_TimeOut+0x20>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	4a03      	ldr	r2, [pc, #12]	@ (8000d60 <BSP_ADC_TimeOut+0x20>)
 8000d54:	6013      	str	r3, [r2, #0]
  }
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200001e8 	.word	0x200001e8

08000d64 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <LL_DMA_EnableChannel+0x38>)
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	461a      	mov	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	3a01      	subs	r2, #1
 8000d82:	4906      	ldr	r1, [pc, #24]	@ (8000d9c <LL_DMA_EnableChannel+0x38>)
 8000d84:	5c8a      	ldrb	r2, [r1, r2]
 8000d86:	4611      	mov	r1, r2
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	440a      	add	r2, r1
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	08006184 	.word	0x08006184

08000da0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	3b01      	subs	r3, #1
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LL_DMA_DisableChannel+0x38>)
 8000db0:	5cd3      	ldrb	r3, [r2, r3]
 8000db2:	461a      	mov	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	3a01      	subs	r2, #1
 8000dbe:	4906      	ldr	r1, [pc, #24]	@ (8000dd8 <LL_DMA_DisableChannel+0x38>)
 8000dc0:	5c8a      	ldrb	r2, [r1, r2]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	440a      	add	r2, r1
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6013      	str	r3, [r2, #0]
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	08006184 	.word	0x08006184

08000ddc <LL_DMA_GetMode>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  */
__STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	4a06      	ldr	r2, [pc, #24]	@ (8000e04 <LL_DMA_GetMode+0x28>)
 8000dec:	5cd3      	ldrb	r3, [r2, r3]
 8000dee:	461a      	mov	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0320 	and.w	r3, r3, #32
                   DMA_CCR_CIRC));
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr
 8000e04:	08006184 	.word	0x08006184

08000e08 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <LL_DMA_SetDataLength+0x40>)
 8000e1a:	5cd3      	ldrb	r3, [r2, r3]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4413      	add	r3, r2
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	0c1b      	lsrs	r3, r3, #16
 8000e26:	041b      	lsls	r3, r3, #16
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	3a01      	subs	r2, #1
 8000e2c:	4906      	ldr	r1, [pc, #24]	@ (8000e48 <LL_DMA_SetDataLength+0x40>)
 8000e2e:	5c8a      	ldrb	r2, [r1, r2]
 8000e30:	4611      	mov	r1, r2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	440a      	add	r2, r1
 8000e36:	4611      	mov	r1, r2
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	08006184 	.word	0x08006184

08000e4c <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d114      	bne.n	8000e8a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4a15      	ldr	r2, [pc, #84]	@ (8000ebc <LL_DMA_ConfigAddresses+0x70>)
 8000e66:	5cd3      	ldrb	r3, [r2, r3]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	461a      	mov	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <LL_DMA_ConfigAddresses+0x70>)
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4413      	add	r3, r2
 8000e82:	461a      	mov	r2, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8000e88:	e013      	b.n	8000eb2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <LL_DMA_ConfigAddresses+0x70>)
 8000e90:	5cd3      	ldrb	r3, [r2, r3]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <LL_DMA_ConfigAddresses+0x70>)
 8000ea4:	5cd3      	ldrb	r3, [r2, r3]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	60d3      	str	r3, [r2, #12]
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	08006184 	.word	0x08006184

08000ec0 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	bf0c      	ite	eq
 8000ed4:	2301      	moveq	r3, #1
 8000ed6:	2300      	movne	r3, #0
 8000ed8:	b2db      	uxtb	r3, r3
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2301      	moveq	r3, #1
 8000efa:	2300      	movne	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	bf0c      	ite	eq
 8000f1c:	2301      	moveq	r3, #1
 8000f1e:	2300      	movne	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2202      	movs	r2, #2
 8000f38:	605a      	str	r2, [r3, #4]
}
 8000f3a:	bf00      	nop
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2204      	movs	r2, #4
 8000f50:	605a      	str	r2, [r3, #4]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2208      	movs	r2, #8
 8000f68:	605a      	str	r2, [r3, #4]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	4a0a      	ldr	r2, [pc, #40]	@ (8000fac <LL_DMA_EnableIT_TC+0x38>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	3a01      	subs	r2, #1
 8000f92:	4906      	ldr	r1, [pc, #24]	@ (8000fac <LL_DMA_EnableIT_TC+0x38>)
 8000f94:	5c8a      	ldrb	r2, [r1, r2]
 8000f96:	4611      	mov	r1, r2
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	440a      	add	r2, r1
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	08006184 	.word	0x08006184

08000fb0 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <LL_DMA_EnableIT_HT+0x38>)
 8000fc0:	5cd3      	ldrb	r3, [r2, r3]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	683a      	ldr	r2, [r7, #0]
 8000fcc:	3a01      	subs	r2, #1
 8000fce:	4906      	ldr	r1, [pc, #24]	@ (8000fe8 <LL_DMA_EnableIT_HT+0x38>)
 8000fd0:	5c8a      	ldrb	r2, [r1, r2]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	440a      	add	r2, r1
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6013      	str	r3, [r2, #0]
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	08006184 	.word	0x08006184

08000fec <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <LL_DMA_EnableIT_TE+0x38>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	461a      	mov	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4413      	add	r3, r2
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	3a01      	subs	r2, #1
 800100a:	4906      	ldr	r1, [pc, #24]	@ (8001024 <LL_DMA_EnableIT_TE+0x38>)
 800100c:	5c8a      	ldrb	r2, [r1, r2]
 800100e:	4611      	mov	r1, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	440a      	add	r2, r1
 8001014:	f043 0308 	orr.w	r3, r3, #8
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	08006184 	.word	0x08006184

08001028 <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3b01      	subs	r3, #1
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LL_DMA_DisableIT_TC+0x38>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4413      	add	r3, r2
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	3a01      	subs	r2, #1
 8001046:	4906      	ldr	r1, [pc, #24]	@ (8001060 <LL_DMA_DisableIT_TC+0x38>)
 8001048:	5c8a      	ldrb	r2, [r1, r2]
 800104a:	4611      	mov	r1, r2
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	440a      	add	r2, r1
 8001050:	f023 0302 	bic.w	r3, r3, #2
 8001054:	6013      	str	r3, [r2, #0]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	bc80      	pop	{r7}
 800105e:	4770      	bx	lr
 8001060:	08006184 	.word	0x08006184

08001064 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3b01      	subs	r3, #1
 8001072:	4a0a      	ldr	r2, [pc, #40]	@ (800109c <LL_DMA_DisableIT_HT+0x38>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	3a01      	subs	r2, #1
 8001082:	4906      	ldr	r1, [pc, #24]	@ (800109c <LL_DMA_DisableIT_HT+0x38>)
 8001084:	5c8a      	ldrb	r2, [r1, r2]
 8001086:	4611      	mov	r1, r2
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	440a      	add	r2, r1
 800108c:	f023 0304 	bic.w	r3, r3, #4
 8001090:	6013      	str	r3, [r2, #0]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	08006184 	.word	0x08006184

080010a0 <LL_DMA_DisableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <LL_DMA_DisableIT_TE+0x38>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	461a      	mov	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4413      	add	r3, r2
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	3a01      	subs	r2, #1
 80010be:	4906      	ldr	r1, [pc, #24]	@ (80010d8 <LL_DMA_DisableIT_TE+0x38>)
 80010c0:	5c8a      	ldrb	r2, [r1, r2]
 80010c2:	4611      	mov	r1, r2
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	440a      	add	r2, r1
 80010c8:	f023 0308 	bic.w	r3, r3, #8
 80010cc:	6013      	str	r3, [r2, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	08006184 	.word	0x08006184

080010dc <BSP_DMA_Start_IT>:
BSP_DMA_Start_IT (DMA_TypeDef *p_DMA,
                  uint32_t     Channel,
                  uint32_t     SrcAddress,
                  uint32_t     DstAddress,
                  uint32_t     DataLength)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
  LL_DMA_DisableChannel(p_DMA, Channel);
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff fe57 	bl	8000da0 <LL_DMA_DisableChannel>

  LL_DMA_ConfigAddresses(p_DMA,
 80010f2:	2300      	movs	r3, #0
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	68f8      	ldr	r0, [r7, #12]
 80010fe:	f7ff fea5 	bl	8000e4c <LL_DMA_ConfigAddresses>
                         Channel,
                         SrcAddress,
                         (uint32_t)DstAddress,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  LL_DMA_SetDataLength(p_DMA, Channel, DataLength);
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff fe7e 	bl	8000e08 <LL_DMA_SetDataLength>

  LL_DMA_EnableIT_HT(p_DMA, Channel);
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	68f8      	ldr	r0, [r7, #12]
 8001110:	f7ff ff4e 	bl	8000fb0 <LL_DMA_EnableIT_HT>
  LL_DMA_EnableIT_TC(p_DMA, Channel);
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff ff2c 	bl	8000f74 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(p_DMA, Channel);
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f7ff ff64 	bl	8000fec <LL_DMA_EnableIT_TE>

  LL_DMA_EnableChannel(p_DMA, Channel);
 8001124:	68b9      	ldr	r1, [r7, #8]
 8001126:	68f8      	ldr	r0, [r7, #12]
 8001128:	f7ff fe1c 	bl	8000d64 <LL_DMA_EnableChannel>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <BSP_DMA_IRQ_Channel1_Handler>:
 * `DMA_TypeDef`, which is likely a data structure representing a Direct Memory
 * Access (DMA) controller in a microcontroller or embedded system.
 */
void
BSP_DMA_IRQ_Channel1_Handler (DMA_TypeDef *p_DMA)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* Half Transfer Complete Interrupt management ******************************/
  if (LL_DMA_IsActiveFlag_HT1(p_DMA))
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fed1 	bl	8000ee4 <LL_DMA_IsActiveFlag_HT1>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00e      	beq.n	8001166 <BSP_DMA_IRQ_Channel1_Handler+0x32>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8001148:	2101      	movs	r1, #1
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fe46 	bl	8000ddc <LL_DMA_GetMode>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d103      	bne.n	800115e <BSP_DMA_IRQ_Channel1_Handler+0x2a>
    {
      LL_DMA_DisableIT_HT(p_DMA, LL_DMA_CHANNEL_1);
 8001156:	2101      	movs	r1, #1
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f7ff ff83 	bl	8001064 <LL_DMA_DisableIT_HT>
    }
    LL_DMA_ClearFlag_HT1(p_DMA);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fef0 	bl	8000f44 <LL_DMA_ClearFlag_HT1>
    {
      LL_DMA_DisableIT_TE(p_DMA, LL_DMA_CHANNEL_1);
    }
    LL_DMA_ClearFlag_TE1(p_DMA);
  }
}
 8001164:	e028      	b.n	80011b8 <BSP_DMA_IRQ_Channel1_Handler+0x84>
  else if (LL_DMA_IsActiveFlag_TC1(p_DMA))
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff feaa 	bl	8000ec0 <LL_DMA_IsActiveFlag_TC1>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00e      	beq.n	8001190 <BSP_DMA_IRQ_Channel1_Handler+0x5c>
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8001172:	2101      	movs	r1, #1
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fe31 	bl	8000ddc <LL_DMA_GetMode>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <BSP_DMA_IRQ_Channel1_Handler+0x54>
      LL_DMA_DisableIT_TC(p_DMA, LL_DMA_CHANNEL_1);
 8001180:	2101      	movs	r1, #1
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff50 	bl	8001028 <LL_DMA_DisableIT_TC>
    LL_DMA_ClearFlag_TC1(p_DMA);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fecf 	bl	8000f2c <LL_DMA_ClearFlag_TC1>
}
 800118e:	e013      	b.n	80011b8 <BSP_DMA_IRQ_Channel1_Handler+0x84>
  else if (LL_DMA_IsActiveFlag_TE1(p_DMA))
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff feb9 	bl	8000f08 <LL_DMA_IsActiveFlag_TE1>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00d      	beq.n	80011b8 <BSP_DMA_IRQ_Channel1_Handler+0x84>
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 800119c:	2101      	movs	r1, #1
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe1c 	bl	8000ddc <LL_DMA_GetMode>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <BSP_DMA_IRQ_Channel1_Handler+0x7e>
      LL_DMA_DisableIT_TE(p_DMA, LL_DMA_CHANNEL_1);
 80011aa:	2101      	movs	r1, #1
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ff77 	bl	80010a0 <LL_DMA_DisableIT_TE>
    LL_DMA_ClearFlag_TE1(p_DMA);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fed2 	bl	8000f5c <LL_DMA_ClearFlag_TE1>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	bf0c      	ite	eq
 80011f8:	2301      	moveq	r3, #1
 80011fa:	2300      	movne	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
}
 80011fe:	4618      	mov	r0, r3
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr

08001208 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b08      	cmp	r3, #8
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0320 	and.w	r3, r3, #32
 800123c:	2b20      	cmp	r3, #32
 800123e:	bf0c      	ite	eq
 8001240:	2301      	moveq	r3, #1
 8001242:	2300      	movne	r3, #0
 8001244:	b2db      	uxtb	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001260:	2b80      	cmp	r3, #128	@ 0x80
 8001262:	bf0c      	ite	eq
 8001264:	2301      	moveq	r3, #1
 8001266:	2300      	movne	r3, #0
 8001268:	b2db      	uxtb	r3, r3
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8001282:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800128a:	68fb      	ldr	r3, [r7, #12]
}
 800128c:	bf00      	nop
 800128e:	3714      	adds	r7, #20
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8001296:	b480      	push	{r7}
 8001298:	b085      	sub	sp, #20
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012a4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012ac:	68fb      	ldr	r3, [r7, #12]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012c6:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b089      	sub	sp, #36	@ 0x24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	330c      	adds	r3, #12
 80012e6:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	e853 3f00 	ldrex	r3, [r3]
 80012ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f043 0320 	orr.w	r3, r3, #32
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	330c      	adds	r3, #12
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	61ba      	str	r2, [r7, #24]
 8001300:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001302:	6979      	ldr	r1, [r7, #20]
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	e841 2300 	strex	r3, r2, [r1]
 800130a:	613b      	str	r3, [r7, #16]
   return(result);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1e7      	bne.n	80012e2 <LL_USART_EnableIT_RXNE+0x8>
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	3724      	adds	r7, #36	@ 0x24
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800131e:	b480      	push	{r7}
 8001320:	b089      	sub	sp, #36	@ 0x24
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	330c      	adds	r3, #12
 800132a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	e853 3f00 	ldrex	r3, [r3]
 8001332:	60bb      	str	r3, [r7, #8]
   return(result);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800133a:	61fb      	str	r3, [r7, #28]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	330c      	adds	r3, #12
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	61ba      	str	r2, [r7, #24]
 8001344:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001346:	6979      	ldr	r1, [r7, #20]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	e841 2300 	strex	r3, r2, [r1]
 800134e:	613b      	str	r3, [r7, #16]
   return(result);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1e7      	bne.n	8001326 <LL_USART_EnableIT_TXE+0x8>
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3724      	adds	r7, #36	@ 0x24
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8001362:	b480      	push	{r7}
 8001364:	b089      	sub	sp, #36	@ 0x24
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3314      	adds	r3, #20
 800136e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	e853 3f00 	ldrex	r3, [r3]
 8001376:	60bb      	str	r3, [r7, #8]
   return(result);
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3314      	adds	r3, #20
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	61ba      	str	r2, [r7, #24]
 8001388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800138a:	6979      	ldr	r1, [r7, #20]
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	e841 2300 	strex	r3, r2, [r1]
 8001392:	613b      	str	r3, [r7, #16]
   return(result);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1e7      	bne.n	800136a <LL_USART_EnableIT_ERROR+0x8>
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3724      	adds	r7, #36	@ 0x24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b089      	sub	sp, #36	@ 0x24
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	330c      	adds	r3, #12
 80013b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	e853 3f00 	ldrex	r3, [r3]
 80013ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f023 0320 	bic.w	r3, r3, #32
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	330c      	adds	r3, #12
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	61ba      	str	r2, [r7, #24]
 80013cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013ce:	6979      	ldr	r1, [r7, #20]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	e841 2300 	strex	r3, r2, [r1]
 80013d6:	613b      	str	r3, [r7, #16]
   return(result);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e7      	bne.n	80013ae <LL_USART_DisableIT_RXNE+0x8>
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3724      	adds	r7, #36	@ 0x24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr

080013ea <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b089      	sub	sp, #36	@ 0x24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	330c      	adds	r3, #12
 80013f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	e853 3f00 	ldrex	r3, [r3]
 80013fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	330c      	adds	r3, #12
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	61ba      	str	r2, [r7, #24]
 8001410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001412:	6979      	ldr	r1, [r7, #20]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	e841 2300 	strex	r3, r2, [r1]
 800141a:	613b      	str	r3, [r7, #16]
   return(result);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e7      	bne.n	80013f2 <LL_USART_DisableIT_TXE+0x8>
}
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	3724      	adds	r7, #36	@ 0x24
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b20      	cmp	r3, #32
 8001440:	bf0c      	ite	eq
 8001442:	2301      	moveq	r3, #1
 8001444:	2300      	movne	r3, #0
 8001446:	b2db      	uxtb	r3, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001462:	2b80      	cmp	r3, #128	@ 0x80
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	b2db      	uxtb	r3, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	b2db      	uxtb	r3, r3
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800149a:	78fa      	ldrb	r2, [r7, #3]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	605a      	str	r2, [r3, #4]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b084      	sub	sp, #16
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	4613      	mov	r3, r2
 80014b6:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
  uartstdio_device->e_uart_irqn = uart_irqn;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	f883 221c 	strb.w	r2, [r3, #540]	@ 0x21c

  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 ff54 	bl	800337c <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f001 ff50 	bl	800337c <RING_BUFFER_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f7ff ff40 	bl	8001362 <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 80014e2:	68b8      	ldr	r0, [r7, #8]
 80014e4:	f7ff fef9 	bl	80012da <LL_USART_EnableIT_RXNE>
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 80014fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001500:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8001502:	e005      	b.n	8001510 <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d026      	beq.n	8001558 <BSP_UART_SendChar+0x68>
    {
      return;
    }
    u32_uart_timeout--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b01      	subs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001516:	4618      	mov	r0, r3
 8001518:	f001 ff6b 	bl	80033f2 <RING_BUFFER_Is_Full>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff3c 	bl	80013a6 <LL_USART_DisableIT_RXNE>
  RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001534:	78fa      	ldrb	r2, [r7, #3]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f001 ff6c 	bl	8003416 <RING_BUFFER_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fec8 	bl	80012da <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fee4 	bl	800131e <LL_USART_EnableIT_TXE>
 8001556:	e000      	b.n	800155a <BSP_UART_SendChar+0x6a>
      return;
 8001558:	bf00      	nop
}
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  while (*s)
 800156a:	e007      	b.n	800157c <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	603a      	str	r2, [r7, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffba 	bl	80014f0 <BSP_UART_SendChar>
  while (*s)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1f3      	bne.n	800156c <BSP_UART_SendString+0xc>
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <BSP_UART_TimeOut+0x20>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <BSP_UART_TimeOut+0x20>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	4a03      	ldr	r2, [pc, #12]	@ (80015b0 <BSP_UART_TimeOut+0x20>)
 80015a4:	6013      	str	r3, [r2, #0]
  }
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200001ec 	.word	0x200001ec

080015b4 <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe32 	bl	800122c <LL_USART_IsActiveFlag_RXNE>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d045      	beq.n	800165a <BSP_UART_ISR+0xa6>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff2a 	bl	800142e <LL_USART_IsEnabledIT_RXNE>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d03c      	beq.n	800165a <BSP_UART_ISR+0xa6>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff ff45 	bl	8001476 <LL_USART_ReceiveData8>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe06 	bl	8001208 <LL_USART_IsActiveFlag_ORE>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d111      	bne.n	8001626 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fdd9 	bl	80011c0 <LL_USART_IsActiveFlag_FE>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d108      	bne.n	8001626 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fde2 	bl	80011e4 <LL_USART_IsActiveFlag_NE>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d012      	beq.n	800164c <BSP_UART_ISR+0x98>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fe43 	bl	80012b8 <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fe1b 	bl	8001274 <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fe26 	bl	8001296 <LL_USART_ClearFlag_NE>
    }
    else
    {
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 800164a:	e039      	b.n	80016c0 <BSP_UART_ISR+0x10c>
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7bfa      	ldrb	r2, [r7, #15]
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f001 fedf 	bl	8003416 <RING_BUFFER_Push_Data>
    return;
 8001658:	e032      	b.n	80016c0 <BSP_UART_ISR+0x10c>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fdf5 	bl	8001250 <LL_USART_IsActiveFlag_TXE>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d029      	beq.n	80016c0 <BSP_UART_ISR+0x10c>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff feed 	bl	8001452 <LL_USART_IsEnabledIT_TXE>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d020      	beq.n	80016c0 <BSP_UART_ISR+0x10c>
  {
    if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fea3 	bl	80033d0 <RING_BUFFER_Is_Empty>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <BSP_UART_ISR+0xea>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fea7 	bl	80013ea <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 800169c:	e00f      	b.n	80016be <BSP_UART_ISR+0x10a>
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80016a4:	4618      	mov	r0, r3
 80016a6:	f001 fedf 	bl	8003468 <RING_BUFFER_Pull_Data>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80016b4:	7bba      	ldrb	r2, [r7, #14]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fee8 	bl	800148e <LL_USART_TransmitData8>
    return;
 80016be:	bf00      	nop
  }
}
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	@ (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4906      	ldr	r1, [pc, #24]	@ (8001760 <__NVIC_EnableIRQ+0x34>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	e000e100 	.word	0xe000e100

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	@ (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	@ (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	@ 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <LL_ADC_REG_SetSequencerRanks>:
{
 800181c:	b480      	push	{r7}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	332c      	adds	r3, #44	@ 0x2c
 800182c:	4619      	mov	r1, r3
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001834:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001838:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	fa92 f2a2 	rbit	r2, r2
 8001840:	617a      	str	r2, [r7, #20]
  return result;
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	fab2 f282 	clz	r2, r2
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	40d3      	lsrs	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f003 031f 	and.w	r3, r3, #31
 800185c:	211f      	movs	r1, #31
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f003 011f 	and.w	r1, r3, #31
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 031f 	and.w	r3, r3, #31
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	431a      	orrs	r2, r3
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	601a      	str	r2, [r3, #0]
}
 800187c:	bf00      	nop
 800187e:	3724      	adds	r7, #36	@ 0x24
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <LL_ADC_SetChannelSamplingTime>:
{
 8001886:	b480      	push	{r7}
 8001888:	b08d      	sub	sp, #52	@ 0x34
 800188a:	af00      	add	r7, sp, #0
 800188c:	60f8      	str	r0, [r7, #12]
 800188e:	60b9      	str	r1, [r7, #8]
 8001890:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	330c      	adds	r3, #12
 8001896:	4619      	mov	r1, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	fa92 f2a2 	rbit	r2, r2
 80018aa:	617a      	str	r2, [r7, #20]
  return result;
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	40d3      	lsrs	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(*preg,
 80018bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80018c6:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80018ca:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	fa91 f1a1 	rbit	r1, r1
 80018d2:	61f9      	str	r1, [r7, #28]
  return result;
 80018d4:	69f9      	ldr	r1, [r7, #28]
 80018d6:	fab1 f181 	clz	r1, r1
 80018da:	b2c9      	uxtb	r1, r1
 80018dc:	40cb      	lsrs	r3, r1
 80018de:	2107      	movs	r1, #7
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 80018ee:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 80018f2:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018f6:	fa91 f1a1 	rbit	r1, r1
 80018fa:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 80018fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018fe:	fab1 f181 	clz	r1, r1
 8001902:	b2c9      	uxtb	r1, r1
 8001904:	40cb      	lsrs	r3, r1
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	431a      	orrs	r2, r3
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	3734      	adds	r7, #52	@ 0x34
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr

0800191c <LL_DMA_SetDataTransferDirection>:
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	3b01      	subs	r3, #1
 800192c:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <LL_DMA_SetDataTransferDirection+0x44>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	461a      	mov	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4413      	add	r3, r2
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800193c:	f023 0310 	bic.w	r3, r3, #16
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	3a01      	subs	r2, #1
 8001944:	4906      	ldr	r1, [pc, #24]	@ (8001960 <LL_DMA_SetDataTransferDirection+0x44>)
 8001946:	5c8a      	ldrb	r2, [r1, r2]
 8001948:	4611      	mov	r1, r2
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	440a      	add	r2, r1
 800194e:	4611      	mov	r1, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	0800618c 	.word	0x0800618c

08001964 <LL_DMA_SetMode>:
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a0b      	ldr	r2, [pc, #44]	@ (80019a4 <LL_DMA_SetMode+0x40>)
 8001976:	5cd3      	ldrb	r3, [r2, r3]
 8001978:	461a      	mov	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4413      	add	r3, r2
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0220 	bic.w	r2, r3, #32
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	3b01      	subs	r3, #1
 8001988:	4906      	ldr	r1, [pc, #24]	@ (80019a4 <LL_DMA_SetMode+0x40>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	4619      	mov	r1, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	440b      	add	r3, r1
 8001992:	4619      	mov	r1, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
}
 800199a:	bf00      	nop
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr
 80019a4:	0800618c 	.word	0x0800618c

080019a8 <LL_DMA_SetPeriphIncMode>:
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	4a0b      	ldr	r2, [pc, #44]	@ (80019e8 <LL_DMA_SetPeriphIncMode+0x40>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	4906      	ldr	r1, [pc, #24]	@ (80019e8 <LL_DMA_SetPeriphIncMode+0x40>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	4619      	mov	r1, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	440b      	add	r3, r1
 80019d6:	4619      	mov	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	0800618c 	.word	0x0800618c

080019ec <LL_DMA_SetMemoryIncMode>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <LL_DMA_SetMemoryIncMode+0x40>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	461a      	mov	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	4906      	ldr	r1, [pc, #24]	@ (8001a2c <LL_DMA_SetMemoryIncMode+0x40>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	4619      	mov	r1, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	440b      	add	r3, r1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	0800618c 	.word	0x0800618c

08001a30 <LL_DMA_SetPeriphSize>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <LL_DMA_SetPeriphSize+0x40>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	461a      	mov	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	3b01      	subs	r3, #1
 8001a54:	4906      	ldr	r1, [pc, #24]	@ (8001a70 <LL_DMA_SetPeriphSize+0x40>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	4619      	mov	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	0800618c 	.word	0x0800618c

08001a74 <LL_DMA_SetMemorySize>:
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab4 <LL_DMA_SetMemorySize+0x40>)
 8001a86:	5cd3      	ldrb	r3, [r2, r3]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	4906      	ldr	r1, [pc, #24]	@ (8001ab4 <LL_DMA_SetMemorySize+0x40>)
 8001a9a:	5ccb      	ldrb	r3, [r1, r3]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	440b      	add	r3, r1
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	0800618c 	.word	0x0800618c

08001ab8 <LL_DMA_SetChannelPriorityLevel>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8001af8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	461a      	mov	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	4906      	ldr	r1, [pc, #24]	@ (8001af8 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001ade:	5ccb      	ldrb	r3, [r1, r3]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	440b      	add	r3, r1
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
}
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	0800618c 	.word	0x0800618c

08001afc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b00:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <LL_RCC_HSE_Enable+0x18>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a03      	ldr	r2, [pc, #12]	@ (8001b14 <LL_RCC_HSE_Enable+0x18>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	40021000 	.word	0x40021000

08001b18 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <LL_RCC_HSE_IsReady+0x20>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	40021000 	.word	0x40021000

08001b3c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <LL_RCC_SetSysClkSource+0x24>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f023 0203 	bic.w	r2, r3, #3
 8001b4c:	4904      	ldr	r1, [pc, #16]	@ (8001b60 <LL_RCC_SetSysClkSource+0x24>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b68:	4b03      	ldr	r3, [pc, #12]	@ (8001b78 <LL_RCC_GetSysClkSource+0x14>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000

08001b7c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b84:	4b06      	ldr	r3, [pc, #24]	@ (8001ba0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b8c:	4904      	ldr	r1, [pc, #16]	@ (8001ba0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bb4:	4904      	ldr	r1, [pc, #16]	@ (8001bc8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	604b      	str	r3, [r1, #4]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000

08001bcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bdc:	4904      	ldr	r1, [pc, #16]	@ (8001bf0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <LL_RCC_SetADCClockSource+0x24>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001c04:	4904      	ldr	r1, [pc, #16]	@ (8001c18 <LL_RCC_SetADCClockSource+0x24>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c20:	4b04      	ldr	r3, [pc, #16]	@ (8001c34 <LL_RCC_PLL_Enable+0x18>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a03      	ldr	r2, [pc, #12]	@ (8001c34 <LL_RCC_PLL_Enable+0x18>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2a:	6013      	str	r3, [r2, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	40021000 	.word	0x40021000

08001c38 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <LL_RCC_PLL_IsReady+0x20>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	b2db      	uxtb	r3, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000

08001c5c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 8001c66:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	430b      	orrs	r3, r1
 8001c78:	4903      	ldr	r1, [pc, #12]	@ (8001c88 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000

08001c8c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001c94:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	4907      	ldr	r1, [pc, #28]	@ (8001cb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001ca2:	695a      	ldr	r2, [r3, #20]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	4907      	ldr	r1, [pc, #28]	@ (8001ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cda:	68fb      	ldr	r3, [r7, #12]
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cf4:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	4907      	ldr	r1, [pc, #28]	@ (8001d18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4013      	ands	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	bf00      	nop
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <LL_FLASH_SetLatency+0x24>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 0207 	bic.w	r2, r3, #7
 8001d2c:	4904      	ldr	r1, [pc, #16]	@ (8001d40 <LL_FLASH_SetLatency+0x24>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40022000 	.word	0x40022000

08001d44 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001d48:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <LL_FLASH_GetLatency+0x14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr
 8001d58:	40022000 	.word	0x40022000

08001d5c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001d8c:	f023 0307 	bic.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr

08001da2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <LL_USART_Enable>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	60da      	str	r2, [r3, #12]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <LL_USART_ConfigAsyncMode>:
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	615a      	str	r2, [r3, #20]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001e2c:	b490      	push	{r4, r7}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	0e1b      	lsrs	r3, r3, #24
 8001e40:	4413      	add	r3, r2
 8001e42:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8001e44:	6822      	ldr	r2, [r4, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	613b      	str	r3, [r7, #16]
  return result;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	210f      	movs	r1, #15
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	401a      	ands	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	61bb      	str	r3, [r7, #24]
  return result;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	4313      	orrs	r3, r2
 8001e84:	6023      	str	r3, [r4, #0]
}
 8001e86:	bf00      	nop
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc90      	pop	{r4, r7}
 8001e8e:	4770      	bx	lr

08001e90 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0a1b      	lsrs	r3, r3, #8
 8001eac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	613b      	str	r3, [r7, #16]
  return result;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	408b      	lsls	r3, r1
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	60da      	str	r2, [r3, #12]
}
 8001eca:	bf00      	nop
 8001ecc:	371c      	adds	r7, #28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	0a1b      	lsrs	r3, r3, #8
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	615a      	str	r2, [r3, #20]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bc80      	pop	{r7}
 8001ef0:	4770      	bx	lr
	...

08001ef4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f00:	4a03      	ldr	r2, [pc, #12]	@ (8001f10 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8001f02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f06:	6053      	str	r3, [r2, #4]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	40010000 	.word	0x40010000

08001f14 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001f1e:	4a13      	ldr	r2, [pc, #76]	@ (8001f6c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	0c1b      	lsrs	r3, r3, #16
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	ea02 0103 	and.w	r1, r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	0c1b      	lsrs	r3, r3, #16
 8001f38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	60bb      	str	r3, [r7, #8]
  return result;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	fa03 f202 	lsl.w	r2, r3, r2
 8001f52:	4806      	ldr	r0, [pc, #24]	@ (8001f6c <LL_GPIO_AF_SetEXTISource+0x58>)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40010000 	.word	0x40010000

08001f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7ff feb9 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001f7a:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001f7e:	f7ff fe9d 	bl	8001cbc <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f82:	2003      	movs	r0, #3
 8001f84:	f7ff fba0 	bl	80016c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001f88:	f7ff fbc2 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	210f      	movs	r1, #15
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fc10 	bl	80017b8 <NVIC_EncodePriority>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa0:	f7ff fbe0 	bl	8001764 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8001fa4:	f7ff ffa6 	bl	8001ef4 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fa8:	f000 f846 	bl	8002038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fac:	f000 fa5a 	bl	8002464 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fb0:	f000 fa40 	bl	8002434 <MX_DMA_Init>
  MX_ADC1_Init();
 8001fb4:	f000 f882 	bl	80020bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001fb8:	f000 f97c 	bl	80022b4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001fbc:	f000 f9e2 	bl	8002384 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001fc0:	f000 f916 	bl	80021f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fc4:	f000 f946 	bl	8002254 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  memset(msg, 0, sizeof(msg));
 8001fc8:	220f      	movs	r2, #15
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4813      	ldr	r0, [pc, #76]	@ (800201c <main+0xac>)
 8001fce:	f001 fff4 	bl	8003fba <memset>
  BSP_ADC_Start_Calibration(ADC1);
 8001fd2:	4813      	ldr	r0, [pc, #76]	@ (8002020 <main+0xb0>)
 8001fd4:	f7fe fe42 	bl	8000c5c <BSP_ADC_Start_Calibration>
  BSP_ADC_Start_DMA(ADC1, adc_value, 2);
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4912      	ldr	r1, [pc, #72]	@ (8002024 <main+0xb4>)
 8001fdc:	4810      	ldr	r0, [pc, #64]	@ (8002020 <main+0xb0>)
 8001fde:	f7fe fe7b 	bl	8000cd8 <BSP_ADC_Start_DMA>

  BSP_UART_Config(&uart_cfg, USART1, USART1_IRQn);
 8001fe2:	2225      	movs	r2, #37	@ 0x25
 8001fe4:	4910      	ldr	r1, [pc, #64]	@ (8002028 <main+0xb8>)
 8001fe6:	4811      	ldr	r0, [pc, #68]	@ (800202c <main+0xbc>)
 8001fe8:	f7ff fa5f 	bl	80014aa <BSP_UART_Config>
  TIM3->CR1 |= TIM_CR1_CEN;
 8001fec:	4b10      	ldr	r3, [pc, #64]	@ (8002030 <main+0xc0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8002030 <main+0xc0>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(msg, "%ld, %ld\r\n", adc_value[0], adc_value[1]);
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <main+0xb4>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <main+0xb4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	490c      	ldr	r1, [pc, #48]	@ (8002034 <main+0xc4>)
 8002002:	4806      	ldr	r0, [pc, #24]	@ (800201c <main+0xac>)
 8002004:	f001 ff76 	bl	8003ef4 <siprintf>
	  BSP_UART_SendString(&uart_cfg, msg);
 8002008:	4904      	ldr	r1, [pc, #16]	@ (800201c <main+0xac>)
 800200a:	4808      	ldr	r0, [pc, #32]	@ (800202c <main+0xbc>)
 800200c:	f7ff faa8 	bl	8001560 <BSP_UART_SendString>
	  LL_mDelay(1000);
 8002010:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002014:	f001 f980 	bl	8003318 <LL_mDelay>
	  sprintf(msg, "%ld, %ld\r\n", adc_value[0], adc_value[1]);
 8002018:	bf00      	nop
 800201a:	e7ed      	b.n	8001ff8 <main+0x88>
 800201c:	20000418 	.word	0x20000418
 8002020:	40012400 	.word	0x40012400
 8002024:	200001f0 	.word	0x200001f0
 8002028:	40013800 	.word	0x40013800
 800202c:	200001f8 	.word	0x200001f8
 8002030:	40000400 	.word	0x40000400
 8002034:	08006178 	.word	0x08006178

08002038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800203c:	2002      	movs	r0, #2
 800203e:	f7ff fe6d 	bl	8001d1c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8002042:	bf00      	nop
 8002044:	f7ff fe7e 	bl	8001d44 <LL_FLASH_GetLatency>
 8002048:	4603      	mov	r3, r0
 800204a:	2b02      	cmp	r3, #2
 800204c:	d1fa      	bne.n	8002044 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800204e:	f7ff fd55 	bl	8001afc <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002052:	bf00      	nop
 8002054:	f7ff fd60 	bl	8001b18 <LL_RCC_HSE_IsReady>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d1fa      	bne.n	8002054 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_7);
 800205e:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
 8002062:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002066:	f7ff fdf9 	bl	8001c5c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800206a:	f7ff fdd7 	bl	8001c1c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800206e:	bf00      	nop
 8002070:	f7ff fde2 	bl	8001c38 <LL_RCC_PLL_IsReady>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d1fa      	bne.n	8002070 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800207a:	2000      	movs	r0, #0
 800207c:	f7ff fd7e 	bl	8001b7c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8002080:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002084:	f7ff fd8e 	bl	8001ba4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff fd9f 	bl	8001bcc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800208e:	2002      	movs	r0, #2
 8002090:	f7ff fd54 	bl	8001b3c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002094:	bf00      	nop
 8002096:	f7ff fd65 	bl	8001b64 <LL_RCC_GetSysClkSource>
 800209a:	4603      	mov	r3, r0
 800209c:	2b08      	cmp	r3, #8
 800209e:	d1fa      	bne.n	8002096 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(56000000);
 80020a0:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <SystemClock_Config+0x80>)
 80020a2:	f001 f92b 	bl	80032fc <LL_Init1msTick>
  LL_SetSystemCoreClock(56000000);
 80020a6:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <SystemClock_Config+0x80>)
 80020a8:	f001 f95a 	bl	8003360 <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_4);
 80020ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020b0:	f7ff fda0 	bl	8001bf4 <LL_RCC_SetADCClockSource>
}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	03567e00 	.word	0x03567e00

080020bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	@ 0x38
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80020c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80020d0:	f107 0318 	add.w	r3, r7, #24
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	1d3b      	adds	r3, r7, #4
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 80020ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020f2:	f7ff fdfb 	bl	8001cec <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80020f6:	2004      	movs	r0, #4
 80020f8:	f7ff fdf8 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 80020fc:	f240 6306 	movw	r3, #1542	@ 0x606
 8002100:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	4619      	mov	r1, r3
 800210a:	4834      	ldr	r0, [pc, #208]	@ (80021dc <MX_ADC1_Init+0x120>)
 800210c:	f000 fdd9 	bl	8002cc2 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002110:	2200      	movs	r2, #0
 8002112:	2101      	movs	r1, #1
 8002114:	4832      	ldr	r0, [pc, #200]	@ (80021e0 <MX_ADC1_Init+0x124>)
 8002116:	f7ff fc01 	bl	800191c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 800211a:	2200      	movs	r2, #0
 800211c:	2101      	movs	r1, #1
 800211e:	4830      	ldr	r0, [pc, #192]	@ (80021e0 <MX_ADC1_Init+0x124>)
 8002120:	f7ff fcca 	bl	8001ab8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8002124:	2220      	movs	r2, #32
 8002126:	2101      	movs	r1, #1
 8002128:	482d      	ldr	r0, [pc, #180]	@ (80021e0 <MX_ADC1_Init+0x124>)
 800212a:	f7ff fc1b 	bl	8001964 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 800212e:	2200      	movs	r2, #0
 8002130:	2101      	movs	r1, #1
 8002132:	482b      	ldr	r0, [pc, #172]	@ (80021e0 <MX_ADC1_Init+0x124>)
 8002134:	f7ff fc38 	bl	80019a8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8002138:	2280      	movs	r2, #128	@ 0x80
 800213a:	2101      	movs	r1, #1
 800213c:	4828      	ldr	r0, [pc, #160]	@ (80021e0 <MX_ADC1_Init+0x124>)
 800213e:	f7ff fc55 	bl	80019ec <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_WORD);
 8002142:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002146:	2101      	movs	r1, #1
 8002148:	4825      	ldr	r0, [pc, #148]	@ (80021e0 <MX_ADC1_Init+0x124>)
 800214a:	f7ff fc71 	bl	8001a30 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_WORD);
 800214e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002152:	2101      	movs	r1, #1
 8002154:	4822      	ldr	r0, [pc, #136]	@ (80021e0 <MX_ADC1_Init+0x124>)
 8002156:	f7ff fc8d 	bl	8001a74 <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 800215a:	2300      	movs	r3, #0
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 800215e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002162:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8002164:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002168:	4619      	mov	r1, r3
 800216a:	481e      	ldr	r0, [pc, #120]	@ (80021e4 <MX_ADC1_Init+0x128>)
 800216c:	f000 fb74 	bl	8002858 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8002174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002178:	4619      	mov	r1, r3
 800217a:	481a      	ldr	r0, [pc, #104]	@ (80021e4 <MX_ADC1_Init+0x128>)
 800217c:	f000 fb3a 	bl	80027f4 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 8002180:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8002184:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8002186:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800218a:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8002190:	2300      	movs	r3, #0
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8002194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002198:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	4619      	mov	r1, r3
 80021a0:	4810      	ldr	r0, [pc, #64]	@ (80021e4 <MX_ADC1_Init+0x128>)
 80021a2:	f000 fb80 	bl	80028a6 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80021a6:	4a10      	ldr	r2, [pc, #64]	@ (80021e8 <MX_ADC1_Init+0x12c>)
 80021a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ac:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <MX_ADC1_Init+0x128>)
 80021ae:	f7ff fb35 	bl	800181c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80021b2:	2207      	movs	r2, #7
 80021b4:	490c      	ldr	r1, [pc, #48]	@ (80021e8 <MX_ADC1_Init+0x12c>)
 80021b6:	480b      	ldr	r0, [pc, #44]	@ (80021e4 <MX_ADC1_Init+0x128>)
 80021b8:	f7ff fb65 	bl	8001886 <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 80021bc:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <MX_ADC1_Init+0x130>)
 80021be:	f240 2105 	movw	r1, #517	@ 0x205
 80021c2:	4808      	ldr	r0, [pc, #32]	@ (80021e4 <MX_ADC1_Init+0x128>)
 80021c4:	f7ff fb2a 	bl	800181c <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 80021c8:	2207      	movs	r2, #7
 80021ca:	4908      	ldr	r1, [pc, #32]	@ (80021ec <MX_ADC1_Init+0x130>)
 80021cc:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <MX_ADC1_Init+0x128>)
 80021ce:	f7ff fb5a 	bl	8001886 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	3738      	adds	r7, #56	@ 0x38
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40010800 	.word	0x40010800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40012400 	.word	0x40012400
 80021e8:	02300001 	.word	0x02300001
 80021ec:	02600002 	.word	0x02600002

080021f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002204:	2001      	movs	r0, #1
 8002206:	f7ff fd59 	bl	8001cbc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8002212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002216:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4619      	mov	r1, r3
 8002220:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002224:	f000 fefc 	bl	8003020 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002228:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800222c:	f7ff fd96 	bl	8001d5c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002230:	2100      	movs	r1, #0
 8002232:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002236:	f7ff fda0 	bl	8001d7a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800223a:	2100      	movs	r1, #0
 800223c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002240:	f7ff fdaf 	bl	8001da2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002244:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002248:	f7ff fdbd 	bl	8001dc6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002268:	2002      	movs	r0, #2
 800226a:	f7ff fd27 	bl	8001cbc <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 55999;
 800226e:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8002272:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 9;
 8002278:	2309      	movs	r3, #9
 800227a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	4619      	mov	r1, r3
 8002284:	480a      	ldr	r0, [pc, #40]	@ (80022b0 <MX_TIM3_Init+0x5c>)
 8002286:	f000 fecb 	bl	8003020 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800228a:	4809      	ldr	r0, [pc, #36]	@ (80022b0 <MX_TIM3_Init+0x5c>)
 800228c:	f7ff fd66 	bl	8001d5c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002290:	2100      	movs	r1, #0
 8002292:	4807      	ldr	r0, [pc, #28]	@ (80022b0 <MX_TIM3_Init+0x5c>)
 8002294:	f7ff fd71 	bl	8001d7a <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 8002298:	2120      	movs	r1, #32
 800229a:	4805      	ldr	r0, [pc, #20]	@ (80022b0 <MX_TIM3_Init+0x5c>)
 800229c:	f7ff fd81 	bl	8001da2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80022a0:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <MX_TIM3_Init+0x5c>)
 80022a2:	f7ff fd90 	bl	8001dc6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40000400 	.word	0x40000400

080022b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	@ 0x30
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	611a      	str	r2, [r3, #16]
 80022ca:	615a      	str	r2, [r3, #20]
 80022cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ce:	463b      	mov	r3, r7
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80022dc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80022e0:	f7ff fd04 	bl	8001cec <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80022e4:	2004      	movs	r0, #4
 80022e6:	f7ff fd01 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 80022ea:	4b22      	ldr	r3, [pc, #136]	@ (8002374 <MX_USART1_UART_Init+0xc0>)
 80022ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022ee:	2309      	movs	r3, #9
 80022f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80022f2:	2303      	movs	r3, #3
 80022f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fa:	463b      	mov	r3, r7
 80022fc:	4619      	mov	r1, r3
 80022fe:	481e      	ldr	r0, [pc, #120]	@ (8002378 <MX_USART1_UART_Init+0xc4>)
 8002300:	f000 fcdf 	bl	8002cc2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002304:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <MX_USART1_UART_Init+0xc8>)
 8002306:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8002308:	2304      	movs	r3, #4
 800230a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230c:	463b      	mov	r3, r7
 800230e:	4619      	mov	r1, r3
 8002310:	4819      	ldr	r0, [pc, #100]	@ (8002378 <MX_USART1_UART_Init+0xc4>)
 8002312:	f000 fcd6 	bl	8002cc2 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8002316:	f7ff f9fb 	bl	8001710 <__NVIC_GetPriorityGrouping>
 800231a:	4603      	mov	r3, r0
 800231c:	2200      	movs	r2, #0
 800231e:	2103      	movs	r1, #3
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff fa49 	bl	80017b8 <NVIC_EncodePriority>
 8002326:	4603      	mov	r3, r0
 8002328:	4619      	mov	r1, r3
 800232a:	2025      	movs	r0, #37	@ 0x25
 800232c:	f7ff fa1a 	bl	8001764 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002330:	2025      	movs	r0, #37	@ 0x25
 8002332:	f7ff f9fb 	bl	800172c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8002336:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800233a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002340:	2300      	movs	r3, #0
 8002342:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002348:	230c      	movs	r3, #12
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800234c:	2300      	movs	r3, #0
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	4809      	ldr	r0, [pc, #36]	@ (8002380 <MX_USART1_UART_Init+0xcc>)
 800235c:	f000 ff54 	bl	8003208 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002360:	4807      	ldr	r0, [pc, #28]	@ (8002380 <MX_USART1_UART_Init+0xcc>)
 8002362:	f7ff fd4e 	bl	8001e02 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002366:	4806      	ldr	r0, [pc, #24]	@ (8002380 <MX_USART1_UART_Init+0xcc>)
 8002368:	f7ff fd3c 	bl	8001de4 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	3730      	adds	r7, #48	@ 0x30
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	04020002 	.word	0x04020002
 8002378:	40010800 	.word	0x40010800
 800237c:	04040004 	.word	0x04040004
 8002380:	40013800 	.word	0x40013800

08002384 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08c      	sub	sp, #48	@ 0x30
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	615a      	str	r2, [r3, #20]
 800239c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	463b      	mov	r3, r7
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80023ac:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80023b0:	f7ff fc84 	bl	8001cbc <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 80023b4:	2008      	movs	r0, #8
 80023b6:	f7ff fc99 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <MX_USART3_UART_Init+0xa0>)
 80023bc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023be:	2309      	movs	r3, #9
 80023c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ca:	463b      	mov	r3, r7
 80023cc:	4619      	mov	r1, r3
 80023ce:	4816      	ldr	r0, [pc, #88]	@ (8002428 <MX_USART3_UART_Init+0xa4>)
 80023d0:	f000 fc77 	bl	8002cc2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80023d4:	4b15      	ldr	r3, [pc, #84]	@ (800242c <MX_USART3_UART_Init+0xa8>)
 80023d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 80023d8:	2304      	movs	r3, #4
 80023da:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	4811      	ldr	r0, [pc, #68]	@ (8002428 <MX_USART3_UART_Init+0xa4>)
 80023e2:	f000 fc6e 	bl	8002cc2 <LL_GPIO_Init>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80023e6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80023ea:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80023f8:	230c      	movs	r3, #12
 80023fa:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	4809      	ldr	r0, [pc, #36]	@ (8002430 <MX_USART3_UART_Init+0xac>)
 800240c:	f000 fefc 	bl	8003208 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8002410:	4807      	ldr	r0, [pc, #28]	@ (8002430 <MX_USART3_UART_Init+0xac>)
 8002412:	f7ff fcf6 	bl	8001e02 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002416:	4806      	ldr	r0, [pc, #24]	@ (8002430 <MX_USART3_UART_Init+0xac>)
 8002418:	f7ff fce4 	bl	8001de4 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800241c:	bf00      	nop
 800241e:	3730      	adds	r7, #48	@ 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	04040004 	.word	0x04040004
 8002428:	40010c00 	.word	0x40010c00
 800242c:	04080008 	.word	0x04080008
 8002430:	40004800 	.word	0x40004800

08002434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002438:	2001      	movs	r0, #1
 800243a:	f7ff fc27 	bl	8001c8c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 800243e:	f7ff f967 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8002442:	4603      	mov	r3, r0
 8002444:	2200      	movs	r2, #0
 8002446:	2101      	movs	r1, #1
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f9b5 	bl	80017b8 <NVIC_EncodePriority>
 800244e:	4603      	mov	r3, r0
 8002450:	4619      	mov	r1, r3
 8002452:	200b      	movs	r0, #11
 8002454:	f7ff f986 	bl	8001764 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002458:	200b      	movs	r0, #11
 800245a:	f7ff f967 	bl	800172c <__NVIC_EnableIRQ>

}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800246a:	f107 0318 	add.w	r3, r7, #24
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8002482:	2010      	movs	r0, #16
 8002484:	f7ff fc32 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8002488:	2020      	movs	r0, #32
 800248a:	f7ff fc2f 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800248e:	2004      	movs	r0, #4
 8002490:	f7ff fc2c 	bl	8001cec <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8002494:	2008      	movs	r0, #8
 8002496:	f7ff fc29 	bl	8001cec <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15);
 800249a:	4927      	ldr	r1, [pc, #156]	@ (8002538 <MX_GPIO_Init+0xd4>)
 800249c:	4827      	ldr	r0, [pc, #156]	@ (800253c <MX_GPIO_Init+0xd8>)
 800249e:	f7ff fd19 	bl	8001ed4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 80024a2:	4b25      	ldr	r3, [pc, #148]	@ (8002538 <MX_GPIO_Init+0xd4>)
 80024a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024a6:	2301      	movs	r3, #1
 80024a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024aa:	2302      	movs	r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4821      	ldr	r0, [pc, #132]	@ (800253c <MX_GPIO_Init+0xd8>)
 80024b8:	f000 fc03 	bl	8002cc2 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE5);
 80024bc:	4920      	ldr	r1, [pc, #128]	@ (8002540 <MX_GPIO_Init+0xdc>)
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff fd28 	bl	8001f14 <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE6);
 80024c4:	491f      	ldr	r1, [pc, #124]	@ (8002544 <MX_GPIO_Init+0xe0>)
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff fd24 	bl	8001f14 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 80024cc:	2320      	movs	r3, #32
 80024ce:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80024d4:	2300      	movs	r3, #0
 80024d6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80024d8:	2301      	movs	r3, #1
 80024da:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80024dc:	f107 0318 	add.w	r3, r7, #24
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fab7 	bl	8002a54 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80024e6:	2340      	movs	r3, #64	@ 0x40
 80024e8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80024ee:	2300      	movs	r3, #0
 80024f0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80024f2:	2301      	movs	r3, #1
 80024f4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80024f6:	f107 0318 	add.w	r3, r7, #24
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 faaa 	bl	8002a54 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_5, LL_GPIO_PULL_DOWN);
 8002500:	2200      	movs	r2, #0
 8002502:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002506:	4810      	ldr	r0, [pc, #64]	@ (8002548 <MX_GPIO_Init+0xe4>)
 8002508:	f7ff fcc2 	bl	8001e90 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_6, LL_GPIO_PULL_DOWN);
 800250c:	2200      	movs	r2, #0
 800250e:	f244 0140 	movw	r1, #16448	@ 0x4040
 8002512:	480d      	ldr	r0, [pc, #52]	@ (8002548 <MX_GPIO_Init+0xe4>)
 8002514:	f7ff fcbc 	bl	8001e90 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 8002518:	2208      	movs	r2, #8
 800251a:	f242 0120 	movw	r1, #8224	@ 0x2020
 800251e:	480a      	ldr	r0, [pc, #40]	@ (8002548 <MX_GPIO_Init+0xe4>)
 8002520:	f7ff fc84 	bl	8001e2c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 8002524:	2208      	movs	r2, #8
 8002526:	f244 0140 	movw	r1, #16448	@ 0x4040
 800252a:	4807      	ldr	r0, [pc, #28]	@ (8002548 <MX_GPIO_Init+0xe4>)
 800252c:	f7ff fc7e 	bl	8001e2c <LL_GPIO_SetPinMode>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002530:	bf00      	nop
 8002532:	3720      	adds	r7, #32
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	04e000e0 	.word	0x04e000e0
 800253c:	40011000 	.word	0x40011000
 8002540:	00f00001 	.word	0x00f00001
 8002544:	0f000001 	.word	0x0f000001
 8002548:	40010800 	.word	0x40010800

0800254c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <NMI_Handler+0x4>

08002554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <HardFault_Handler+0x4>

0800255c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <MemManage_Handler+0x4>

08002564 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <BusFault_Handler+0x4>

0800256c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <UsageFault_Handler+0x4>

08002574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	BSP_ADC_TimeOut();
 800259c:	f7fe fbd0 	bl	8000d40 <BSP_ADC_TimeOut>
	BSP_UART_TimeOut();
 80025a0:	f7fe fff6 	bl	8001590 <BSP_UART_TimeOut>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	BSP_DMA_IRQ_Channel1_Handler(DMA1);
 80025ac:	4802      	ldr	r0, [pc, #8]	@ (80025b8 <DMA1_Channel1_IRQHandler+0x10>)
 80025ae:	f7fe fdc1 	bl	8001134 <BSP_DMA_IRQ_Channel1_Handler>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40020000 	.word	0x40020000

080025bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	BSP_UART_ISR(&uart_cfg);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <USART1_IRQHandler+0x10>)
 80025c2:	f7fe fff7 	bl	80015b4 <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200001f8 	.word	0x200001f8

080025d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return 1;
 80025d4:	2301      	movs	r3, #1
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr

080025de <_kill>:

int _kill(int pid, int sig)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025e8:	f001 fd3a 	bl	8004060 <__errno>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2216      	movs	r2, #22
 80025f0:	601a      	str	r2, [r3, #0]
  return -1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_exit>:

void _exit (int status)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002606:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff ffe7 	bl	80025de <_kill>
  while (1) {}    /* Make sure we hang here */
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <_exit+0x12>

08002614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	e00a      	b.n	800263c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002626:	f3af 8000 	nop.w
 800262a:	4601      	mov	r1, r0
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	60ba      	str	r2, [r7, #8]
 8002632:	b2ca      	uxtb	r2, r1
 8002634:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	429a      	cmp	r2, r3
 8002642:	dbf0      	blt.n	8002626 <_read+0x12>
  }

  return len;
 8002644:	687b      	ldr	r3, [r7, #4]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e009      	b.n	8002674 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	60ba      	str	r2, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	429a      	cmp	r2, r3
 800267a:	dbf1      	blt.n	8002660 <_write+0x12>
  }
  return len;
 800267c:	687b      	ldr	r3, [r7, #4]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <_close>:

int _close(int file)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026ac:	605a      	str	r2, [r3, #4]
  return 0;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <_isatty>:

int _isatty(int file)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
	...

080026e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f0:	4a14      	ldr	r2, [pc, #80]	@ (8002744 <_sbrk+0x5c>)
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <_sbrk+0x60>)
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <_sbrk+0x64>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <_sbrk+0x64>)
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <_sbrk+0x68>)
 8002708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d207      	bcs.n	8002728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002718:	f001 fca2 	bl	8004060 <__errno>
 800271c:	4603      	mov	r3, r0
 800271e:	220c      	movs	r2, #12
 8002720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002726:	e009      	b.n	800273c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <_sbrk+0x64>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	4a05      	ldr	r2, [pc, #20]	@ (800274c <_sbrk+0x64>)
 8002738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800273a:	68fb      	ldr	r3, [r7, #12]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20005000 	.word	0x20005000
 8002748:	00000400 	.word	0x00000400
 800274c:	20000428 	.word	0x20000428
 8002750:	20000578 	.word	0x20000578

08002754 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr

08002760 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002760:	f7ff fff8 	bl	8002754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480b      	ldr	r0, [pc, #44]	@ (8002794 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002766:	490c      	ldr	r1, [pc, #48]	@ (8002798 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002768:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <LoopFillZerobss+0x16>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a09      	ldr	r2, [pc, #36]	@ (80027a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800277c:	4c09      	ldr	r4, [pc, #36]	@ (80027a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800278a:	f001 fc6f 	bl	800406c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278e:	f7ff fbef 	bl	8001f70 <main>
  bx lr
 8002792:	4770      	bx	lr
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800279c:	08006530 	.word	0x08006530
  ldr r2, =_sbss
 80027a0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80027a4:	20000578 	.word	0x20000578

080027a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC1_2_IRQHandler>

080027aa <LL_ADC_REG_SetSequencerLength>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
 80027b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <LL_ADC_IsEnabled>:
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
	...

080027f4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80027fe:	2300      	movs	r3, #0
 8002800:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 8002802:	4813      	ldr	r0, [pc, #76]	@ (8002850 <LL_ADC_CommonInit+0x5c>)
 8002804:	f7ff ffe3 	bl	80027ce <LL_ADC_IsEnabled>
 8002808:	4604      	mov	r4, r0
 800280a:	4812      	ldr	r0, [pc, #72]	@ (8002854 <LL_ADC_CommonInit+0x60>)
 800280c:	f7ff ffdf 	bl	80027ce <LL_ADC_IsEnabled>
 8002810:	4603      	mov	r3, r0
 8002812:	4323      	orrs	r3, r4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d114      	bne.n	8002842 <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	e008      	b.n	8002846 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	e001      	b.n	8002846 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	40012400 	.word	0x40012400
 8002854:	40012800 	.word	0x40012800

08002858 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff ffb1 	bl	80027ce <LL_ADC_IsEnabled>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d112      	bne.n	8002898 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	e001      	b.n	800289c <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b084      	sub	sp, #16
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff8a 	bl	80027ce <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d131      	bne.n	8002924 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00c      	beq.n	80028e2 <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	430b      	orrs	r3, r1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	e008      	b.n	80028f4 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 80028fc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	6811      	ldr	r1, [r2, #0]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	68d2      	ldr	r2, [r2, #12]
 8002908:	4311      	orrs	r1, r2
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	6912      	ldr	r2, [r2, #16]
 800290e:	430a      	orrs	r2, r1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff44 	bl	80027aa <LL_ADC_REG_SetSequencerLength>
 8002922:	e001      	b.n	8002928 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002928:	7bfb      	ldrb	r3, [r7, #15]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <LL_EXTI_EnableIT_0_31+0x20>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4904      	ldr	r1, [pc, #16]	@ (8002954 <LL_EXTI_EnableIT_0_31+0x20>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40010400 	.word	0x40010400

08002958 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002960:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <LL_EXTI_DisableIT_0_31+0x20>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	43db      	mvns	r3, r3
 8002968:	4903      	ldr	r1, [pc, #12]	@ (8002978 <LL_EXTI_DisableIT_0_31+0x20>)
 800296a:	4013      	ands	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40010400 	.word	0x40010400

0800297c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4904      	ldr	r1, [pc, #16]	@ (800299c <LL_EXTI_EnableEvent_0_31+0x20>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]

}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010400 	.word	0x40010400

080029a0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <LL_EXTI_DisableEvent_0_31+0x20>)
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	4903      	ldr	r1, [pc, #12]	@ (80029c0 <LL_EXTI_DisableEvent_0_31+0x20>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	40010400 	.word	0x40010400

080029c4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4904      	ldr	r1, [pc, #16]	@ (80029e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40010400 	.word	0x40010400

080029e8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	4903      	ldr	r1, [pc, #12]	@ (8002a08 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]

}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr
 8002a08:	40010400 	.word	0x40010400

08002a0c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002a14:	4b05      	ldr	r3, [pc, #20]	@ (8002a2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	4904      	ldr	r1, [pc, #16]	@ (8002a2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60cb      	str	r3, [r1, #12]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40010400 	.word	0x40010400

08002a30 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	4903      	ldr	r1, [pc, #12]	@ (8002a50 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60cb      	str	r3, [r1, #12]
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr
 8002a50:	40010400 	.word	0x40010400

08002a54 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d065      	beq.n	8002b34 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d06b      	beq.n	8002b48 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	795b      	ldrb	r3, [r3, #5]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d01c      	beq.n	8002ab2 <LL_EXTI_Init+0x5e>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	dc25      	bgt.n	8002ac8 <LL_EXTI_Init+0x74>
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <LL_EXTI_Init+0x32>
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d00b      	beq.n	8002a9c <LL_EXTI_Init+0x48>
 8002a84:	e020      	b.n	8002ac8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff88 	bl	80029a0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff4d 	bl	8002934 <LL_EXTI_EnableIT_0_31>
          break;
 8002a9a:	e018      	b.n	8002ace <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff59 	bl	8002958 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff ff66 	bl	800297c <LL_EXTI_EnableEvent_0_31>
          break;
 8002ab0:	e00d      	b.n	8002ace <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff3c 	bl	8002934 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5b 	bl	800297c <LL_EXTI_EnableEvent_0_31>
          break;
 8002ac6:	e002      	b.n	8002ace <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
          break;
 8002acc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	799b      	ldrb	r3, [r3, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d038      	beq.n	8002b48 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d01c      	beq.n	8002b18 <LL_EXTI_Init+0xc4>
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	dc25      	bgt.n	8002b2e <LL_EXTI_Init+0xda>
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d002      	beq.n	8002aec <LL_EXTI_Init+0x98>
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d00b      	beq.n	8002b02 <LL_EXTI_Init+0xae>
 8002aea:	e020      	b.n	8002b2e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff9d 	bl	8002a30 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff62 	bl	80029c4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002b00:	e022      	b.n	8002b48 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff6e 	bl	80029e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff7b 	bl	8002a0c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002b16:	e017      	b.n	8002b48 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff51 	bl	80029c4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff70 	bl	8002a0c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002b2c:	e00c      	b.n	8002b48 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
            break;
 8002b32:	e009      	b.n	8002b48 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff0d 	bl	8002958 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff2c 	bl	80029a0 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <LL_GPIO_SetPinMode>:
{
 8002b52:	b490      	push	{r4, r7}
 8002b54:	b088      	sub	sp, #32
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	461a      	mov	r2, r3
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	0e1b      	lsrs	r3, r3, #24
 8002b66:	4413      	add	r3, r2
 8002b68:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002b6a:	6822      	ldr	r2, [r4, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	fa93 f3a3 	rbit	r3, r3
 8002b76:	613b      	str	r3, [r7, #16]
  return result;
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	fab3 f383 	clz	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	210f      	movs	r1, #15
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	61bb      	str	r3, [r7, #24]
  return result;
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	6023      	str	r3, [r4, #0]
}
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bc90      	pop	{r4, r7}
 8002bb4:	4770      	bx	lr

08002bb6 <LL_GPIO_SetPinSpeed>:
{
 8002bb6:	b490      	push	{r4, r7}
 8002bb8:	b088      	sub	sp, #32
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	60f8      	str	r0, [r7, #12]
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	0e1b      	lsrs	r3, r3, #24
 8002bca:	4413      	add	r3, r2
 8002bcc:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002bce:	6822      	ldr	r2, [r4, #0]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	613b      	str	r3, [r7, #16]
  return result;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	fab3 f383 	clz	r3, r3
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	2103      	movs	r1, #3
 8002be8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	401a      	ands	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	61bb      	str	r3, [r7, #24]
  return result;
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	6023      	str	r3, [r4, #0]
}
 8002c10:	bf00      	nop
 8002c12:	3720      	adds	r7, #32
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc90      	pop	{r4, r7}
 8002c18:	4770      	bx	lr

08002c1a <LL_GPIO_SetPinOutputType>:
{
 8002c1a:	b490      	push	{r4, r7}
 8002c1c:	b088      	sub	sp, #32
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	60f8      	str	r0, [r7, #12]
 8002c22:	60b9      	str	r1, [r7, #8]
 8002c24:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	0e1b      	lsrs	r3, r3, #24
 8002c2e:	4413      	add	r3, r2
 8002c30:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	613b      	str	r3, [r7, #16]
  return result;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	fa93 f3a3 	rbit	r3, r3
 8002c5e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	6023      	str	r3, [r4, #0]
}
 8002c74:	bf00      	nop
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc90      	pop	{r4, r7}
 8002c7c:	4770      	bx	lr

08002c7e <LL_GPIO_SetPinPull>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b087      	sub	sp, #28
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	43db      	mvns	r3, r3
 8002c94:	401a      	ands	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	0a1b      	lsrs	r3, r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa93 f3a3 	rbit	r3, r3
 8002ca2:	613b      	str	r3, [r7, #16]
  return result;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	4619      	mov	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	408b      	lsls	r3, r1
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	60da      	str	r2, [r3, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b088      	sub	sp, #32
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	617b      	str	r3, [r7, #20]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	fa93 f3a3 	rbit	r3, r3
 8002ce0:	60fb      	str	r3, [r7, #12]
  return result;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002cec:	e044      	b.n	8002d78 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d03a      	beq.n	8002d72 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b07      	cmp	r3, #7
 8002d00:	d806      	bhi.n	8002d10 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002d02:	f240 1201 	movw	r2, #257	@ 0x101
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	e008      	b.n	8002d22 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	3b08      	subs	r3, #8
 8002d14:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d20:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d106      	bne.n	8002d38 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	69b9      	ldr	r1, [r7, #24]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ffa3 	bl	8002c7e <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	69b9      	ldr	r1, [r7, #24]
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f7ff ff06 	bl	8002b52 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <LL_GPIO_Init+0x94>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b09      	cmp	r3, #9
 8002d54:	d10d      	bne.n	8002d72 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ff29 	bl	8002bb6 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff ff54 	bl	8002c1a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1b4      	bne.n	8002cee <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3720      	adds	r7, #32
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <LL_RCC_GetSysClkSource>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d94:	4b03      	ldr	r3, [pc, #12]	@ (8002da4 <LL_RCC_GetSysClkSource+0x14>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 030c 	and.w	r3, r3, #12
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr
 8002da4:	40021000 	.word	0x40021000

08002da8 <LL_RCC_GetAHBPrescaler>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002dac:	4b03      	ldr	r3, [pc, #12]	@ (8002dbc <LL_RCC_GetAHBPrescaler+0x14>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <LL_RCC_GetAPB1Prescaler>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002dc4:	4b03      	ldr	r3, [pc, #12]	@ (8002dd4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <LL_RCC_GetAPB2Prescaler>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <LL_RCC_GetAPB2Prescaler+0x14>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40021000 	.word	0x40021000

08002df0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002df4:	4b03      	ldr	r3, [pc, #12]	@ (8002e04 <LL_RCC_PLL_GetMainSource+0x14>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc80      	pop	{r7}
 8002e02:	4770      	bx	lr
 8002e04:	40021000 	.word	0x40021000

08002e08 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002e0c:	4b03      	ldr	r3, [pc, #12]	@ (8002e1c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40021000 	.word	0x40021000

08002e20 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002e24:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <LL_RCC_PLL_GetPrediv+0x18>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c5b      	lsrs	r3, r3, #17
 8002e2a:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000

08002e3c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002e44:	f000 f820 	bl	8002e88 <RCC_GetSystemClockFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f83e 	bl	8002ed4 <RCC_GetHCLKClockFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f84c 	bl	8002f00 <RCC_GetPCLK1ClockFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f858 	bl	8002f28 <RCC_GetPCLK2ClockFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60da      	str	r2, [r3, #12]
}
 8002e7e:	bf00      	nop
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002e92:	f7ff ff7d 	bl	8002d90 <LL_RCC_GetSysClkSource>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	d00c      	beq.n	8002eb6 <RCC_GetSystemClockFreq+0x2e>
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d80e      	bhi.n	8002ebe <RCC_GetSystemClockFreq+0x36>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <RCC_GetSystemClockFreq+0x22>
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d003      	beq.n	8002eb0 <RCC_GetSystemClockFreq+0x28>
 8002ea8:	e009      	b.n	8002ebe <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002eaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ed0 <RCC_GetSystemClockFreq+0x48>)
 8002eac:	607b      	str	r3, [r7, #4]
      break;
 8002eae:	e009      	b.n	8002ec4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002eb0:	4b07      	ldr	r3, [pc, #28]	@ (8002ed0 <RCC_GetSystemClockFreq+0x48>)
 8002eb2:	607b      	str	r3, [r7, #4]
      break;
 8002eb4:	e006      	b.n	8002ec4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002eb6:	f000 f84b 	bl	8002f50 <RCC_PLL_GetFreqDomain_SYS>
 8002eba:	6078      	str	r0, [r7, #4]
      break;
 8002ebc:	e002      	b.n	8002ec4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <RCC_GetSystemClockFreq+0x48>)
 8002ec0:	607b      	str	r3, [r7, #4]
      break;
 8002ec2:	bf00      	nop
  }

  return frequency;
 8002ec4:	687b      	ldr	r3, [r7, #4]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	007a1200 	.word	0x007a1200

08002ed4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002edc:	f7ff ff64 	bl	8002da8 <LL_RCC_GetAHBPrescaler>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <RCC_GetHCLKClockFreq+0x28>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	461a      	mov	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	40d3      	lsrs	r3, r2
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	08006194 	.word	0x08006194

08002f00 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002f08:	f7ff ff5a 	bl	8002dc0 <LL_RCC_GetAPB1Prescaler>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <RCC_GetPCLK1ClockFreq+0x24>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	461a      	mov	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	40d3      	lsrs	r3, r2
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	080061a4 	.word	0x080061a4

08002f28 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002f30:	f7ff ff52 	bl	8002dd8 <LL_RCC_GetAPB2Prescaler>
 8002f34:	4603      	mov	r3, r0
 8002f36:	0adb      	lsrs	r3, r3, #11
 8002f38:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <RCC_GetPCLK2ClockFreq+0x24>)
 8002f3a:	5cd3      	ldrb	r3, [r2, r3]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	40d3      	lsrs	r3, r2
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	080061a4 	.word	0x080061a4

08002f50 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002f5e:	f7ff ff47 	bl	8002df0 <LL_RCC_PLL_GetMainSource>
 8002f62:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d004      	beq.n	8002f74 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f70:	d003      	beq.n	8002f7a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002f72:	e00b      	b.n	8002f8c <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002f74:	4b0d      	ldr	r3, [pc, #52]	@ (8002fac <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002f76:	607b      	str	r3, [r7, #4]
      break;
 8002f78:	e00b      	b.n	8002f92 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002f7a:	f7ff ff51 	bl	8002e20 <LL_RCC_PLL_GetPrediv>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	3301      	adds	r3, #1
 8002f82:	4a0b      	ldr	r2, [pc, #44]	@ (8002fb0 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	607b      	str	r3, [r7, #4]
      break;
 8002f8a:	e002      	b.n	8002f92 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002f8c:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002f8e:	607b      	str	r3, [r7, #4]
      break;
 8002f90:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002f92:	f7ff ff39 	bl	8002e08 <LL_RCC_PLL_GetMultiplicator>
 8002f96:	4603      	mov	r3, r0
 8002f98:	0c9b      	lsrs	r3, r3, #18
 8002f9a:	3302      	adds	r3, #2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	003d0900 	.word	0x003d0900
 8002fb0:	007a1200 	.word	0x007a1200

08002fb4 <LL_TIM_SetPrescaler>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <LL_TIM_SetAutoReload>:
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <LL_TIM_SetRepetitionCounter>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f043 0201 	orr.w	r2, r3, #1
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	615a      	str	r2, [r3, #20]
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <LL_TIM_Init+0xb0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d00b      	beq.n	8003050 <LL_TIM_Init+0x30>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800303e:	d007      	beq.n	8003050 <LL_TIM_Init+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a24      	ldr	r2, [pc, #144]	@ (80030d4 <LL_TIM_Init+0xb4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d003      	beq.n	8003050 <LL_TIM_Init+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a23      	ldr	r2, [pc, #140]	@ (80030d8 <LL_TIM_Init+0xb8>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d106      	bne.n	800305e <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1b      	ldr	r2, [pc, #108]	@ (80030d0 <LL_TIM_Init+0xb0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00b      	beq.n	800307e <LL_TIM_Init+0x5e>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800306c:	d007      	beq.n	800307e <LL_TIM_Init+0x5e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <LL_TIM_Init+0xb4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <LL_TIM_Init+0x5e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <LL_TIM_Init+0xb8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d106      	bne.n	800308c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	4313      	orrs	r3, r2
 800308a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4619      	mov	r1, r3
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff98 	bl	8002fce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	881b      	ldrh	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ff85 	bl	8002fb4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a08      	ldr	r2, [pc, #32]	@ (80030d0 <LL_TIM_Init+0xb0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d105      	bne.n	80030be <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7ff ff95 	bl	8002fe8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff ff9f 	bl	8003002 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40012c00 	.word	0x40012c00
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800

080030dc <LL_USART_IsEnabled>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030f0:	bf0c      	ite	eq
 80030f2:	2301      	moveq	r3, #1
 80030f4:	2300      	movne	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <LL_USART_SetStopBitsLength>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	611a      	str	r2, [r3, #16]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <LL_USART_SetHWFlowCtrl>:
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	615a      	str	r2, [r3, #20]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr
	...

0800314c <LL_USART_SetBaudRate>:
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	441a      	add	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	4a25      	ldr	r2, [pc, #148]	@ (8003204 <LL_USART_SetBaudRate+0xb8>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	b29b      	uxth	r3, r3
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	b299      	uxth	r1, r3
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	009a      	lsls	r2, r3, #2
 8003184:	441a      	add	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	fbb2 f2f3 	udiv	r2, r2, r3
 800318e:	4b1d      	ldr	r3, [pc, #116]	@ (8003204 <LL_USART_SetBaudRate+0xb8>)
 8003190:	fba3 0302 	umull	r0, r3, r3, r2
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	2064      	movs	r0, #100	@ 0x64
 8003198:	fb00 f303 	mul.w	r3, r0, r3
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	3332      	adds	r3, #50	@ 0x32
 80031a2:	4a18      	ldr	r2, [pc, #96]	@ (8003204 <LL_USART_SetBaudRate+0xb8>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	095b      	lsrs	r3, r3, #5
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	440b      	add	r3, r1
 80031b4:	b299      	uxth	r1, r3
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	441a      	add	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003204 <LL_USART_SetBaudRate+0xb8>)
 80031cc:	fba3 0302 	umull	r0, r3, r3, r2
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	2064      	movs	r0, #100	@ 0x64
 80031d4:	fb00 f303 	mul.w	r3, r0, r3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	3332      	adds	r3, #50	@ 0x32
 80031de:	4a09      	ldr	r2, [pc, #36]	@ (8003204 <LL_USART_SetBaudRate+0xb8>)
 80031e0:	fba2 2303 	umull	r2, r3, r2, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	440b      	add	r3, r1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	51eb851f 	.word	0x51eb851f

08003208 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b088      	sub	sp, #32
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff ff5e 	bl	80030dc <LL_USART_IsEnabled>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d145      	bne.n	80032b2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800322e:	f023 030c 	bic.w	r3, r3, #12
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	6851      	ldr	r1, [r2, #4]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	4311      	orrs	r1, r2
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	6912      	ldr	r2, [r2, #16]
 8003240:	430a      	orrs	r2, r1
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4619      	mov	r1, r3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f7ff ff57 	bl	8003102 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ff63 	bl	8003126 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003260:	f107 0308 	add.w	r3, r7, #8
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fde9 	bl	8002e3c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a13      	ldr	r2, [pc, #76]	@ (80032bc <LL_USART_Init+0xb4>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d102      	bne.n	8003278 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	e00c      	b.n	8003292 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a11      	ldr	r2, [pc, #68]	@ (80032c0 <LL_USART_Init+0xb8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d102      	bne.n	8003286 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	e005      	b.n	8003292 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a0e      	ldr	r2, [pc, #56]	@ (80032c4 <LL_USART_Init+0xbc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d101      	bne.n	8003292 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00c      	beq.n	80032b2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80032a0:	2300      	movs	r3, #0
 80032a2:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80032a8:	461a      	mov	r2, r3
 80032aa:	69b9      	ldr	r1, [r7, #24]
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff ff4d 	bl	800314c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80032b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3720      	adds	r7, #32
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40004400 	.word	0x40004400
 80032c4:	40004800 	.word	0x40004800

080032c8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	4a07      	ldr	r2, [pc, #28]	@ (80032f8 <LL_InitTick+0x30>)
 80032dc:	3b01      	subs	r3, #1
 80032de:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <LL_InitTick+0x30>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032e6:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <LL_InitTick+0x30>)
 80032e8:	2205      	movs	r2, #5
 80032ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000e010 	.word	0xe000e010

080032fc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003304:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ffdd 	bl	80032c8 <LL_InitTick>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003320:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <LL_mDelay+0x44>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003326:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800332e:	d00c      	beq.n	800334a <LL_mDelay+0x32>
  {
    Delay++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3301      	adds	r3, #1
 8003334:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003336:	e008      	b.n	800334a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003338:	4b08      	ldr	r3, [pc, #32]	@ (800335c <LL_mDelay+0x44>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <LL_mDelay+0x32>
    {
      Delay--;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	607b      	str	r3, [r7, #4]
  while (Delay)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f3      	bne.n	8003338 <LL_mDelay+0x20>
    }
  }
}
 8003350:	bf00      	nop
 8003352:	bf00      	nop
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	e000e010 	.word	0xe000e010

08003360 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003368:	4a03      	ldr	r2, [pc, #12]	@ (8003378 <LL_SetSystemCoreClock+0x18>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6013      	str	r3, [r2, #0]
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	20000000 	.word	0x20000000

0800337c <RING_BUFFER_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
RING_BUFFER_Init (ring_buffer_t *rb)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  rb->u32_out   = 0;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  rb->u32_count = 0;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  rb->u32_out   = 0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  rb->u32_count = 0;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <RING_BUFFER_Is_Empty>:
 * of elements in the ring buffer is 0, indicating that the buffer is empty, and
 * `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <RING_BUFFER_Is_Full>:
 * `true` or `false`, based on whether the count of elements in the ring buffer
 * `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	bc80      	pop	{r7}
 8003414:	4770      	bx	lr

08003416 <RING_BUFFER_Push_Data>:
 * represents the data element that needs to be added to the ring buffer. It is
 * of type `char`, which means it can store a single character (1 byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ffe5 	bl	80033f2 <RING_BUFFER_Is_Full>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffb9 	bl	80033a6 <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800343c:	4413      	add	r3, r2
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003448:	3301      	adds	r3, #1
 800344a:	b2da      	uxtb	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  rb->u32_count++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
}
 8003460:	bf00      	nop
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data value
 * from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff ffad 	bl	80033d0 <RING_BUFFER_Is_Empty>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 800347c:	23ff      	movs	r3, #255	@ 0xff
 800347e:	e016      	b.n	80034ae <RING_BUFFER_Pull_Data+0x46>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003494:	3301      	adds	r3, #1
 8003496:	b2da      	uxtb	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
  rb->u32_count--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80034a4:	1e5a      	subs	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

  return data;
 80034ac:	4623      	mov	r3, r4
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}

080034b6 <__cvt>:
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034bc:	461d      	mov	r5, r3
 80034be:	bfbb      	ittet	lt
 80034c0:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80034c4:	461d      	movlt	r5, r3
 80034c6:	2300      	movge	r3, #0
 80034c8:	232d      	movlt	r3, #45	@ 0x2d
 80034ca:	b088      	sub	sp, #32
 80034cc:	4614      	mov	r4, r2
 80034ce:	bfb8      	it	lt
 80034d0:	4614      	movlt	r4, r2
 80034d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80034d4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80034d6:	7013      	strb	r3, [r2, #0]
 80034d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80034da:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80034de:	f023 0820 	bic.w	r8, r3, #32
 80034e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80034e6:	d005      	beq.n	80034f4 <__cvt+0x3e>
 80034e8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80034ec:	d100      	bne.n	80034f0 <__cvt+0x3a>
 80034ee:	3601      	adds	r6, #1
 80034f0:	2302      	movs	r3, #2
 80034f2:	e000      	b.n	80034f6 <__cvt+0x40>
 80034f4:	2303      	movs	r3, #3
 80034f6:	aa07      	add	r2, sp, #28
 80034f8:	9204      	str	r2, [sp, #16]
 80034fa:	aa06      	add	r2, sp, #24
 80034fc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003500:	e9cd 3600 	strd	r3, r6, [sp]
 8003504:	4622      	mov	r2, r4
 8003506:	462b      	mov	r3, r5
 8003508:	f000 fe6e 	bl	80041e8 <_dtoa_r>
 800350c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003510:	4607      	mov	r7, r0
 8003512:	d119      	bne.n	8003548 <__cvt+0x92>
 8003514:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003516:	07db      	lsls	r3, r3, #31
 8003518:	d50e      	bpl.n	8003538 <__cvt+0x82>
 800351a:	eb00 0906 	add.w	r9, r0, r6
 800351e:	2200      	movs	r2, #0
 8003520:	2300      	movs	r3, #0
 8003522:	4620      	mov	r0, r4
 8003524:	4629      	mov	r1, r5
 8003526:	f7fd fa3f 	bl	80009a8 <__aeabi_dcmpeq>
 800352a:	b108      	cbz	r0, 8003530 <__cvt+0x7a>
 800352c:	f8cd 901c 	str.w	r9, [sp, #28]
 8003530:	2230      	movs	r2, #48	@ 0x30
 8003532:	9b07      	ldr	r3, [sp, #28]
 8003534:	454b      	cmp	r3, r9
 8003536:	d31e      	bcc.n	8003576 <__cvt+0xc0>
 8003538:	4638      	mov	r0, r7
 800353a:	9b07      	ldr	r3, [sp, #28]
 800353c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800353e:	1bdb      	subs	r3, r3, r7
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	b008      	add	sp, #32
 8003544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003548:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800354c:	eb00 0906 	add.w	r9, r0, r6
 8003550:	d1e5      	bne.n	800351e <__cvt+0x68>
 8003552:	7803      	ldrb	r3, [r0, #0]
 8003554:	2b30      	cmp	r3, #48	@ 0x30
 8003556:	d10a      	bne.n	800356e <__cvt+0xb8>
 8003558:	2200      	movs	r2, #0
 800355a:	2300      	movs	r3, #0
 800355c:	4620      	mov	r0, r4
 800355e:	4629      	mov	r1, r5
 8003560:	f7fd fa22 	bl	80009a8 <__aeabi_dcmpeq>
 8003564:	b918      	cbnz	r0, 800356e <__cvt+0xb8>
 8003566:	f1c6 0601 	rsb	r6, r6, #1
 800356a:	f8ca 6000 	str.w	r6, [sl]
 800356e:	f8da 3000 	ldr.w	r3, [sl]
 8003572:	4499      	add	r9, r3
 8003574:	e7d3      	b.n	800351e <__cvt+0x68>
 8003576:	1c59      	adds	r1, r3, #1
 8003578:	9107      	str	r1, [sp, #28]
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e7d9      	b.n	8003532 <__cvt+0x7c>

0800357e <__exponent>:
 800357e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003580:	2900      	cmp	r1, #0
 8003582:	bfb6      	itet	lt
 8003584:	232d      	movlt	r3, #45	@ 0x2d
 8003586:	232b      	movge	r3, #43	@ 0x2b
 8003588:	4249      	neglt	r1, r1
 800358a:	2909      	cmp	r1, #9
 800358c:	7002      	strb	r2, [r0, #0]
 800358e:	7043      	strb	r3, [r0, #1]
 8003590:	dd29      	ble.n	80035e6 <__exponent+0x68>
 8003592:	f10d 0307 	add.w	r3, sp, #7
 8003596:	461d      	mov	r5, r3
 8003598:	270a      	movs	r7, #10
 800359a:	fbb1 f6f7 	udiv	r6, r1, r7
 800359e:	461a      	mov	r2, r3
 80035a0:	fb07 1416 	mls	r4, r7, r6, r1
 80035a4:	3430      	adds	r4, #48	@ 0x30
 80035a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80035aa:	460c      	mov	r4, r1
 80035ac:	2c63      	cmp	r4, #99	@ 0x63
 80035ae:	4631      	mov	r1, r6
 80035b0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80035b4:	dcf1      	bgt.n	800359a <__exponent+0x1c>
 80035b6:	3130      	adds	r1, #48	@ 0x30
 80035b8:	1e94      	subs	r4, r2, #2
 80035ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80035be:	4623      	mov	r3, r4
 80035c0:	1c41      	adds	r1, r0, #1
 80035c2:	42ab      	cmp	r3, r5
 80035c4:	d30a      	bcc.n	80035dc <__exponent+0x5e>
 80035c6:	f10d 0309 	add.w	r3, sp, #9
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	42ac      	cmp	r4, r5
 80035ce:	bf88      	it	hi
 80035d0:	2300      	movhi	r3, #0
 80035d2:	3302      	adds	r3, #2
 80035d4:	4403      	add	r3, r0
 80035d6:	1a18      	subs	r0, r3, r0
 80035d8:	b003      	add	sp, #12
 80035da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80035e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80035e4:	e7ed      	b.n	80035c2 <__exponent+0x44>
 80035e6:	2330      	movs	r3, #48	@ 0x30
 80035e8:	3130      	adds	r1, #48	@ 0x30
 80035ea:	7083      	strb	r3, [r0, #2]
 80035ec:	70c1      	strb	r1, [r0, #3]
 80035ee:	1d03      	adds	r3, r0, #4
 80035f0:	e7f1      	b.n	80035d6 <__exponent+0x58>
	...

080035f4 <_printf_float>:
 80035f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f8:	b091      	sub	sp, #68	@ 0x44
 80035fa:	460c      	mov	r4, r1
 80035fc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003600:	4616      	mov	r6, r2
 8003602:	461f      	mov	r7, r3
 8003604:	4605      	mov	r5, r0
 8003606:	f000 fce1 	bl	8003fcc <_localeconv_r>
 800360a:	6803      	ldr	r3, [r0, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	9308      	str	r3, [sp, #32]
 8003610:	f7fc fd9e 	bl	8000150 <strlen>
 8003614:	2300      	movs	r3, #0
 8003616:	930e      	str	r3, [sp, #56]	@ 0x38
 8003618:	f8d8 3000 	ldr.w	r3, [r8]
 800361c:	9009      	str	r0, [sp, #36]	@ 0x24
 800361e:	3307      	adds	r3, #7
 8003620:	f023 0307 	bic.w	r3, r3, #7
 8003624:	f103 0208 	add.w	r2, r3, #8
 8003628:	f894 a018 	ldrb.w	sl, [r4, #24]
 800362c:	f8d4 b000 	ldr.w	fp, [r4]
 8003630:	f8c8 2000 	str.w	r2, [r8]
 8003634:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003638:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800363c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800363e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003642:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003646:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800364a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800364e:	4b9c      	ldr	r3, [pc, #624]	@ (80038c0 <_printf_float+0x2cc>)
 8003650:	f7fd f9dc 	bl	8000a0c <__aeabi_dcmpun>
 8003654:	bb70      	cbnz	r0, 80036b4 <_printf_float+0xc0>
 8003656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800365a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800365e:	4b98      	ldr	r3, [pc, #608]	@ (80038c0 <_printf_float+0x2cc>)
 8003660:	f7fd f9b6 	bl	80009d0 <__aeabi_dcmple>
 8003664:	bb30      	cbnz	r0, 80036b4 <_printf_float+0xc0>
 8003666:	2200      	movs	r2, #0
 8003668:	2300      	movs	r3, #0
 800366a:	4640      	mov	r0, r8
 800366c:	4649      	mov	r1, r9
 800366e:	f7fd f9a5 	bl	80009bc <__aeabi_dcmplt>
 8003672:	b110      	cbz	r0, 800367a <_printf_float+0x86>
 8003674:	232d      	movs	r3, #45	@ 0x2d
 8003676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800367a:	4a92      	ldr	r2, [pc, #584]	@ (80038c4 <_printf_float+0x2d0>)
 800367c:	4b92      	ldr	r3, [pc, #584]	@ (80038c8 <_printf_float+0x2d4>)
 800367e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003682:	bf94      	ite	ls
 8003684:	4690      	movls	r8, r2
 8003686:	4698      	movhi	r8, r3
 8003688:	2303      	movs	r3, #3
 800368a:	f04f 0900 	mov.w	r9, #0
 800368e:	6123      	str	r3, [r4, #16]
 8003690:	f02b 0304 	bic.w	r3, fp, #4
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	4633      	mov	r3, r6
 8003698:	4621      	mov	r1, r4
 800369a:	4628      	mov	r0, r5
 800369c:	9700      	str	r7, [sp, #0]
 800369e:	aa0f      	add	r2, sp, #60	@ 0x3c
 80036a0:	f000 f9d4 	bl	8003a4c <_printf_common>
 80036a4:	3001      	adds	r0, #1
 80036a6:	f040 8090 	bne.w	80037ca <_printf_float+0x1d6>
 80036aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036ae:	b011      	add	sp, #68	@ 0x44
 80036b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	4640      	mov	r0, r8
 80036ba:	4649      	mov	r1, r9
 80036bc:	f7fd f9a6 	bl	8000a0c <__aeabi_dcmpun>
 80036c0:	b148      	cbz	r0, 80036d6 <_printf_float+0xe2>
 80036c2:	464b      	mov	r3, r9
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bfb8      	it	lt
 80036c8:	232d      	movlt	r3, #45	@ 0x2d
 80036ca:	4a80      	ldr	r2, [pc, #512]	@ (80038cc <_printf_float+0x2d8>)
 80036cc:	bfb8      	it	lt
 80036ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80036d2:	4b7f      	ldr	r3, [pc, #508]	@ (80038d0 <_printf_float+0x2dc>)
 80036d4:	e7d3      	b.n	800367e <_printf_float+0x8a>
 80036d6:	6863      	ldr	r3, [r4, #4]
 80036d8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	d13f      	bne.n	8003760 <_printf_float+0x16c>
 80036e0:	2306      	movs	r3, #6
 80036e2:	6063      	str	r3, [r4, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80036ea:	6023      	str	r3, [r4, #0]
 80036ec:	9206      	str	r2, [sp, #24]
 80036ee:	aa0e      	add	r2, sp, #56	@ 0x38
 80036f0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80036f4:	aa0d      	add	r2, sp, #52	@ 0x34
 80036f6:	9203      	str	r2, [sp, #12]
 80036f8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80036fc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	4642      	mov	r2, r8
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	4628      	mov	r0, r5
 8003708:	464b      	mov	r3, r9
 800370a:	910a      	str	r1, [sp, #40]	@ 0x28
 800370c:	f7ff fed3 	bl	80034b6 <__cvt>
 8003710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003712:	4680      	mov	r8, r0
 8003714:	2947      	cmp	r1, #71	@ 0x47
 8003716:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003718:	d128      	bne.n	800376c <_printf_float+0x178>
 800371a:	1cc8      	adds	r0, r1, #3
 800371c:	db02      	blt.n	8003724 <_printf_float+0x130>
 800371e:	6863      	ldr	r3, [r4, #4]
 8003720:	4299      	cmp	r1, r3
 8003722:	dd40      	ble.n	80037a6 <_printf_float+0x1b2>
 8003724:	f1aa 0a02 	sub.w	sl, sl, #2
 8003728:	fa5f fa8a 	uxtb.w	sl, sl
 800372c:	4652      	mov	r2, sl
 800372e:	3901      	subs	r1, #1
 8003730:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003734:	910d      	str	r1, [sp, #52]	@ 0x34
 8003736:	f7ff ff22 	bl	800357e <__exponent>
 800373a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800373c:	4681      	mov	r9, r0
 800373e:	1813      	adds	r3, r2, r0
 8003740:	2a01      	cmp	r2, #1
 8003742:	6123      	str	r3, [r4, #16]
 8003744:	dc02      	bgt.n	800374c <_printf_float+0x158>
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	07d2      	lsls	r2, r2, #31
 800374a:	d501      	bpl.n	8003750 <_printf_float+0x15c>
 800374c:	3301      	adds	r3, #1
 800374e:	6123      	str	r3, [r4, #16]
 8003750:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003754:	2b00      	cmp	r3, #0
 8003756:	d09e      	beq.n	8003696 <_printf_float+0xa2>
 8003758:	232d      	movs	r3, #45	@ 0x2d
 800375a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800375e:	e79a      	b.n	8003696 <_printf_float+0xa2>
 8003760:	2947      	cmp	r1, #71	@ 0x47
 8003762:	d1bf      	bne.n	80036e4 <_printf_float+0xf0>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1bd      	bne.n	80036e4 <_printf_float+0xf0>
 8003768:	2301      	movs	r3, #1
 800376a:	e7ba      	b.n	80036e2 <_printf_float+0xee>
 800376c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003770:	d9dc      	bls.n	800372c <_printf_float+0x138>
 8003772:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003776:	d118      	bne.n	80037aa <_printf_float+0x1b6>
 8003778:	2900      	cmp	r1, #0
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	dd0b      	ble.n	8003796 <_printf_float+0x1a2>
 800377e:	6121      	str	r1, [r4, #16]
 8003780:	b913      	cbnz	r3, 8003788 <_printf_float+0x194>
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	07d0      	lsls	r0, r2, #31
 8003786:	d502      	bpl.n	800378e <_printf_float+0x19a>
 8003788:	3301      	adds	r3, #1
 800378a:	440b      	add	r3, r1
 800378c:	6123      	str	r3, [r4, #16]
 800378e:	f04f 0900 	mov.w	r9, #0
 8003792:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003794:	e7dc      	b.n	8003750 <_printf_float+0x15c>
 8003796:	b913      	cbnz	r3, 800379e <_printf_float+0x1aa>
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	07d2      	lsls	r2, r2, #31
 800379c:	d501      	bpl.n	80037a2 <_printf_float+0x1ae>
 800379e:	3302      	adds	r3, #2
 80037a0:	e7f4      	b.n	800378c <_printf_float+0x198>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e7f2      	b.n	800378c <_printf_float+0x198>
 80037a6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80037aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80037ac:	4299      	cmp	r1, r3
 80037ae:	db05      	blt.n	80037bc <_printf_float+0x1c8>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	6121      	str	r1, [r4, #16]
 80037b4:	07d8      	lsls	r0, r3, #31
 80037b6:	d5ea      	bpl.n	800378e <_printf_float+0x19a>
 80037b8:	1c4b      	adds	r3, r1, #1
 80037ba:	e7e7      	b.n	800378c <_printf_float+0x198>
 80037bc:	2900      	cmp	r1, #0
 80037be:	bfcc      	ite	gt
 80037c0:	2201      	movgt	r2, #1
 80037c2:	f1c1 0202 	rsble	r2, r1, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	e7e0      	b.n	800378c <_printf_float+0x198>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	055a      	lsls	r2, r3, #21
 80037ce:	d407      	bmi.n	80037e0 <_printf_float+0x1ec>
 80037d0:	6923      	ldr	r3, [r4, #16]
 80037d2:	4642      	mov	r2, r8
 80037d4:	4631      	mov	r1, r6
 80037d6:	4628      	mov	r0, r5
 80037d8:	47b8      	blx	r7
 80037da:	3001      	adds	r0, #1
 80037dc:	d12b      	bne.n	8003836 <_printf_float+0x242>
 80037de:	e764      	b.n	80036aa <_printf_float+0xb6>
 80037e0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80037e4:	f240 80dc 	bls.w	80039a0 <_printf_float+0x3ac>
 80037e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80037ec:	2200      	movs	r2, #0
 80037ee:	2300      	movs	r3, #0
 80037f0:	f7fd f8da 	bl	80009a8 <__aeabi_dcmpeq>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	d033      	beq.n	8003860 <_printf_float+0x26c>
 80037f8:	2301      	movs	r3, #1
 80037fa:	4631      	mov	r1, r6
 80037fc:	4628      	mov	r0, r5
 80037fe:	4a35      	ldr	r2, [pc, #212]	@ (80038d4 <_printf_float+0x2e0>)
 8003800:	47b8      	blx	r7
 8003802:	3001      	adds	r0, #1
 8003804:	f43f af51 	beq.w	80036aa <_printf_float+0xb6>
 8003808:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800380c:	4543      	cmp	r3, r8
 800380e:	db02      	blt.n	8003816 <_printf_float+0x222>
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	07d8      	lsls	r0, r3, #31
 8003814:	d50f      	bpl.n	8003836 <_printf_float+0x242>
 8003816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800381a:	4631      	mov	r1, r6
 800381c:	4628      	mov	r0, r5
 800381e:	47b8      	blx	r7
 8003820:	3001      	adds	r0, #1
 8003822:	f43f af42 	beq.w	80036aa <_printf_float+0xb6>
 8003826:	f04f 0900 	mov.w	r9, #0
 800382a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800382e:	f104 0a1a 	add.w	sl, r4, #26
 8003832:	45c8      	cmp	r8, r9
 8003834:	dc09      	bgt.n	800384a <_printf_float+0x256>
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	079b      	lsls	r3, r3, #30
 800383a:	f100 8102 	bmi.w	8003a42 <_printf_float+0x44e>
 800383e:	68e0      	ldr	r0, [r4, #12]
 8003840:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003842:	4298      	cmp	r0, r3
 8003844:	bfb8      	it	lt
 8003846:	4618      	movlt	r0, r3
 8003848:	e731      	b.n	80036ae <_printf_float+0xba>
 800384a:	2301      	movs	r3, #1
 800384c:	4652      	mov	r2, sl
 800384e:	4631      	mov	r1, r6
 8003850:	4628      	mov	r0, r5
 8003852:	47b8      	blx	r7
 8003854:	3001      	adds	r0, #1
 8003856:	f43f af28 	beq.w	80036aa <_printf_float+0xb6>
 800385a:	f109 0901 	add.w	r9, r9, #1
 800385e:	e7e8      	b.n	8003832 <_printf_float+0x23e>
 8003860:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003862:	2b00      	cmp	r3, #0
 8003864:	dc38      	bgt.n	80038d8 <_printf_float+0x2e4>
 8003866:	2301      	movs	r3, #1
 8003868:	4631      	mov	r1, r6
 800386a:	4628      	mov	r0, r5
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <_printf_float+0x2e0>)
 800386e:	47b8      	blx	r7
 8003870:	3001      	adds	r0, #1
 8003872:	f43f af1a 	beq.w	80036aa <_printf_float+0xb6>
 8003876:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800387a:	ea59 0303 	orrs.w	r3, r9, r3
 800387e:	d102      	bne.n	8003886 <_printf_float+0x292>
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	07d9      	lsls	r1, r3, #31
 8003884:	d5d7      	bpl.n	8003836 <_printf_float+0x242>
 8003886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800388a:	4631      	mov	r1, r6
 800388c:	4628      	mov	r0, r5
 800388e:	47b8      	blx	r7
 8003890:	3001      	adds	r0, #1
 8003892:	f43f af0a 	beq.w	80036aa <_printf_float+0xb6>
 8003896:	f04f 0a00 	mov.w	sl, #0
 800389a:	f104 0b1a 	add.w	fp, r4, #26
 800389e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038a0:	425b      	negs	r3, r3
 80038a2:	4553      	cmp	r3, sl
 80038a4:	dc01      	bgt.n	80038aa <_printf_float+0x2b6>
 80038a6:	464b      	mov	r3, r9
 80038a8:	e793      	b.n	80037d2 <_printf_float+0x1de>
 80038aa:	2301      	movs	r3, #1
 80038ac:	465a      	mov	r2, fp
 80038ae:	4631      	mov	r1, r6
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b8      	blx	r7
 80038b4:	3001      	adds	r0, #1
 80038b6:	f43f aef8 	beq.w	80036aa <_printf_float+0xb6>
 80038ba:	f10a 0a01 	add.w	sl, sl, #1
 80038be:	e7ee      	b.n	800389e <_printf_float+0x2aa>
 80038c0:	7fefffff 	.word	0x7fefffff
 80038c4:	080061ac 	.word	0x080061ac
 80038c8:	080061b0 	.word	0x080061b0
 80038cc:	080061b4 	.word	0x080061b4
 80038d0:	080061b8 	.word	0x080061b8
 80038d4:	080061bc 	.word	0x080061bc
 80038d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038da:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80038de:	4553      	cmp	r3, sl
 80038e0:	bfa8      	it	ge
 80038e2:	4653      	movge	r3, sl
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	4699      	mov	r9, r3
 80038e8:	dc36      	bgt.n	8003958 <_printf_float+0x364>
 80038ea:	f04f 0b00 	mov.w	fp, #0
 80038ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038f2:	f104 021a 	add.w	r2, r4, #26
 80038f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80038f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80038fa:	eba3 0309 	sub.w	r3, r3, r9
 80038fe:	455b      	cmp	r3, fp
 8003900:	dc31      	bgt.n	8003966 <_printf_float+0x372>
 8003902:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003904:	459a      	cmp	sl, r3
 8003906:	dc3a      	bgt.n	800397e <_printf_float+0x38a>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	07da      	lsls	r2, r3, #31
 800390c:	d437      	bmi.n	800397e <_printf_float+0x38a>
 800390e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003910:	ebaa 0903 	sub.w	r9, sl, r3
 8003914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003916:	ebaa 0303 	sub.w	r3, sl, r3
 800391a:	4599      	cmp	r9, r3
 800391c:	bfa8      	it	ge
 800391e:	4699      	movge	r9, r3
 8003920:	f1b9 0f00 	cmp.w	r9, #0
 8003924:	dc33      	bgt.n	800398e <_printf_float+0x39a>
 8003926:	f04f 0800 	mov.w	r8, #0
 800392a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800392e:	f104 0b1a 	add.w	fp, r4, #26
 8003932:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003934:	ebaa 0303 	sub.w	r3, sl, r3
 8003938:	eba3 0309 	sub.w	r3, r3, r9
 800393c:	4543      	cmp	r3, r8
 800393e:	f77f af7a 	ble.w	8003836 <_printf_float+0x242>
 8003942:	2301      	movs	r3, #1
 8003944:	465a      	mov	r2, fp
 8003946:	4631      	mov	r1, r6
 8003948:	4628      	mov	r0, r5
 800394a:	47b8      	blx	r7
 800394c:	3001      	adds	r0, #1
 800394e:	f43f aeac 	beq.w	80036aa <_printf_float+0xb6>
 8003952:	f108 0801 	add.w	r8, r8, #1
 8003956:	e7ec      	b.n	8003932 <_printf_float+0x33e>
 8003958:	4642      	mov	r2, r8
 800395a:	4631      	mov	r1, r6
 800395c:	4628      	mov	r0, r5
 800395e:	47b8      	blx	r7
 8003960:	3001      	adds	r0, #1
 8003962:	d1c2      	bne.n	80038ea <_printf_float+0x2f6>
 8003964:	e6a1      	b.n	80036aa <_printf_float+0xb6>
 8003966:	2301      	movs	r3, #1
 8003968:	4631      	mov	r1, r6
 800396a:	4628      	mov	r0, r5
 800396c:	920a      	str	r2, [sp, #40]	@ 0x28
 800396e:	47b8      	blx	r7
 8003970:	3001      	adds	r0, #1
 8003972:	f43f ae9a 	beq.w	80036aa <_printf_float+0xb6>
 8003976:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003978:	f10b 0b01 	add.w	fp, fp, #1
 800397c:	e7bb      	b.n	80038f6 <_printf_float+0x302>
 800397e:	4631      	mov	r1, r6
 8003980:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003984:	4628      	mov	r0, r5
 8003986:	47b8      	blx	r7
 8003988:	3001      	adds	r0, #1
 800398a:	d1c0      	bne.n	800390e <_printf_float+0x31a>
 800398c:	e68d      	b.n	80036aa <_printf_float+0xb6>
 800398e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003990:	464b      	mov	r3, r9
 8003992:	4631      	mov	r1, r6
 8003994:	4628      	mov	r0, r5
 8003996:	4442      	add	r2, r8
 8003998:	47b8      	blx	r7
 800399a:	3001      	adds	r0, #1
 800399c:	d1c3      	bne.n	8003926 <_printf_float+0x332>
 800399e:	e684      	b.n	80036aa <_printf_float+0xb6>
 80039a0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80039a4:	f1ba 0f01 	cmp.w	sl, #1
 80039a8:	dc01      	bgt.n	80039ae <_printf_float+0x3ba>
 80039aa:	07db      	lsls	r3, r3, #31
 80039ac:	d536      	bpl.n	8003a1c <_printf_float+0x428>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4642      	mov	r2, r8
 80039b2:	4631      	mov	r1, r6
 80039b4:	4628      	mov	r0, r5
 80039b6:	47b8      	blx	r7
 80039b8:	3001      	adds	r0, #1
 80039ba:	f43f ae76 	beq.w	80036aa <_printf_float+0xb6>
 80039be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039c2:	4631      	mov	r1, r6
 80039c4:	4628      	mov	r0, r5
 80039c6:	47b8      	blx	r7
 80039c8:	3001      	adds	r0, #1
 80039ca:	f43f ae6e 	beq.w	80036aa <_printf_float+0xb6>
 80039ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80039d2:	2200      	movs	r2, #0
 80039d4:	2300      	movs	r3, #0
 80039d6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80039da:	f7fc ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 80039de:	b9c0      	cbnz	r0, 8003a12 <_printf_float+0x41e>
 80039e0:	4653      	mov	r3, sl
 80039e2:	f108 0201 	add.w	r2, r8, #1
 80039e6:	4631      	mov	r1, r6
 80039e8:	4628      	mov	r0, r5
 80039ea:	47b8      	blx	r7
 80039ec:	3001      	adds	r0, #1
 80039ee:	d10c      	bne.n	8003a0a <_printf_float+0x416>
 80039f0:	e65b      	b.n	80036aa <_printf_float+0xb6>
 80039f2:	2301      	movs	r3, #1
 80039f4:	465a      	mov	r2, fp
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	47b8      	blx	r7
 80039fc:	3001      	adds	r0, #1
 80039fe:	f43f ae54 	beq.w	80036aa <_printf_float+0xb6>
 8003a02:	f108 0801 	add.w	r8, r8, #1
 8003a06:	45d0      	cmp	r8, sl
 8003a08:	dbf3      	blt.n	80039f2 <_printf_float+0x3fe>
 8003a0a:	464b      	mov	r3, r9
 8003a0c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003a10:	e6e0      	b.n	80037d4 <_printf_float+0x1e0>
 8003a12:	f04f 0800 	mov.w	r8, #0
 8003a16:	f104 0b1a 	add.w	fp, r4, #26
 8003a1a:	e7f4      	b.n	8003a06 <_printf_float+0x412>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4642      	mov	r2, r8
 8003a20:	e7e1      	b.n	80039e6 <_printf_float+0x3f2>
 8003a22:	2301      	movs	r3, #1
 8003a24:	464a      	mov	r2, r9
 8003a26:	4631      	mov	r1, r6
 8003a28:	4628      	mov	r0, r5
 8003a2a:	47b8      	blx	r7
 8003a2c:	3001      	adds	r0, #1
 8003a2e:	f43f ae3c 	beq.w	80036aa <_printf_float+0xb6>
 8003a32:	f108 0801 	add.w	r8, r8, #1
 8003a36:	68e3      	ldr	r3, [r4, #12]
 8003a38:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003a3a:	1a5b      	subs	r3, r3, r1
 8003a3c:	4543      	cmp	r3, r8
 8003a3e:	dcf0      	bgt.n	8003a22 <_printf_float+0x42e>
 8003a40:	e6fd      	b.n	800383e <_printf_float+0x24a>
 8003a42:	f04f 0800 	mov.w	r8, #0
 8003a46:	f104 0919 	add.w	r9, r4, #25
 8003a4a:	e7f4      	b.n	8003a36 <_printf_float+0x442>

08003a4c <_printf_common>:
 8003a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a50:	4616      	mov	r6, r2
 8003a52:	4698      	mov	r8, r3
 8003a54:	688a      	ldr	r2, [r1, #8]
 8003a56:	690b      	ldr	r3, [r1, #16]
 8003a58:	4607      	mov	r7, r0
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	bfb8      	it	lt
 8003a5e:	4613      	movlt	r3, r2
 8003a60:	6033      	str	r3, [r6, #0]
 8003a62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a66:	460c      	mov	r4, r1
 8003a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a6c:	b10a      	cbz	r2, 8003a72 <_printf_common+0x26>
 8003a6e:	3301      	adds	r3, #1
 8003a70:	6033      	str	r3, [r6, #0]
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	0699      	lsls	r1, r3, #26
 8003a76:	bf42      	ittt	mi
 8003a78:	6833      	ldrmi	r3, [r6, #0]
 8003a7a:	3302      	addmi	r3, #2
 8003a7c:	6033      	strmi	r3, [r6, #0]
 8003a7e:	6825      	ldr	r5, [r4, #0]
 8003a80:	f015 0506 	ands.w	r5, r5, #6
 8003a84:	d106      	bne.n	8003a94 <_printf_common+0x48>
 8003a86:	f104 0a19 	add.w	sl, r4, #25
 8003a8a:	68e3      	ldr	r3, [r4, #12]
 8003a8c:	6832      	ldr	r2, [r6, #0]
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	42ab      	cmp	r3, r5
 8003a92:	dc2b      	bgt.n	8003aec <_printf_common+0xa0>
 8003a94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	3b00      	subs	r3, #0
 8003a9c:	bf18      	it	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	0692      	lsls	r2, r2, #26
 8003aa2:	d430      	bmi.n	8003b06 <_printf_common+0xba>
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	4638      	mov	r0, r7
 8003aa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003aac:	47c8      	blx	r9
 8003aae:	3001      	adds	r0, #1
 8003ab0:	d023      	beq.n	8003afa <_printf_common+0xae>
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	6922      	ldr	r2, [r4, #16]
 8003ab6:	f003 0306 	and.w	r3, r3, #6
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	bf14      	ite	ne
 8003abe:	2500      	movne	r5, #0
 8003ac0:	6833      	ldreq	r3, [r6, #0]
 8003ac2:	f04f 0600 	mov.w	r6, #0
 8003ac6:	bf08      	it	eq
 8003ac8:	68e5      	ldreq	r5, [r4, #12]
 8003aca:	f104 041a 	add.w	r4, r4, #26
 8003ace:	bf08      	it	eq
 8003ad0:	1aed      	subeq	r5, r5, r3
 8003ad2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ad6:	bf08      	it	eq
 8003ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bfc4      	itt	gt
 8003ae0:	1a9b      	subgt	r3, r3, r2
 8003ae2:	18ed      	addgt	r5, r5, r3
 8003ae4:	42b5      	cmp	r5, r6
 8003ae6:	d11a      	bne.n	8003b1e <_printf_common+0xd2>
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e008      	b.n	8003afe <_printf_common+0xb2>
 8003aec:	2301      	movs	r3, #1
 8003aee:	4652      	mov	r2, sl
 8003af0:	4641      	mov	r1, r8
 8003af2:	4638      	mov	r0, r7
 8003af4:	47c8      	blx	r9
 8003af6:	3001      	adds	r0, #1
 8003af8:	d103      	bne.n	8003b02 <_printf_common+0xb6>
 8003afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b02:	3501      	adds	r5, #1
 8003b04:	e7c1      	b.n	8003a8a <_printf_common+0x3e>
 8003b06:	2030      	movs	r0, #48	@ 0x30
 8003b08:	18e1      	adds	r1, r4, r3
 8003b0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b14:	4422      	add	r2, r4
 8003b16:	3302      	adds	r3, #2
 8003b18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b1c:	e7c2      	b.n	8003aa4 <_printf_common+0x58>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	4622      	mov	r2, r4
 8003b22:	4641      	mov	r1, r8
 8003b24:	4638      	mov	r0, r7
 8003b26:	47c8      	blx	r9
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d0e6      	beq.n	8003afa <_printf_common+0xae>
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	e7d9      	b.n	8003ae4 <_printf_common+0x98>

08003b30 <_printf_i>:
 8003b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b34:	7e0f      	ldrb	r7, [r1, #24]
 8003b36:	4691      	mov	r9, r2
 8003b38:	2f78      	cmp	r7, #120	@ 0x78
 8003b3a:	4680      	mov	r8, r0
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	469a      	mov	sl, r3
 8003b40:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b46:	d807      	bhi.n	8003b58 <_printf_i+0x28>
 8003b48:	2f62      	cmp	r7, #98	@ 0x62
 8003b4a:	d80a      	bhi.n	8003b62 <_printf_i+0x32>
 8003b4c:	2f00      	cmp	r7, #0
 8003b4e:	f000 80d3 	beq.w	8003cf8 <_printf_i+0x1c8>
 8003b52:	2f58      	cmp	r7, #88	@ 0x58
 8003b54:	f000 80ba 	beq.w	8003ccc <_printf_i+0x19c>
 8003b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b60:	e03a      	b.n	8003bd8 <_printf_i+0xa8>
 8003b62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b66:	2b15      	cmp	r3, #21
 8003b68:	d8f6      	bhi.n	8003b58 <_printf_i+0x28>
 8003b6a:	a101      	add	r1, pc, #4	@ (adr r1, 8003b70 <_printf_i+0x40>)
 8003b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b70:	08003bc9 	.word	0x08003bc9
 8003b74:	08003bdd 	.word	0x08003bdd
 8003b78:	08003b59 	.word	0x08003b59
 8003b7c:	08003b59 	.word	0x08003b59
 8003b80:	08003b59 	.word	0x08003b59
 8003b84:	08003b59 	.word	0x08003b59
 8003b88:	08003bdd 	.word	0x08003bdd
 8003b8c:	08003b59 	.word	0x08003b59
 8003b90:	08003b59 	.word	0x08003b59
 8003b94:	08003b59 	.word	0x08003b59
 8003b98:	08003b59 	.word	0x08003b59
 8003b9c:	08003cdf 	.word	0x08003cdf
 8003ba0:	08003c07 	.word	0x08003c07
 8003ba4:	08003c99 	.word	0x08003c99
 8003ba8:	08003b59 	.word	0x08003b59
 8003bac:	08003b59 	.word	0x08003b59
 8003bb0:	08003d01 	.word	0x08003d01
 8003bb4:	08003b59 	.word	0x08003b59
 8003bb8:	08003c07 	.word	0x08003c07
 8003bbc:	08003b59 	.word	0x08003b59
 8003bc0:	08003b59 	.word	0x08003b59
 8003bc4:	08003ca1 	.word	0x08003ca1
 8003bc8:	6833      	ldr	r3, [r6, #0]
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6032      	str	r2, [r6, #0]
 8003bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e09e      	b.n	8003d1a <_printf_i+0x1ea>
 8003bdc:	6833      	ldr	r3, [r6, #0]
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	1d19      	adds	r1, r3, #4
 8003be2:	6031      	str	r1, [r6, #0]
 8003be4:	0606      	lsls	r6, r0, #24
 8003be6:	d501      	bpl.n	8003bec <_printf_i+0xbc>
 8003be8:	681d      	ldr	r5, [r3, #0]
 8003bea:	e003      	b.n	8003bf4 <_printf_i+0xc4>
 8003bec:	0645      	lsls	r5, r0, #25
 8003bee:	d5fb      	bpl.n	8003be8 <_printf_i+0xb8>
 8003bf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003bf4:	2d00      	cmp	r5, #0
 8003bf6:	da03      	bge.n	8003c00 <_printf_i+0xd0>
 8003bf8:	232d      	movs	r3, #45	@ 0x2d
 8003bfa:	426d      	negs	r5, r5
 8003bfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c00:	230a      	movs	r3, #10
 8003c02:	4859      	ldr	r0, [pc, #356]	@ (8003d68 <_printf_i+0x238>)
 8003c04:	e011      	b.n	8003c2a <_printf_i+0xfa>
 8003c06:	6821      	ldr	r1, [r4, #0]
 8003c08:	6833      	ldr	r3, [r6, #0]
 8003c0a:	0608      	lsls	r0, r1, #24
 8003c0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c10:	d402      	bmi.n	8003c18 <_printf_i+0xe8>
 8003c12:	0649      	lsls	r1, r1, #25
 8003c14:	bf48      	it	mi
 8003c16:	b2ad      	uxthmi	r5, r5
 8003c18:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c1a:	6033      	str	r3, [r6, #0]
 8003c1c:	bf14      	ite	ne
 8003c1e:	230a      	movne	r3, #10
 8003c20:	2308      	moveq	r3, #8
 8003c22:	4851      	ldr	r0, [pc, #324]	@ (8003d68 <_printf_i+0x238>)
 8003c24:	2100      	movs	r1, #0
 8003c26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c2a:	6866      	ldr	r6, [r4, #4]
 8003c2c:	2e00      	cmp	r6, #0
 8003c2e:	bfa8      	it	ge
 8003c30:	6821      	ldrge	r1, [r4, #0]
 8003c32:	60a6      	str	r6, [r4, #8]
 8003c34:	bfa4      	itt	ge
 8003c36:	f021 0104 	bicge.w	r1, r1, #4
 8003c3a:	6021      	strge	r1, [r4, #0]
 8003c3c:	b90d      	cbnz	r5, 8003c42 <_printf_i+0x112>
 8003c3e:	2e00      	cmp	r6, #0
 8003c40:	d04b      	beq.n	8003cda <_printf_i+0x1aa>
 8003c42:	4616      	mov	r6, r2
 8003c44:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c48:	fb03 5711 	mls	r7, r3, r1, r5
 8003c4c:	5dc7      	ldrb	r7, [r0, r7]
 8003c4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c52:	462f      	mov	r7, r5
 8003c54:	42bb      	cmp	r3, r7
 8003c56:	460d      	mov	r5, r1
 8003c58:	d9f4      	bls.n	8003c44 <_printf_i+0x114>
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d10b      	bne.n	8003c76 <_printf_i+0x146>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	07df      	lsls	r7, r3, #31
 8003c62:	d508      	bpl.n	8003c76 <_printf_i+0x146>
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	6861      	ldr	r1, [r4, #4]
 8003c68:	4299      	cmp	r1, r3
 8003c6a:	bfde      	ittt	le
 8003c6c:	2330      	movle	r3, #48	@ 0x30
 8003c6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c72:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003c76:	1b92      	subs	r2, r2, r6
 8003c78:	6122      	str	r2, [r4, #16]
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	4640      	mov	r0, r8
 8003c80:	f8cd a000 	str.w	sl, [sp]
 8003c84:	aa03      	add	r2, sp, #12
 8003c86:	f7ff fee1 	bl	8003a4c <_printf_common>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	d14a      	bne.n	8003d24 <_printf_i+0x1f4>
 8003c8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c92:	b004      	add	sp, #16
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	f043 0320 	orr.w	r3, r3, #32
 8003c9e:	6023      	str	r3, [r4, #0]
 8003ca0:	2778      	movs	r7, #120	@ 0x78
 8003ca2:	4832      	ldr	r0, [pc, #200]	@ (8003d6c <_printf_i+0x23c>)
 8003ca4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	6831      	ldr	r1, [r6, #0]
 8003cac:	061f      	lsls	r7, r3, #24
 8003cae:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cb2:	d402      	bmi.n	8003cba <_printf_i+0x18a>
 8003cb4:	065f      	lsls	r7, r3, #25
 8003cb6:	bf48      	it	mi
 8003cb8:	b2ad      	uxthmi	r5, r5
 8003cba:	6031      	str	r1, [r6, #0]
 8003cbc:	07d9      	lsls	r1, r3, #31
 8003cbe:	bf44      	itt	mi
 8003cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cc4:	6023      	strmi	r3, [r4, #0]
 8003cc6:	b11d      	cbz	r5, 8003cd0 <_printf_i+0x1a0>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	e7ab      	b.n	8003c24 <_printf_i+0xf4>
 8003ccc:	4826      	ldr	r0, [pc, #152]	@ (8003d68 <_printf_i+0x238>)
 8003cce:	e7e9      	b.n	8003ca4 <_printf_i+0x174>
 8003cd0:	6823      	ldr	r3, [r4, #0]
 8003cd2:	f023 0320 	bic.w	r3, r3, #32
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	e7f6      	b.n	8003cc8 <_printf_i+0x198>
 8003cda:	4616      	mov	r6, r2
 8003cdc:	e7bd      	b.n	8003c5a <_printf_i+0x12a>
 8003cde:	6833      	ldr	r3, [r6, #0]
 8003ce0:	6825      	ldr	r5, [r4, #0]
 8003ce2:	1d18      	adds	r0, r3, #4
 8003ce4:	6961      	ldr	r1, [r4, #20]
 8003ce6:	6030      	str	r0, [r6, #0]
 8003ce8:	062e      	lsls	r6, r5, #24
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	d501      	bpl.n	8003cf2 <_printf_i+0x1c2>
 8003cee:	6019      	str	r1, [r3, #0]
 8003cf0:	e002      	b.n	8003cf8 <_printf_i+0x1c8>
 8003cf2:	0668      	lsls	r0, r5, #25
 8003cf4:	d5fb      	bpl.n	8003cee <_printf_i+0x1be>
 8003cf6:	8019      	strh	r1, [r3, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	4616      	mov	r6, r2
 8003cfc:	6123      	str	r3, [r4, #16]
 8003cfe:	e7bc      	b.n	8003c7a <_printf_i+0x14a>
 8003d00:	6833      	ldr	r3, [r6, #0]
 8003d02:	2100      	movs	r1, #0
 8003d04:	1d1a      	adds	r2, r3, #4
 8003d06:	6032      	str	r2, [r6, #0]
 8003d08:	681e      	ldr	r6, [r3, #0]
 8003d0a:	6862      	ldr	r2, [r4, #4]
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	f000 f9d4 	bl	80040ba <memchr>
 8003d12:	b108      	cbz	r0, 8003d18 <_printf_i+0x1e8>
 8003d14:	1b80      	subs	r0, r0, r6
 8003d16:	6060      	str	r0, [r4, #4]
 8003d18:	6863      	ldr	r3, [r4, #4]
 8003d1a:	6123      	str	r3, [r4, #16]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d22:	e7aa      	b.n	8003c7a <_printf_i+0x14a>
 8003d24:	4632      	mov	r2, r6
 8003d26:	4649      	mov	r1, r9
 8003d28:	4640      	mov	r0, r8
 8003d2a:	6923      	ldr	r3, [r4, #16]
 8003d2c:	47d0      	blx	sl
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d0ad      	beq.n	8003c8e <_printf_i+0x15e>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	079b      	lsls	r3, r3, #30
 8003d36:	d413      	bmi.n	8003d60 <_printf_i+0x230>
 8003d38:	68e0      	ldr	r0, [r4, #12]
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	4298      	cmp	r0, r3
 8003d3e:	bfb8      	it	lt
 8003d40:	4618      	movlt	r0, r3
 8003d42:	e7a6      	b.n	8003c92 <_printf_i+0x162>
 8003d44:	2301      	movs	r3, #1
 8003d46:	4632      	mov	r2, r6
 8003d48:	4649      	mov	r1, r9
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	47d0      	blx	sl
 8003d4e:	3001      	adds	r0, #1
 8003d50:	d09d      	beq.n	8003c8e <_printf_i+0x15e>
 8003d52:	3501      	adds	r5, #1
 8003d54:	68e3      	ldr	r3, [r4, #12]
 8003d56:	9903      	ldr	r1, [sp, #12]
 8003d58:	1a5b      	subs	r3, r3, r1
 8003d5a:	42ab      	cmp	r3, r5
 8003d5c:	dcf2      	bgt.n	8003d44 <_printf_i+0x214>
 8003d5e:	e7eb      	b.n	8003d38 <_printf_i+0x208>
 8003d60:	2500      	movs	r5, #0
 8003d62:	f104 0619 	add.w	r6, r4, #25
 8003d66:	e7f5      	b.n	8003d54 <_printf_i+0x224>
 8003d68:	080061be 	.word	0x080061be
 8003d6c:	080061cf 	.word	0x080061cf

08003d70 <std>:
 8003d70:	2300      	movs	r3, #0
 8003d72:	b510      	push	{r4, lr}
 8003d74:	4604      	mov	r4, r0
 8003d76:	e9c0 3300 	strd	r3, r3, [r0]
 8003d7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d7e:	6083      	str	r3, [r0, #8]
 8003d80:	8181      	strh	r1, [r0, #12]
 8003d82:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d84:	81c2      	strh	r2, [r0, #14]
 8003d86:	6183      	str	r3, [r0, #24]
 8003d88:	4619      	mov	r1, r3
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	305c      	adds	r0, #92	@ 0x5c
 8003d8e:	f000 f914 	bl	8003fba <memset>
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <std+0x58>)
 8003d94:	6224      	str	r4, [r4, #32]
 8003d96:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d98:	4b0c      	ldr	r3, [pc, #48]	@ (8003dcc <std+0x5c>)
 8003d9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd0 <std+0x60>)
 8003d9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003da0:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <std+0x64>)
 8003da2:	6323      	str	r3, [r4, #48]	@ 0x30
 8003da4:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd8 <std+0x68>)
 8003da6:	429c      	cmp	r4, r3
 8003da8:	d006      	beq.n	8003db8 <std+0x48>
 8003daa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003dae:	4294      	cmp	r4, r2
 8003db0:	d002      	beq.n	8003db8 <std+0x48>
 8003db2:	33d0      	adds	r3, #208	@ 0xd0
 8003db4:	429c      	cmp	r4, r3
 8003db6:	d105      	bne.n	8003dc4 <std+0x54>
 8003db8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dc0:	f000 b978 	b.w	80040b4 <__retarget_lock_init_recursive>
 8003dc4:	bd10      	pop	{r4, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08003f35 	.word	0x08003f35
 8003dcc:	08003f57 	.word	0x08003f57
 8003dd0:	08003f8f 	.word	0x08003f8f
 8003dd4:	08003fb3 	.word	0x08003fb3
 8003dd8:	2000042c 	.word	0x2000042c

08003ddc <stdio_exit_handler>:
 8003ddc:	4a02      	ldr	r2, [pc, #8]	@ (8003de8 <stdio_exit_handler+0xc>)
 8003dde:	4903      	ldr	r1, [pc, #12]	@ (8003dec <stdio_exit_handler+0x10>)
 8003de0:	4803      	ldr	r0, [pc, #12]	@ (8003df0 <stdio_exit_handler+0x14>)
 8003de2:	f000 b869 	b.w	8003eb8 <_fwalk_sglue>
 8003de6:	bf00      	nop
 8003de8:	20000004 	.word	0x20000004
 8003dec:	08005a25 	.word	0x08005a25
 8003df0:	20000014 	.word	0x20000014

08003df4 <cleanup_stdio>:
 8003df4:	6841      	ldr	r1, [r0, #4]
 8003df6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <cleanup_stdio+0x34>)
 8003df8:	b510      	push	{r4, lr}
 8003dfa:	4299      	cmp	r1, r3
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	d001      	beq.n	8003e04 <cleanup_stdio+0x10>
 8003e00:	f001 fe10 	bl	8005a24 <_fflush_r>
 8003e04:	68a1      	ldr	r1, [r4, #8]
 8003e06:	4b09      	ldr	r3, [pc, #36]	@ (8003e2c <cleanup_stdio+0x38>)
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	d002      	beq.n	8003e12 <cleanup_stdio+0x1e>
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f001 fe09 	bl	8005a24 <_fflush_r>
 8003e12:	68e1      	ldr	r1, [r4, #12]
 8003e14:	4b06      	ldr	r3, [pc, #24]	@ (8003e30 <cleanup_stdio+0x3c>)
 8003e16:	4299      	cmp	r1, r3
 8003e18:	d004      	beq.n	8003e24 <cleanup_stdio+0x30>
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e20:	f001 be00 	b.w	8005a24 <_fflush_r>
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	bf00      	nop
 8003e28:	2000042c 	.word	0x2000042c
 8003e2c:	20000494 	.word	0x20000494
 8003e30:	200004fc 	.word	0x200004fc

08003e34 <global_stdio_init.part.0>:
 8003e34:	b510      	push	{r4, lr}
 8003e36:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <global_stdio_init.part.0+0x30>)
 8003e38:	4c0b      	ldr	r4, [pc, #44]	@ (8003e68 <global_stdio_init.part.0+0x34>)
 8003e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e6c <global_stdio_init.part.0+0x38>)
 8003e3c:	4620      	mov	r0, r4
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	2104      	movs	r1, #4
 8003e42:	2200      	movs	r2, #0
 8003e44:	f7ff ff94 	bl	8003d70 <std>
 8003e48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	2109      	movs	r1, #9
 8003e50:	f7ff ff8e 	bl	8003d70 <std>
 8003e54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e58:	2202      	movs	r2, #2
 8003e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e5e:	2112      	movs	r1, #18
 8003e60:	f7ff bf86 	b.w	8003d70 <std>
 8003e64:	20000564 	.word	0x20000564
 8003e68:	2000042c 	.word	0x2000042c
 8003e6c:	08003ddd 	.word	0x08003ddd

08003e70 <__sfp_lock_acquire>:
 8003e70:	4801      	ldr	r0, [pc, #4]	@ (8003e78 <__sfp_lock_acquire+0x8>)
 8003e72:	f000 b920 	b.w	80040b6 <__retarget_lock_acquire_recursive>
 8003e76:	bf00      	nop
 8003e78:	2000056d 	.word	0x2000056d

08003e7c <__sfp_lock_release>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	@ (8003e84 <__sfp_lock_release+0x8>)
 8003e7e:	f000 b91b 	b.w	80040b8 <__retarget_lock_release_recursive>
 8003e82:	bf00      	nop
 8003e84:	2000056d 	.word	0x2000056d

08003e88 <__sinit>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	f7ff fff0 	bl	8003e70 <__sfp_lock_acquire>
 8003e90:	6a23      	ldr	r3, [r4, #32]
 8003e92:	b11b      	cbz	r3, 8003e9c <__sinit+0x14>
 8003e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e98:	f7ff bff0 	b.w	8003e7c <__sfp_lock_release>
 8003e9c:	4b04      	ldr	r3, [pc, #16]	@ (8003eb0 <__sinit+0x28>)
 8003e9e:	6223      	str	r3, [r4, #32]
 8003ea0:	4b04      	ldr	r3, [pc, #16]	@ (8003eb4 <__sinit+0x2c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f5      	bne.n	8003e94 <__sinit+0xc>
 8003ea8:	f7ff ffc4 	bl	8003e34 <global_stdio_init.part.0>
 8003eac:	e7f2      	b.n	8003e94 <__sinit+0xc>
 8003eae:	bf00      	nop
 8003eb0:	08003df5 	.word	0x08003df5
 8003eb4:	20000564 	.word	0x20000564

08003eb8 <_fwalk_sglue>:
 8003eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ebc:	4607      	mov	r7, r0
 8003ebe:	4688      	mov	r8, r1
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	2600      	movs	r6, #0
 8003ec4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ec8:	f1b9 0901 	subs.w	r9, r9, #1
 8003ecc:	d505      	bpl.n	8003eda <_fwalk_sglue+0x22>
 8003ece:	6824      	ldr	r4, [r4, #0]
 8003ed0:	2c00      	cmp	r4, #0
 8003ed2:	d1f7      	bne.n	8003ec4 <_fwalk_sglue+0xc>
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eda:	89ab      	ldrh	r3, [r5, #12]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d907      	bls.n	8003ef0 <_fwalk_sglue+0x38>
 8003ee0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	d003      	beq.n	8003ef0 <_fwalk_sglue+0x38>
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4638      	mov	r0, r7
 8003eec:	47c0      	blx	r8
 8003eee:	4306      	orrs	r6, r0
 8003ef0:	3568      	adds	r5, #104	@ 0x68
 8003ef2:	e7e9      	b.n	8003ec8 <_fwalk_sglue+0x10>

08003ef4 <siprintf>:
 8003ef4:	b40e      	push	{r1, r2, r3}
 8003ef6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003efa:	b500      	push	{lr}
 8003efc:	b09c      	sub	sp, #112	@ 0x70
 8003efe:	ab1d      	add	r3, sp, #116	@ 0x74
 8003f00:	9002      	str	r0, [sp, #8]
 8003f02:	9006      	str	r0, [sp, #24]
 8003f04:	9107      	str	r1, [sp, #28]
 8003f06:	9104      	str	r1, [sp, #16]
 8003f08:	4808      	ldr	r0, [pc, #32]	@ (8003f2c <siprintf+0x38>)
 8003f0a:	4909      	ldr	r1, [pc, #36]	@ (8003f30 <siprintf+0x3c>)
 8003f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f10:	9105      	str	r1, [sp, #20]
 8003f12:	6800      	ldr	r0, [r0, #0]
 8003f14:	a902      	add	r1, sp, #8
 8003f16:	9301      	str	r3, [sp, #4]
 8003f18:	f001 fc08 	bl	800572c <_svfiprintf_r>
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	9b02      	ldr	r3, [sp, #8]
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	b01c      	add	sp, #112	@ 0x70
 8003f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f28:	b003      	add	sp, #12
 8003f2a:	4770      	bx	lr
 8003f2c:	20000010 	.word	0x20000010
 8003f30:	ffff0208 	.word	0xffff0208

08003f34 <__sread>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	460c      	mov	r4, r1
 8003f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f3c:	f000 f86c 	bl	8004018 <_read_r>
 8003f40:	2800      	cmp	r0, #0
 8003f42:	bfab      	itete	ge
 8003f44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f46:	89a3      	ldrhlt	r3, [r4, #12]
 8003f48:	181b      	addge	r3, r3, r0
 8003f4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f4e:	bfac      	ite	ge
 8003f50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f52:	81a3      	strhlt	r3, [r4, #12]
 8003f54:	bd10      	pop	{r4, pc}

08003f56 <__swrite>:
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	461f      	mov	r7, r3
 8003f5c:	898b      	ldrh	r3, [r1, #12]
 8003f5e:	4605      	mov	r5, r0
 8003f60:	05db      	lsls	r3, r3, #23
 8003f62:	460c      	mov	r4, r1
 8003f64:	4616      	mov	r6, r2
 8003f66:	d505      	bpl.n	8003f74 <__swrite+0x1e>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f000 f840 	bl	8003ff4 <_lseek_r>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	4632      	mov	r2, r6
 8003f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f7c:	81a3      	strh	r3, [r4, #12]
 8003f7e:	4628      	mov	r0, r5
 8003f80:	463b      	mov	r3, r7
 8003f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8a:	f000 b857 	b.w	800403c <_write_r>

08003f8e <__sseek>:
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 f82d 	bl	8003ff4 <_lseek_r>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	bf15      	itete	ne
 8003fa0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fa2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fa6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003faa:	81a3      	strheq	r3, [r4, #12]
 8003fac:	bf18      	it	ne
 8003fae:	81a3      	strhne	r3, [r4, #12]
 8003fb0:	bd10      	pop	{r4, pc}

08003fb2 <__sclose>:
 8003fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb6:	f000 b80d 	b.w	8003fd4 <_close_r>

08003fba <memset>:
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4402      	add	r2, r0
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d100      	bne.n	8003fc4 <memset+0xa>
 8003fc2:	4770      	bx	lr
 8003fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc8:	e7f9      	b.n	8003fbe <memset+0x4>
	...

08003fcc <_localeconv_r>:
 8003fcc:	4800      	ldr	r0, [pc, #0]	@ (8003fd0 <_localeconv_r+0x4>)
 8003fce:	4770      	bx	lr
 8003fd0:	20000150 	.word	0x20000150

08003fd4 <_close_r>:
 8003fd4:	b538      	push	{r3, r4, r5, lr}
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	4d05      	ldr	r5, [pc, #20]	@ (8003ff0 <_close_r+0x1c>)
 8003fda:	4604      	mov	r4, r0
 8003fdc:	4608      	mov	r0, r1
 8003fde:	602b      	str	r3, [r5, #0]
 8003fe0:	f7fe fb51 	bl	8002686 <_close>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d102      	bne.n	8003fee <_close_r+0x1a>
 8003fe8:	682b      	ldr	r3, [r5, #0]
 8003fea:	b103      	cbz	r3, 8003fee <_close_r+0x1a>
 8003fec:	6023      	str	r3, [r4, #0]
 8003fee:	bd38      	pop	{r3, r4, r5, pc}
 8003ff0:	20000568 	.word	0x20000568

08003ff4 <_lseek_r>:
 8003ff4:	b538      	push	{r3, r4, r5, lr}
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4d05      	ldr	r5, [pc, #20]	@ (8004014 <_lseek_r+0x20>)
 8004000:	602a      	str	r2, [r5, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	f7fe fb63 	bl	80026ce <_lseek>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d102      	bne.n	8004012 <_lseek_r+0x1e>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	b103      	cbz	r3, 8004012 <_lseek_r+0x1e>
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	bd38      	pop	{r3, r4, r5, pc}
 8004014:	20000568 	.word	0x20000568

08004018 <_read_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4604      	mov	r4, r0
 800401c:	4608      	mov	r0, r1
 800401e:	4611      	mov	r1, r2
 8004020:	2200      	movs	r2, #0
 8004022:	4d05      	ldr	r5, [pc, #20]	@ (8004038 <_read_r+0x20>)
 8004024:	602a      	str	r2, [r5, #0]
 8004026:	461a      	mov	r2, r3
 8004028:	f7fe faf4 	bl	8002614 <_read>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d102      	bne.n	8004036 <_read_r+0x1e>
 8004030:	682b      	ldr	r3, [r5, #0]
 8004032:	b103      	cbz	r3, 8004036 <_read_r+0x1e>
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	bd38      	pop	{r3, r4, r5, pc}
 8004038:	20000568 	.word	0x20000568

0800403c <_write_r>:
 800403c:	b538      	push	{r3, r4, r5, lr}
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	4611      	mov	r1, r2
 8004044:	2200      	movs	r2, #0
 8004046:	4d05      	ldr	r5, [pc, #20]	@ (800405c <_write_r+0x20>)
 8004048:	602a      	str	r2, [r5, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	f7fe faff 	bl	800264e <_write>
 8004050:	1c43      	adds	r3, r0, #1
 8004052:	d102      	bne.n	800405a <_write_r+0x1e>
 8004054:	682b      	ldr	r3, [r5, #0]
 8004056:	b103      	cbz	r3, 800405a <_write_r+0x1e>
 8004058:	6023      	str	r3, [r4, #0]
 800405a:	bd38      	pop	{r3, r4, r5, pc}
 800405c:	20000568 	.word	0x20000568

08004060 <__errno>:
 8004060:	4b01      	ldr	r3, [pc, #4]	@ (8004068 <__errno+0x8>)
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	20000010 	.word	0x20000010

0800406c <__libc_init_array>:
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	2600      	movs	r6, #0
 8004070:	4d0c      	ldr	r5, [pc, #48]	@ (80040a4 <__libc_init_array+0x38>)
 8004072:	4c0d      	ldr	r4, [pc, #52]	@ (80040a8 <__libc_init_array+0x3c>)
 8004074:	1b64      	subs	r4, r4, r5
 8004076:	10a4      	asrs	r4, r4, #2
 8004078:	42a6      	cmp	r6, r4
 800407a:	d109      	bne.n	8004090 <__libc_init_array+0x24>
 800407c:	f002 f86e 	bl	800615c <_init>
 8004080:	2600      	movs	r6, #0
 8004082:	4d0a      	ldr	r5, [pc, #40]	@ (80040ac <__libc_init_array+0x40>)
 8004084:	4c0a      	ldr	r4, [pc, #40]	@ (80040b0 <__libc_init_array+0x44>)
 8004086:	1b64      	subs	r4, r4, r5
 8004088:	10a4      	asrs	r4, r4, #2
 800408a:	42a6      	cmp	r6, r4
 800408c:	d105      	bne.n	800409a <__libc_init_array+0x2e>
 800408e:	bd70      	pop	{r4, r5, r6, pc}
 8004090:	f855 3b04 	ldr.w	r3, [r5], #4
 8004094:	4798      	blx	r3
 8004096:	3601      	adds	r6, #1
 8004098:	e7ee      	b.n	8004078 <__libc_init_array+0xc>
 800409a:	f855 3b04 	ldr.w	r3, [r5], #4
 800409e:	4798      	blx	r3
 80040a0:	3601      	adds	r6, #1
 80040a2:	e7f2      	b.n	800408a <__libc_init_array+0x1e>
 80040a4:	08006528 	.word	0x08006528
 80040a8:	08006528 	.word	0x08006528
 80040ac:	08006528 	.word	0x08006528
 80040b0:	0800652c 	.word	0x0800652c

080040b4 <__retarget_lock_init_recursive>:
 80040b4:	4770      	bx	lr

080040b6 <__retarget_lock_acquire_recursive>:
 80040b6:	4770      	bx	lr

080040b8 <__retarget_lock_release_recursive>:
 80040b8:	4770      	bx	lr

080040ba <memchr>:
 80040ba:	4603      	mov	r3, r0
 80040bc:	b510      	push	{r4, lr}
 80040be:	b2c9      	uxtb	r1, r1
 80040c0:	4402      	add	r2, r0
 80040c2:	4293      	cmp	r3, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	d101      	bne.n	80040cc <memchr+0x12>
 80040c8:	2000      	movs	r0, #0
 80040ca:	e003      	b.n	80040d4 <memchr+0x1a>
 80040cc:	7804      	ldrb	r4, [r0, #0]
 80040ce:	3301      	adds	r3, #1
 80040d0:	428c      	cmp	r4, r1
 80040d2:	d1f6      	bne.n	80040c2 <memchr+0x8>
 80040d4:	bd10      	pop	{r4, pc}

080040d6 <quorem>:
 80040d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040da:	6903      	ldr	r3, [r0, #16]
 80040dc:	690c      	ldr	r4, [r1, #16]
 80040de:	4607      	mov	r7, r0
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	db7e      	blt.n	80041e2 <quorem+0x10c>
 80040e4:	3c01      	subs	r4, #1
 80040e6:	00a3      	lsls	r3, r4, #2
 80040e8:	f100 0514 	add.w	r5, r0, #20
 80040ec:	f101 0814 	add.w	r8, r1, #20
 80040f0:	9300      	str	r3, [sp, #0]
 80040f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80040fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004100:	3301      	adds	r3, #1
 8004102:	429a      	cmp	r2, r3
 8004104:	fbb2 f6f3 	udiv	r6, r2, r3
 8004108:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800410c:	d32e      	bcc.n	800416c <quorem+0x96>
 800410e:	f04f 0a00 	mov.w	sl, #0
 8004112:	46c4      	mov	ip, r8
 8004114:	46ae      	mov	lr, r5
 8004116:	46d3      	mov	fp, sl
 8004118:	f85c 3b04 	ldr.w	r3, [ip], #4
 800411c:	b298      	uxth	r0, r3
 800411e:	fb06 a000 	mla	r0, r6, r0, sl
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	0c02      	lsrs	r2, r0, #16
 8004126:	fb06 2303 	mla	r3, r6, r3, r2
 800412a:	f8de 2000 	ldr.w	r2, [lr]
 800412e:	b280      	uxth	r0, r0
 8004130:	b292      	uxth	r2, r2
 8004132:	1a12      	subs	r2, r2, r0
 8004134:	445a      	add	r2, fp
 8004136:	f8de 0000 	ldr.w	r0, [lr]
 800413a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800413e:	b29b      	uxth	r3, r3
 8004140:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004144:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004148:	b292      	uxth	r2, r2
 800414a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800414e:	45e1      	cmp	r9, ip
 8004150:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004154:	f84e 2b04 	str.w	r2, [lr], #4
 8004158:	d2de      	bcs.n	8004118 <quorem+0x42>
 800415a:	9b00      	ldr	r3, [sp, #0]
 800415c:	58eb      	ldr	r3, [r5, r3]
 800415e:	b92b      	cbnz	r3, 800416c <quorem+0x96>
 8004160:	9b01      	ldr	r3, [sp, #4]
 8004162:	3b04      	subs	r3, #4
 8004164:	429d      	cmp	r5, r3
 8004166:	461a      	mov	r2, r3
 8004168:	d32f      	bcc.n	80041ca <quorem+0xf4>
 800416a:	613c      	str	r4, [r7, #16]
 800416c:	4638      	mov	r0, r7
 800416e:	f001 f979 	bl	8005464 <__mcmp>
 8004172:	2800      	cmp	r0, #0
 8004174:	db25      	blt.n	80041c2 <quorem+0xec>
 8004176:	4629      	mov	r1, r5
 8004178:	2000      	movs	r0, #0
 800417a:	f858 2b04 	ldr.w	r2, [r8], #4
 800417e:	f8d1 c000 	ldr.w	ip, [r1]
 8004182:	fa1f fe82 	uxth.w	lr, r2
 8004186:	fa1f f38c 	uxth.w	r3, ip
 800418a:	eba3 030e 	sub.w	r3, r3, lr
 800418e:	4403      	add	r3, r0
 8004190:	0c12      	lsrs	r2, r2, #16
 8004192:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004196:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800419a:	b29b      	uxth	r3, r3
 800419c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041a0:	45c1      	cmp	r9, r8
 80041a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80041a6:	f841 3b04 	str.w	r3, [r1], #4
 80041aa:	d2e6      	bcs.n	800417a <quorem+0xa4>
 80041ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80041b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80041b4:	b922      	cbnz	r2, 80041c0 <quorem+0xea>
 80041b6:	3b04      	subs	r3, #4
 80041b8:	429d      	cmp	r5, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	d30b      	bcc.n	80041d6 <quorem+0x100>
 80041be:	613c      	str	r4, [r7, #16]
 80041c0:	3601      	adds	r6, #1
 80041c2:	4630      	mov	r0, r6
 80041c4:	b003      	add	sp, #12
 80041c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041ca:	6812      	ldr	r2, [r2, #0]
 80041cc:	3b04      	subs	r3, #4
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	d1cb      	bne.n	800416a <quorem+0x94>
 80041d2:	3c01      	subs	r4, #1
 80041d4:	e7c6      	b.n	8004164 <quorem+0x8e>
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	3b04      	subs	r3, #4
 80041da:	2a00      	cmp	r2, #0
 80041dc:	d1ef      	bne.n	80041be <quorem+0xe8>
 80041de:	3c01      	subs	r4, #1
 80041e0:	e7ea      	b.n	80041b8 <quorem+0xe2>
 80041e2:	2000      	movs	r0, #0
 80041e4:	e7ee      	b.n	80041c4 <quorem+0xee>
	...

080041e8 <_dtoa_r>:
 80041e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ec:	4614      	mov	r4, r2
 80041ee:	461d      	mov	r5, r3
 80041f0:	69c7      	ldr	r7, [r0, #28]
 80041f2:	b097      	sub	sp, #92	@ 0x5c
 80041f4:	4683      	mov	fp, r0
 80041f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80041fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80041fc:	b97f      	cbnz	r7, 800421e <_dtoa_r+0x36>
 80041fe:	2010      	movs	r0, #16
 8004200:	f000 fe02 	bl	8004e08 <malloc>
 8004204:	4602      	mov	r2, r0
 8004206:	f8cb 001c 	str.w	r0, [fp, #28]
 800420a:	b920      	cbnz	r0, 8004216 <_dtoa_r+0x2e>
 800420c:	21ef      	movs	r1, #239	@ 0xef
 800420e:	4ba8      	ldr	r3, [pc, #672]	@ (80044b0 <_dtoa_r+0x2c8>)
 8004210:	48a8      	ldr	r0, [pc, #672]	@ (80044b4 <_dtoa_r+0x2cc>)
 8004212:	f001 fc67 	bl	8005ae4 <__assert_func>
 8004216:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800421a:	6007      	str	r7, [r0, #0]
 800421c:	60c7      	str	r7, [r0, #12]
 800421e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	b159      	cbz	r1, 800423e <_dtoa_r+0x56>
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	2301      	movs	r3, #1
 800422a:	4093      	lsls	r3, r2
 800422c:	604a      	str	r2, [r1, #4]
 800422e:	608b      	str	r3, [r1, #8]
 8004230:	4658      	mov	r0, fp
 8004232:	f000 fedf 	bl	8004ff4 <_Bfree>
 8004236:	2200      	movs	r2, #0
 8004238:	f8db 301c 	ldr.w	r3, [fp, #28]
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	1e2b      	subs	r3, r5, #0
 8004240:	bfaf      	iteee	ge
 8004242:	2300      	movge	r3, #0
 8004244:	2201      	movlt	r2, #1
 8004246:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800424a:	9303      	strlt	r3, [sp, #12]
 800424c:	bfa8      	it	ge
 800424e:	6033      	strge	r3, [r6, #0]
 8004250:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004254:	4b98      	ldr	r3, [pc, #608]	@ (80044b8 <_dtoa_r+0x2d0>)
 8004256:	bfb8      	it	lt
 8004258:	6032      	strlt	r2, [r6, #0]
 800425a:	ea33 0308 	bics.w	r3, r3, r8
 800425e:	d112      	bne.n	8004286 <_dtoa_r+0x9e>
 8004260:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004264:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800426c:	4323      	orrs	r3, r4
 800426e:	f000 8550 	beq.w	8004d12 <_dtoa_r+0xb2a>
 8004272:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004274:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80044bc <_dtoa_r+0x2d4>
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8552 	beq.w	8004d22 <_dtoa_r+0xb3a>
 800427e:	f10a 0303 	add.w	r3, sl, #3
 8004282:	f000 bd4c 	b.w	8004d1e <_dtoa_r+0xb36>
 8004286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800428a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800428e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004292:	2200      	movs	r2, #0
 8004294:	2300      	movs	r3, #0
 8004296:	f7fc fb87 	bl	80009a8 <__aeabi_dcmpeq>
 800429a:	4607      	mov	r7, r0
 800429c:	b158      	cbz	r0, 80042b6 <_dtoa_r+0xce>
 800429e:	2301      	movs	r3, #1
 80042a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80042a6:	b113      	cbz	r3, 80042ae <_dtoa_r+0xc6>
 80042a8:	4b85      	ldr	r3, [pc, #532]	@ (80044c0 <_dtoa_r+0x2d8>)
 80042aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80044c4 <_dtoa_r+0x2dc>
 80042b2:	f000 bd36 	b.w	8004d22 <_dtoa_r+0xb3a>
 80042b6:	ab14      	add	r3, sp, #80	@ 0x50
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	ab15      	add	r3, sp, #84	@ 0x54
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	4658      	mov	r0, fp
 80042c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80042c4:	f001 f97e 	bl	80055c4 <__d2b>
 80042c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80042cc:	4681      	mov	r9, r0
 80042ce:	2e00      	cmp	r6, #0
 80042d0:	d077      	beq.n	80043c2 <_dtoa_r+0x1da>
 80042d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80042d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80042d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80042dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80042e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80042e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80042ea:	4619      	mov	r1, r3
 80042ec:	2200      	movs	r2, #0
 80042ee:	4b76      	ldr	r3, [pc, #472]	@ (80044c8 <_dtoa_r+0x2e0>)
 80042f0:	f7fb ff3a 	bl	8000168 <__aeabi_dsub>
 80042f4:	a368      	add	r3, pc, #416	@ (adr r3, 8004498 <_dtoa_r+0x2b0>)
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f7fc f8ed 	bl	80004d8 <__aeabi_dmul>
 80042fe:	a368      	add	r3, pc, #416	@ (adr r3, 80044a0 <_dtoa_r+0x2b8>)
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f7fb ff32 	bl	800016c <__adddf3>
 8004308:	4604      	mov	r4, r0
 800430a:	4630      	mov	r0, r6
 800430c:	460d      	mov	r5, r1
 800430e:	f7fc f879 	bl	8000404 <__aeabi_i2d>
 8004312:	a365      	add	r3, pc, #404	@ (adr r3, 80044a8 <_dtoa_r+0x2c0>)
 8004314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004318:	f7fc f8de 	bl	80004d8 <__aeabi_dmul>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4620      	mov	r0, r4
 8004322:	4629      	mov	r1, r5
 8004324:	f7fb ff22 	bl	800016c <__adddf3>
 8004328:	4604      	mov	r4, r0
 800432a:	460d      	mov	r5, r1
 800432c:	f7fc fb84 	bl	8000a38 <__aeabi_d2iz>
 8004330:	2200      	movs	r2, #0
 8004332:	4607      	mov	r7, r0
 8004334:	2300      	movs	r3, #0
 8004336:	4620      	mov	r0, r4
 8004338:	4629      	mov	r1, r5
 800433a:	f7fc fb3f 	bl	80009bc <__aeabi_dcmplt>
 800433e:	b140      	cbz	r0, 8004352 <_dtoa_r+0x16a>
 8004340:	4638      	mov	r0, r7
 8004342:	f7fc f85f 	bl	8000404 <__aeabi_i2d>
 8004346:	4622      	mov	r2, r4
 8004348:	462b      	mov	r3, r5
 800434a:	f7fc fb2d 	bl	80009a8 <__aeabi_dcmpeq>
 800434e:	b900      	cbnz	r0, 8004352 <_dtoa_r+0x16a>
 8004350:	3f01      	subs	r7, #1
 8004352:	2f16      	cmp	r7, #22
 8004354:	d853      	bhi.n	80043fe <_dtoa_r+0x216>
 8004356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800435a:	4b5c      	ldr	r3, [pc, #368]	@ (80044cc <_dtoa_r+0x2e4>)
 800435c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	f7fc fb2a 	bl	80009bc <__aeabi_dcmplt>
 8004368:	2800      	cmp	r0, #0
 800436a:	d04a      	beq.n	8004402 <_dtoa_r+0x21a>
 800436c:	2300      	movs	r3, #0
 800436e:	3f01      	subs	r7, #1
 8004370:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004372:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004374:	1b9b      	subs	r3, r3, r6
 8004376:	1e5a      	subs	r2, r3, #1
 8004378:	bf46      	itte	mi
 800437a:	f1c3 0801 	rsbmi	r8, r3, #1
 800437e:	2300      	movmi	r3, #0
 8004380:	f04f 0800 	movpl.w	r8, #0
 8004384:	9209      	str	r2, [sp, #36]	@ 0x24
 8004386:	bf48      	it	mi
 8004388:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800438a:	2f00      	cmp	r7, #0
 800438c:	db3b      	blt.n	8004406 <_dtoa_r+0x21e>
 800438e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004390:	970e      	str	r7, [sp, #56]	@ 0x38
 8004392:	443b      	add	r3, r7
 8004394:	9309      	str	r3, [sp, #36]	@ 0x24
 8004396:	2300      	movs	r3, #0
 8004398:	930a      	str	r3, [sp, #40]	@ 0x28
 800439a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800439c:	2b09      	cmp	r3, #9
 800439e:	d866      	bhi.n	800446e <_dtoa_r+0x286>
 80043a0:	2b05      	cmp	r3, #5
 80043a2:	bfc4      	itt	gt
 80043a4:	3b04      	subgt	r3, #4
 80043a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80043a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043aa:	bfc8      	it	gt
 80043ac:	2400      	movgt	r4, #0
 80043ae:	f1a3 0302 	sub.w	r3, r3, #2
 80043b2:	bfd8      	it	le
 80043b4:	2401      	movle	r4, #1
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d864      	bhi.n	8004484 <_dtoa_r+0x29c>
 80043ba:	e8df f003 	tbb	[pc, r3]
 80043be:	382b      	.short	0x382b
 80043c0:	5636      	.short	0x5636
 80043c2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80043c6:	441e      	add	r6, r3
 80043c8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	bfc1      	itttt	gt
 80043d0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80043d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80043d8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80043dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80043e0:	bfd6      	itet	le
 80043e2:	f1c3 0320 	rsble	r3, r3, #32
 80043e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80043ea:	fa04 f003 	lslle.w	r0, r4, r3
 80043ee:	f7fb fff9 	bl	80003e4 <__aeabi_ui2d>
 80043f2:	2201      	movs	r2, #1
 80043f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80043f8:	3e01      	subs	r6, #1
 80043fa:	9212      	str	r2, [sp, #72]	@ 0x48
 80043fc:	e775      	b.n	80042ea <_dtoa_r+0x102>
 80043fe:	2301      	movs	r3, #1
 8004400:	e7b6      	b.n	8004370 <_dtoa_r+0x188>
 8004402:	900f      	str	r0, [sp, #60]	@ 0x3c
 8004404:	e7b5      	b.n	8004372 <_dtoa_r+0x18a>
 8004406:	427b      	negs	r3, r7
 8004408:	930a      	str	r3, [sp, #40]	@ 0x28
 800440a:	2300      	movs	r3, #0
 800440c:	eba8 0807 	sub.w	r8, r8, r7
 8004410:	930e      	str	r3, [sp, #56]	@ 0x38
 8004412:	e7c2      	b.n	800439a <_dtoa_r+0x1b2>
 8004414:	2300      	movs	r3, #0
 8004416:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004418:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800441a:	2b00      	cmp	r3, #0
 800441c:	dc35      	bgt.n	800448a <_dtoa_r+0x2a2>
 800441e:	2301      	movs	r3, #1
 8004420:	461a      	mov	r2, r3
 8004422:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004426:	9221      	str	r2, [sp, #132]	@ 0x84
 8004428:	e00b      	b.n	8004442 <_dtoa_r+0x25a>
 800442a:	2301      	movs	r3, #1
 800442c:	e7f3      	b.n	8004416 <_dtoa_r+0x22e>
 800442e:	2300      	movs	r3, #0
 8004430:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004432:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	9308      	str	r3, [sp, #32]
 8004438:	3301      	adds	r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	9307      	str	r3, [sp, #28]
 800443e:	bfb8      	it	lt
 8004440:	2301      	movlt	r3, #1
 8004442:	2100      	movs	r1, #0
 8004444:	2204      	movs	r2, #4
 8004446:	f8db 001c 	ldr.w	r0, [fp, #28]
 800444a:	f102 0514 	add.w	r5, r2, #20
 800444e:	429d      	cmp	r5, r3
 8004450:	d91f      	bls.n	8004492 <_dtoa_r+0x2aa>
 8004452:	6041      	str	r1, [r0, #4]
 8004454:	4658      	mov	r0, fp
 8004456:	f000 fd8d 	bl	8004f74 <_Balloc>
 800445a:	4682      	mov	sl, r0
 800445c:	2800      	cmp	r0, #0
 800445e:	d139      	bne.n	80044d4 <_dtoa_r+0x2ec>
 8004460:	4602      	mov	r2, r0
 8004462:	f240 11af 	movw	r1, #431	@ 0x1af
 8004466:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <_dtoa_r+0x2e8>)
 8004468:	e6d2      	b.n	8004210 <_dtoa_r+0x28>
 800446a:	2301      	movs	r3, #1
 800446c:	e7e0      	b.n	8004430 <_dtoa_r+0x248>
 800446e:	2401      	movs	r4, #1
 8004470:	2300      	movs	r3, #0
 8004472:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004474:	9320      	str	r3, [sp, #128]	@ 0x80
 8004476:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800447a:	2200      	movs	r2, #0
 800447c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004480:	2312      	movs	r3, #18
 8004482:	e7d0      	b.n	8004426 <_dtoa_r+0x23e>
 8004484:	2301      	movs	r3, #1
 8004486:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004488:	e7f5      	b.n	8004476 <_dtoa_r+0x28e>
 800448a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800448c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004490:	e7d7      	b.n	8004442 <_dtoa_r+0x25a>
 8004492:	3101      	adds	r1, #1
 8004494:	0052      	lsls	r2, r2, #1
 8004496:	e7d8      	b.n	800444a <_dtoa_r+0x262>
 8004498:	636f4361 	.word	0x636f4361
 800449c:	3fd287a7 	.word	0x3fd287a7
 80044a0:	8b60c8b3 	.word	0x8b60c8b3
 80044a4:	3fc68a28 	.word	0x3fc68a28
 80044a8:	509f79fb 	.word	0x509f79fb
 80044ac:	3fd34413 	.word	0x3fd34413
 80044b0:	080061ed 	.word	0x080061ed
 80044b4:	08006204 	.word	0x08006204
 80044b8:	7ff00000 	.word	0x7ff00000
 80044bc:	080061e9 	.word	0x080061e9
 80044c0:	080061bd 	.word	0x080061bd
 80044c4:	080061bc 	.word	0x080061bc
 80044c8:	3ff80000 	.word	0x3ff80000
 80044cc:	08006300 	.word	0x08006300
 80044d0:	0800625c 	.word	0x0800625c
 80044d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044d8:	6018      	str	r0, [r3, #0]
 80044da:	9b07      	ldr	r3, [sp, #28]
 80044dc:	2b0e      	cmp	r3, #14
 80044de:	f200 80a4 	bhi.w	800462a <_dtoa_r+0x442>
 80044e2:	2c00      	cmp	r4, #0
 80044e4:	f000 80a1 	beq.w	800462a <_dtoa_r+0x442>
 80044e8:	2f00      	cmp	r7, #0
 80044ea:	dd33      	ble.n	8004554 <_dtoa_r+0x36c>
 80044ec:	4b86      	ldr	r3, [pc, #536]	@ (8004708 <_dtoa_r+0x520>)
 80044ee:	f007 020f 	and.w	r2, r7, #15
 80044f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044f6:	05f8      	lsls	r0, r7, #23
 80044f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004504:	d516      	bpl.n	8004534 <_dtoa_r+0x34c>
 8004506:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800450a:	4b80      	ldr	r3, [pc, #512]	@ (800470c <_dtoa_r+0x524>)
 800450c:	2603      	movs	r6, #3
 800450e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004512:	f7fc f90b 	bl	800072c <__aeabi_ddiv>
 8004516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800451a:	f004 040f 	and.w	r4, r4, #15
 800451e:	4d7b      	ldr	r5, [pc, #492]	@ (800470c <_dtoa_r+0x524>)
 8004520:	b954      	cbnz	r4, 8004538 <_dtoa_r+0x350>
 8004522:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004526:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800452a:	f7fc f8ff 	bl	800072c <__aeabi_ddiv>
 800452e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004532:	e028      	b.n	8004586 <_dtoa_r+0x39e>
 8004534:	2602      	movs	r6, #2
 8004536:	e7f2      	b.n	800451e <_dtoa_r+0x336>
 8004538:	07e1      	lsls	r1, r4, #31
 800453a:	d508      	bpl.n	800454e <_dtoa_r+0x366>
 800453c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004544:	f7fb ffc8 	bl	80004d8 <__aeabi_dmul>
 8004548:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800454c:	3601      	adds	r6, #1
 800454e:	1064      	asrs	r4, r4, #1
 8004550:	3508      	adds	r5, #8
 8004552:	e7e5      	b.n	8004520 <_dtoa_r+0x338>
 8004554:	f000 80d2 	beq.w	80046fc <_dtoa_r+0x514>
 8004558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800455c:	427c      	negs	r4, r7
 800455e:	4b6a      	ldr	r3, [pc, #424]	@ (8004708 <_dtoa_r+0x520>)
 8004560:	f004 020f 	and.w	r2, r4, #15
 8004564:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f7fb ffb4 	bl	80004d8 <__aeabi_dmul>
 8004570:	2602      	movs	r6, #2
 8004572:	2300      	movs	r3, #0
 8004574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004578:	4d64      	ldr	r5, [pc, #400]	@ (800470c <_dtoa_r+0x524>)
 800457a:	1124      	asrs	r4, r4, #4
 800457c:	2c00      	cmp	r4, #0
 800457e:	f040 80b2 	bne.w	80046e6 <_dtoa_r+0x4fe>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1d3      	bne.n	800452e <_dtoa_r+0x346>
 8004586:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800458a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80b7 	beq.w	8004700 <_dtoa_r+0x518>
 8004592:	2200      	movs	r2, #0
 8004594:	4620      	mov	r0, r4
 8004596:	4629      	mov	r1, r5
 8004598:	4b5d      	ldr	r3, [pc, #372]	@ (8004710 <_dtoa_r+0x528>)
 800459a:	f7fc fa0f 	bl	80009bc <__aeabi_dcmplt>
 800459e:	2800      	cmp	r0, #0
 80045a0:	f000 80ae 	beq.w	8004700 <_dtoa_r+0x518>
 80045a4:	9b07      	ldr	r3, [sp, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80aa 	beq.w	8004700 <_dtoa_r+0x518>
 80045ac:	9b08      	ldr	r3, [sp, #32]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	dd37      	ble.n	8004622 <_dtoa_r+0x43a>
 80045b2:	1e7b      	subs	r3, r7, #1
 80045b4:	4620      	mov	r0, r4
 80045b6:	9304      	str	r3, [sp, #16]
 80045b8:	2200      	movs	r2, #0
 80045ba:	4629      	mov	r1, r5
 80045bc:	4b55      	ldr	r3, [pc, #340]	@ (8004714 <_dtoa_r+0x52c>)
 80045be:	f7fb ff8b 	bl	80004d8 <__aeabi_dmul>
 80045c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045c6:	9c08      	ldr	r4, [sp, #32]
 80045c8:	3601      	adds	r6, #1
 80045ca:	4630      	mov	r0, r6
 80045cc:	f7fb ff1a 	bl	8000404 <__aeabi_i2d>
 80045d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045d4:	f7fb ff80 	bl	80004d8 <__aeabi_dmul>
 80045d8:	2200      	movs	r2, #0
 80045da:	4b4f      	ldr	r3, [pc, #316]	@ (8004718 <_dtoa_r+0x530>)
 80045dc:	f7fb fdc6 	bl	800016c <__adddf3>
 80045e0:	4605      	mov	r5, r0
 80045e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80045e6:	2c00      	cmp	r4, #0
 80045e8:	f040 809a 	bne.w	8004720 <_dtoa_r+0x538>
 80045ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f0:	2200      	movs	r2, #0
 80045f2:	4b4a      	ldr	r3, [pc, #296]	@ (800471c <_dtoa_r+0x534>)
 80045f4:	f7fb fdb8 	bl	8000168 <__aeabi_dsub>
 80045f8:	4602      	mov	r2, r0
 80045fa:	460b      	mov	r3, r1
 80045fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004600:	462a      	mov	r2, r5
 8004602:	4633      	mov	r3, r6
 8004604:	f7fc f9f8 	bl	80009f8 <__aeabi_dcmpgt>
 8004608:	2800      	cmp	r0, #0
 800460a:	f040 828e 	bne.w	8004b2a <_dtoa_r+0x942>
 800460e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004612:	462a      	mov	r2, r5
 8004614:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004618:	f7fc f9d0 	bl	80009bc <__aeabi_dcmplt>
 800461c:	2800      	cmp	r0, #0
 800461e:	f040 8127 	bne.w	8004870 <_dtoa_r+0x688>
 8004622:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004626:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800462a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800462c:	2b00      	cmp	r3, #0
 800462e:	f2c0 8163 	blt.w	80048f8 <_dtoa_r+0x710>
 8004632:	2f0e      	cmp	r7, #14
 8004634:	f300 8160 	bgt.w	80048f8 <_dtoa_r+0x710>
 8004638:	4b33      	ldr	r3, [pc, #204]	@ (8004708 <_dtoa_r+0x520>)
 800463a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800463e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004642:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004646:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004648:	2b00      	cmp	r3, #0
 800464a:	da03      	bge.n	8004654 <_dtoa_r+0x46c>
 800464c:	9b07      	ldr	r3, [sp, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f340 8100 	ble.w	8004854 <_dtoa_r+0x66c>
 8004654:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004658:	4656      	mov	r6, sl
 800465a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800465e:	4620      	mov	r0, r4
 8004660:	4629      	mov	r1, r5
 8004662:	f7fc f863 	bl	800072c <__aeabi_ddiv>
 8004666:	f7fc f9e7 	bl	8000a38 <__aeabi_d2iz>
 800466a:	4680      	mov	r8, r0
 800466c:	f7fb feca 	bl	8000404 <__aeabi_i2d>
 8004670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004674:	f7fb ff30 	bl	80004d8 <__aeabi_dmul>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4620      	mov	r0, r4
 800467e:	4629      	mov	r1, r5
 8004680:	f7fb fd72 	bl	8000168 <__aeabi_dsub>
 8004684:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004688:	9d07      	ldr	r5, [sp, #28]
 800468a:	f806 4b01 	strb.w	r4, [r6], #1
 800468e:	eba6 040a 	sub.w	r4, r6, sl
 8004692:	42a5      	cmp	r5, r4
 8004694:	4602      	mov	r2, r0
 8004696:	460b      	mov	r3, r1
 8004698:	f040 8116 	bne.w	80048c8 <_dtoa_r+0x6e0>
 800469c:	f7fb fd66 	bl	800016c <__adddf3>
 80046a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046a4:	4604      	mov	r4, r0
 80046a6:	460d      	mov	r5, r1
 80046a8:	f7fc f9a6 	bl	80009f8 <__aeabi_dcmpgt>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	f040 80f8 	bne.w	80048a2 <_dtoa_r+0x6ba>
 80046b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b6:	4620      	mov	r0, r4
 80046b8:	4629      	mov	r1, r5
 80046ba:	f7fc f975 	bl	80009a8 <__aeabi_dcmpeq>
 80046be:	b118      	cbz	r0, 80046c8 <_dtoa_r+0x4e0>
 80046c0:	f018 0f01 	tst.w	r8, #1
 80046c4:	f040 80ed 	bne.w	80048a2 <_dtoa_r+0x6ba>
 80046c8:	4649      	mov	r1, r9
 80046ca:	4658      	mov	r0, fp
 80046cc:	f000 fc92 	bl	8004ff4 <_Bfree>
 80046d0:	2300      	movs	r3, #0
 80046d2:	7033      	strb	r3, [r6, #0]
 80046d4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80046d6:	3701      	adds	r7, #1
 80046d8:	601f      	str	r7, [r3, #0]
 80046da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8320 	beq.w	8004d22 <_dtoa_r+0xb3a>
 80046e2:	601e      	str	r6, [r3, #0]
 80046e4:	e31d      	b.n	8004d22 <_dtoa_r+0xb3a>
 80046e6:	07e2      	lsls	r2, r4, #31
 80046e8:	d505      	bpl.n	80046f6 <_dtoa_r+0x50e>
 80046ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80046ee:	f7fb fef3 	bl	80004d8 <__aeabi_dmul>
 80046f2:	2301      	movs	r3, #1
 80046f4:	3601      	adds	r6, #1
 80046f6:	1064      	asrs	r4, r4, #1
 80046f8:	3508      	adds	r5, #8
 80046fa:	e73f      	b.n	800457c <_dtoa_r+0x394>
 80046fc:	2602      	movs	r6, #2
 80046fe:	e742      	b.n	8004586 <_dtoa_r+0x39e>
 8004700:	9c07      	ldr	r4, [sp, #28]
 8004702:	9704      	str	r7, [sp, #16]
 8004704:	e761      	b.n	80045ca <_dtoa_r+0x3e2>
 8004706:	bf00      	nop
 8004708:	08006300 	.word	0x08006300
 800470c:	080062d8 	.word	0x080062d8
 8004710:	3ff00000 	.word	0x3ff00000
 8004714:	40240000 	.word	0x40240000
 8004718:	401c0000 	.word	0x401c0000
 800471c:	40140000 	.word	0x40140000
 8004720:	4b70      	ldr	r3, [pc, #448]	@ (80048e4 <_dtoa_r+0x6fc>)
 8004722:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004724:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004728:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800472c:	4454      	add	r4, sl
 800472e:	2900      	cmp	r1, #0
 8004730:	d045      	beq.n	80047be <_dtoa_r+0x5d6>
 8004732:	2000      	movs	r0, #0
 8004734:	496c      	ldr	r1, [pc, #432]	@ (80048e8 <_dtoa_r+0x700>)
 8004736:	f7fb fff9 	bl	800072c <__aeabi_ddiv>
 800473a:	4633      	mov	r3, r6
 800473c:	462a      	mov	r2, r5
 800473e:	f7fb fd13 	bl	8000168 <__aeabi_dsub>
 8004742:	4656      	mov	r6, sl
 8004744:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800474c:	f7fc f974 	bl	8000a38 <__aeabi_d2iz>
 8004750:	4605      	mov	r5, r0
 8004752:	f7fb fe57 	bl	8000404 <__aeabi_i2d>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800475e:	f7fb fd03 	bl	8000168 <__aeabi_dsub>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	3530      	adds	r5, #48	@ 0x30
 8004768:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800476c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004770:	f806 5b01 	strb.w	r5, [r6], #1
 8004774:	f7fc f922 	bl	80009bc <__aeabi_dcmplt>
 8004778:	2800      	cmp	r0, #0
 800477a:	d163      	bne.n	8004844 <_dtoa_r+0x65c>
 800477c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004780:	2000      	movs	r0, #0
 8004782:	495a      	ldr	r1, [pc, #360]	@ (80048ec <_dtoa_r+0x704>)
 8004784:	f7fb fcf0 	bl	8000168 <__aeabi_dsub>
 8004788:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800478c:	f7fc f916 	bl	80009bc <__aeabi_dcmplt>
 8004790:	2800      	cmp	r0, #0
 8004792:	f040 8087 	bne.w	80048a4 <_dtoa_r+0x6bc>
 8004796:	42a6      	cmp	r6, r4
 8004798:	f43f af43 	beq.w	8004622 <_dtoa_r+0x43a>
 800479c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80047a0:	2200      	movs	r2, #0
 80047a2:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <_dtoa_r+0x708>)
 80047a4:	f7fb fe98 	bl	80004d8 <__aeabi_dmul>
 80047a8:	2200      	movs	r2, #0
 80047aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047b2:	4b4f      	ldr	r3, [pc, #316]	@ (80048f0 <_dtoa_r+0x708>)
 80047b4:	f7fb fe90 	bl	80004d8 <__aeabi_dmul>
 80047b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047bc:	e7c4      	b.n	8004748 <_dtoa_r+0x560>
 80047be:	4631      	mov	r1, r6
 80047c0:	4628      	mov	r0, r5
 80047c2:	f7fb fe89 	bl	80004d8 <__aeabi_dmul>
 80047c6:	4656      	mov	r6, sl
 80047c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80047cc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80047ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047d2:	f7fc f931 	bl	8000a38 <__aeabi_d2iz>
 80047d6:	4605      	mov	r5, r0
 80047d8:	f7fb fe14 	bl	8000404 <__aeabi_i2d>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047e4:	f7fb fcc0 	bl	8000168 <__aeabi_dsub>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	3530      	adds	r5, #48	@ 0x30
 80047ee:	f806 5b01 	strb.w	r5, [r6], #1
 80047f2:	42a6      	cmp	r6, r4
 80047f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	d124      	bne.n	8004848 <_dtoa_r+0x660>
 80047fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004802:	4b39      	ldr	r3, [pc, #228]	@ (80048e8 <_dtoa_r+0x700>)
 8004804:	f7fb fcb2 	bl	800016c <__adddf3>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004810:	f7fc f8f2 	bl	80009f8 <__aeabi_dcmpgt>
 8004814:	2800      	cmp	r0, #0
 8004816:	d145      	bne.n	80048a4 <_dtoa_r+0x6bc>
 8004818:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800481c:	2000      	movs	r0, #0
 800481e:	4932      	ldr	r1, [pc, #200]	@ (80048e8 <_dtoa_r+0x700>)
 8004820:	f7fb fca2 	bl	8000168 <__aeabi_dsub>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800482c:	f7fc f8c6 	bl	80009bc <__aeabi_dcmplt>
 8004830:	2800      	cmp	r0, #0
 8004832:	f43f aef6 	beq.w	8004622 <_dtoa_r+0x43a>
 8004836:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004838:	1e73      	subs	r3, r6, #1
 800483a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800483c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004840:	2b30      	cmp	r3, #48	@ 0x30
 8004842:	d0f8      	beq.n	8004836 <_dtoa_r+0x64e>
 8004844:	9f04      	ldr	r7, [sp, #16]
 8004846:	e73f      	b.n	80046c8 <_dtoa_r+0x4e0>
 8004848:	4b29      	ldr	r3, [pc, #164]	@ (80048f0 <_dtoa_r+0x708>)
 800484a:	f7fb fe45 	bl	80004d8 <__aeabi_dmul>
 800484e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004852:	e7bc      	b.n	80047ce <_dtoa_r+0x5e6>
 8004854:	d10c      	bne.n	8004870 <_dtoa_r+0x688>
 8004856:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800485a:	2200      	movs	r2, #0
 800485c:	4b25      	ldr	r3, [pc, #148]	@ (80048f4 <_dtoa_r+0x70c>)
 800485e:	f7fb fe3b 	bl	80004d8 <__aeabi_dmul>
 8004862:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004866:	f7fc f8bd 	bl	80009e4 <__aeabi_dcmpge>
 800486a:	2800      	cmp	r0, #0
 800486c:	f000 815b 	beq.w	8004b26 <_dtoa_r+0x93e>
 8004870:	2400      	movs	r4, #0
 8004872:	4625      	mov	r5, r4
 8004874:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004876:	4656      	mov	r6, sl
 8004878:	43db      	mvns	r3, r3
 800487a:	9304      	str	r3, [sp, #16]
 800487c:	2700      	movs	r7, #0
 800487e:	4621      	mov	r1, r4
 8004880:	4658      	mov	r0, fp
 8004882:	f000 fbb7 	bl	8004ff4 <_Bfree>
 8004886:	2d00      	cmp	r5, #0
 8004888:	d0dc      	beq.n	8004844 <_dtoa_r+0x65c>
 800488a:	b12f      	cbz	r7, 8004898 <_dtoa_r+0x6b0>
 800488c:	42af      	cmp	r7, r5
 800488e:	d003      	beq.n	8004898 <_dtoa_r+0x6b0>
 8004890:	4639      	mov	r1, r7
 8004892:	4658      	mov	r0, fp
 8004894:	f000 fbae 	bl	8004ff4 <_Bfree>
 8004898:	4629      	mov	r1, r5
 800489a:	4658      	mov	r0, fp
 800489c:	f000 fbaa 	bl	8004ff4 <_Bfree>
 80048a0:	e7d0      	b.n	8004844 <_dtoa_r+0x65c>
 80048a2:	9704      	str	r7, [sp, #16]
 80048a4:	4633      	mov	r3, r6
 80048a6:	461e      	mov	r6, r3
 80048a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80048ac:	2a39      	cmp	r2, #57	@ 0x39
 80048ae:	d107      	bne.n	80048c0 <_dtoa_r+0x6d8>
 80048b0:	459a      	cmp	sl, r3
 80048b2:	d1f8      	bne.n	80048a6 <_dtoa_r+0x6be>
 80048b4:	9a04      	ldr	r2, [sp, #16]
 80048b6:	3201      	adds	r2, #1
 80048b8:	9204      	str	r2, [sp, #16]
 80048ba:	2230      	movs	r2, #48	@ 0x30
 80048bc:	f88a 2000 	strb.w	r2, [sl]
 80048c0:	781a      	ldrb	r2, [r3, #0]
 80048c2:	3201      	adds	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	e7bd      	b.n	8004844 <_dtoa_r+0x65c>
 80048c8:	2200      	movs	r2, #0
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <_dtoa_r+0x708>)
 80048cc:	f7fb fe04 	bl	80004d8 <__aeabi_dmul>
 80048d0:	2200      	movs	r2, #0
 80048d2:	2300      	movs	r3, #0
 80048d4:	4604      	mov	r4, r0
 80048d6:	460d      	mov	r5, r1
 80048d8:	f7fc f866 	bl	80009a8 <__aeabi_dcmpeq>
 80048dc:	2800      	cmp	r0, #0
 80048de:	f43f aebc 	beq.w	800465a <_dtoa_r+0x472>
 80048e2:	e6f1      	b.n	80046c8 <_dtoa_r+0x4e0>
 80048e4:	08006300 	.word	0x08006300
 80048e8:	3fe00000 	.word	0x3fe00000
 80048ec:	3ff00000 	.word	0x3ff00000
 80048f0:	40240000 	.word	0x40240000
 80048f4:	40140000 	.word	0x40140000
 80048f8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80048fa:	2a00      	cmp	r2, #0
 80048fc:	f000 80db 	beq.w	8004ab6 <_dtoa_r+0x8ce>
 8004900:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004902:	2a01      	cmp	r2, #1
 8004904:	f300 80bf 	bgt.w	8004a86 <_dtoa_r+0x89e>
 8004908:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800490a:	2a00      	cmp	r2, #0
 800490c:	f000 80b7 	beq.w	8004a7e <_dtoa_r+0x896>
 8004910:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004914:	4646      	mov	r6, r8
 8004916:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004918:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800491a:	2101      	movs	r1, #1
 800491c:	441a      	add	r2, r3
 800491e:	4658      	mov	r0, fp
 8004920:	4498      	add	r8, r3
 8004922:	9209      	str	r2, [sp, #36]	@ 0x24
 8004924:	f000 fc1a 	bl	800515c <__i2b>
 8004928:	4605      	mov	r5, r0
 800492a:	b15e      	cbz	r6, 8004944 <_dtoa_r+0x75c>
 800492c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492e:	2b00      	cmp	r3, #0
 8004930:	dd08      	ble.n	8004944 <_dtoa_r+0x75c>
 8004932:	42b3      	cmp	r3, r6
 8004934:	bfa8      	it	ge
 8004936:	4633      	movge	r3, r6
 8004938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800493a:	eba8 0803 	sub.w	r8, r8, r3
 800493e:	1af6      	subs	r6, r6, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	9309      	str	r3, [sp, #36]	@ 0x24
 8004944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004946:	b1f3      	cbz	r3, 8004986 <_dtoa_r+0x79e>
 8004948:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 80b7 	beq.w	8004abe <_dtoa_r+0x8d6>
 8004950:	b18c      	cbz	r4, 8004976 <_dtoa_r+0x78e>
 8004952:	4629      	mov	r1, r5
 8004954:	4622      	mov	r2, r4
 8004956:	4658      	mov	r0, fp
 8004958:	f000 fcbe 	bl	80052d8 <__pow5mult>
 800495c:	464a      	mov	r2, r9
 800495e:	4601      	mov	r1, r0
 8004960:	4605      	mov	r5, r0
 8004962:	4658      	mov	r0, fp
 8004964:	f000 fc10 	bl	8005188 <__multiply>
 8004968:	4649      	mov	r1, r9
 800496a:	9004      	str	r0, [sp, #16]
 800496c:	4658      	mov	r0, fp
 800496e:	f000 fb41 	bl	8004ff4 <_Bfree>
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	4699      	mov	r9, r3
 8004976:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004978:	1b1a      	subs	r2, r3, r4
 800497a:	d004      	beq.n	8004986 <_dtoa_r+0x79e>
 800497c:	4649      	mov	r1, r9
 800497e:	4658      	mov	r0, fp
 8004980:	f000 fcaa 	bl	80052d8 <__pow5mult>
 8004984:	4681      	mov	r9, r0
 8004986:	2101      	movs	r1, #1
 8004988:	4658      	mov	r0, fp
 800498a:	f000 fbe7 	bl	800515c <__i2b>
 800498e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004990:	4604      	mov	r4, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 81c9 	beq.w	8004d2a <_dtoa_r+0xb42>
 8004998:	461a      	mov	r2, r3
 800499a:	4601      	mov	r1, r0
 800499c:	4658      	mov	r0, fp
 800499e:	f000 fc9b 	bl	80052d8 <__pow5mult>
 80049a2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80049a4:	4604      	mov	r4, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	f300 808f 	bgt.w	8004aca <_dtoa_r+0x8e2>
 80049ac:	9b02      	ldr	r3, [sp, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8087 	bne.w	8004ac2 <_dtoa_r+0x8da>
 80049b4:	9b03      	ldr	r3, [sp, #12]
 80049b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 8083 	bne.w	8004ac6 <_dtoa_r+0x8de>
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049c6:	0d1b      	lsrs	r3, r3, #20
 80049c8:	051b      	lsls	r3, r3, #20
 80049ca:	b12b      	cbz	r3, 80049d8 <_dtoa_r+0x7f0>
 80049cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049ce:	f108 0801 	add.w	r8, r8, #1
 80049d2:	3301      	adds	r3, #1
 80049d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d6:	2301      	movs	r3, #1
 80049d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80049da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 81aa 	beq.w	8004d36 <_dtoa_r+0xb4e>
 80049e2:	6923      	ldr	r3, [r4, #16]
 80049e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80049e8:	6918      	ldr	r0, [r3, #16]
 80049ea:	f000 fb6b 	bl	80050c4 <__hi0bits>
 80049ee:	f1c0 0020 	rsb	r0, r0, #32
 80049f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049f4:	4418      	add	r0, r3
 80049f6:	f010 001f 	ands.w	r0, r0, #31
 80049fa:	d071      	beq.n	8004ae0 <_dtoa_r+0x8f8>
 80049fc:	f1c0 0320 	rsb	r3, r0, #32
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	dd65      	ble.n	8004ad0 <_dtoa_r+0x8e8>
 8004a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a06:	f1c0 001c 	rsb	r0, r0, #28
 8004a0a:	4403      	add	r3, r0
 8004a0c:	4480      	add	r8, r0
 8004a0e:	4406      	add	r6, r0
 8004a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a12:	f1b8 0f00 	cmp.w	r8, #0
 8004a16:	dd05      	ble.n	8004a24 <_dtoa_r+0x83c>
 8004a18:	4649      	mov	r1, r9
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	4658      	mov	r0, fp
 8004a1e:	f000 fcb5 	bl	800538c <__lshift>
 8004a22:	4681      	mov	r9, r0
 8004a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	dd05      	ble.n	8004a36 <_dtoa_r+0x84e>
 8004a2a:	4621      	mov	r1, r4
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4658      	mov	r0, fp
 8004a30:	f000 fcac 	bl	800538c <__lshift>
 8004a34:	4604      	mov	r4, r0
 8004a36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d053      	beq.n	8004ae4 <_dtoa_r+0x8fc>
 8004a3c:	4621      	mov	r1, r4
 8004a3e:	4648      	mov	r0, r9
 8004a40:	f000 fd10 	bl	8005464 <__mcmp>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	da4d      	bge.n	8004ae4 <_dtoa_r+0x8fc>
 8004a48:	1e7b      	subs	r3, r7, #1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	220a      	movs	r2, #10
 8004a50:	2300      	movs	r3, #0
 8004a52:	4658      	mov	r0, fp
 8004a54:	f000 faf0 	bl	8005038 <__multadd>
 8004a58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a5a:	4681      	mov	r9, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 816c 	beq.w	8004d3a <_dtoa_r+0xb52>
 8004a62:	2300      	movs	r3, #0
 8004a64:	4629      	mov	r1, r5
 8004a66:	220a      	movs	r2, #10
 8004a68:	4658      	mov	r0, fp
 8004a6a:	f000 fae5 	bl	8005038 <__multadd>
 8004a6e:	9b08      	ldr	r3, [sp, #32]
 8004a70:	4605      	mov	r5, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dc61      	bgt.n	8004b3a <_dtoa_r+0x952>
 8004a76:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	dc3b      	bgt.n	8004af4 <_dtoa_r+0x90c>
 8004a7c:	e05d      	b.n	8004b3a <_dtoa_r+0x952>
 8004a7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004a80:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004a84:	e746      	b.n	8004914 <_dtoa_r+0x72c>
 8004a86:	9b07      	ldr	r3, [sp, #28]
 8004a88:	1e5c      	subs	r4, r3, #1
 8004a8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	bfbf      	itttt	lt
 8004a90:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004a92:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004a94:	1ae3      	sublt	r3, r4, r3
 8004a96:	18d2      	addlt	r2, r2, r3
 8004a98:	bfa8      	it	ge
 8004a9a:	1b1c      	subge	r4, r3, r4
 8004a9c:	9b07      	ldr	r3, [sp, #28]
 8004a9e:	bfbe      	ittt	lt
 8004aa0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004aa2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004aa4:	2400      	movlt	r4, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	bfb5      	itete	lt
 8004aaa:	eba8 0603 	sublt.w	r6, r8, r3
 8004aae:	4646      	movge	r6, r8
 8004ab0:	2300      	movlt	r3, #0
 8004ab2:	9b07      	ldrge	r3, [sp, #28]
 8004ab4:	e730      	b.n	8004918 <_dtoa_r+0x730>
 8004ab6:	4646      	mov	r6, r8
 8004ab8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004aba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004abc:	e735      	b.n	800492a <_dtoa_r+0x742>
 8004abe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ac0:	e75c      	b.n	800497c <_dtoa_r+0x794>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e788      	b.n	80049d8 <_dtoa_r+0x7f0>
 8004ac6:	9b02      	ldr	r3, [sp, #8]
 8004ac8:	e786      	b.n	80049d8 <_dtoa_r+0x7f0>
 8004aca:	2300      	movs	r3, #0
 8004acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ace:	e788      	b.n	80049e2 <_dtoa_r+0x7fa>
 8004ad0:	d09f      	beq.n	8004a12 <_dtoa_r+0x82a>
 8004ad2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ad4:	331c      	adds	r3, #28
 8004ad6:	441a      	add	r2, r3
 8004ad8:	4498      	add	r8, r3
 8004ada:	441e      	add	r6, r3
 8004adc:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ade:	e798      	b.n	8004a12 <_dtoa_r+0x82a>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	e7f6      	b.n	8004ad2 <_dtoa_r+0x8ea>
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	9704      	str	r7, [sp, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	dc20      	bgt.n	8004b2e <_dtoa_r+0x946>
 8004aec:	9308      	str	r3, [sp, #32]
 8004aee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	dd1e      	ble.n	8004b32 <_dtoa_r+0x94a>
 8004af4:	9b08      	ldr	r3, [sp, #32]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f47f aebc 	bne.w	8004874 <_dtoa_r+0x68c>
 8004afc:	4621      	mov	r1, r4
 8004afe:	2205      	movs	r2, #5
 8004b00:	4658      	mov	r0, fp
 8004b02:	f000 fa99 	bl	8005038 <__multadd>
 8004b06:	4601      	mov	r1, r0
 8004b08:	4604      	mov	r4, r0
 8004b0a:	4648      	mov	r0, r9
 8004b0c:	f000 fcaa 	bl	8005464 <__mcmp>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f77f aeaf 	ble.w	8004874 <_dtoa_r+0x68c>
 8004b16:	2331      	movs	r3, #49	@ 0x31
 8004b18:	4656      	mov	r6, sl
 8004b1a:	f806 3b01 	strb.w	r3, [r6], #1
 8004b1e:	9b04      	ldr	r3, [sp, #16]
 8004b20:	3301      	adds	r3, #1
 8004b22:	9304      	str	r3, [sp, #16]
 8004b24:	e6aa      	b.n	800487c <_dtoa_r+0x694>
 8004b26:	9c07      	ldr	r4, [sp, #28]
 8004b28:	9704      	str	r7, [sp, #16]
 8004b2a:	4625      	mov	r5, r4
 8004b2c:	e7f3      	b.n	8004b16 <_dtoa_r+0x92e>
 8004b2e:	9b07      	ldr	r3, [sp, #28]
 8004b30:	9308      	str	r3, [sp, #32]
 8004b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8104 	beq.w	8004d42 <_dtoa_r+0xb5a>
 8004b3a:	2e00      	cmp	r6, #0
 8004b3c:	dd05      	ble.n	8004b4a <_dtoa_r+0x962>
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4632      	mov	r2, r6
 8004b42:	4658      	mov	r0, fp
 8004b44:	f000 fc22 	bl	800538c <__lshift>
 8004b48:	4605      	mov	r5, r0
 8004b4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d05a      	beq.n	8004c06 <_dtoa_r+0xa1e>
 8004b50:	4658      	mov	r0, fp
 8004b52:	6869      	ldr	r1, [r5, #4]
 8004b54:	f000 fa0e 	bl	8004f74 <_Balloc>
 8004b58:	4606      	mov	r6, r0
 8004b5a:	b928      	cbnz	r0, 8004b68 <_dtoa_r+0x980>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004b62:	4b83      	ldr	r3, [pc, #524]	@ (8004d70 <_dtoa_r+0xb88>)
 8004b64:	f7ff bb54 	b.w	8004210 <_dtoa_r+0x28>
 8004b68:	692a      	ldr	r2, [r5, #16]
 8004b6a:	f105 010c 	add.w	r1, r5, #12
 8004b6e:	3202      	adds	r2, #2
 8004b70:	0092      	lsls	r2, r2, #2
 8004b72:	300c      	adds	r0, #12
 8004b74:	f000 ffa8 	bl	8005ac8 <memcpy>
 8004b78:	2201      	movs	r2, #1
 8004b7a:	4631      	mov	r1, r6
 8004b7c:	4658      	mov	r0, fp
 8004b7e:	f000 fc05 	bl	800538c <__lshift>
 8004b82:	462f      	mov	r7, r5
 8004b84:	4605      	mov	r5, r0
 8004b86:	f10a 0301 	add.w	r3, sl, #1
 8004b8a:	9307      	str	r3, [sp, #28]
 8004b8c:	9b08      	ldr	r3, [sp, #32]
 8004b8e:	4453      	add	r3, sl
 8004b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b92:	9b02      	ldr	r3, [sp, #8]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b9a:	9b07      	ldr	r3, [sp, #28]
 8004b9c:	4621      	mov	r1, r4
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4648      	mov	r0, r9
 8004ba2:	9302      	str	r3, [sp, #8]
 8004ba4:	f7ff fa97 	bl	80040d6 <quorem>
 8004ba8:	4639      	mov	r1, r7
 8004baa:	9008      	str	r0, [sp, #32]
 8004bac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004bb0:	4648      	mov	r0, r9
 8004bb2:	f000 fc57 	bl	8005464 <__mcmp>
 8004bb6:	462a      	mov	r2, r5
 8004bb8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4658      	mov	r0, fp
 8004bbe:	f000 fc6d 	bl	800549c <__mdiff>
 8004bc2:	68c2      	ldr	r2, [r0, #12]
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	bb02      	cbnz	r2, 8004c0a <_dtoa_r+0xa22>
 8004bc8:	4601      	mov	r1, r0
 8004bca:	4648      	mov	r0, r9
 8004bcc:	f000 fc4a 	bl	8005464 <__mcmp>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4658      	mov	r0, fp
 8004bd6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004bd8:	f000 fa0c 	bl	8004ff4 <_Bfree>
 8004bdc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004bde:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004be0:	9e07      	ldr	r6, [sp, #28]
 8004be2:	ea43 0102 	orr.w	r1, r3, r2
 8004be6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004be8:	4319      	orrs	r1, r3
 8004bea:	d110      	bne.n	8004c0e <_dtoa_r+0xa26>
 8004bec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004bf0:	d029      	beq.n	8004c46 <_dtoa_r+0xa5e>
 8004bf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	dd02      	ble.n	8004bfe <_dtoa_r+0xa16>
 8004bf8:	9b08      	ldr	r3, [sp, #32]
 8004bfa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004bfe:	9b02      	ldr	r3, [sp, #8]
 8004c00:	f883 8000 	strb.w	r8, [r3]
 8004c04:	e63b      	b.n	800487e <_dtoa_r+0x696>
 8004c06:	4628      	mov	r0, r5
 8004c08:	e7bb      	b.n	8004b82 <_dtoa_r+0x99a>
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	e7e1      	b.n	8004bd2 <_dtoa_r+0x9ea>
 8004c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	db04      	blt.n	8004c1e <_dtoa_r+0xa36>
 8004c14:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004c16:	430b      	orrs	r3, r1
 8004c18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	d120      	bne.n	8004c60 <_dtoa_r+0xa78>
 8004c1e:	2a00      	cmp	r2, #0
 8004c20:	dded      	ble.n	8004bfe <_dtoa_r+0xa16>
 8004c22:	4649      	mov	r1, r9
 8004c24:	2201      	movs	r2, #1
 8004c26:	4658      	mov	r0, fp
 8004c28:	f000 fbb0 	bl	800538c <__lshift>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4681      	mov	r9, r0
 8004c30:	f000 fc18 	bl	8005464 <__mcmp>
 8004c34:	2800      	cmp	r0, #0
 8004c36:	dc03      	bgt.n	8004c40 <_dtoa_r+0xa58>
 8004c38:	d1e1      	bne.n	8004bfe <_dtoa_r+0xa16>
 8004c3a:	f018 0f01 	tst.w	r8, #1
 8004c3e:	d0de      	beq.n	8004bfe <_dtoa_r+0xa16>
 8004c40:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c44:	d1d8      	bne.n	8004bf8 <_dtoa_r+0xa10>
 8004c46:	2339      	movs	r3, #57	@ 0x39
 8004c48:	9a02      	ldr	r2, [sp, #8]
 8004c4a:	7013      	strb	r3, [r2, #0]
 8004c4c:	4633      	mov	r3, r6
 8004c4e:	461e      	mov	r6, r3
 8004c50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	2a39      	cmp	r2, #57	@ 0x39
 8004c58:	d052      	beq.n	8004d00 <_dtoa_r+0xb18>
 8004c5a:	3201      	adds	r2, #1
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e60e      	b.n	800487e <_dtoa_r+0x696>
 8004c60:	2a00      	cmp	r2, #0
 8004c62:	dd07      	ble.n	8004c74 <_dtoa_r+0xa8c>
 8004c64:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004c68:	d0ed      	beq.n	8004c46 <_dtoa_r+0xa5e>
 8004c6a:	9a02      	ldr	r2, [sp, #8]
 8004c6c:	f108 0301 	add.w	r3, r8, #1
 8004c70:	7013      	strb	r3, [r2, #0]
 8004c72:	e604      	b.n	800487e <_dtoa_r+0x696>
 8004c74:	9b07      	ldr	r3, [sp, #28]
 8004c76:	9a07      	ldr	r2, [sp, #28]
 8004c78:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d028      	beq.n	8004cd4 <_dtoa_r+0xaec>
 8004c82:	4649      	mov	r1, r9
 8004c84:	2300      	movs	r3, #0
 8004c86:	220a      	movs	r2, #10
 8004c88:	4658      	mov	r0, fp
 8004c8a:	f000 f9d5 	bl	8005038 <__multadd>
 8004c8e:	42af      	cmp	r7, r5
 8004c90:	4681      	mov	r9, r0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	f04f 020a 	mov.w	r2, #10
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	4658      	mov	r0, fp
 8004c9e:	d107      	bne.n	8004cb0 <_dtoa_r+0xac8>
 8004ca0:	f000 f9ca 	bl	8005038 <__multadd>
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	9b07      	ldr	r3, [sp, #28]
 8004caa:	3301      	adds	r3, #1
 8004cac:	9307      	str	r3, [sp, #28]
 8004cae:	e774      	b.n	8004b9a <_dtoa_r+0x9b2>
 8004cb0:	f000 f9c2 	bl	8005038 <__multadd>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4607      	mov	r7, r0
 8004cb8:	2300      	movs	r3, #0
 8004cba:	220a      	movs	r2, #10
 8004cbc:	4658      	mov	r0, fp
 8004cbe:	f000 f9bb 	bl	8005038 <__multadd>
 8004cc2:	4605      	mov	r5, r0
 8004cc4:	e7f0      	b.n	8004ca8 <_dtoa_r+0xac0>
 8004cc6:	9b08      	ldr	r3, [sp, #32]
 8004cc8:	2700      	movs	r7, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bfcc      	ite	gt
 8004cce:	461e      	movgt	r6, r3
 8004cd0:	2601      	movle	r6, #1
 8004cd2:	4456      	add	r6, sl
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4658      	mov	r0, fp
 8004cda:	f000 fb57 	bl	800538c <__lshift>
 8004cde:	4621      	mov	r1, r4
 8004ce0:	4681      	mov	r9, r0
 8004ce2:	f000 fbbf 	bl	8005464 <__mcmp>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	dcb0      	bgt.n	8004c4c <_dtoa_r+0xa64>
 8004cea:	d102      	bne.n	8004cf2 <_dtoa_r+0xb0a>
 8004cec:	f018 0f01 	tst.w	r8, #1
 8004cf0:	d1ac      	bne.n	8004c4c <_dtoa_r+0xa64>
 8004cf2:	4633      	mov	r3, r6
 8004cf4:	461e      	mov	r6, r3
 8004cf6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cfa:	2a30      	cmp	r2, #48	@ 0x30
 8004cfc:	d0fa      	beq.n	8004cf4 <_dtoa_r+0xb0c>
 8004cfe:	e5be      	b.n	800487e <_dtoa_r+0x696>
 8004d00:	459a      	cmp	sl, r3
 8004d02:	d1a4      	bne.n	8004c4e <_dtoa_r+0xa66>
 8004d04:	9b04      	ldr	r3, [sp, #16]
 8004d06:	3301      	adds	r3, #1
 8004d08:	9304      	str	r3, [sp, #16]
 8004d0a:	2331      	movs	r3, #49	@ 0x31
 8004d0c:	f88a 3000 	strb.w	r3, [sl]
 8004d10:	e5b5      	b.n	800487e <_dtoa_r+0x696>
 8004d12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004d14:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004d74 <_dtoa_r+0xb8c>
 8004d18:	b11b      	cbz	r3, 8004d22 <_dtoa_r+0xb3a>
 8004d1a:	f10a 0308 	add.w	r3, sl, #8
 8004d1e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	4650      	mov	r0, sl
 8004d24:	b017      	add	sp, #92	@ 0x5c
 8004d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	f77f ae3d 	ble.w	80049ac <_dtoa_r+0x7c4>
 8004d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d36:	2001      	movs	r0, #1
 8004d38:	e65b      	b.n	80049f2 <_dtoa_r+0x80a>
 8004d3a:	9b08      	ldr	r3, [sp, #32]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f77f aed6 	ble.w	8004aee <_dtoa_r+0x906>
 8004d42:	4656      	mov	r6, sl
 8004d44:	4621      	mov	r1, r4
 8004d46:	4648      	mov	r0, r9
 8004d48:	f7ff f9c5 	bl	80040d6 <quorem>
 8004d4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004d50:	9b08      	ldr	r3, [sp, #32]
 8004d52:	f806 8b01 	strb.w	r8, [r6], #1
 8004d56:	eba6 020a 	sub.w	r2, r6, sl
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	ddb3      	ble.n	8004cc6 <_dtoa_r+0xade>
 8004d5e:	4649      	mov	r1, r9
 8004d60:	2300      	movs	r3, #0
 8004d62:	220a      	movs	r2, #10
 8004d64:	4658      	mov	r0, fp
 8004d66:	f000 f967 	bl	8005038 <__multadd>
 8004d6a:	4681      	mov	r9, r0
 8004d6c:	e7ea      	b.n	8004d44 <_dtoa_r+0xb5c>
 8004d6e:	bf00      	nop
 8004d70:	0800625c 	.word	0x0800625c
 8004d74:	080061e0 	.word	0x080061e0

08004d78 <_free_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	d040      	beq.n	8004e02 <_free_r+0x8a>
 8004d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d84:	1f0c      	subs	r4, r1, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfb8      	it	lt
 8004d8a:	18e4      	addlt	r4, r4, r3
 8004d8c:	f000 f8e6 	bl	8004f5c <__malloc_lock>
 8004d90:	4a1c      	ldr	r2, [pc, #112]	@ (8004e04 <_free_r+0x8c>)
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	b933      	cbnz	r3, 8004da4 <_free_r+0x2c>
 8004d96:	6063      	str	r3, [r4, #4]
 8004d98:	6014      	str	r4, [r2, #0]
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004da0:	f000 b8e2 	b.w	8004f68 <__malloc_unlock>
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	d908      	bls.n	8004dba <_free_r+0x42>
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	1821      	adds	r1, r4, r0
 8004dac:	428b      	cmp	r3, r1
 8004dae:	bf01      	itttt	eq
 8004db0:	6819      	ldreq	r1, [r3, #0]
 8004db2:	685b      	ldreq	r3, [r3, #4]
 8004db4:	1809      	addeq	r1, r1, r0
 8004db6:	6021      	streq	r1, [r4, #0]
 8004db8:	e7ed      	b.n	8004d96 <_free_r+0x1e>
 8004dba:	461a      	mov	r2, r3
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	b10b      	cbz	r3, 8004dc4 <_free_r+0x4c>
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d9fa      	bls.n	8004dba <_free_r+0x42>
 8004dc4:	6811      	ldr	r1, [r2, #0]
 8004dc6:	1850      	adds	r0, r2, r1
 8004dc8:	42a0      	cmp	r0, r4
 8004dca:	d10b      	bne.n	8004de4 <_free_r+0x6c>
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	4401      	add	r1, r0
 8004dd0:	1850      	adds	r0, r2, r1
 8004dd2:	4283      	cmp	r3, r0
 8004dd4:	6011      	str	r1, [r2, #0]
 8004dd6:	d1e0      	bne.n	8004d9a <_free_r+0x22>
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4408      	add	r0, r1
 8004dde:	6010      	str	r0, [r2, #0]
 8004de0:	6053      	str	r3, [r2, #4]
 8004de2:	e7da      	b.n	8004d9a <_free_r+0x22>
 8004de4:	d902      	bls.n	8004dec <_free_r+0x74>
 8004de6:	230c      	movs	r3, #12
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	e7d6      	b.n	8004d9a <_free_r+0x22>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	1821      	adds	r1, r4, r0
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf01      	itttt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	1809      	addeq	r1, r1, r0
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	6063      	str	r3, [r4, #4]
 8004dfe:	6054      	str	r4, [r2, #4]
 8004e00:	e7cb      	b.n	8004d9a <_free_r+0x22>
 8004e02:	bd38      	pop	{r3, r4, r5, pc}
 8004e04:	20000574 	.word	0x20000574

08004e08 <malloc>:
 8004e08:	4b02      	ldr	r3, [pc, #8]	@ (8004e14 <malloc+0xc>)
 8004e0a:	4601      	mov	r1, r0
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	f000 b825 	b.w	8004e5c <_malloc_r>
 8004e12:	bf00      	nop
 8004e14:	20000010 	.word	0x20000010

08004e18 <sbrk_aligned>:
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	4e0f      	ldr	r6, [pc, #60]	@ (8004e58 <sbrk_aligned+0x40>)
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	6831      	ldr	r1, [r6, #0]
 8004e20:	4605      	mov	r5, r0
 8004e22:	b911      	cbnz	r1, 8004e2a <sbrk_aligned+0x12>
 8004e24:	f000 fe40 	bl	8005aa8 <_sbrk_r>
 8004e28:	6030      	str	r0, [r6, #0]
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f000 fe3b 	bl	8005aa8 <_sbrk_r>
 8004e32:	1c43      	adds	r3, r0, #1
 8004e34:	d103      	bne.n	8004e3e <sbrk_aligned+0x26>
 8004e36:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	1cc4      	adds	r4, r0, #3
 8004e40:	f024 0403 	bic.w	r4, r4, #3
 8004e44:	42a0      	cmp	r0, r4
 8004e46:	d0f8      	beq.n	8004e3a <sbrk_aligned+0x22>
 8004e48:	1a21      	subs	r1, r4, r0
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	f000 fe2c 	bl	8005aa8 <_sbrk_r>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d1f2      	bne.n	8004e3a <sbrk_aligned+0x22>
 8004e54:	e7ef      	b.n	8004e36 <sbrk_aligned+0x1e>
 8004e56:	bf00      	nop
 8004e58:	20000570 	.word	0x20000570

08004e5c <_malloc_r>:
 8004e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e60:	1ccd      	adds	r5, r1, #3
 8004e62:	f025 0503 	bic.w	r5, r5, #3
 8004e66:	3508      	adds	r5, #8
 8004e68:	2d0c      	cmp	r5, #12
 8004e6a:	bf38      	it	cc
 8004e6c:	250c      	movcc	r5, #12
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	4606      	mov	r6, r0
 8004e72:	db01      	blt.n	8004e78 <_malloc_r+0x1c>
 8004e74:	42a9      	cmp	r1, r5
 8004e76:	d904      	bls.n	8004e82 <_malloc_r+0x26>
 8004e78:	230c      	movs	r3, #12
 8004e7a:	6033      	str	r3, [r6, #0]
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f58 <_malloc_r+0xfc>
 8004e86:	f000 f869 	bl	8004f5c <__malloc_lock>
 8004e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e8e:	461c      	mov	r4, r3
 8004e90:	bb44      	cbnz	r4, 8004ee4 <_malloc_r+0x88>
 8004e92:	4629      	mov	r1, r5
 8004e94:	4630      	mov	r0, r6
 8004e96:	f7ff ffbf 	bl	8004e18 <sbrk_aligned>
 8004e9a:	1c43      	adds	r3, r0, #1
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	d158      	bne.n	8004f52 <_malloc_r+0xf6>
 8004ea0:	f8d8 4000 	ldr.w	r4, [r8]
 8004ea4:	4627      	mov	r7, r4
 8004ea6:	2f00      	cmp	r7, #0
 8004ea8:	d143      	bne.n	8004f32 <_malloc_r+0xd6>
 8004eaa:	2c00      	cmp	r4, #0
 8004eac:	d04b      	beq.n	8004f46 <_malloc_r+0xea>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	4639      	mov	r1, r7
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	eb04 0903 	add.w	r9, r4, r3
 8004eb8:	f000 fdf6 	bl	8005aa8 <_sbrk_r>
 8004ebc:	4581      	cmp	r9, r0
 8004ebe:	d142      	bne.n	8004f46 <_malloc_r+0xea>
 8004ec0:	6821      	ldr	r1, [r4, #0]
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	1a6d      	subs	r5, r5, r1
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	f7ff ffa6 	bl	8004e18 <sbrk_aligned>
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d03a      	beq.n	8004f46 <_malloc_r+0xea>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	442b      	add	r3, r5
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	f8d8 3000 	ldr.w	r3, [r8]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	bb62      	cbnz	r2, 8004f38 <_malloc_r+0xdc>
 8004ede:	f8c8 7000 	str.w	r7, [r8]
 8004ee2:	e00f      	b.n	8004f04 <_malloc_r+0xa8>
 8004ee4:	6822      	ldr	r2, [r4, #0]
 8004ee6:	1b52      	subs	r2, r2, r5
 8004ee8:	d420      	bmi.n	8004f2c <_malloc_r+0xd0>
 8004eea:	2a0b      	cmp	r2, #11
 8004eec:	d917      	bls.n	8004f1e <_malloc_r+0xc2>
 8004eee:	1961      	adds	r1, r4, r5
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	6025      	str	r5, [r4, #0]
 8004ef4:	bf18      	it	ne
 8004ef6:	6059      	strne	r1, [r3, #4]
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	bf08      	it	eq
 8004efc:	f8c8 1000 	streq.w	r1, [r8]
 8004f00:	5162      	str	r2, [r4, r5]
 8004f02:	604b      	str	r3, [r1, #4]
 8004f04:	4630      	mov	r0, r6
 8004f06:	f000 f82f 	bl	8004f68 <__malloc_unlock>
 8004f0a:	f104 000b 	add.w	r0, r4, #11
 8004f0e:	1d23      	adds	r3, r4, #4
 8004f10:	f020 0007 	bic.w	r0, r0, #7
 8004f14:	1ac2      	subs	r2, r0, r3
 8004f16:	bf1c      	itt	ne
 8004f18:	1a1b      	subne	r3, r3, r0
 8004f1a:	50a3      	strne	r3, [r4, r2]
 8004f1c:	e7af      	b.n	8004e7e <_malloc_r+0x22>
 8004f1e:	6862      	ldr	r2, [r4, #4]
 8004f20:	42a3      	cmp	r3, r4
 8004f22:	bf0c      	ite	eq
 8004f24:	f8c8 2000 	streq.w	r2, [r8]
 8004f28:	605a      	strne	r2, [r3, #4]
 8004f2a:	e7eb      	b.n	8004f04 <_malloc_r+0xa8>
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	6864      	ldr	r4, [r4, #4]
 8004f30:	e7ae      	b.n	8004e90 <_malloc_r+0x34>
 8004f32:	463c      	mov	r4, r7
 8004f34:	687f      	ldr	r7, [r7, #4]
 8004f36:	e7b6      	b.n	8004ea6 <_malloc_r+0x4a>
 8004f38:	461a      	mov	r2, r3
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	d1fb      	bne.n	8004f38 <_malloc_r+0xdc>
 8004f40:	2300      	movs	r3, #0
 8004f42:	6053      	str	r3, [r2, #4]
 8004f44:	e7de      	b.n	8004f04 <_malloc_r+0xa8>
 8004f46:	230c      	movs	r3, #12
 8004f48:	4630      	mov	r0, r6
 8004f4a:	6033      	str	r3, [r6, #0]
 8004f4c:	f000 f80c 	bl	8004f68 <__malloc_unlock>
 8004f50:	e794      	b.n	8004e7c <_malloc_r+0x20>
 8004f52:	6005      	str	r5, [r0, #0]
 8004f54:	e7d6      	b.n	8004f04 <_malloc_r+0xa8>
 8004f56:	bf00      	nop
 8004f58:	20000574 	.word	0x20000574

08004f5c <__malloc_lock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	@ (8004f64 <__malloc_lock+0x8>)
 8004f5e:	f7ff b8aa 	b.w	80040b6 <__retarget_lock_acquire_recursive>
 8004f62:	bf00      	nop
 8004f64:	2000056c 	.word	0x2000056c

08004f68 <__malloc_unlock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	@ (8004f70 <__malloc_unlock+0x8>)
 8004f6a:	f7ff b8a5 	b.w	80040b8 <__retarget_lock_release_recursive>
 8004f6e:	bf00      	nop
 8004f70:	2000056c 	.word	0x2000056c

08004f74 <_Balloc>:
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	69c6      	ldr	r6, [r0, #28]
 8004f78:	4604      	mov	r4, r0
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	b976      	cbnz	r6, 8004f9c <_Balloc+0x28>
 8004f7e:	2010      	movs	r0, #16
 8004f80:	f7ff ff42 	bl	8004e08 <malloc>
 8004f84:	4602      	mov	r2, r0
 8004f86:	61e0      	str	r0, [r4, #28]
 8004f88:	b920      	cbnz	r0, 8004f94 <_Balloc+0x20>
 8004f8a:	216b      	movs	r1, #107	@ 0x6b
 8004f8c:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <_Balloc+0x78>)
 8004f8e:	4818      	ldr	r0, [pc, #96]	@ (8004ff0 <_Balloc+0x7c>)
 8004f90:	f000 fda8 	bl	8005ae4 <__assert_func>
 8004f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f98:	6006      	str	r6, [r0, #0]
 8004f9a:	60c6      	str	r6, [r0, #12]
 8004f9c:	69e6      	ldr	r6, [r4, #28]
 8004f9e:	68f3      	ldr	r3, [r6, #12]
 8004fa0:	b183      	cbz	r3, 8004fc4 <_Balloc+0x50>
 8004fa2:	69e3      	ldr	r3, [r4, #28]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004faa:	b9b8      	cbnz	r0, 8004fdc <_Balloc+0x68>
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f605 	lsl.w	r6, r1, r5
 8004fb2:	1d72      	adds	r2, r6, #5
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	0092      	lsls	r2, r2, #2
 8004fb8:	f000 fdb2 	bl	8005b20 <_calloc_r>
 8004fbc:	b160      	cbz	r0, 8004fd8 <_Balloc+0x64>
 8004fbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004fc2:	e00e      	b.n	8004fe2 <_Balloc+0x6e>
 8004fc4:	2221      	movs	r2, #33	@ 0x21
 8004fc6:	2104      	movs	r1, #4
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 fda9 	bl	8005b20 <_calloc_r>
 8004fce:	69e3      	ldr	r3, [r4, #28]
 8004fd0:	60f0      	str	r0, [r6, #12]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e4      	bne.n	8004fa2 <_Balloc+0x2e>
 8004fd8:	2000      	movs	r0, #0
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	6802      	ldr	r2, [r0, #0]
 8004fde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004fe8:	e7f7      	b.n	8004fda <_Balloc+0x66>
 8004fea:	bf00      	nop
 8004fec:	080061ed 	.word	0x080061ed
 8004ff0:	0800626d 	.word	0x0800626d

08004ff4 <_Bfree>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	69c6      	ldr	r6, [r0, #28]
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	b976      	cbnz	r6, 800501c <_Bfree+0x28>
 8004ffe:	2010      	movs	r0, #16
 8005000:	f7ff ff02 	bl	8004e08 <malloc>
 8005004:	4602      	mov	r2, r0
 8005006:	61e8      	str	r0, [r5, #28]
 8005008:	b920      	cbnz	r0, 8005014 <_Bfree+0x20>
 800500a:	218f      	movs	r1, #143	@ 0x8f
 800500c:	4b08      	ldr	r3, [pc, #32]	@ (8005030 <_Bfree+0x3c>)
 800500e:	4809      	ldr	r0, [pc, #36]	@ (8005034 <_Bfree+0x40>)
 8005010:	f000 fd68 	bl	8005ae4 <__assert_func>
 8005014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005018:	6006      	str	r6, [r0, #0]
 800501a:	60c6      	str	r6, [r0, #12]
 800501c:	b13c      	cbz	r4, 800502e <_Bfree+0x3a>
 800501e:	69eb      	ldr	r3, [r5, #28]
 8005020:	6862      	ldr	r2, [r4, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005028:	6021      	str	r1, [r4, #0]
 800502a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	080061ed 	.word	0x080061ed
 8005034:	0800626d 	.word	0x0800626d

08005038 <__multadd>:
 8005038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503c:	4607      	mov	r7, r0
 800503e:	460c      	mov	r4, r1
 8005040:	461e      	mov	r6, r3
 8005042:	2000      	movs	r0, #0
 8005044:	690d      	ldr	r5, [r1, #16]
 8005046:	f101 0c14 	add.w	ip, r1, #20
 800504a:	f8dc 3000 	ldr.w	r3, [ip]
 800504e:	3001      	adds	r0, #1
 8005050:	b299      	uxth	r1, r3
 8005052:	fb02 6101 	mla	r1, r2, r1, r6
 8005056:	0c1e      	lsrs	r6, r3, #16
 8005058:	0c0b      	lsrs	r3, r1, #16
 800505a:	fb02 3306 	mla	r3, r2, r6, r3
 800505e:	b289      	uxth	r1, r1
 8005060:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005064:	4285      	cmp	r5, r0
 8005066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800506a:	f84c 1b04 	str.w	r1, [ip], #4
 800506e:	dcec      	bgt.n	800504a <__multadd+0x12>
 8005070:	b30e      	cbz	r6, 80050b6 <__multadd+0x7e>
 8005072:	68a3      	ldr	r3, [r4, #8]
 8005074:	42ab      	cmp	r3, r5
 8005076:	dc19      	bgt.n	80050ac <__multadd+0x74>
 8005078:	6861      	ldr	r1, [r4, #4]
 800507a:	4638      	mov	r0, r7
 800507c:	3101      	adds	r1, #1
 800507e:	f7ff ff79 	bl	8004f74 <_Balloc>
 8005082:	4680      	mov	r8, r0
 8005084:	b928      	cbnz	r0, 8005092 <__multadd+0x5a>
 8005086:	4602      	mov	r2, r0
 8005088:	21ba      	movs	r1, #186	@ 0xba
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <__multadd+0x84>)
 800508c:	480c      	ldr	r0, [pc, #48]	@ (80050c0 <__multadd+0x88>)
 800508e:	f000 fd29 	bl	8005ae4 <__assert_func>
 8005092:	6922      	ldr	r2, [r4, #16]
 8005094:	f104 010c 	add.w	r1, r4, #12
 8005098:	3202      	adds	r2, #2
 800509a:	0092      	lsls	r2, r2, #2
 800509c:	300c      	adds	r0, #12
 800509e:	f000 fd13 	bl	8005ac8 <memcpy>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ffa5 	bl	8004ff4 <_Bfree>
 80050aa:	4644      	mov	r4, r8
 80050ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80050b0:	3501      	adds	r5, #1
 80050b2:	615e      	str	r6, [r3, #20]
 80050b4:	6125      	str	r5, [r4, #16]
 80050b6:	4620      	mov	r0, r4
 80050b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050bc:	0800625c 	.word	0x0800625c
 80050c0:	0800626d 	.word	0x0800626d

080050c4 <__hi0bits>:
 80050c4:	4603      	mov	r3, r0
 80050c6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80050ca:	bf3a      	itte	cc
 80050cc:	0403      	lslcc	r3, r0, #16
 80050ce:	2010      	movcc	r0, #16
 80050d0:	2000      	movcs	r0, #0
 80050d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d6:	bf3c      	itt	cc
 80050d8:	021b      	lslcc	r3, r3, #8
 80050da:	3008      	addcc	r0, #8
 80050dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050e0:	bf3c      	itt	cc
 80050e2:	011b      	lslcc	r3, r3, #4
 80050e4:	3004      	addcc	r0, #4
 80050e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050ea:	bf3c      	itt	cc
 80050ec:	009b      	lslcc	r3, r3, #2
 80050ee:	3002      	addcc	r0, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	db05      	blt.n	8005100 <__hi0bits+0x3c>
 80050f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80050f8:	f100 0001 	add.w	r0, r0, #1
 80050fc:	bf08      	it	eq
 80050fe:	2020      	moveq	r0, #32
 8005100:	4770      	bx	lr

08005102 <__lo0bits>:
 8005102:	6803      	ldr	r3, [r0, #0]
 8005104:	4602      	mov	r2, r0
 8005106:	f013 0007 	ands.w	r0, r3, #7
 800510a:	d00b      	beq.n	8005124 <__lo0bits+0x22>
 800510c:	07d9      	lsls	r1, r3, #31
 800510e:	d421      	bmi.n	8005154 <__lo0bits+0x52>
 8005110:	0798      	lsls	r0, r3, #30
 8005112:	bf49      	itett	mi
 8005114:	085b      	lsrmi	r3, r3, #1
 8005116:	089b      	lsrpl	r3, r3, #2
 8005118:	2001      	movmi	r0, #1
 800511a:	6013      	strmi	r3, [r2, #0]
 800511c:	bf5c      	itt	pl
 800511e:	2002      	movpl	r0, #2
 8005120:	6013      	strpl	r3, [r2, #0]
 8005122:	4770      	bx	lr
 8005124:	b299      	uxth	r1, r3
 8005126:	b909      	cbnz	r1, 800512c <__lo0bits+0x2a>
 8005128:	2010      	movs	r0, #16
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	b2d9      	uxtb	r1, r3
 800512e:	b909      	cbnz	r1, 8005134 <__lo0bits+0x32>
 8005130:	3008      	adds	r0, #8
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	0719      	lsls	r1, r3, #28
 8005136:	bf04      	itt	eq
 8005138:	091b      	lsreq	r3, r3, #4
 800513a:	3004      	addeq	r0, #4
 800513c:	0799      	lsls	r1, r3, #30
 800513e:	bf04      	itt	eq
 8005140:	089b      	lsreq	r3, r3, #2
 8005142:	3002      	addeq	r0, #2
 8005144:	07d9      	lsls	r1, r3, #31
 8005146:	d403      	bmi.n	8005150 <__lo0bits+0x4e>
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	f100 0001 	add.w	r0, r0, #1
 800514e:	d003      	beq.n	8005158 <__lo0bits+0x56>
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	4770      	bx	lr
 8005154:	2000      	movs	r0, #0
 8005156:	4770      	bx	lr
 8005158:	2020      	movs	r0, #32
 800515a:	4770      	bx	lr

0800515c <__i2b>:
 800515c:	b510      	push	{r4, lr}
 800515e:	460c      	mov	r4, r1
 8005160:	2101      	movs	r1, #1
 8005162:	f7ff ff07 	bl	8004f74 <_Balloc>
 8005166:	4602      	mov	r2, r0
 8005168:	b928      	cbnz	r0, 8005176 <__i2b+0x1a>
 800516a:	f240 1145 	movw	r1, #325	@ 0x145
 800516e:	4b04      	ldr	r3, [pc, #16]	@ (8005180 <__i2b+0x24>)
 8005170:	4804      	ldr	r0, [pc, #16]	@ (8005184 <__i2b+0x28>)
 8005172:	f000 fcb7 	bl	8005ae4 <__assert_func>
 8005176:	2301      	movs	r3, #1
 8005178:	6144      	str	r4, [r0, #20]
 800517a:	6103      	str	r3, [r0, #16]
 800517c:	bd10      	pop	{r4, pc}
 800517e:	bf00      	nop
 8005180:	0800625c 	.word	0x0800625c
 8005184:	0800626d 	.word	0x0800626d

08005188 <__multiply>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	4614      	mov	r4, r2
 800518e:	690a      	ldr	r2, [r1, #16]
 8005190:	6923      	ldr	r3, [r4, #16]
 8005192:	460f      	mov	r7, r1
 8005194:	429a      	cmp	r2, r3
 8005196:	bfa2      	ittt	ge
 8005198:	4623      	movge	r3, r4
 800519a:	460c      	movge	r4, r1
 800519c:	461f      	movge	r7, r3
 800519e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80051a2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	6861      	ldr	r1, [r4, #4]
 80051aa:	eb0a 0609 	add.w	r6, sl, r9
 80051ae:	42b3      	cmp	r3, r6
 80051b0:	b085      	sub	sp, #20
 80051b2:	bfb8      	it	lt
 80051b4:	3101      	addlt	r1, #1
 80051b6:	f7ff fedd 	bl	8004f74 <_Balloc>
 80051ba:	b930      	cbnz	r0, 80051ca <__multiply+0x42>
 80051bc:	4602      	mov	r2, r0
 80051be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80051c2:	4b43      	ldr	r3, [pc, #268]	@ (80052d0 <__multiply+0x148>)
 80051c4:	4843      	ldr	r0, [pc, #268]	@ (80052d4 <__multiply+0x14c>)
 80051c6:	f000 fc8d 	bl	8005ae4 <__assert_func>
 80051ca:	f100 0514 	add.w	r5, r0, #20
 80051ce:	462b      	mov	r3, r5
 80051d0:	2200      	movs	r2, #0
 80051d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80051d6:	4543      	cmp	r3, r8
 80051d8:	d321      	bcc.n	800521e <__multiply+0x96>
 80051da:	f107 0114 	add.w	r1, r7, #20
 80051de:	f104 0214 	add.w	r2, r4, #20
 80051e2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80051e6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80051ea:	9302      	str	r3, [sp, #8]
 80051ec:	1b13      	subs	r3, r2, r4
 80051ee:	3b15      	subs	r3, #21
 80051f0:	f023 0303 	bic.w	r3, r3, #3
 80051f4:	3304      	adds	r3, #4
 80051f6:	f104 0715 	add.w	r7, r4, #21
 80051fa:	42ba      	cmp	r2, r7
 80051fc:	bf38      	it	cc
 80051fe:	2304      	movcc	r3, #4
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	9103      	str	r1, [sp, #12]
 8005206:	428b      	cmp	r3, r1
 8005208:	d80c      	bhi.n	8005224 <__multiply+0x9c>
 800520a:	2e00      	cmp	r6, #0
 800520c:	dd03      	ble.n	8005216 <__multiply+0x8e>
 800520e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005212:	2b00      	cmp	r3, #0
 8005214:	d05a      	beq.n	80052cc <__multiply+0x144>
 8005216:	6106      	str	r6, [r0, #16]
 8005218:	b005      	add	sp, #20
 800521a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521e:	f843 2b04 	str.w	r2, [r3], #4
 8005222:	e7d8      	b.n	80051d6 <__multiply+0x4e>
 8005224:	f8b1 a000 	ldrh.w	sl, [r1]
 8005228:	f1ba 0f00 	cmp.w	sl, #0
 800522c:	d023      	beq.n	8005276 <__multiply+0xee>
 800522e:	46a9      	mov	r9, r5
 8005230:	f04f 0c00 	mov.w	ip, #0
 8005234:	f104 0e14 	add.w	lr, r4, #20
 8005238:	f85e 7b04 	ldr.w	r7, [lr], #4
 800523c:	f8d9 3000 	ldr.w	r3, [r9]
 8005240:	fa1f fb87 	uxth.w	fp, r7
 8005244:	b29b      	uxth	r3, r3
 8005246:	fb0a 330b 	mla	r3, sl, fp, r3
 800524a:	4463      	add	r3, ip
 800524c:	f8d9 c000 	ldr.w	ip, [r9]
 8005250:	0c3f      	lsrs	r7, r7, #16
 8005252:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005256:	fb0a c707 	mla	r7, sl, r7, ip
 800525a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800525e:	b29b      	uxth	r3, r3
 8005260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005264:	4572      	cmp	r2, lr
 8005266:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800526a:	f849 3b04 	str.w	r3, [r9], #4
 800526e:	d8e3      	bhi.n	8005238 <__multiply+0xb0>
 8005270:	9b01      	ldr	r3, [sp, #4]
 8005272:	f845 c003 	str.w	ip, [r5, r3]
 8005276:	9b03      	ldr	r3, [sp, #12]
 8005278:	3104      	adds	r1, #4
 800527a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800527e:	f1b9 0f00 	cmp.w	r9, #0
 8005282:	d021      	beq.n	80052c8 <__multiply+0x140>
 8005284:	46ae      	mov	lr, r5
 8005286:	f04f 0a00 	mov.w	sl, #0
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	f104 0c14 	add.w	ip, r4, #20
 8005290:	f8bc b000 	ldrh.w	fp, [ip]
 8005294:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005298:	b29b      	uxth	r3, r3
 800529a:	fb09 770b 	mla	r7, r9, fp, r7
 800529e:	4457      	add	r7, sl
 80052a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80052a4:	f84e 3b04 	str.w	r3, [lr], #4
 80052a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052b0:	f8be 3000 	ldrh.w	r3, [lr]
 80052b4:	4562      	cmp	r2, ip
 80052b6:	fb09 330a 	mla	r3, r9, sl, r3
 80052ba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80052be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052c2:	d8e5      	bhi.n	8005290 <__multiply+0x108>
 80052c4:	9f01      	ldr	r7, [sp, #4]
 80052c6:	51eb      	str	r3, [r5, r7]
 80052c8:	3504      	adds	r5, #4
 80052ca:	e79a      	b.n	8005202 <__multiply+0x7a>
 80052cc:	3e01      	subs	r6, #1
 80052ce:	e79c      	b.n	800520a <__multiply+0x82>
 80052d0:	0800625c 	.word	0x0800625c
 80052d4:	0800626d 	.word	0x0800626d

080052d8 <__pow5mult>:
 80052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052dc:	4615      	mov	r5, r2
 80052de:	f012 0203 	ands.w	r2, r2, #3
 80052e2:	4607      	mov	r7, r0
 80052e4:	460e      	mov	r6, r1
 80052e6:	d007      	beq.n	80052f8 <__pow5mult+0x20>
 80052e8:	4c25      	ldr	r4, [pc, #148]	@ (8005380 <__pow5mult+0xa8>)
 80052ea:	3a01      	subs	r2, #1
 80052ec:	2300      	movs	r3, #0
 80052ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80052f2:	f7ff fea1 	bl	8005038 <__multadd>
 80052f6:	4606      	mov	r6, r0
 80052f8:	10ad      	asrs	r5, r5, #2
 80052fa:	d03d      	beq.n	8005378 <__pow5mult+0xa0>
 80052fc:	69fc      	ldr	r4, [r7, #28]
 80052fe:	b97c      	cbnz	r4, 8005320 <__pow5mult+0x48>
 8005300:	2010      	movs	r0, #16
 8005302:	f7ff fd81 	bl	8004e08 <malloc>
 8005306:	4602      	mov	r2, r0
 8005308:	61f8      	str	r0, [r7, #28]
 800530a:	b928      	cbnz	r0, 8005318 <__pow5mult+0x40>
 800530c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005310:	4b1c      	ldr	r3, [pc, #112]	@ (8005384 <__pow5mult+0xac>)
 8005312:	481d      	ldr	r0, [pc, #116]	@ (8005388 <__pow5mult+0xb0>)
 8005314:	f000 fbe6 	bl	8005ae4 <__assert_func>
 8005318:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800531c:	6004      	str	r4, [r0, #0]
 800531e:	60c4      	str	r4, [r0, #12]
 8005320:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005324:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005328:	b94c      	cbnz	r4, 800533e <__pow5mult+0x66>
 800532a:	f240 2171 	movw	r1, #625	@ 0x271
 800532e:	4638      	mov	r0, r7
 8005330:	f7ff ff14 	bl	800515c <__i2b>
 8005334:	2300      	movs	r3, #0
 8005336:	4604      	mov	r4, r0
 8005338:	f8c8 0008 	str.w	r0, [r8, #8]
 800533c:	6003      	str	r3, [r0, #0]
 800533e:	f04f 0900 	mov.w	r9, #0
 8005342:	07eb      	lsls	r3, r5, #31
 8005344:	d50a      	bpl.n	800535c <__pow5mult+0x84>
 8005346:	4631      	mov	r1, r6
 8005348:	4622      	mov	r2, r4
 800534a:	4638      	mov	r0, r7
 800534c:	f7ff ff1c 	bl	8005188 <__multiply>
 8005350:	4680      	mov	r8, r0
 8005352:	4631      	mov	r1, r6
 8005354:	4638      	mov	r0, r7
 8005356:	f7ff fe4d 	bl	8004ff4 <_Bfree>
 800535a:	4646      	mov	r6, r8
 800535c:	106d      	asrs	r5, r5, #1
 800535e:	d00b      	beq.n	8005378 <__pow5mult+0xa0>
 8005360:	6820      	ldr	r0, [r4, #0]
 8005362:	b938      	cbnz	r0, 8005374 <__pow5mult+0x9c>
 8005364:	4622      	mov	r2, r4
 8005366:	4621      	mov	r1, r4
 8005368:	4638      	mov	r0, r7
 800536a:	f7ff ff0d 	bl	8005188 <__multiply>
 800536e:	6020      	str	r0, [r4, #0]
 8005370:	f8c0 9000 	str.w	r9, [r0]
 8005374:	4604      	mov	r4, r0
 8005376:	e7e4      	b.n	8005342 <__pow5mult+0x6a>
 8005378:	4630      	mov	r0, r6
 800537a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800537e:	bf00      	nop
 8005380:	080062c8 	.word	0x080062c8
 8005384:	080061ed 	.word	0x080061ed
 8005388:	0800626d 	.word	0x0800626d

0800538c <__lshift>:
 800538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	4607      	mov	r7, r0
 8005394:	4691      	mov	r9, r2
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	6849      	ldr	r1, [r1, #4]
 800539a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800539e:	68a3      	ldr	r3, [r4, #8]
 80053a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80053a4:	f108 0601 	add.w	r6, r8, #1
 80053a8:	42b3      	cmp	r3, r6
 80053aa:	db0b      	blt.n	80053c4 <__lshift+0x38>
 80053ac:	4638      	mov	r0, r7
 80053ae:	f7ff fde1 	bl	8004f74 <_Balloc>
 80053b2:	4605      	mov	r5, r0
 80053b4:	b948      	cbnz	r0, 80053ca <__lshift+0x3e>
 80053b6:	4602      	mov	r2, r0
 80053b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <__lshift+0xd0>)
 80053be:	4828      	ldr	r0, [pc, #160]	@ (8005460 <__lshift+0xd4>)
 80053c0:	f000 fb90 	bl	8005ae4 <__assert_func>
 80053c4:	3101      	adds	r1, #1
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	e7ee      	b.n	80053a8 <__lshift+0x1c>
 80053ca:	2300      	movs	r3, #0
 80053cc:	f100 0114 	add.w	r1, r0, #20
 80053d0:	f100 0210 	add.w	r2, r0, #16
 80053d4:	4618      	mov	r0, r3
 80053d6:	4553      	cmp	r3, sl
 80053d8:	db33      	blt.n	8005442 <__lshift+0xb6>
 80053da:	6920      	ldr	r0, [r4, #16]
 80053dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80053e0:	f104 0314 	add.w	r3, r4, #20
 80053e4:	f019 091f 	ands.w	r9, r9, #31
 80053e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80053ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80053f0:	d02b      	beq.n	800544a <__lshift+0xbe>
 80053f2:	468a      	mov	sl, r1
 80053f4:	2200      	movs	r2, #0
 80053f6:	f1c9 0e20 	rsb	lr, r9, #32
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	fa00 f009 	lsl.w	r0, r0, r9
 8005400:	4310      	orrs	r0, r2
 8005402:	f84a 0b04 	str.w	r0, [sl], #4
 8005406:	f853 2b04 	ldr.w	r2, [r3], #4
 800540a:	459c      	cmp	ip, r3
 800540c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005410:	d8f3      	bhi.n	80053fa <__lshift+0x6e>
 8005412:	ebac 0304 	sub.w	r3, ip, r4
 8005416:	3b15      	subs	r3, #21
 8005418:	f023 0303 	bic.w	r3, r3, #3
 800541c:	3304      	adds	r3, #4
 800541e:	f104 0015 	add.w	r0, r4, #21
 8005422:	4584      	cmp	ip, r0
 8005424:	bf38      	it	cc
 8005426:	2304      	movcc	r3, #4
 8005428:	50ca      	str	r2, [r1, r3]
 800542a:	b10a      	cbz	r2, 8005430 <__lshift+0xa4>
 800542c:	f108 0602 	add.w	r6, r8, #2
 8005430:	3e01      	subs	r6, #1
 8005432:	4638      	mov	r0, r7
 8005434:	4621      	mov	r1, r4
 8005436:	612e      	str	r6, [r5, #16]
 8005438:	f7ff fddc 	bl	8004ff4 <_Bfree>
 800543c:	4628      	mov	r0, r5
 800543e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005442:	f842 0f04 	str.w	r0, [r2, #4]!
 8005446:	3301      	adds	r3, #1
 8005448:	e7c5      	b.n	80053d6 <__lshift+0x4a>
 800544a:	3904      	subs	r1, #4
 800544c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005450:	459c      	cmp	ip, r3
 8005452:	f841 2f04 	str.w	r2, [r1, #4]!
 8005456:	d8f9      	bhi.n	800544c <__lshift+0xc0>
 8005458:	e7ea      	b.n	8005430 <__lshift+0xa4>
 800545a:	bf00      	nop
 800545c:	0800625c 	.word	0x0800625c
 8005460:	0800626d 	.word	0x0800626d

08005464 <__mcmp>:
 8005464:	4603      	mov	r3, r0
 8005466:	690a      	ldr	r2, [r1, #16]
 8005468:	6900      	ldr	r0, [r0, #16]
 800546a:	b530      	push	{r4, r5, lr}
 800546c:	1a80      	subs	r0, r0, r2
 800546e:	d10e      	bne.n	800548e <__mcmp+0x2a>
 8005470:	3314      	adds	r3, #20
 8005472:	3114      	adds	r1, #20
 8005474:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005478:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800547c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005480:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005484:	4295      	cmp	r5, r2
 8005486:	d003      	beq.n	8005490 <__mcmp+0x2c>
 8005488:	d205      	bcs.n	8005496 <__mcmp+0x32>
 800548a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800548e:	bd30      	pop	{r4, r5, pc}
 8005490:	42a3      	cmp	r3, r4
 8005492:	d3f3      	bcc.n	800547c <__mcmp+0x18>
 8005494:	e7fb      	b.n	800548e <__mcmp+0x2a>
 8005496:	2001      	movs	r0, #1
 8005498:	e7f9      	b.n	800548e <__mcmp+0x2a>
	...

0800549c <__mdiff>:
 800549c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a0:	4689      	mov	r9, r1
 80054a2:	4606      	mov	r6, r0
 80054a4:	4611      	mov	r1, r2
 80054a6:	4648      	mov	r0, r9
 80054a8:	4614      	mov	r4, r2
 80054aa:	f7ff ffdb 	bl	8005464 <__mcmp>
 80054ae:	1e05      	subs	r5, r0, #0
 80054b0:	d112      	bne.n	80054d8 <__mdiff+0x3c>
 80054b2:	4629      	mov	r1, r5
 80054b4:	4630      	mov	r0, r6
 80054b6:	f7ff fd5d 	bl	8004f74 <_Balloc>
 80054ba:	4602      	mov	r2, r0
 80054bc:	b928      	cbnz	r0, 80054ca <__mdiff+0x2e>
 80054be:	f240 2137 	movw	r1, #567	@ 0x237
 80054c2:	4b3e      	ldr	r3, [pc, #248]	@ (80055bc <__mdiff+0x120>)
 80054c4:	483e      	ldr	r0, [pc, #248]	@ (80055c0 <__mdiff+0x124>)
 80054c6:	f000 fb0d 	bl	8005ae4 <__assert_func>
 80054ca:	2301      	movs	r3, #1
 80054cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80054d0:	4610      	mov	r0, r2
 80054d2:	b003      	add	sp, #12
 80054d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d8:	bfbc      	itt	lt
 80054da:	464b      	movlt	r3, r9
 80054dc:	46a1      	movlt	r9, r4
 80054de:	4630      	mov	r0, r6
 80054e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80054e4:	bfba      	itte	lt
 80054e6:	461c      	movlt	r4, r3
 80054e8:	2501      	movlt	r5, #1
 80054ea:	2500      	movge	r5, #0
 80054ec:	f7ff fd42 	bl	8004f74 <_Balloc>
 80054f0:	4602      	mov	r2, r0
 80054f2:	b918      	cbnz	r0, 80054fc <__mdiff+0x60>
 80054f4:	f240 2145 	movw	r1, #581	@ 0x245
 80054f8:	4b30      	ldr	r3, [pc, #192]	@ (80055bc <__mdiff+0x120>)
 80054fa:	e7e3      	b.n	80054c4 <__mdiff+0x28>
 80054fc:	f100 0b14 	add.w	fp, r0, #20
 8005500:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005504:	f109 0310 	add.w	r3, r9, #16
 8005508:	60c5      	str	r5, [r0, #12]
 800550a:	f04f 0c00 	mov.w	ip, #0
 800550e:	f109 0514 	add.w	r5, r9, #20
 8005512:	46d9      	mov	r9, fp
 8005514:	6926      	ldr	r6, [r4, #16]
 8005516:	f104 0e14 	add.w	lr, r4, #20
 800551a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800551e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005522:	9301      	str	r3, [sp, #4]
 8005524:	9b01      	ldr	r3, [sp, #4]
 8005526:	f85e 0b04 	ldr.w	r0, [lr], #4
 800552a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800552e:	b281      	uxth	r1, r0
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	fa1f f38a 	uxth.w	r3, sl
 8005536:	1a5b      	subs	r3, r3, r1
 8005538:	0c00      	lsrs	r0, r0, #16
 800553a:	4463      	add	r3, ip
 800553c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005540:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800554a:	4576      	cmp	r6, lr
 800554c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005550:	f849 3b04 	str.w	r3, [r9], #4
 8005554:	d8e6      	bhi.n	8005524 <__mdiff+0x88>
 8005556:	1b33      	subs	r3, r6, r4
 8005558:	3b15      	subs	r3, #21
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	3415      	adds	r4, #21
 8005560:	3304      	adds	r3, #4
 8005562:	42a6      	cmp	r6, r4
 8005564:	bf38      	it	cc
 8005566:	2304      	movcc	r3, #4
 8005568:	441d      	add	r5, r3
 800556a:	445b      	add	r3, fp
 800556c:	461e      	mov	r6, r3
 800556e:	462c      	mov	r4, r5
 8005570:	4544      	cmp	r4, r8
 8005572:	d30e      	bcc.n	8005592 <__mdiff+0xf6>
 8005574:	f108 0103 	add.w	r1, r8, #3
 8005578:	1b49      	subs	r1, r1, r5
 800557a:	f021 0103 	bic.w	r1, r1, #3
 800557e:	3d03      	subs	r5, #3
 8005580:	45a8      	cmp	r8, r5
 8005582:	bf38      	it	cc
 8005584:	2100      	movcc	r1, #0
 8005586:	440b      	add	r3, r1
 8005588:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800558c:	b199      	cbz	r1, 80055b6 <__mdiff+0x11a>
 800558e:	6117      	str	r7, [r2, #16]
 8005590:	e79e      	b.n	80054d0 <__mdiff+0x34>
 8005592:	46e6      	mov	lr, ip
 8005594:	f854 1b04 	ldr.w	r1, [r4], #4
 8005598:	fa1f fc81 	uxth.w	ip, r1
 800559c:	44f4      	add	ip, lr
 800559e:	0c08      	lsrs	r0, r1, #16
 80055a0:	4471      	add	r1, lr
 80055a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80055a6:	b289      	uxth	r1, r1
 80055a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80055ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80055b0:	f846 1b04 	str.w	r1, [r6], #4
 80055b4:	e7dc      	b.n	8005570 <__mdiff+0xd4>
 80055b6:	3f01      	subs	r7, #1
 80055b8:	e7e6      	b.n	8005588 <__mdiff+0xec>
 80055ba:	bf00      	nop
 80055bc:	0800625c 	.word	0x0800625c
 80055c0:	0800626d 	.word	0x0800626d

080055c4 <__d2b>:
 80055c4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80055c8:	2101      	movs	r1, #1
 80055ca:	4690      	mov	r8, r2
 80055cc:	4699      	mov	r9, r3
 80055ce:	9e08      	ldr	r6, [sp, #32]
 80055d0:	f7ff fcd0 	bl	8004f74 <_Balloc>
 80055d4:	4604      	mov	r4, r0
 80055d6:	b930      	cbnz	r0, 80055e6 <__d2b+0x22>
 80055d8:	4602      	mov	r2, r0
 80055da:	f240 310f 	movw	r1, #783	@ 0x30f
 80055de:	4b23      	ldr	r3, [pc, #140]	@ (800566c <__d2b+0xa8>)
 80055e0:	4823      	ldr	r0, [pc, #140]	@ (8005670 <__d2b+0xac>)
 80055e2:	f000 fa7f 	bl	8005ae4 <__assert_func>
 80055e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80055ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055ee:	b10d      	cbz	r5, 80055f4 <__d2b+0x30>
 80055f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f1b8 0300 	subs.w	r3, r8, #0
 80055fa:	d024      	beq.n	8005646 <__d2b+0x82>
 80055fc:	4668      	mov	r0, sp
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	f7ff fd7f 	bl	8005102 <__lo0bits>
 8005604:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005608:	b1d8      	cbz	r0, 8005642 <__d2b+0x7e>
 800560a:	f1c0 0320 	rsb	r3, r0, #32
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	430b      	orrs	r3, r1
 8005614:	40c2      	lsrs	r2, r0
 8005616:	6163      	str	r3, [r4, #20]
 8005618:	9201      	str	r2, [sp, #4]
 800561a:	9b01      	ldr	r3, [sp, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf0c      	ite	eq
 8005620:	2201      	moveq	r2, #1
 8005622:	2202      	movne	r2, #2
 8005624:	61a3      	str	r3, [r4, #24]
 8005626:	6122      	str	r2, [r4, #16]
 8005628:	b1ad      	cbz	r5, 8005656 <__d2b+0x92>
 800562a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800562e:	4405      	add	r5, r0
 8005630:	6035      	str	r5, [r6, #0]
 8005632:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005638:	6018      	str	r0, [r3, #0]
 800563a:	4620      	mov	r0, r4
 800563c:	b002      	add	sp, #8
 800563e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005642:	6161      	str	r1, [r4, #20]
 8005644:	e7e9      	b.n	800561a <__d2b+0x56>
 8005646:	a801      	add	r0, sp, #4
 8005648:	f7ff fd5b 	bl	8005102 <__lo0bits>
 800564c:	9b01      	ldr	r3, [sp, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	6163      	str	r3, [r4, #20]
 8005652:	3020      	adds	r0, #32
 8005654:	e7e7      	b.n	8005626 <__d2b+0x62>
 8005656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800565a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800565e:	6030      	str	r0, [r6, #0]
 8005660:	6918      	ldr	r0, [r3, #16]
 8005662:	f7ff fd2f 	bl	80050c4 <__hi0bits>
 8005666:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800566a:	e7e4      	b.n	8005636 <__d2b+0x72>
 800566c:	0800625c 	.word	0x0800625c
 8005670:	0800626d 	.word	0x0800626d

08005674 <__ssputs_r>:
 8005674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005678:	461f      	mov	r7, r3
 800567a:	688e      	ldr	r6, [r1, #8]
 800567c:	4682      	mov	sl, r0
 800567e:	42be      	cmp	r6, r7
 8005680:	460c      	mov	r4, r1
 8005682:	4690      	mov	r8, r2
 8005684:	680b      	ldr	r3, [r1, #0]
 8005686:	d82d      	bhi.n	80056e4 <__ssputs_r+0x70>
 8005688:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800568c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005690:	d026      	beq.n	80056e0 <__ssputs_r+0x6c>
 8005692:	6965      	ldr	r5, [r4, #20]
 8005694:	6909      	ldr	r1, [r1, #16]
 8005696:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800569a:	eba3 0901 	sub.w	r9, r3, r1
 800569e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056a2:	1c7b      	adds	r3, r7, #1
 80056a4:	444b      	add	r3, r9
 80056a6:	106d      	asrs	r5, r5, #1
 80056a8:	429d      	cmp	r5, r3
 80056aa:	bf38      	it	cc
 80056ac:	461d      	movcc	r5, r3
 80056ae:	0553      	lsls	r3, r2, #21
 80056b0:	d527      	bpl.n	8005702 <__ssputs_r+0x8e>
 80056b2:	4629      	mov	r1, r5
 80056b4:	f7ff fbd2 	bl	8004e5c <_malloc_r>
 80056b8:	4606      	mov	r6, r0
 80056ba:	b360      	cbz	r0, 8005716 <__ssputs_r+0xa2>
 80056bc:	464a      	mov	r2, r9
 80056be:	6921      	ldr	r1, [r4, #16]
 80056c0:	f000 fa02 	bl	8005ac8 <memcpy>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056ce:	81a3      	strh	r3, [r4, #12]
 80056d0:	6126      	str	r6, [r4, #16]
 80056d2:	444e      	add	r6, r9
 80056d4:	6026      	str	r6, [r4, #0]
 80056d6:	463e      	mov	r6, r7
 80056d8:	6165      	str	r5, [r4, #20]
 80056da:	eba5 0509 	sub.w	r5, r5, r9
 80056de:	60a5      	str	r5, [r4, #8]
 80056e0:	42be      	cmp	r6, r7
 80056e2:	d900      	bls.n	80056e6 <__ssputs_r+0x72>
 80056e4:	463e      	mov	r6, r7
 80056e6:	4632      	mov	r2, r6
 80056e8:	4641      	mov	r1, r8
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	f000 f9c2 	bl	8005a74 <memmove>
 80056f0:	2000      	movs	r0, #0
 80056f2:	68a3      	ldr	r3, [r4, #8]
 80056f4:	1b9b      	subs	r3, r3, r6
 80056f6:	60a3      	str	r3, [r4, #8]
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	4433      	add	r3, r6
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005702:	462a      	mov	r2, r5
 8005704:	f000 fa32 	bl	8005b6c <_realloc_r>
 8005708:	4606      	mov	r6, r0
 800570a:	2800      	cmp	r0, #0
 800570c:	d1e0      	bne.n	80056d0 <__ssputs_r+0x5c>
 800570e:	4650      	mov	r0, sl
 8005710:	6921      	ldr	r1, [r4, #16]
 8005712:	f7ff fb31 	bl	8004d78 <_free_r>
 8005716:	230c      	movs	r3, #12
 8005718:	f8ca 3000 	str.w	r3, [sl]
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	e7e9      	b.n	80056fe <__ssputs_r+0x8a>
	...

0800572c <_svfiprintf_r>:
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005730:	4698      	mov	r8, r3
 8005732:	898b      	ldrh	r3, [r1, #12]
 8005734:	4607      	mov	r7, r0
 8005736:	061b      	lsls	r3, r3, #24
 8005738:	460d      	mov	r5, r1
 800573a:	4614      	mov	r4, r2
 800573c:	b09d      	sub	sp, #116	@ 0x74
 800573e:	d510      	bpl.n	8005762 <_svfiprintf_r+0x36>
 8005740:	690b      	ldr	r3, [r1, #16]
 8005742:	b973      	cbnz	r3, 8005762 <_svfiprintf_r+0x36>
 8005744:	2140      	movs	r1, #64	@ 0x40
 8005746:	f7ff fb89 	bl	8004e5c <_malloc_r>
 800574a:	6028      	str	r0, [r5, #0]
 800574c:	6128      	str	r0, [r5, #16]
 800574e:	b930      	cbnz	r0, 800575e <_svfiprintf_r+0x32>
 8005750:	230c      	movs	r3, #12
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005758:	b01d      	add	sp, #116	@ 0x74
 800575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575e:	2340      	movs	r3, #64	@ 0x40
 8005760:	616b      	str	r3, [r5, #20]
 8005762:	2300      	movs	r3, #0
 8005764:	9309      	str	r3, [sp, #36]	@ 0x24
 8005766:	2320      	movs	r3, #32
 8005768:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800576c:	2330      	movs	r3, #48	@ 0x30
 800576e:	f04f 0901 	mov.w	r9, #1
 8005772:	f8cd 800c 	str.w	r8, [sp, #12]
 8005776:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005910 <_svfiprintf_r+0x1e4>
 800577a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800577e:	4623      	mov	r3, r4
 8005780:	469a      	mov	sl, r3
 8005782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005786:	b10a      	cbz	r2, 800578c <_svfiprintf_r+0x60>
 8005788:	2a25      	cmp	r2, #37	@ 0x25
 800578a:	d1f9      	bne.n	8005780 <_svfiprintf_r+0x54>
 800578c:	ebba 0b04 	subs.w	fp, sl, r4
 8005790:	d00b      	beq.n	80057aa <_svfiprintf_r+0x7e>
 8005792:	465b      	mov	r3, fp
 8005794:	4622      	mov	r2, r4
 8005796:	4629      	mov	r1, r5
 8005798:	4638      	mov	r0, r7
 800579a:	f7ff ff6b 	bl	8005674 <__ssputs_r>
 800579e:	3001      	adds	r0, #1
 80057a0:	f000 80a7 	beq.w	80058f2 <_svfiprintf_r+0x1c6>
 80057a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057a6:	445a      	add	r2, fp
 80057a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80057aa:	f89a 3000 	ldrb.w	r3, [sl]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 809f 	beq.w	80058f2 <_svfiprintf_r+0x1c6>
 80057b4:	2300      	movs	r3, #0
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057be:	f10a 0a01 	add.w	sl, sl, #1
 80057c2:	9304      	str	r3, [sp, #16]
 80057c4:	9307      	str	r3, [sp, #28]
 80057c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80057cc:	4654      	mov	r4, sl
 80057ce:	2205      	movs	r2, #5
 80057d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057d4:	484e      	ldr	r0, [pc, #312]	@ (8005910 <_svfiprintf_r+0x1e4>)
 80057d6:	f7fe fc70 	bl	80040ba <memchr>
 80057da:	9a04      	ldr	r2, [sp, #16]
 80057dc:	b9d8      	cbnz	r0, 8005816 <_svfiprintf_r+0xea>
 80057de:	06d0      	lsls	r0, r2, #27
 80057e0:	bf44      	itt	mi
 80057e2:	2320      	movmi	r3, #32
 80057e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057e8:	0711      	lsls	r1, r2, #28
 80057ea:	bf44      	itt	mi
 80057ec:	232b      	movmi	r3, #43	@ 0x2b
 80057ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057f2:	f89a 3000 	ldrb.w	r3, [sl]
 80057f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80057f8:	d015      	beq.n	8005826 <_svfiprintf_r+0xfa>
 80057fa:	4654      	mov	r4, sl
 80057fc:	2000      	movs	r0, #0
 80057fe:	f04f 0c0a 	mov.w	ip, #10
 8005802:	9a07      	ldr	r2, [sp, #28]
 8005804:	4621      	mov	r1, r4
 8005806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800580a:	3b30      	subs	r3, #48	@ 0x30
 800580c:	2b09      	cmp	r3, #9
 800580e:	d94b      	bls.n	80058a8 <_svfiprintf_r+0x17c>
 8005810:	b1b0      	cbz	r0, 8005840 <_svfiprintf_r+0x114>
 8005812:	9207      	str	r2, [sp, #28]
 8005814:	e014      	b.n	8005840 <_svfiprintf_r+0x114>
 8005816:	eba0 0308 	sub.w	r3, r0, r8
 800581a:	fa09 f303 	lsl.w	r3, r9, r3
 800581e:	4313      	orrs	r3, r2
 8005820:	46a2      	mov	sl, r4
 8005822:	9304      	str	r3, [sp, #16]
 8005824:	e7d2      	b.n	80057cc <_svfiprintf_r+0xa0>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	1d19      	adds	r1, r3, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	9103      	str	r1, [sp, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfbb      	ittet	lt
 8005832:	425b      	neglt	r3, r3
 8005834:	f042 0202 	orrlt.w	r2, r2, #2
 8005838:	9307      	strge	r3, [sp, #28]
 800583a:	9307      	strlt	r3, [sp, #28]
 800583c:	bfb8      	it	lt
 800583e:	9204      	strlt	r2, [sp, #16]
 8005840:	7823      	ldrb	r3, [r4, #0]
 8005842:	2b2e      	cmp	r3, #46	@ 0x2e
 8005844:	d10a      	bne.n	800585c <_svfiprintf_r+0x130>
 8005846:	7863      	ldrb	r3, [r4, #1]
 8005848:	2b2a      	cmp	r3, #42	@ 0x2a
 800584a:	d132      	bne.n	80058b2 <_svfiprintf_r+0x186>
 800584c:	9b03      	ldr	r3, [sp, #12]
 800584e:	3402      	adds	r4, #2
 8005850:	1d1a      	adds	r2, r3, #4
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	9203      	str	r2, [sp, #12]
 8005856:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800585a:	9305      	str	r3, [sp, #20]
 800585c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005914 <_svfiprintf_r+0x1e8>
 8005860:	2203      	movs	r2, #3
 8005862:	4650      	mov	r0, sl
 8005864:	7821      	ldrb	r1, [r4, #0]
 8005866:	f7fe fc28 	bl	80040ba <memchr>
 800586a:	b138      	cbz	r0, 800587c <_svfiprintf_r+0x150>
 800586c:	2240      	movs	r2, #64	@ 0x40
 800586e:	9b04      	ldr	r3, [sp, #16]
 8005870:	eba0 000a 	sub.w	r0, r0, sl
 8005874:	4082      	lsls	r2, r0
 8005876:	4313      	orrs	r3, r2
 8005878:	3401      	adds	r4, #1
 800587a:	9304      	str	r3, [sp, #16]
 800587c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005880:	2206      	movs	r2, #6
 8005882:	4825      	ldr	r0, [pc, #148]	@ (8005918 <_svfiprintf_r+0x1ec>)
 8005884:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005888:	f7fe fc17 	bl	80040ba <memchr>
 800588c:	2800      	cmp	r0, #0
 800588e:	d036      	beq.n	80058fe <_svfiprintf_r+0x1d2>
 8005890:	4b22      	ldr	r3, [pc, #136]	@ (800591c <_svfiprintf_r+0x1f0>)
 8005892:	bb1b      	cbnz	r3, 80058dc <_svfiprintf_r+0x1b0>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	3307      	adds	r3, #7
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	3308      	adds	r3, #8
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a2:	4433      	add	r3, r6
 80058a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058a6:	e76a      	b.n	800577e <_svfiprintf_r+0x52>
 80058a8:	460c      	mov	r4, r1
 80058aa:	2001      	movs	r0, #1
 80058ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80058b0:	e7a8      	b.n	8005804 <_svfiprintf_r+0xd8>
 80058b2:	2300      	movs	r3, #0
 80058b4:	f04f 0c0a 	mov.w	ip, #10
 80058b8:	4619      	mov	r1, r3
 80058ba:	3401      	adds	r4, #1
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	4620      	mov	r0, r4
 80058c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c4:	3a30      	subs	r2, #48	@ 0x30
 80058c6:	2a09      	cmp	r2, #9
 80058c8:	d903      	bls.n	80058d2 <_svfiprintf_r+0x1a6>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0c6      	beq.n	800585c <_svfiprintf_r+0x130>
 80058ce:	9105      	str	r1, [sp, #20]
 80058d0:	e7c4      	b.n	800585c <_svfiprintf_r+0x130>
 80058d2:	4604      	mov	r4, r0
 80058d4:	2301      	movs	r3, #1
 80058d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058da:	e7f0      	b.n	80058be <_svfiprintf_r+0x192>
 80058dc:	ab03      	add	r3, sp, #12
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	462a      	mov	r2, r5
 80058e2:	4638      	mov	r0, r7
 80058e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <_svfiprintf_r+0x1f4>)
 80058e6:	a904      	add	r1, sp, #16
 80058e8:	f7fd fe84 	bl	80035f4 <_printf_float>
 80058ec:	1c42      	adds	r2, r0, #1
 80058ee:	4606      	mov	r6, r0
 80058f0:	d1d6      	bne.n	80058a0 <_svfiprintf_r+0x174>
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	065b      	lsls	r3, r3, #25
 80058f6:	f53f af2d 	bmi.w	8005754 <_svfiprintf_r+0x28>
 80058fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058fc:	e72c      	b.n	8005758 <_svfiprintf_r+0x2c>
 80058fe:	ab03      	add	r3, sp, #12
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	462a      	mov	r2, r5
 8005904:	4638      	mov	r0, r7
 8005906:	4b06      	ldr	r3, [pc, #24]	@ (8005920 <_svfiprintf_r+0x1f4>)
 8005908:	a904      	add	r1, sp, #16
 800590a:	f7fe f911 	bl	8003b30 <_printf_i>
 800590e:	e7ed      	b.n	80058ec <_svfiprintf_r+0x1c0>
 8005910:	080063c8 	.word	0x080063c8
 8005914:	080063ce 	.word	0x080063ce
 8005918:	080063d2 	.word	0x080063d2
 800591c:	080035f5 	.word	0x080035f5
 8005920:	08005675 	.word	0x08005675

08005924 <__sflush_r>:
 8005924:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	0716      	lsls	r6, r2, #28
 800592c:	4605      	mov	r5, r0
 800592e:	460c      	mov	r4, r1
 8005930:	d454      	bmi.n	80059dc <__sflush_r+0xb8>
 8005932:	684b      	ldr	r3, [r1, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	dc02      	bgt.n	800593e <__sflush_r+0x1a>
 8005938:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	dd48      	ble.n	80059d0 <__sflush_r+0xac>
 800593e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005940:	2e00      	cmp	r6, #0
 8005942:	d045      	beq.n	80059d0 <__sflush_r+0xac>
 8005944:	2300      	movs	r3, #0
 8005946:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800594a:	682f      	ldr	r7, [r5, #0]
 800594c:	6a21      	ldr	r1, [r4, #32]
 800594e:	602b      	str	r3, [r5, #0]
 8005950:	d030      	beq.n	80059b4 <__sflush_r+0x90>
 8005952:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	0759      	lsls	r1, r3, #29
 8005958:	d505      	bpl.n	8005966 <__sflush_r+0x42>
 800595a:	6863      	ldr	r3, [r4, #4]
 800595c:	1ad2      	subs	r2, r2, r3
 800595e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005960:	b10b      	cbz	r3, 8005966 <__sflush_r+0x42>
 8005962:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005964:	1ad2      	subs	r2, r2, r3
 8005966:	2300      	movs	r3, #0
 8005968:	4628      	mov	r0, r5
 800596a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800596c:	6a21      	ldr	r1, [r4, #32]
 800596e:	47b0      	blx	r6
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	d106      	bne.n	8005984 <__sflush_r+0x60>
 8005976:	6829      	ldr	r1, [r5, #0]
 8005978:	291d      	cmp	r1, #29
 800597a:	d82b      	bhi.n	80059d4 <__sflush_r+0xb0>
 800597c:	4a28      	ldr	r2, [pc, #160]	@ (8005a20 <__sflush_r+0xfc>)
 800597e:	410a      	asrs	r2, r1
 8005980:	07d6      	lsls	r6, r2, #31
 8005982:	d427      	bmi.n	80059d4 <__sflush_r+0xb0>
 8005984:	2200      	movs	r2, #0
 8005986:	6062      	str	r2, [r4, #4]
 8005988:	6922      	ldr	r2, [r4, #16]
 800598a:	04d9      	lsls	r1, r3, #19
 800598c:	6022      	str	r2, [r4, #0]
 800598e:	d504      	bpl.n	800599a <__sflush_r+0x76>
 8005990:	1c42      	adds	r2, r0, #1
 8005992:	d101      	bne.n	8005998 <__sflush_r+0x74>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b903      	cbnz	r3, 800599a <__sflush_r+0x76>
 8005998:	6560      	str	r0, [r4, #84]	@ 0x54
 800599a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800599c:	602f      	str	r7, [r5, #0]
 800599e:	b1b9      	cbz	r1, 80059d0 <__sflush_r+0xac>
 80059a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059a4:	4299      	cmp	r1, r3
 80059a6:	d002      	beq.n	80059ae <__sflush_r+0x8a>
 80059a8:	4628      	mov	r0, r5
 80059aa:	f7ff f9e5 	bl	8004d78 <_free_r>
 80059ae:	2300      	movs	r3, #0
 80059b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059b2:	e00d      	b.n	80059d0 <__sflush_r+0xac>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4628      	mov	r0, r5
 80059b8:	47b0      	blx	r6
 80059ba:	4602      	mov	r2, r0
 80059bc:	1c50      	adds	r0, r2, #1
 80059be:	d1c9      	bne.n	8005954 <__sflush_r+0x30>
 80059c0:	682b      	ldr	r3, [r5, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0c6      	beq.n	8005954 <__sflush_r+0x30>
 80059c6:	2b1d      	cmp	r3, #29
 80059c8:	d001      	beq.n	80059ce <__sflush_r+0xaa>
 80059ca:	2b16      	cmp	r3, #22
 80059cc:	d11d      	bne.n	8005a0a <__sflush_r+0xe6>
 80059ce:	602f      	str	r7, [r5, #0]
 80059d0:	2000      	movs	r0, #0
 80059d2:	e021      	b.n	8005a18 <__sflush_r+0xf4>
 80059d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059d8:	b21b      	sxth	r3, r3
 80059da:	e01a      	b.n	8005a12 <__sflush_r+0xee>
 80059dc:	690f      	ldr	r7, [r1, #16]
 80059de:	2f00      	cmp	r7, #0
 80059e0:	d0f6      	beq.n	80059d0 <__sflush_r+0xac>
 80059e2:	0793      	lsls	r3, r2, #30
 80059e4:	bf18      	it	ne
 80059e6:	2300      	movne	r3, #0
 80059e8:	680e      	ldr	r6, [r1, #0]
 80059ea:	bf08      	it	eq
 80059ec:	694b      	ldreq	r3, [r1, #20]
 80059ee:	1bf6      	subs	r6, r6, r7
 80059f0:	600f      	str	r7, [r1, #0]
 80059f2:	608b      	str	r3, [r1, #8]
 80059f4:	2e00      	cmp	r6, #0
 80059f6:	ddeb      	ble.n	80059d0 <__sflush_r+0xac>
 80059f8:	4633      	mov	r3, r6
 80059fa:	463a      	mov	r2, r7
 80059fc:	4628      	mov	r0, r5
 80059fe:	6a21      	ldr	r1, [r4, #32]
 8005a00:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005a04:	47e0      	blx	ip
 8005a06:	2800      	cmp	r0, #0
 8005a08:	dc07      	bgt.n	8005a1a <__sflush_r+0xf6>
 8005a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a1a:	4407      	add	r7, r0
 8005a1c:	1a36      	subs	r6, r6, r0
 8005a1e:	e7e9      	b.n	80059f4 <__sflush_r+0xd0>
 8005a20:	dfbffffe 	.word	0xdfbffffe

08005a24 <_fflush_r>:
 8005a24:	b538      	push	{r3, r4, r5, lr}
 8005a26:	690b      	ldr	r3, [r1, #16]
 8005a28:	4605      	mov	r5, r0
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	b913      	cbnz	r3, 8005a34 <_fflush_r+0x10>
 8005a2e:	2500      	movs	r5, #0
 8005a30:	4628      	mov	r0, r5
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	b118      	cbz	r0, 8005a3e <_fflush_r+0x1a>
 8005a36:	6a03      	ldr	r3, [r0, #32]
 8005a38:	b90b      	cbnz	r3, 8005a3e <_fflush_r+0x1a>
 8005a3a:	f7fe fa25 	bl	8003e88 <__sinit>
 8005a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d0f3      	beq.n	8005a2e <_fflush_r+0xa>
 8005a46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a48:	07d0      	lsls	r0, r2, #31
 8005a4a:	d404      	bmi.n	8005a56 <_fflush_r+0x32>
 8005a4c:	0599      	lsls	r1, r3, #22
 8005a4e:	d402      	bmi.n	8005a56 <_fflush_r+0x32>
 8005a50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a52:	f7fe fb30 	bl	80040b6 <__retarget_lock_acquire_recursive>
 8005a56:	4628      	mov	r0, r5
 8005a58:	4621      	mov	r1, r4
 8005a5a:	f7ff ff63 	bl	8005924 <__sflush_r>
 8005a5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a60:	4605      	mov	r5, r0
 8005a62:	07da      	lsls	r2, r3, #31
 8005a64:	d4e4      	bmi.n	8005a30 <_fflush_r+0xc>
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	059b      	lsls	r3, r3, #22
 8005a6a:	d4e1      	bmi.n	8005a30 <_fflush_r+0xc>
 8005a6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a6e:	f7fe fb23 	bl	80040b8 <__retarget_lock_release_recursive>
 8005a72:	e7dd      	b.n	8005a30 <_fflush_r+0xc>

08005a74 <memmove>:
 8005a74:	4288      	cmp	r0, r1
 8005a76:	b510      	push	{r4, lr}
 8005a78:	eb01 0402 	add.w	r4, r1, r2
 8005a7c:	d902      	bls.n	8005a84 <memmove+0x10>
 8005a7e:	4284      	cmp	r4, r0
 8005a80:	4623      	mov	r3, r4
 8005a82:	d807      	bhi.n	8005a94 <memmove+0x20>
 8005a84:	1e43      	subs	r3, r0, #1
 8005a86:	42a1      	cmp	r1, r4
 8005a88:	d008      	beq.n	8005a9c <memmove+0x28>
 8005a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a92:	e7f8      	b.n	8005a86 <memmove+0x12>
 8005a94:	4601      	mov	r1, r0
 8005a96:	4402      	add	r2, r0
 8005a98:	428a      	cmp	r2, r1
 8005a9a:	d100      	bne.n	8005a9e <memmove+0x2a>
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005aa6:	e7f7      	b.n	8005a98 <memmove+0x24>

08005aa8 <_sbrk_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	2300      	movs	r3, #0
 8005aac:	4d05      	ldr	r5, [pc, #20]	@ (8005ac4 <_sbrk_r+0x1c>)
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fc fe18 	bl	80026e8 <_sbrk>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_sbrk_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_sbrk_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20000568 	.word	0x20000568

08005ac8 <memcpy>:
 8005ac8:	440a      	add	r2, r1
 8005aca:	4291      	cmp	r1, r2
 8005acc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005ad0:	d100      	bne.n	8005ad4 <memcpy+0xc>
 8005ad2:	4770      	bx	lr
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ada:	4291      	cmp	r1, r2
 8005adc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ae0:	d1f9      	bne.n	8005ad6 <memcpy+0xe>
 8005ae2:	bd10      	pop	{r4, pc}

08005ae4 <__assert_func>:
 8005ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ae6:	4614      	mov	r4, r2
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <__assert_func+0x2c>)
 8005aec:	4605      	mov	r5, r0
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68d8      	ldr	r0, [r3, #12]
 8005af2:	b954      	cbnz	r4, 8005b0a <__assert_func+0x26>
 8005af4:	4b07      	ldr	r3, [pc, #28]	@ (8005b14 <__assert_func+0x30>)
 8005af6:	461c      	mov	r4, r3
 8005af8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005afc:	9100      	str	r1, [sp, #0]
 8005afe:	462b      	mov	r3, r5
 8005b00:	4905      	ldr	r1, [pc, #20]	@ (8005b18 <__assert_func+0x34>)
 8005b02:	f000 f86f 	bl	8005be4 <fiprintf>
 8005b06:	f000 f87f 	bl	8005c08 <abort>
 8005b0a:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <__assert_func+0x38>)
 8005b0c:	e7f4      	b.n	8005af8 <__assert_func+0x14>
 8005b0e:	bf00      	nop
 8005b10:	20000010 	.word	0x20000010
 8005b14:	0800641e 	.word	0x0800641e
 8005b18:	080063f0 	.word	0x080063f0
 8005b1c:	080063e3 	.word	0x080063e3

08005b20 <_calloc_r>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	fba1 5402 	umull	r5, r4, r1, r2
 8005b26:	b93c      	cbnz	r4, 8005b38 <_calloc_r+0x18>
 8005b28:	4629      	mov	r1, r5
 8005b2a:	f7ff f997 	bl	8004e5c <_malloc_r>
 8005b2e:	4606      	mov	r6, r0
 8005b30:	b928      	cbnz	r0, 8005b3e <_calloc_r+0x1e>
 8005b32:	2600      	movs	r6, #0
 8005b34:	4630      	mov	r0, r6
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	220c      	movs	r2, #12
 8005b3a:	6002      	str	r2, [r0, #0]
 8005b3c:	e7f9      	b.n	8005b32 <_calloc_r+0x12>
 8005b3e:	462a      	mov	r2, r5
 8005b40:	4621      	mov	r1, r4
 8005b42:	f7fe fa3a 	bl	8003fba <memset>
 8005b46:	e7f5      	b.n	8005b34 <_calloc_r+0x14>

08005b48 <__ascii_mbtowc>:
 8005b48:	b082      	sub	sp, #8
 8005b4a:	b901      	cbnz	r1, 8005b4e <__ascii_mbtowc+0x6>
 8005b4c:	a901      	add	r1, sp, #4
 8005b4e:	b142      	cbz	r2, 8005b62 <__ascii_mbtowc+0x1a>
 8005b50:	b14b      	cbz	r3, 8005b66 <__ascii_mbtowc+0x1e>
 8005b52:	7813      	ldrb	r3, [r2, #0]
 8005b54:	600b      	str	r3, [r1, #0]
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	1e10      	subs	r0, r2, #0
 8005b5a:	bf18      	it	ne
 8005b5c:	2001      	movne	r0, #1
 8005b5e:	b002      	add	sp, #8
 8005b60:	4770      	bx	lr
 8005b62:	4610      	mov	r0, r2
 8005b64:	e7fb      	b.n	8005b5e <__ascii_mbtowc+0x16>
 8005b66:	f06f 0001 	mvn.w	r0, #1
 8005b6a:	e7f8      	b.n	8005b5e <__ascii_mbtowc+0x16>

08005b6c <_realloc_r>:
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	4680      	mov	r8, r0
 8005b72:	4615      	mov	r5, r2
 8005b74:	460c      	mov	r4, r1
 8005b76:	b921      	cbnz	r1, 8005b82 <_realloc_r+0x16>
 8005b78:	4611      	mov	r1, r2
 8005b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b7e:	f7ff b96d 	b.w	8004e5c <_malloc_r>
 8005b82:	b92a      	cbnz	r2, 8005b90 <_realloc_r+0x24>
 8005b84:	f7ff f8f8 	bl	8004d78 <_free_r>
 8005b88:	2400      	movs	r4, #0
 8005b8a:	4620      	mov	r0, r4
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	f000 f841 	bl	8005c16 <_malloc_usable_size_r>
 8005b94:	4285      	cmp	r5, r0
 8005b96:	4606      	mov	r6, r0
 8005b98:	d802      	bhi.n	8005ba0 <_realloc_r+0x34>
 8005b9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b9e:	d8f4      	bhi.n	8005b8a <_realloc_r+0x1e>
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	4640      	mov	r0, r8
 8005ba4:	f7ff f95a 	bl	8004e5c <_malloc_r>
 8005ba8:	4607      	mov	r7, r0
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d0ec      	beq.n	8005b88 <_realloc_r+0x1c>
 8005bae:	42b5      	cmp	r5, r6
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	bf28      	it	cs
 8005bb6:	4632      	movcs	r2, r6
 8005bb8:	f7ff ff86 	bl	8005ac8 <memcpy>
 8005bbc:	4621      	mov	r1, r4
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f7ff f8da 	bl	8004d78 <_free_r>
 8005bc4:	463c      	mov	r4, r7
 8005bc6:	e7e0      	b.n	8005b8a <_realloc_r+0x1e>

08005bc8 <__ascii_wctomb>:
 8005bc8:	4603      	mov	r3, r0
 8005bca:	4608      	mov	r0, r1
 8005bcc:	b141      	cbz	r1, 8005be0 <__ascii_wctomb+0x18>
 8005bce:	2aff      	cmp	r2, #255	@ 0xff
 8005bd0:	d904      	bls.n	8005bdc <__ascii_wctomb+0x14>
 8005bd2:	228a      	movs	r2, #138	@ 0x8a
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	4770      	bx	lr
 8005bdc:	2001      	movs	r0, #1
 8005bde:	700a      	strb	r2, [r1, #0]
 8005be0:	4770      	bx	lr
	...

08005be4 <fiprintf>:
 8005be4:	b40e      	push	{r1, r2, r3}
 8005be6:	b503      	push	{r0, r1, lr}
 8005be8:	4601      	mov	r1, r0
 8005bea:	ab03      	add	r3, sp, #12
 8005bec:	4805      	ldr	r0, [pc, #20]	@ (8005c04 <fiprintf+0x20>)
 8005bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bf2:	6800      	ldr	r0, [r0, #0]
 8005bf4:	9301      	str	r3, [sp, #4]
 8005bf6:	f000 f83d 	bl	8005c74 <_vfiprintf_r>
 8005bfa:	b002      	add	sp, #8
 8005bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c00:	b003      	add	sp, #12
 8005c02:	4770      	bx	lr
 8005c04:	20000010 	.word	0x20000010

08005c08 <abort>:
 8005c08:	2006      	movs	r0, #6
 8005c0a:	b508      	push	{r3, lr}
 8005c0c:	f000 fa06 	bl	800601c <raise>
 8005c10:	2001      	movs	r0, #1
 8005c12:	f7fc fcf4 	bl	80025fe <_exit>

08005c16 <_malloc_usable_size_r>:
 8005c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c1a:	1f18      	subs	r0, r3, #4
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	bfbc      	itt	lt
 8005c20:	580b      	ldrlt	r3, [r1, r0]
 8005c22:	18c0      	addlt	r0, r0, r3
 8005c24:	4770      	bx	lr

08005c26 <__sfputc_r>:
 8005c26:	6893      	ldr	r3, [r2, #8]
 8005c28:	b410      	push	{r4}
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	6093      	str	r3, [r2, #8]
 8005c30:	da07      	bge.n	8005c42 <__sfputc_r+0x1c>
 8005c32:	6994      	ldr	r4, [r2, #24]
 8005c34:	42a3      	cmp	r3, r4
 8005c36:	db01      	blt.n	8005c3c <__sfputc_r+0x16>
 8005c38:	290a      	cmp	r1, #10
 8005c3a:	d102      	bne.n	8005c42 <__sfputc_r+0x1c>
 8005c3c:	bc10      	pop	{r4}
 8005c3e:	f000 b931 	b.w	8005ea4 <__swbuf_r>
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	1c58      	adds	r0, r3, #1
 8005c46:	6010      	str	r0, [r2, #0]
 8005c48:	7019      	strb	r1, [r3, #0]
 8005c4a:	4608      	mov	r0, r1
 8005c4c:	bc10      	pop	{r4}
 8005c4e:	4770      	bx	lr

08005c50 <__sfputs_r>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	4606      	mov	r6, r0
 8005c54:	460f      	mov	r7, r1
 8005c56:	4614      	mov	r4, r2
 8005c58:	18d5      	adds	r5, r2, r3
 8005c5a:	42ac      	cmp	r4, r5
 8005c5c:	d101      	bne.n	8005c62 <__sfputs_r+0x12>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e007      	b.n	8005c72 <__sfputs_r+0x22>
 8005c62:	463a      	mov	r2, r7
 8005c64:	4630      	mov	r0, r6
 8005c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6a:	f7ff ffdc 	bl	8005c26 <__sfputc_r>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	d1f3      	bne.n	8005c5a <__sfputs_r+0xa>
 8005c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005c74 <_vfiprintf_r>:
 8005c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	460d      	mov	r5, r1
 8005c7a:	4614      	mov	r4, r2
 8005c7c:	4698      	mov	r8, r3
 8005c7e:	4606      	mov	r6, r0
 8005c80:	b09d      	sub	sp, #116	@ 0x74
 8005c82:	b118      	cbz	r0, 8005c8c <_vfiprintf_r+0x18>
 8005c84:	6a03      	ldr	r3, [r0, #32]
 8005c86:	b90b      	cbnz	r3, 8005c8c <_vfiprintf_r+0x18>
 8005c88:	f7fe f8fe 	bl	8003e88 <__sinit>
 8005c8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c8e:	07d9      	lsls	r1, r3, #31
 8005c90:	d405      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	059a      	lsls	r2, r3, #22
 8005c96:	d402      	bmi.n	8005c9e <_vfiprintf_r+0x2a>
 8005c98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c9a:	f7fe fa0c 	bl	80040b6 <__retarget_lock_acquire_recursive>
 8005c9e:	89ab      	ldrh	r3, [r5, #12]
 8005ca0:	071b      	lsls	r3, r3, #28
 8005ca2:	d501      	bpl.n	8005ca8 <_vfiprintf_r+0x34>
 8005ca4:	692b      	ldr	r3, [r5, #16]
 8005ca6:	b99b      	cbnz	r3, 8005cd0 <_vfiprintf_r+0x5c>
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 f938 	bl	8005f20 <__swsetup_r>
 8005cb0:	b170      	cbz	r0, 8005cd0 <_vfiprintf_r+0x5c>
 8005cb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cb4:	07dc      	lsls	r4, r3, #31
 8005cb6:	d504      	bpl.n	8005cc2 <_vfiprintf_r+0x4e>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cbc:	b01d      	add	sp, #116	@ 0x74
 8005cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc2:	89ab      	ldrh	r3, [r5, #12]
 8005cc4:	0598      	lsls	r0, r3, #22
 8005cc6:	d4f7      	bmi.n	8005cb8 <_vfiprintf_r+0x44>
 8005cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cca:	f7fe f9f5 	bl	80040b8 <__retarget_lock_release_recursive>
 8005cce:	e7f3      	b.n	8005cb8 <_vfiprintf_r+0x44>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cd4:	2320      	movs	r3, #32
 8005cd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cda:	2330      	movs	r3, #48	@ 0x30
 8005cdc:	f04f 0901 	mov.w	r9, #1
 8005ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ce4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005e90 <_vfiprintf_r+0x21c>
 8005ce8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cec:	4623      	mov	r3, r4
 8005cee:	469a      	mov	sl, r3
 8005cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cf4:	b10a      	cbz	r2, 8005cfa <_vfiprintf_r+0x86>
 8005cf6:	2a25      	cmp	r2, #37	@ 0x25
 8005cf8:	d1f9      	bne.n	8005cee <_vfiprintf_r+0x7a>
 8005cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8005cfe:	d00b      	beq.n	8005d18 <_vfiprintf_r+0xa4>
 8005d00:	465b      	mov	r3, fp
 8005d02:	4622      	mov	r2, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff ffa2 	bl	8005c50 <__sfputs_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	f000 80a7 	beq.w	8005e60 <_vfiprintf_r+0x1ec>
 8005d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d14:	445a      	add	r2, fp
 8005d16:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d18:	f89a 3000 	ldrb.w	r3, [sl]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 809f 	beq.w	8005e60 <_vfiprintf_r+0x1ec>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d2c:	f10a 0a01 	add.w	sl, sl, #1
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	9307      	str	r3, [sp, #28]
 8005d34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d38:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d3a:	4654      	mov	r4, sl
 8005d3c:	2205      	movs	r2, #5
 8005d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d42:	4853      	ldr	r0, [pc, #332]	@ (8005e90 <_vfiprintf_r+0x21c>)
 8005d44:	f7fe f9b9 	bl	80040ba <memchr>
 8005d48:	9a04      	ldr	r2, [sp, #16]
 8005d4a:	b9d8      	cbnz	r0, 8005d84 <_vfiprintf_r+0x110>
 8005d4c:	06d1      	lsls	r1, r2, #27
 8005d4e:	bf44      	itt	mi
 8005d50:	2320      	movmi	r3, #32
 8005d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d56:	0713      	lsls	r3, r2, #28
 8005d58:	bf44      	itt	mi
 8005d5a:	232b      	movmi	r3, #43	@ 0x2b
 8005d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d60:	f89a 3000 	ldrb.w	r3, [sl]
 8005d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d66:	d015      	beq.n	8005d94 <_vfiprintf_r+0x120>
 8005d68:	4654      	mov	r4, sl
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	f04f 0c0a 	mov.w	ip, #10
 8005d70:	9a07      	ldr	r2, [sp, #28]
 8005d72:	4621      	mov	r1, r4
 8005d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d78:	3b30      	subs	r3, #48	@ 0x30
 8005d7a:	2b09      	cmp	r3, #9
 8005d7c:	d94b      	bls.n	8005e16 <_vfiprintf_r+0x1a2>
 8005d7e:	b1b0      	cbz	r0, 8005dae <_vfiprintf_r+0x13a>
 8005d80:	9207      	str	r2, [sp, #28]
 8005d82:	e014      	b.n	8005dae <_vfiprintf_r+0x13a>
 8005d84:	eba0 0308 	sub.w	r3, r0, r8
 8005d88:	fa09 f303 	lsl.w	r3, r9, r3
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	46a2      	mov	sl, r4
 8005d90:	9304      	str	r3, [sp, #16]
 8005d92:	e7d2      	b.n	8005d3a <_vfiprintf_r+0xc6>
 8005d94:	9b03      	ldr	r3, [sp, #12]
 8005d96:	1d19      	adds	r1, r3, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	9103      	str	r1, [sp, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	bfbb      	ittet	lt
 8005da0:	425b      	neglt	r3, r3
 8005da2:	f042 0202 	orrlt.w	r2, r2, #2
 8005da6:	9307      	strge	r3, [sp, #28]
 8005da8:	9307      	strlt	r3, [sp, #28]
 8005daa:	bfb8      	it	lt
 8005dac:	9204      	strlt	r2, [sp, #16]
 8005dae:	7823      	ldrb	r3, [r4, #0]
 8005db0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005db2:	d10a      	bne.n	8005dca <_vfiprintf_r+0x156>
 8005db4:	7863      	ldrb	r3, [r4, #1]
 8005db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005db8:	d132      	bne.n	8005e20 <_vfiprintf_r+0x1ac>
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	3402      	adds	r4, #2
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	9203      	str	r2, [sp, #12]
 8005dc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005dc8:	9305      	str	r3, [sp, #20]
 8005dca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005e94 <_vfiprintf_r+0x220>
 8005dce:	2203      	movs	r2, #3
 8005dd0:	4650      	mov	r0, sl
 8005dd2:	7821      	ldrb	r1, [r4, #0]
 8005dd4:	f7fe f971 	bl	80040ba <memchr>
 8005dd8:	b138      	cbz	r0, 8005dea <_vfiprintf_r+0x176>
 8005dda:	2240      	movs	r2, #64	@ 0x40
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	eba0 000a 	sub.w	r0, r0, sl
 8005de2:	4082      	lsls	r2, r0
 8005de4:	4313      	orrs	r3, r2
 8005de6:	3401      	adds	r4, #1
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dee:	2206      	movs	r2, #6
 8005df0:	4829      	ldr	r0, [pc, #164]	@ (8005e98 <_vfiprintf_r+0x224>)
 8005df2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005df6:	f7fe f960 	bl	80040ba <memchr>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	d03f      	beq.n	8005e7e <_vfiprintf_r+0x20a>
 8005dfe:	4b27      	ldr	r3, [pc, #156]	@ (8005e9c <_vfiprintf_r+0x228>)
 8005e00:	bb1b      	cbnz	r3, 8005e4a <_vfiprintf_r+0x1d6>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	3307      	adds	r3, #7
 8005e06:	f023 0307 	bic.w	r3, r3, #7
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e10:	443b      	add	r3, r7
 8005e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e14:	e76a      	b.n	8005cec <_vfiprintf_r+0x78>
 8005e16:	460c      	mov	r4, r1
 8005e18:	2001      	movs	r0, #1
 8005e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e1e:	e7a8      	b.n	8005d72 <_vfiprintf_r+0xfe>
 8005e20:	2300      	movs	r3, #0
 8005e22:	f04f 0c0a 	mov.w	ip, #10
 8005e26:	4619      	mov	r1, r3
 8005e28:	3401      	adds	r4, #1
 8005e2a:	9305      	str	r3, [sp, #20]
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e32:	3a30      	subs	r2, #48	@ 0x30
 8005e34:	2a09      	cmp	r2, #9
 8005e36:	d903      	bls.n	8005e40 <_vfiprintf_r+0x1cc>
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0c6      	beq.n	8005dca <_vfiprintf_r+0x156>
 8005e3c:	9105      	str	r1, [sp, #20]
 8005e3e:	e7c4      	b.n	8005dca <_vfiprintf_r+0x156>
 8005e40:	4604      	mov	r4, r0
 8005e42:	2301      	movs	r3, #1
 8005e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e48:	e7f0      	b.n	8005e2c <_vfiprintf_r+0x1b8>
 8005e4a:	ab03      	add	r3, sp, #12
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	462a      	mov	r2, r5
 8005e50:	4630      	mov	r0, r6
 8005e52:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <_vfiprintf_r+0x22c>)
 8005e54:	a904      	add	r1, sp, #16
 8005e56:	f7fd fbcd 	bl	80035f4 <_printf_float>
 8005e5a:	4607      	mov	r7, r0
 8005e5c:	1c78      	adds	r0, r7, #1
 8005e5e:	d1d6      	bne.n	8005e0e <_vfiprintf_r+0x19a>
 8005e60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e62:	07d9      	lsls	r1, r3, #31
 8005e64:	d405      	bmi.n	8005e72 <_vfiprintf_r+0x1fe>
 8005e66:	89ab      	ldrh	r3, [r5, #12]
 8005e68:	059a      	lsls	r2, r3, #22
 8005e6a:	d402      	bmi.n	8005e72 <_vfiprintf_r+0x1fe>
 8005e6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e6e:	f7fe f923 	bl	80040b8 <__retarget_lock_release_recursive>
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	065b      	lsls	r3, r3, #25
 8005e76:	f53f af1f 	bmi.w	8005cb8 <_vfiprintf_r+0x44>
 8005e7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e7c:	e71e      	b.n	8005cbc <_vfiprintf_r+0x48>
 8005e7e:	ab03      	add	r3, sp, #12
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	462a      	mov	r2, r5
 8005e84:	4630      	mov	r0, r6
 8005e86:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <_vfiprintf_r+0x22c>)
 8005e88:	a904      	add	r1, sp, #16
 8005e8a:	f7fd fe51 	bl	8003b30 <_printf_i>
 8005e8e:	e7e4      	b.n	8005e5a <_vfiprintf_r+0x1e6>
 8005e90:	080063c8 	.word	0x080063c8
 8005e94:	080063ce 	.word	0x080063ce
 8005e98:	080063d2 	.word	0x080063d2
 8005e9c:	080035f5 	.word	0x080035f5
 8005ea0:	08005c51 	.word	0x08005c51

08005ea4 <__swbuf_r>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	460e      	mov	r6, r1
 8005ea8:	4614      	mov	r4, r2
 8005eaa:	4605      	mov	r5, r0
 8005eac:	b118      	cbz	r0, 8005eb6 <__swbuf_r+0x12>
 8005eae:	6a03      	ldr	r3, [r0, #32]
 8005eb0:	b90b      	cbnz	r3, 8005eb6 <__swbuf_r+0x12>
 8005eb2:	f7fd ffe9 	bl	8003e88 <__sinit>
 8005eb6:	69a3      	ldr	r3, [r4, #24]
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	071a      	lsls	r2, r3, #28
 8005ebe:	d501      	bpl.n	8005ec4 <__swbuf_r+0x20>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	b943      	cbnz	r3, 8005ed6 <__swbuf_r+0x32>
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f000 f82a 	bl	8005f20 <__swsetup_r>
 8005ecc:	b118      	cbz	r0, 8005ed6 <__swbuf_r+0x32>
 8005ece:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	b2f6      	uxtb	r6, r6
 8005edc:	1a98      	subs	r0, r3, r2
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	4637      	mov	r7, r6
 8005ee2:	4283      	cmp	r3, r0
 8005ee4:	dc05      	bgt.n	8005ef2 <__swbuf_r+0x4e>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f7ff fd9b 	bl	8005a24 <_fflush_r>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	d1ed      	bne.n	8005ece <__swbuf_r+0x2a>
 8005ef2:	68a3      	ldr	r3, [r4, #8]
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	60a3      	str	r3, [r4, #8]
 8005ef8:	6823      	ldr	r3, [r4, #0]
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	6022      	str	r2, [r4, #0]
 8005efe:	701e      	strb	r6, [r3, #0]
 8005f00:	6962      	ldr	r2, [r4, #20]
 8005f02:	1c43      	adds	r3, r0, #1
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d004      	beq.n	8005f12 <__swbuf_r+0x6e>
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d5e1      	bpl.n	8005ed2 <__swbuf_r+0x2e>
 8005f0e:	2e0a      	cmp	r6, #10
 8005f10:	d1df      	bne.n	8005ed2 <__swbuf_r+0x2e>
 8005f12:	4621      	mov	r1, r4
 8005f14:	4628      	mov	r0, r5
 8005f16:	f7ff fd85 	bl	8005a24 <_fflush_r>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	d0d9      	beq.n	8005ed2 <__swbuf_r+0x2e>
 8005f1e:	e7d6      	b.n	8005ece <__swbuf_r+0x2a>

08005f20 <__swsetup_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4b29      	ldr	r3, [pc, #164]	@ (8005fc8 <__swsetup_r+0xa8>)
 8005f24:	4605      	mov	r5, r0
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	460c      	mov	r4, r1
 8005f2a:	b118      	cbz	r0, 8005f34 <__swsetup_r+0x14>
 8005f2c:	6a03      	ldr	r3, [r0, #32]
 8005f2e:	b90b      	cbnz	r3, 8005f34 <__swsetup_r+0x14>
 8005f30:	f7fd ffaa 	bl	8003e88 <__sinit>
 8005f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f38:	0719      	lsls	r1, r3, #28
 8005f3a:	d422      	bmi.n	8005f82 <__swsetup_r+0x62>
 8005f3c:	06da      	lsls	r2, r3, #27
 8005f3e:	d407      	bmi.n	8005f50 <__swsetup_r+0x30>
 8005f40:	2209      	movs	r2, #9
 8005f42:	602a      	str	r2, [r5, #0]
 8005f44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	e033      	b.n	8005fb8 <__swsetup_r+0x98>
 8005f50:	0758      	lsls	r0, r3, #29
 8005f52:	d512      	bpl.n	8005f7a <__swsetup_r+0x5a>
 8005f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f56:	b141      	cbz	r1, 8005f6a <__swsetup_r+0x4a>
 8005f58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	d002      	beq.n	8005f66 <__swsetup_r+0x46>
 8005f60:	4628      	mov	r0, r5
 8005f62:	f7fe ff09 	bl	8004d78 <_free_r>
 8005f66:	2300      	movs	r3, #0
 8005f68:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	2300      	movs	r3, #0
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	f043 0308 	orr.w	r3, r3, #8
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	b94b      	cbnz	r3, 8005f9a <__swsetup_r+0x7a>
 8005f86:	89a3      	ldrh	r3, [r4, #12]
 8005f88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f90:	d003      	beq.n	8005f9a <__swsetup_r+0x7a>
 8005f92:	4621      	mov	r1, r4
 8005f94:	4628      	mov	r0, r5
 8005f96:	f000 f882 	bl	800609e <__smakebuf_r>
 8005f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f9e:	f013 0201 	ands.w	r2, r3, #1
 8005fa2:	d00a      	beq.n	8005fba <__swsetup_r+0x9a>
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	60a2      	str	r2, [r4, #8]
 8005fa8:	6962      	ldr	r2, [r4, #20]
 8005faa:	4252      	negs	r2, r2
 8005fac:	61a2      	str	r2, [r4, #24]
 8005fae:	6922      	ldr	r2, [r4, #16]
 8005fb0:	b942      	cbnz	r2, 8005fc4 <__swsetup_r+0xa4>
 8005fb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005fb6:	d1c5      	bne.n	8005f44 <__swsetup_r+0x24>
 8005fb8:	bd38      	pop	{r3, r4, r5, pc}
 8005fba:	0799      	lsls	r1, r3, #30
 8005fbc:	bf58      	it	pl
 8005fbe:	6962      	ldrpl	r2, [r4, #20]
 8005fc0:	60a2      	str	r2, [r4, #8]
 8005fc2:	e7f4      	b.n	8005fae <__swsetup_r+0x8e>
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	e7f7      	b.n	8005fb8 <__swsetup_r+0x98>
 8005fc8:	20000010 	.word	0x20000010

08005fcc <_raise_r>:
 8005fcc:	291f      	cmp	r1, #31
 8005fce:	b538      	push	{r3, r4, r5, lr}
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	d904      	bls.n	8005fe0 <_raise_r+0x14>
 8005fd6:	2316      	movs	r3, #22
 8005fd8:	6003      	str	r3, [r0, #0]
 8005fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
 8005fe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005fe2:	b112      	cbz	r2, 8005fea <_raise_r+0x1e>
 8005fe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005fe8:	b94b      	cbnz	r3, 8005ffe <_raise_r+0x32>
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 f830 	bl	8006050 <_getpid_r>
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ffa:	f000 b817 	b.w	800602c <_kill_r>
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d00a      	beq.n	8006018 <_raise_r+0x4c>
 8006002:	1c59      	adds	r1, r3, #1
 8006004:	d103      	bne.n	800600e <_raise_r+0x42>
 8006006:	2316      	movs	r3, #22
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	2001      	movs	r0, #1
 800600c:	e7e7      	b.n	8005fde <_raise_r+0x12>
 800600e:	2100      	movs	r1, #0
 8006010:	4620      	mov	r0, r4
 8006012:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006016:	4798      	blx	r3
 8006018:	2000      	movs	r0, #0
 800601a:	e7e0      	b.n	8005fde <_raise_r+0x12>

0800601c <raise>:
 800601c:	4b02      	ldr	r3, [pc, #8]	@ (8006028 <raise+0xc>)
 800601e:	4601      	mov	r1, r0
 8006020:	6818      	ldr	r0, [r3, #0]
 8006022:	f7ff bfd3 	b.w	8005fcc <_raise_r>
 8006026:	bf00      	nop
 8006028:	20000010 	.word	0x20000010

0800602c <_kill_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	2300      	movs	r3, #0
 8006030:	4d06      	ldr	r5, [pc, #24]	@ (800604c <_kill_r+0x20>)
 8006032:	4604      	mov	r4, r0
 8006034:	4608      	mov	r0, r1
 8006036:	4611      	mov	r1, r2
 8006038:	602b      	str	r3, [r5, #0]
 800603a:	f7fc fad0 	bl	80025de <_kill>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	d102      	bne.n	8006048 <_kill_r+0x1c>
 8006042:	682b      	ldr	r3, [r5, #0]
 8006044:	b103      	cbz	r3, 8006048 <_kill_r+0x1c>
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	bd38      	pop	{r3, r4, r5, pc}
 800604a:	bf00      	nop
 800604c:	20000568 	.word	0x20000568

08006050 <_getpid_r>:
 8006050:	f7fc babe 	b.w	80025d0 <_getpid>

08006054 <__swhatbuf_r>:
 8006054:	b570      	push	{r4, r5, r6, lr}
 8006056:	460c      	mov	r4, r1
 8006058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605c:	4615      	mov	r5, r2
 800605e:	2900      	cmp	r1, #0
 8006060:	461e      	mov	r6, r3
 8006062:	b096      	sub	sp, #88	@ 0x58
 8006064:	da0c      	bge.n	8006080 <__swhatbuf_r+0x2c>
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	2100      	movs	r1, #0
 800606a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800606e:	bf14      	ite	ne
 8006070:	2340      	movne	r3, #64	@ 0x40
 8006072:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006076:	2000      	movs	r0, #0
 8006078:	6031      	str	r1, [r6, #0]
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	b016      	add	sp, #88	@ 0x58
 800607e:	bd70      	pop	{r4, r5, r6, pc}
 8006080:	466a      	mov	r2, sp
 8006082:	f000 f849 	bl	8006118 <_fstat_r>
 8006086:	2800      	cmp	r0, #0
 8006088:	dbed      	blt.n	8006066 <__swhatbuf_r+0x12>
 800608a:	9901      	ldr	r1, [sp, #4]
 800608c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006090:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006094:	4259      	negs	r1, r3
 8006096:	4159      	adcs	r1, r3
 8006098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800609c:	e7eb      	b.n	8006076 <__swhatbuf_r+0x22>

0800609e <__smakebuf_r>:
 800609e:	898b      	ldrh	r3, [r1, #12]
 80060a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060a2:	079d      	lsls	r5, r3, #30
 80060a4:	4606      	mov	r6, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	d507      	bpl.n	80060ba <__smakebuf_r+0x1c>
 80060aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2301      	movs	r3, #1
 80060b4:	6163      	str	r3, [r4, #20]
 80060b6:	b003      	add	sp, #12
 80060b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ba:	466a      	mov	r2, sp
 80060bc:	ab01      	add	r3, sp, #4
 80060be:	f7ff ffc9 	bl	8006054 <__swhatbuf_r>
 80060c2:	9f00      	ldr	r7, [sp, #0]
 80060c4:	4605      	mov	r5, r0
 80060c6:	4639      	mov	r1, r7
 80060c8:	4630      	mov	r0, r6
 80060ca:	f7fe fec7 	bl	8004e5c <_malloc_r>
 80060ce:	b948      	cbnz	r0, 80060e4 <__smakebuf_r+0x46>
 80060d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060d4:	059a      	lsls	r2, r3, #22
 80060d6:	d4ee      	bmi.n	80060b6 <__smakebuf_r+0x18>
 80060d8:	f023 0303 	bic.w	r3, r3, #3
 80060dc:	f043 0302 	orr.w	r3, r3, #2
 80060e0:	81a3      	strh	r3, [r4, #12]
 80060e2:	e7e2      	b.n	80060aa <__smakebuf_r+0xc>
 80060e4:	89a3      	ldrh	r3, [r4, #12]
 80060e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80060ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ee:	81a3      	strh	r3, [r4, #12]
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	b15b      	cbz	r3, 800610e <__smakebuf_r+0x70>
 80060f6:	4630      	mov	r0, r6
 80060f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060fc:	f000 f81e 	bl	800613c <_isatty_r>
 8006100:	b128      	cbz	r0, 800610e <__smakebuf_r+0x70>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	f023 0303 	bic.w	r3, r3, #3
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	81a3      	strh	r3, [r4, #12]
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	431d      	orrs	r5, r3
 8006112:	81a5      	strh	r5, [r4, #12]
 8006114:	e7cf      	b.n	80060b6 <__smakebuf_r+0x18>
	...

08006118 <_fstat_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	2300      	movs	r3, #0
 800611c:	4d06      	ldr	r5, [pc, #24]	@ (8006138 <_fstat_r+0x20>)
 800611e:	4604      	mov	r4, r0
 8006120:	4608      	mov	r0, r1
 8006122:	4611      	mov	r1, r2
 8006124:	602b      	str	r3, [r5, #0]
 8006126:	f7fc fab9 	bl	800269c <_fstat>
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	d102      	bne.n	8006134 <_fstat_r+0x1c>
 800612e:	682b      	ldr	r3, [r5, #0]
 8006130:	b103      	cbz	r3, 8006134 <_fstat_r+0x1c>
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	bd38      	pop	{r3, r4, r5, pc}
 8006136:	bf00      	nop
 8006138:	20000568 	.word	0x20000568

0800613c <_isatty_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	2300      	movs	r3, #0
 8006140:	4d05      	ldr	r5, [pc, #20]	@ (8006158 <_isatty_r+0x1c>)
 8006142:	4604      	mov	r4, r0
 8006144:	4608      	mov	r0, r1
 8006146:	602b      	str	r3, [r5, #0]
 8006148:	f7fc fab7 	bl	80026ba <_isatty>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_isatty_r+0x1a>
 8006150:	682b      	ldr	r3, [r5, #0]
 8006152:	b103      	cbz	r3, 8006156 <_isatty_r+0x1a>
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	20000568 	.word	0x20000568

0800615c <_init>:
 800615c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615e:	bf00      	nop
 8006160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006162:	bc08      	pop	{r3}
 8006164:	469e      	mov	lr, r3
 8006166:	4770      	bx	lr

08006168 <_fini>:
 8006168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616a:	bf00      	nop
 800616c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800616e:	bc08      	pop	{r3}
 8006170:	469e      	mov	lr, r3
 8006172:	4770      	bx	lr
