
MEASURE_POWER_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000804c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  08008160  08008160  00009160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d8  080086d8  0000a298  2**0
                  CONTENTS
  4 .ARM          00000008  080086d8  080086d8  000096d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086e0  080086e0  0000a298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e0  080086e0  000096e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080086e4  080086e4  000096e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000298  20000000  080086e8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000854  20000298  08008980  0000a298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aec  08008980  0000aaec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc74  00000000  00000000  0000a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a9  00000000  00000000  00015f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  000190e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bd  00000000  00000000  00019e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c81  00000000  00000000  0001a825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d17c  00000000  00000000  000314a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ef4b  00000000  00000000  0003e622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000476c  00000000  00000000  000ad5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b1d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	08008144 	.word	0x08008144

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	08008144 	.word	0x08008144

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_fmul>:
 8000174:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000178:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800017c:	bf1e      	ittt	ne
 800017e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000182:	ea92 0f0c 	teqne	r2, ip
 8000186:	ea93 0f0c 	teqne	r3, ip
 800018a:	d06f      	beq.n	800026c <__aeabi_fmul+0xf8>
 800018c:	441a      	add	r2, r3
 800018e:	ea80 0c01 	eor.w	ip, r0, r1
 8000192:	0240      	lsls	r0, r0, #9
 8000194:	bf18      	it	ne
 8000196:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800019a:	d01e      	beq.n	80001da <__aeabi_fmul+0x66>
 800019c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80001a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001a8:	fba0 3101 	umull	r3, r1, r0, r1
 80001ac:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80001b0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001b4:	bf3e      	ittt	cc
 80001b6:	0049      	lslcc	r1, r1, #1
 80001b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001bc:	005b      	lslcc	r3, r3, #1
 80001be:	ea40 0001 	orr.w	r0, r0, r1
 80001c2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001c6:	2afd      	cmp	r2, #253	@ 0xfd
 80001c8:	d81d      	bhi.n	8000206 <__aeabi_fmul+0x92>
 80001ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001d2:	bf08      	it	eq
 80001d4:	f020 0001 	biceq.w	r0, r0, #1
 80001d8:	4770      	bx	lr
 80001da:	f090 0f00 	teq	r0, #0
 80001de:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001e2:	bf08      	it	eq
 80001e4:	0249      	lsleq	r1, r1, #9
 80001e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ee:	3a7f      	subs	r2, #127	@ 0x7f
 80001f0:	bfc2      	ittt	gt
 80001f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001fa:	4770      	bxgt	lr
 80001fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000200:	f04f 0300 	mov.w	r3, #0
 8000204:	3a01      	subs	r2, #1
 8000206:	dc5d      	bgt.n	80002c4 <__aeabi_fmul+0x150>
 8000208:	f112 0f19 	cmn.w	r2, #25
 800020c:	bfdc      	itt	le
 800020e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000212:	4770      	bxle	lr
 8000214:	f1c2 0200 	rsb	r2, r2, #0
 8000218:	0041      	lsls	r1, r0, #1
 800021a:	fa21 f102 	lsr.w	r1, r1, r2
 800021e:	f1c2 0220 	rsb	r2, r2, #32
 8000222:	fa00 fc02 	lsl.w	ip, r0, r2
 8000226:	ea5f 0031 	movs.w	r0, r1, rrx
 800022a:	f140 0000 	adc.w	r0, r0, #0
 800022e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000232:	bf08      	it	eq
 8000234:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000238:	4770      	bx	lr
 800023a:	f092 0f00 	teq	r2, #0
 800023e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0040      	lsleq	r0, r0, #1
 8000246:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800024a:	3a01      	subeq	r2, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xce>
 800024e:	ea40 000c 	orr.w	r0, r0, ip
 8000252:	f093 0f00 	teq	r3, #0
 8000256:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800025a:	bf02      	ittt	eq
 800025c:	0049      	lsleq	r1, r1, #1
 800025e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000262:	3b01      	subeq	r3, #1
 8000264:	d0f9      	beq.n	800025a <__aeabi_fmul+0xe6>
 8000266:	ea41 010c 	orr.w	r1, r1, ip
 800026a:	e78f      	b.n	800018c <__aeabi_fmul+0x18>
 800026c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000270:	ea92 0f0c 	teq	r2, ip
 8000274:	bf18      	it	ne
 8000276:	ea93 0f0c 	teqne	r3, ip
 800027a:	d00a      	beq.n	8000292 <__aeabi_fmul+0x11e>
 800027c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000280:	bf18      	it	ne
 8000282:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000286:	d1d8      	bne.n	800023a <__aeabi_fmul+0xc6>
 8000288:	ea80 0001 	eor.w	r0, r0, r1
 800028c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f090 0f00 	teq	r0, #0
 8000296:	bf17      	itett	ne
 8000298:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800029c:	4608      	moveq	r0, r1
 800029e:	f091 0f00 	teqne	r1, #0
 80002a2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80002a6:	d014      	beq.n	80002d2 <__aeabi_fmul+0x15e>
 80002a8:	ea92 0f0c 	teq	r2, ip
 80002ac:	d101      	bne.n	80002b2 <__aeabi_fmul+0x13e>
 80002ae:	0242      	lsls	r2, r0, #9
 80002b0:	d10f      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002b2:	ea93 0f0c 	teq	r3, ip
 80002b6:	d103      	bne.n	80002c0 <__aeabi_fmul+0x14c>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	bf18      	it	ne
 80002bc:	4608      	movne	r0, r1
 80002be:	d108      	bne.n	80002d2 <__aeabi_fmul+0x15e>
 80002c0:	ea80 0001 	eor.w	r0, r0, r1
 80002c4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002c8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002cc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002d0:	4770      	bx	lr
 80002d2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002d6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002da:	4770      	bx	lr

080002dc <__aeabi_drsub>:
 80002dc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e0:	e002      	b.n	80002e8 <__adddf3>
 80002e2:	bf00      	nop

080002e4 <__aeabi_dsub>:
 80002e4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002e8 <__adddf3>:
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f2:	ea94 0f05 	teq	r4, r5
 80002f6:	bf08      	it	eq
 80002f8:	ea90 0f02 	teqeq	r0, r2
 80002fc:	bf1f      	itttt	ne
 80002fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000302:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000306:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030e:	f000 80e2 	beq.w	80004d6 <__adddf3+0x1ee>
 8000312:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000316:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031a:	bfb8      	it	lt
 800031c:	426d      	neglt	r5, r5
 800031e:	dd0c      	ble.n	800033a <__adddf3+0x52>
 8000320:	442c      	add	r4, r5
 8000322:	ea80 0202 	eor.w	r2, r0, r2
 8000326:	ea81 0303 	eor.w	r3, r1, r3
 800032a:	ea82 0000 	eor.w	r0, r2, r0
 800032e:	ea83 0101 	eor.w	r1, r3, r1
 8000332:	ea80 0202 	eor.w	r2, r0, r2
 8000336:	ea81 0303 	eor.w	r3, r1, r3
 800033a:	2d36      	cmp	r5, #54	@ 0x36
 800033c:	bf88      	it	hi
 800033e:	bd30      	pophi	{r4, r5, pc}
 8000340:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000344:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000348:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800034c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x70>
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800035c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000360:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x84>
 8000366:	4252      	negs	r2, r2
 8000368:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036c:	ea94 0f05 	teq	r4, r5
 8000370:	f000 80a7 	beq.w	80004c2 <__adddf3+0x1da>
 8000374:	f1a4 0401 	sub.w	r4, r4, #1
 8000378:	f1d5 0e20 	rsbs	lr, r5, #32
 800037c:	db0d      	blt.n	800039a <__adddf3+0xb2>
 800037e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000382:	fa22 f205 	lsr.w	r2, r2, r5
 8000386:	1880      	adds	r0, r0, r2
 8000388:	f141 0100 	adc.w	r1, r1, #0
 800038c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000390:	1880      	adds	r0, r0, r2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	4159      	adcs	r1, r3
 8000398:	e00e      	b.n	80003b8 <__adddf3+0xd0>
 800039a:	f1a5 0520 	sub.w	r5, r5, #32
 800039e:	f10e 0e20 	add.w	lr, lr, #32
 80003a2:	2a01      	cmp	r2, #1
 80003a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a8:	bf28      	it	cs
 80003aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ae:	fa43 f305 	asr.w	r3, r3, r5
 80003b2:	18c0      	adds	r0, r0, r3
 80003b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	d507      	bpl.n	80003ce <__adddf3+0xe6>
 80003be:	f04f 0e00 	mov.w	lr, #0
 80003c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ce:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d2:	d31b      	bcc.n	800040c <__adddf3+0x124>
 80003d4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003d8:	d30c      	bcc.n	80003f4 <__adddf3+0x10c>
 80003da:	0849      	lsrs	r1, r1, #1
 80003dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e4:	f104 0401 	add.w	r4, r4, #1
 80003e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003ec:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f0:	f080 809a 	bcs.w	8000528 <__adddf3+0x240>
 80003f4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003f8:	bf08      	it	eq
 80003fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fe:	f150 0000 	adcs.w	r0, r0, #0
 8000402:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000406:	ea41 0105 	orr.w	r1, r1, r5
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000410:	4140      	adcs	r0, r0
 8000412:	eb41 0101 	adc.w	r1, r1, r1
 8000416:	3c01      	subs	r4, #1
 8000418:	bf28      	it	cs
 800041a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800041e:	d2e9      	bcs.n	80003f4 <__adddf3+0x10c>
 8000420:	f091 0f00 	teq	r1, #0
 8000424:	bf04      	itt	eq
 8000426:	4601      	moveq	r1, r0
 8000428:	2000      	moveq	r0, #0
 800042a:	fab1 f381 	clz	r3, r1
 800042e:	bf08      	it	eq
 8000430:	3320      	addeq	r3, #32
 8000432:	f1a3 030b 	sub.w	r3, r3, #11
 8000436:	f1b3 0220 	subs.w	r2, r3, #32
 800043a:	da0c      	bge.n	8000456 <__adddf3+0x16e>
 800043c:	320c      	adds	r2, #12
 800043e:	dd08      	ble.n	8000452 <__adddf3+0x16a>
 8000440:	f102 0c14 	add.w	ip, r2, #20
 8000444:	f1c2 020c 	rsb	r2, r2, #12
 8000448:	fa01 f00c 	lsl.w	r0, r1, ip
 800044c:	fa21 f102 	lsr.w	r1, r1, r2
 8000450:	e00c      	b.n	800046c <__adddf3+0x184>
 8000452:	f102 0214 	add.w	r2, r2, #20
 8000456:	bfd8      	it	le
 8000458:	f1c2 0c20 	rsble	ip, r2, #32
 800045c:	fa01 f102 	lsl.w	r1, r1, r2
 8000460:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000464:	bfdc      	itt	le
 8000466:	ea41 010c 	orrle.w	r1, r1, ip
 800046a:	4090      	lslle	r0, r2
 800046c:	1ae4      	subs	r4, r4, r3
 800046e:	bfa2      	ittt	ge
 8000470:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000474:	4329      	orrge	r1, r5
 8000476:	bd30      	popge	{r4, r5, pc}
 8000478:	ea6f 0404 	mvn.w	r4, r4
 800047c:	3c1f      	subs	r4, #31
 800047e:	da1c      	bge.n	80004ba <__adddf3+0x1d2>
 8000480:	340c      	adds	r4, #12
 8000482:	dc0e      	bgt.n	80004a2 <__adddf3+0x1ba>
 8000484:	f104 0414 	add.w	r4, r4, #20
 8000488:	f1c4 0220 	rsb	r2, r4, #32
 800048c:	fa20 f004 	lsr.w	r0, r0, r4
 8000490:	fa01 f302 	lsl.w	r3, r1, r2
 8000494:	ea40 0003 	orr.w	r0, r0, r3
 8000498:	fa21 f304 	lsr.w	r3, r1, r4
 800049c:	ea45 0103 	orr.w	r1, r5, r3
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	f1c4 040c 	rsb	r4, r4, #12
 80004a6:	f1c4 0220 	rsb	r2, r4, #32
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 f304 	lsl.w	r3, r1, r4
 80004b2:	ea40 0003 	orr.w	r0, r0, r3
 80004b6:	4629      	mov	r1, r5
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	fa21 f004 	lsr.w	r0, r1, r4
 80004be:	4629      	mov	r1, r5
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	f094 0f00 	teq	r4, #0
 80004c6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ca:	bf06      	itte	eq
 80004cc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d0:	3401      	addeq	r4, #1
 80004d2:	3d01      	subne	r5, #1
 80004d4:	e74e      	b.n	8000374 <__adddf3+0x8c>
 80004d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004da:	bf18      	it	ne
 80004dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e0:	d029      	beq.n	8000536 <__adddf3+0x24e>
 80004e2:	ea94 0f05 	teq	r4, r5
 80004e6:	bf08      	it	eq
 80004e8:	ea90 0f02 	teqeq	r0, r2
 80004ec:	d005      	beq.n	80004fa <__adddf3+0x212>
 80004ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f2:	bf04      	itt	eq
 80004f4:	4619      	moveq	r1, r3
 80004f6:	4610      	moveq	r0, r2
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea91 0f03 	teq	r1, r3
 80004fe:	bf1e      	ittt	ne
 8000500:	2100      	movne	r1, #0
 8000502:	2000      	movne	r0, #0
 8000504:	bd30      	popne	{r4, r5, pc}
 8000506:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050a:	d105      	bne.n	8000518 <__adddf3+0x230>
 800050c:	0040      	lsls	r0, r0, #1
 800050e:	4149      	adcs	r1, r1
 8000510:	bf28      	it	cs
 8000512:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000516:	bd30      	pop	{r4, r5, pc}
 8000518:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800051c:	bf3c      	itt	cc
 800051e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000522:	bd30      	popcc	{r4, r5, pc}
 8000524:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000528:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800052c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000530:	f04f 0000 	mov.w	r0, #0
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053a:	bf1a      	itte	ne
 800053c:	4619      	movne	r1, r3
 800053e:	4610      	movne	r0, r2
 8000540:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000544:	bf1c      	itt	ne
 8000546:	460b      	movne	r3, r1
 8000548:	4602      	movne	r2, r0
 800054a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054e:	bf06      	itte	eq
 8000550:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000554:	ea91 0f03 	teqeq	r1, r3
 8000558:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	bf00      	nop

08000560 <__aeabi_ui2d>:
 8000560:	f090 0f00 	teq	r0, #0
 8000564:	bf04      	itt	eq
 8000566:	2100      	moveq	r1, #0
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000570:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000574:	f04f 0500 	mov.w	r5, #0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e750      	b.n	8000420 <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_i2d>:
 8000580:	f090 0f00 	teq	r0, #0
 8000584:	bf04      	itt	eq
 8000586:	2100      	moveq	r1, #0
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000590:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000594:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000598:	bf48      	it	mi
 800059a:	4240      	negmi	r0, r0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e73e      	b.n	8000420 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_f2d>:
 80005a4:	0042      	lsls	r2, r0, #1
 80005a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b2:	bf1f      	itttt	ne
 80005b4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005b8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005bc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c0:	4770      	bxne	lr
 80005c2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005c6:	bf08      	it	eq
 80005c8:	4770      	bxeq	lr
 80005ca:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ce:	bf04      	itt	eq
 80005d0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d4:	4770      	bxeq	lr
 80005d6:	b530      	push	{r4, r5, lr}
 80005d8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	e71c      	b.n	8000420 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_ul2d>:
 80005e8:	ea50 0201 	orrs.w	r2, r0, r1
 80005ec:	bf08      	it	eq
 80005ee:	4770      	bxeq	lr
 80005f0:	b530      	push	{r4, r5, lr}
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	e00a      	b.n	800060e <__aeabi_l2d+0x16>

080005f8 <__aeabi_l2d>:
 80005f8:	ea50 0201 	orrs.w	r2, r0, r1
 80005fc:	bf08      	it	eq
 80005fe:	4770      	bxeq	lr
 8000600:	b530      	push	{r4, r5, lr}
 8000602:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000606:	d502      	bpl.n	800060e <__aeabi_l2d+0x16>
 8000608:	4240      	negs	r0, r0
 800060a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000612:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000616:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061a:	f43f aed8 	beq.w	80003ce <__adddf3+0xe6>
 800061e:	f04f 0203 	mov.w	r2, #3
 8000622:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000626:	bf18      	it	ne
 8000628:	3203      	addne	r2, #3
 800062a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062e:	bf18      	it	ne
 8000630:	3203      	addne	r2, #3
 8000632:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000636:	f1c2 0320 	rsb	r3, r2, #32
 800063a:	fa00 fc03 	lsl.w	ip, r0, r3
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 fe03 	lsl.w	lr, r1, r3
 8000646:	ea40 000e 	orr.w	r0, r0, lr
 800064a:	fa21 f102 	lsr.w	r1, r1, r2
 800064e:	4414      	add	r4, r2
 8000650:	e6bd      	b.n	80003ce <__adddf3+0xe6>
 8000652:	bf00      	nop

08000654 <__aeabi_dmul>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800065e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000662:	bf1d      	ittte	ne
 8000664:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000668:	ea94 0f0c 	teqne	r4, ip
 800066c:	ea95 0f0c 	teqne	r5, ip
 8000670:	f000 f8de 	bleq	8000830 <__aeabi_dmul+0x1dc>
 8000674:	442c      	add	r4, r5
 8000676:	ea81 0603 	eor.w	r6, r1, r3
 800067a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000682:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000686:	bf18      	it	ne
 8000688:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000694:	d038      	beq.n	8000708 <__aeabi_dmul+0xb4>
 8000696:	fba0 ce02 	umull	ip, lr, r0, r2
 800069a:	f04f 0500 	mov.w	r5, #0
 800069e:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006a6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006aa:	f04f 0600 	mov.w	r6, #0
 80006ae:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b2:	f09c 0f00 	teq	ip, #0
 80006b6:	bf18      	it	ne
 80006b8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006bc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006c8:	d204      	bcs.n	80006d4 <__aeabi_dmul+0x80>
 80006ca:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ce:	416d      	adcs	r5, r5
 80006d0:	eb46 0606 	adc.w	r6, r6, r6
 80006d4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006dc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006ec:	bf88      	it	hi
 80006ee:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f2:	d81e      	bhi.n	8000732 <__aeabi_dmul+0xde>
 80006f4:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fe:	f150 0000 	adcs.w	r0, r0, #0
 8000702:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800070c:	ea46 0101 	orr.w	r1, r6, r1
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800071c:	bfc2      	ittt	gt
 800071e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000722:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000726:	bd70      	popgt	{r4, r5, r6, pc}
 8000728:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800072c:	f04f 0e00 	mov.w	lr, #0
 8000730:	3c01      	subs	r4, #1
 8000732:	f300 80ab 	bgt.w	800088c <__aeabi_dmul+0x238>
 8000736:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073a:	bfde      	ittt	le
 800073c:	2000      	movle	r0, #0
 800073e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000742:	bd70      	pople	{r4, r5, r6, pc}
 8000744:	f1c4 0400 	rsb	r4, r4, #0
 8000748:	3c20      	subs	r4, #32
 800074a:	da35      	bge.n	80007b8 <__aeabi_dmul+0x164>
 800074c:	340c      	adds	r4, #12
 800074e:	dc1b      	bgt.n	8000788 <__aeabi_dmul+0x134>
 8000750:	f104 0414 	add.w	r4, r4, #20
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f305 	lsl.w	r3, r0, r5
 800075c:	fa20 f004 	lsr.w	r0, r0, r4
 8000760:	fa01 f205 	lsl.w	r2, r1, r5
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800076c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	fa21 f604 	lsr.w	r6, r1, r4
 8000778:	eb42 0106 	adc.w	r1, r2, r6
 800077c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000780:	bf08      	it	eq
 8000782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f1c4 040c 	rsb	r4, r4, #12
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f304 	lsl.w	r3, r0, r4
 8000794:	fa20 f005 	lsr.w	r0, r0, r5
 8000798:	fa01 f204 	lsl.w	r2, r1, r4
 800079c:	ea40 0002 	orr.w	r0, r0, r2
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	f141 0100 	adc.w	r1, r1, #0
 80007ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b0:	bf08      	it	eq
 80007b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f205 	lsl.w	r2, r0, r5
 80007c0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c4:	fa20 f304 	lsr.w	r3, r0, r4
 80007c8:	fa01 f205 	lsl.w	r2, r1, r5
 80007cc:	ea43 0302 	orr.w	r3, r3, r2
 80007d0:	fa21 f004 	lsr.w	r0, r1, r4
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007d8:	fa21 f204 	lsr.w	r2, r1, r4
 80007dc:	ea20 0002 	bic.w	r0, r0, r2
 80007e0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e8:	bf08      	it	eq
 80007ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	f094 0f00 	teq	r4, #0
 80007f4:	d10f      	bne.n	8000816 <__aeabi_dmul+0x1c2>
 80007f6:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fa:	0040      	lsls	r0, r0, #1
 80007fc:	eb41 0101 	adc.w	r1, r1, r1
 8000800:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000804:	bf08      	it	eq
 8000806:	3c01      	subeq	r4, #1
 8000808:	d0f7      	beq.n	80007fa <__aeabi_dmul+0x1a6>
 800080a:	ea41 0106 	orr.w	r1, r1, r6
 800080e:	f095 0f00 	teq	r5, #0
 8000812:	bf18      	it	ne
 8000814:	4770      	bxne	lr
 8000816:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	eb43 0303 	adc.w	r3, r3, r3
 8000820:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000824:	bf08      	it	eq
 8000826:	3d01      	subeq	r5, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1c6>
 800082a:	ea43 0306 	orr.w	r3, r3, r6
 800082e:	4770      	bx	lr
 8000830:	ea94 0f0c 	teq	r4, ip
 8000834:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000838:	bf18      	it	ne
 800083a:	ea95 0f0c 	teqne	r5, ip
 800083e:	d00c      	beq.n	800085a <__aeabi_dmul+0x206>
 8000840:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000844:	bf18      	it	ne
 8000846:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084a:	d1d1      	bne.n	80007f0 <__aeabi_dmul+0x19c>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085e:	bf06      	itte	eq
 8000860:	4610      	moveq	r0, r2
 8000862:	4619      	moveq	r1, r3
 8000864:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000868:	d019      	beq.n	800089e <__aeabi_dmul+0x24a>
 800086a:	ea94 0f0c 	teq	r4, ip
 800086e:	d102      	bne.n	8000876 <__aeabi_dmul+0x222>
 8000870:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000874:	d113      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000876:	ea95 0f0c 	teq	r5, ip
 800087a:	d105      	bne.n	8000888 <__aeabi_dmul+0x234>
 800087c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000880:	bf1c      	itt	ne
 8000882:	4610      	movne	r0, r2
 8000884:	4619      	movne	r1, r3
 8000886:	d10a      	bne.n	800089e <__aeabi_dmul+0x24a>
 8000888:	ea81 0103 	eor.w	r1, r1, r3
 800088c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000890:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000894:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008a6:	bd70      	pop	{r4, r5, r6, pc}

080008a8 <__aeabi_ddiv>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b6:	bf1d      	ittte	ne
 80008b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008bc:	ea94 0f0c 	teqne	r4, ip
 80008c0:	ea95 0f0c 	teqne	r5, ip
 80008c4:	f000 f8a7 	bleq	8000a16 <__aeabi_ddiv+0x16e>
 80008c8:	eba4 0405 	sub.w	r4, r4, r5
 80008cc:	ea81 0e03 	eor.w	lr, r1, r3
 80008d0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d8:	f000 8088 	beq.w	80009ec <__aeabi_ddiv+0x144>
 80008dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008fc:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000900:	429d      	cmp	r5, r3
 8000902:	bf08      	it	eq
 8000904:	4296      	cmpeq	r6, r2
 8000906:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800090e:	d202      	bcs.n	8000916 <__aeabi_ddiv+0x6e>
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	1ab6      	subs	r6, r6, r2
 8000918:	eb65 0503 	sbc.w	r5, r5, r3
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000922:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000926:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 000c 	orrcs.w	r0, r0, ip
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800096c:	085b      	lsrs	r3, r3, #1
 800096e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000984:	ea55 0e06 	orrs.w	lr, r5, r6
 8000988:	d018      	beq.n	80009bc <__aeabi_ddiv+0x114>
 800098a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000992:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000996:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a6:	d1c0      	bne.n	800092a <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	d10b      	bne.n	80009c6 <__aeabi_ddiv+0x11e>
 80009ae:	ea41 0100 	orr.w	r1, r1, r0
 80009b2:	f04f 0000 	mov.w	r0, #0
 80009b6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ba:	e7b6      	b.n	800092a <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	bf04      	itt	eq
 80009c2:	4301      	orreq	r1, r0
 80009c4:	2000      	moveq	r0, #0
 80009c6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ca:	bf88      	it	hi
 80009cc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d0:	f63f aeaf 	bhi.w	8000732 <__aeabi_dmul+0xde>
 80009d4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d8:	bf04      	itt	eq
 80009da:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e2:	f150 0000 	adcs.w	r0, r0, #0
 80009e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f8:	bfc2      	ittt	gt
 80009fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a02:	bd70      	popgt	{r4, r5, r6, pc}
 8000a04:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a08:	f04f 0e00 	mov.w	lr, #0
 8000a0c:	3c01      	subs	r4, #1
 8000a0e:	e690      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a10:	ea45 0e06 	orr.w	lr, r5, r6
 8000a14:	e68d      	b.n	8000732 <__aeabi_dmul+0xde>
 8000a16:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1a:	ea94 0f0c 	teq	r4, ip
 8000a1e:	bf08      	it	eq
 8000a20:	ea95 0f0c 	teqeq	r5, ip
 8000a24:	f43f af3b 	beq.w	800089e <__aeabi_dmul+0x24a>
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	d10a      	bne.n	8000a44 <__aeabi_ddiv+0x19c>
 8000a2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a32:	f47f af34 	bne.w	800089e <__aeabi_dmul+0x24a>
 8000a36:	ea95 0f0c 	teq	r5, ip
 8000a3a:	f47f af25 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e72c      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a44:	ea95 0f0c 	teq	r5, ip
 8000a48:	d106      	bne.n	8000a58 <__aeabi_ddiv+0x1b0>
 8000a4a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4e:	f43f aefd 	beq.w	800084c <__aeabi_dmul+0x1f8>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e722      	b.n	800089e <__aeabi_dmul+0x24a>
 8000a58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a5c:	bf18      	it	ne
 8000a5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a62:	f47f aec5 	bne.w	80007f0 <__aeabi_dmul+0x19c>
 8000a66:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6a:	f47f af0d 	bne.w	8000888 <__aeabi_dmul+0x234>
 8000a6e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a72:	f47f aeeb 	bne.w	800084c <__aeabi_dmul+0x1f8>
 8000a76:	e712      	b.n	800089e <__aeabi_dmul+0x24a>

08000a78 <__gedf2>:
 8000a78:	f04f 3cff 	mov.w	ip, #4294967295
 8000a7c:	e006      	b.n	8000a8c <__cmpdf2+0x4>
 8000a7e:	bf00      	nop

08000a80 <__ledf2>:
 8000a80:	f04f 0c01 	mov.w	ip, #1
 8000a84:	e002      	b.n	8000a8c <__cmpdf2+0x4>
 8000a86:	bf00      	nop

08000a88 <__cmpdf2>:
 8000a88:	f04f 0c01 	mov.w	ip, #1
 8000a8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa2:	d01b      	beq.n	8000adc <__cmpdf2+0x54>
 8000aa4:	b001      	add	sp, #4
 8000aa6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aaa:	bf0c      	ite	eq
 8000aac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab0:	ea91 0f03 	teqne	r1, r3
 8000ab4:	bf02      	ittt	eq
 8000ab6:	ea90 0f02 	teqeq	r0, r2
 8000aba:	2000      	moveq	r0, #0
 8000abc:	4770      	bxeq	lr
 8000abe:	f110 0f00 	cmn.w	r0, #0
 8000ac2:	ea91 0f03 	teq	r1, r3
 8000ac6:	bf58      	it	pl
 8000ac8:	4299      	cmppl	r1, r3
 8000aca:	bf08      	it	eq
 8000acc:	4290      	cmpeq	r0, r2
 8000ace:	bf2c      	ite	cs
 8000ad0:	17d8      	asrcs	r0, r3, #31
 8000ad2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad6:	f040 0001 	orr.w	r0, r0, #1
 8000ada:	4770      	bx	lr
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__cmpdf2+0x64>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d107      	bne.n	8000afc <__cmpdf2+0x74>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d1d6      	bne.n	8000aa4 <__cmpdf2+0x1c>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d0d3      	beq.n	8000aa4 <__cmpdf2+0x1c>
 8000afc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_cdrcmple>:
 8000b04:	4684      	mov	ip, r0
 8000b06:	4610      	mov	r0, r2
 8000b08:	4662      	mov	r2, ip
 8000b0a:	468c      	mov	ip, r1
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4663      	mov	r3, ip
 8000b10:	e000      	b.n	8000b14 <__aeabi_cdcmpeq>
 8000b12:	bf00      	nop

08000b14 <__aeabi_cdcmpeq>:
 8000b14:	b501      	push	{r0, lr}
 8000b16:	f7ff ffb7 	bl	8000a88 <__cmpdf2>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	bf48      	it	mi
 8000b1e:	f110 0f00 	cmnmi.w	r0, #0
 8000b22:	bd01      	pop	{r0, pc}

08000b24 <__aeabi_dcmpeq>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff fff4 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b2c:	bf0c      	ite	eq
 8000b2e:	2001      	moveq	r0, #1
 8000b30:	2000      	movne	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmplt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffea 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmple>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffe0 	bl	8000b14 <__aeabi_cdcmpeq>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpge>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffce 	bl	8000b04 <__aeabi_cdrcmple>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpgt>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffc4 	bl	8000b04 <__aeabi_cdrcmple>
 8000b7c:	bf34      	ite	cc
 8000b7e:	2001      	movcc	r0, #1
 8000b80:	2000      	movcs	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpun>:
 8000b88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b90:	d102      	bne.n	8000b98 <__aeabi_dcmpun+0x10>
 8000b92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b96:	d10a      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000b98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba0:	d102      	bne.n	8000ba8 <__aeabi_dcmpun+0x20>
 8000ba2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba6:	d102      	bne.n	8000bae <__aeabi_dcmpun+0x26>
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	f04f 0001 	mov.w	r0, #1
 8000bb2:	4770      	bx	lr

08000bb4 <__aeabi_d2iz>:
 8000bb4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bbc:	d215      	bcs.n	8000bea <__aeabi_d2iz+0x36>
 8000bbe:	d511      	bpl.n	8000be4 <__aeabi_d2iz+0x30>
 8000bc0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc8:	d912      	bls.n	8000bf0 <__aeabi_d2iz+0x3c>
 8000bca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	bf18      	it	ne
 8000be0:	4240      	negne	r0, r0
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d105      	bne.n	8000bfc <__aeabi_d2iz+0x48>
 8000bf0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf4:	bf08      	it	eq
 8000bf6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfa:	4770      	bx	lr
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <__aeabi_d2f>:
 8000c04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c0c:	bf24      	itt	cs
 8000c0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c16:	d90d      	bls.n	8000c34 <__aeabi_d2f+0x30>
 8000c18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c2c:	bf08      	it	eq
 8000c2e:	f020 0001 	biceq.w	r0, r0, #1
 8000c32:	4770      	bx	lr
 8000c34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c38:	d121      	bne.n	8000c7e <__aeabi_d2f+0x7a>
 8000c3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c3e:	bfbc      	itt	lt
 8000c40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	4770      	bxlt	lr
 8000c46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4e:	f1c2 0218 	rsb	r2, r2, #24
 8000c52:	f1c2 0c20 	rsb	ip, r2, #32
 8000c56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5e:	bf18      	it	ne
 8000c60:	f040 0001 	orrne.w	r0, r0, #1
 8000c64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c70:	ea40 000c 	orr.w	r0, r0, ip
 8000c74:	fa23 f302 	lsr.w	r3, r3, r2
 8000c78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c7c:	e7cc      	b.n	8000c18 <__aeabi_d2f+0x14>
 8000c7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c82:	d107      	bne.n	8000c94 <__aeabi_d2f+0x90>
 8000c84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c88:	bf1e      	ittt	ne
 8000c8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c92:	4770      	bxne	lr
 8000c94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_frsub>:
 8000ca4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ca8:	e002      	b.n	8000cb0 <__addsf3>
 8000caa:	bf00      	nop

08000cac <__aeabi_fsub>:
 8000cac:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cb0 <__addsf3>:
 8000cb0:	0042      	lsls	r2, r0, #1
 8000cb2:	bf1f      	itttt	ne
 8000cb4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cb8:	ea92 0f03 	teqne	r2, r3
 8000cbc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc4:	d06a      	beq.n	8000d9c <__addsf3+0xec>
 8000cc6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cce:	bfc1      	itttt	gt
 8000cd0:	18d2      	addgt	r2, r2, r3
 8000cd2:	4041      	eorgt	r1, r0
 8000cd4:	4048      	eorgt	r0, r1
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	bfb8      	it	lt
 8000cda:	425b      	neglt	r3, r3
 8000cdc:	2b19      	cmp	r3, #25
 8000cde:	bf88      	it	hi
 8000ce0:	4770      	bxhi	lr
 8000ce2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cea:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cee:	bf18      	it	ne
 8000cf0:	4240      	negne	r0, r0
 8000cf2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cf6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cfa:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cfe:	bf18      	it	ne
 8000d00:	4249      	negne	r1, r1
 8000d02:	ea92 0f03 	teq	r2, r3
 8000d06:	d03f      	beq.n	8000d88 <__addsf3+0xd8>
 8000d08:	f1a2 0201 	sub.w	r2, r2, #1
 8000d0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000d10:	eb10 000c 	adds.w	r0, r0, ip
 8000d14:	f1c3 0320 	rsb	r3, r3, #32
 8000d18:	fa01 f103 	lsl.w	r1, r1, r3
 8000d1c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d20:	d502      	bpl.n	8000d28 <__addsf3+0x78>
 8000d22:	4249      	negs	r1, r1
 8000d24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d28:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d2c:	d313      	bcc.n	8000d56 <__addsf3+0xa6>
 8000d2e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d32:	d306      	bcc.n	8000d42 <__addsf3+0x92>
 8000d34:	0840      	lsrs	r0, r0, #1
 8000d36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3a:	f102 0201 	add.w	r2, r2, #1
 8000d3e:	2afe      	cmp	r2, #254	@ 0xfe
 8000d40:	d251      	bcs.n	8000de6 <__addsf3+0x136>
 8000d42:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4a:	bf08      	it	eq
 8000d4c:	f020 0001 	biceq.w	r0, r0, #1
 8000d50:	ea40 0003 	orr.w	r0, r0, r3
 8000d54:	4770      	bx	lr
 8000d56:	0049      	lsls	r1, r1, #1
 8000d58:	eb40 0000 	adc.w	r0, r0, r0
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	bf28      	it	cs
 8000d60:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d64:	d2ed      	bcs.n	8000d42 <__addsf3+0x92>
 8000d66:	fab0 fc80 	clz	ip, r0
 8000d6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000d72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d76:	bfaa      	itet	ge
 8000d78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d7c:	4252      	neglt	r2, r2
 8000d7e:	4318      	orrge	r0, r3
 8000d80:	bfbc      	itt	lt
 8000d82:	40d0      	lsrlt	r0, r2
 8000d84:	4318      	orrlt	r0, r3
 8000d86:	4770      	bx	lr
 8000d88:	f092 0f00 	teq	r2, #0
 8000d8c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d90:	bf06      	itte	eq
 8000d92:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d96:	3201      	addeq	r2, #1
 8000d98:	3b01      	subne	r3, #1
 8000d9a:	e7b5      	b.n	8000d08 <__addsf3+0x58>
 8000d9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da4:	bf18      	it	ne
 8000da6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000daa:	d021      	beq.n	8000df0 <__addsf3+0x140>
 8000dac:	ea92 0f03 	teq	r2, r3
 8000db0:	d004      	beq.n	8000dbc <__addsf3+0x10c>
 8000db2:	f092 0f00 	teq	r2, #0
 8000db6:	bf08      	it	eq
 8000db8:	4608      	moveq	r0, r1
 8000dba:	4770      	bx	lr
 8000dbc:	ea90 0f01 	teq	r0, r1
 8000dc0:	bf1c      	itt	ne
 8000dc2:	2000      	movne	r0, #0
 8000dc4:	4770      	bxne	lr
 8000dc6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dca:	d104      	bne.n	8000dd6 <__addsf3+0x126>
 8000dcc:	0040      	lsls	r0, r0, #1
 8000dce:	bf28      	it	cs
 8000dd0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	4770      	bx	lr
 8000dd6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dda:	bf3c      	itt	cc
 8000ddc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000de0:	4770      	bxcc	lr
 8000de2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000de6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dee:	4770      	bx	lr
 8000df0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df4:	bf16      	itet	ne
 8000df6:	4608      	movne	r0, r1
 8000df8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000dfc:	4601      	movne	r1, r0
 8000dfe:	0242      	lsls	r2, r0, #9
 8000e00:	bf06      	itte	eq
 8000e02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e06:	ea90 0f01 	teqeq	r0, r1
 8000e0a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_ui2f>:
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e004      	b.n	8000e20 <__aeabi_i2f+0x8>
 8000e16:	bf00      	nop

08000e18 <__aeabi_i2f>:
 8000e18:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e1c:	bf48      	it	mi
 8000e1e:	4240      	negmi	r0, r0
 8000e20:	ea5f 0c00 	movs.w	ip, r0
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e2c:	4601      	mov	r1, r0
 8000e2e:	f04f 0000 	mov.w	r0, #0
 8000e32:	e01c      	b.n	8000e6e <__aeabi_l2f+0x2a>

08000e34 <__aeabi_ul2f>:
 8000e34:	ea50 0201 	orrs.w	r2, r0, r1
 8000e38:	bf08      	it	eq
 8000e3a:	4770      	bxeq	lr
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e00a      	b.n	8000e58 <__aeabi_l2f+0x14>
 8000e42:	bf00      	nop

08000e44 <__aeabi_l2f>:
 8000e44:	ea50 0201 	orrs.w	r2, r0, r1
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e50:	d502      	bpl.n	8000e58 <__aeabi_l2f+0x14>
 8000e52:	4240      	negs	r0, r0
 8000e54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e58:	ea5f 0c01 	movs.w	ip, r1
 8000e5c:	bf02      	ittt	eq
 8000e5e:	4684      	moveq	ip, r0
 8000e60:	4601      	moveq	r1, r0
 8000e62:	2000      	moveq	r0, #0
 8000e64:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e68:	bf08      	it	eq
 8000e6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e6e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e72:	fabc f28c 	clz	r2, ip
 8000e76:	3a08      	subs	r2, #8
 8000e78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e7c:	db10      	blt.n	8000ea0 <__aeabi_l2f+0x5c>
 8000e7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e82:	4463      	add	r3, ip
 8000e84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e88:	f1c2 0220 	rsb	r2, r2, #32
 8000e8c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e90:	fa20 f202 	lsr.w	r2, r0, r2
 8000e94:	eb43 0002 	adc.w	r0, r3, r2
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f102 0220 	add.w	r2, r2, #32
 8000ea4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea8:	f1c2 0220 	rsb	r2, r2, #32
 8000eac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb4:	eb43 0002 	adc.w	r0, r3, r2
 8000eb8:	bf08      	it	eq
 8000eba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ebe:	4770      	bx	lr

08000ec0 <__gesf2>:
 8000ec0:	f04f 3cff 	mov.w	ip, #4294967295
 8000ec4:	e006      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ec6:	bf00      	nop

08000ec8 <__lesf2>:
 8000ec8:	f04f 0c01 	mov.w	ip, #1
 8000ecc:	e002      	b.n	8000ed4 <__cmpsf2+0x4>
 8000ece:	bf00      	nop

08000ed0 <__cmpsf2>:
 8000ed0:	f04f 0c01 	mov.w	ip, #1
 8000ed4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ed8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000edc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee4:	bf18      	it	ne
 8000ee6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eea:	d011      	beq.n	8000f10 <__cmpsf2+0x40>
 8000eec:	b001      	add	sp, #4
 8000eee:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ef2:	bf18      	it	ne
 8000ef4:	ea90 0f01 	teqne	r0, r1
 8000ef8:	bf58      	it	pl
 8000efa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000efe:	bf88      	it	hi
 8000f00:	17c8      	asrhi	r0, r1, #31
 8000f02:	bf38      	it	cc
 8000f04:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f08:	bf18      	it	ne
 8000f0a:	f040 0001 	orrne.w	r0, r0, #1
 8000f0e:	4770      	bx	lr
 8000f10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f14:	d102      	bne.n	8000f1c <__cmpsf2+0x4c>
 8000f16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f1a:	d105      	bne.n	8000f28 <__cmpsf2+0x58>
 8000f1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f20:	d1e4      	bne.n	8000eec <__cmpsf2+0x1c>
 8000f22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f26:	d0e1      	beq.n	8000eec <__cmpsf2+0x1c>
 8000f28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__aeabi_cfrcmple>:
 8000f30:	4684      	mov	ip, r0
 8000f32:	4608      	mov	r0, r1
 8000f34:	4661      	mov	r1, ip
 8000f36:	e7ff      	b.n	8000f38 <__aeabi_cfcmpeq>

08000f38 <__aeabi_cfcmpeq>:
 8000f38:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f3a:	f7ff ffc9 	bl	8000ed0 <__cmpsf2>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	bf48      	it	mi
 8000f42:	f110 0f00 	cmnmi.w	r0, #0
 8000f46:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f48 <__aeabi_fcmpeq>:
 8000f48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f4c:	f7ff fff4 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f50:	bf0c      	ite	eq
 8000f52:	2001      	moveq	r0, #1
 8000f54:	2000      	movne	r0, #0
 8000f56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5a:	bf00      	nop

08000f5c <__aeabi_fcmplt>:
 8000f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f60:	f7ff ffea 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f64:	bf34      	ite	cc
 8000f66:	2001      	movcc	r0, #1
 8000f68:	2000      	movcs	r0, #0
 8000f6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f6e:	bf00      	nop

08000f70 <__aeabi_fcmple>:
 8000f70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f74:	f7ff ffe0 	bl	8000f38 <__aeabi_cfcmpeq>
 8000f78:	bf94      	ite	ls
 8000f7a:	2001      	movls	r0, #1
 8000f7c:	2000      	movhi	r0, #0
 8000f7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f82:	bf00      	nop

08000f84 <__aeabi_fcmpge>:
 8000f84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f88:	f7ff ffd2 	bl	8000f30 <__aeabi_cfrcmple>
 8000f8c:	bf94      	ite	ls
 8000f8e:	2001      	movls	r0, #1
 8000f90:	2000      	movhi	r0, #0
 8000f92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f96:	bf00      	nop

08000f98 <__aeabi_fcmpgt>:
 8000f98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f9c:	f7ff ffc8 	bl	8000f30 <__aeabi_cfrcmple>
 8000fa0:	bf34      	ite	cc
 8000fa2:	2001      	movcc	r0, #1
 8000fa4:	2000      	movcs	r0, #0
 8000fa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000faa:	bf00      	nop

08000fac <__aeabi_f2uiz>:
 8000fac:	0042      	lsls	r2, r0, #1
 8000fae:	d20e      	bcs.n	8000fce <__aeabi_f2uiz+0x22>
 8000fb0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fb4:	d30b      	bcc.n	8000fce <__aeabi_f2uiz+0x22>
 8000fb6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fbe:	d409      	bmi.n	8000fd4 <__aeabi_f2uiz+0x28>
 8000fc0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	4770      	bx	lr
 8000fce:	f04f 0000 	mov.w	r0, #0
 8000fd2:	4770      	bx	lr
 8000fd4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fd8:	d101      	bne.n	8000fde <__aeabi_f2uiz+0x32>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	d102      	bne.n	8000fe4 <__aeabi_f2uiz+0x38>
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	4770      	bx	lr
 8000fe4:	f04f 0000 	mov.w	r0, #0
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <CmdLineProcess>:
 * @return Returns CMDLINE_OK if successful, or an error code if an issue
 *         occurs (e.g., command not found, too many arguments).
 */
uint8_t
CmdLineProcess (char *pcCmdLine)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  char          *pcChar;
  uint_fast8_t   ui8Argc;
  bool           bFindArg = true;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]

  /**
   * Initialize the argument counter, and point to the beginning of the
   * command line string.
   */
  ui8Argc = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  pcChar  = pcCmdLine;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	617b      	str	r3, [r7, #20]

  /**
   * Advance through the command line until a zero character is found.
   */
  while (*pcChar)
 8001000:	e01f      	b.n	8001042 <CmdLineProcess+0x56>
  {
    /**
     * If there is a space, then replace it with a zero, and set the flag
     * to search for the next argument.
     */
    if (*pcChar == ' ')
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b20      	cmp	r3, #32
 8001008:	d105      	bne.n	8001016 <CmdLineProcess+0x2a>
    {
      *pcChar  = 0;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
      bFindArg = true;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e012      	b.n	800103c <CmdLineProcess+0x50>
    {
      /**
       * If bFindArg is set, then that means we are looking for the start
       * of the next argument.
       */
      if (bFindArg)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00f      	beq.n	800103c <CmdLineProcess+0x50>
        /**
         * As long as the maximum number of arguments has not been
         * reached, then save the pointer to the start of this new arg
         * in the argv array, and increment the count of args, argc.
         */
        if (ui8Argc < CMDLINE_MAX_ARGS)
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	2b07      	cmp	r3, #7
 8001020:	d80a      	bhi.n	8001038 <CmdLineProcess+0x4c>
        {
          g_ppcArgv[ui8Argc] = pcChar;
 8001022:	491d      	ldr	r1, [pc, #116]	@ (8001098 <CmdLineProcess+0xac>)
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
          ui8Argc++;
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	3301      	adds	r3, #1
 8001030:	613b      	str	r3, [r7, #16]
          bFindArg = false;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e001      	b.n	800103c <CmdLineProcess+0x50>
         * The maximum number of arguments has been reached so return
         * the error.
         */
        else
        {
          return (CMDLINE_TOO_MANY_ARGS);
 8001038:	2302      	movs	r3, #2
 800103a:	e028      	b.n	800108e <CmdLineProcess+0xa2>
      }
    }
    /**
     * Advance to the next character in the command line.
     */
    pcChar++;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
  while (*pcChar)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1db      	bne.n	8001002 <CmdLineProcess+0x16>
  }

  /**
   * If one or more arguments was found, then process the command.
   */
  if (ui8Argc)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d01d      	beq.n	800108c <CmdLineProcess+0xa0>
  {
    /**
     * Start at the beginning of the command table, to look for a matching
     * command.
     */
    psCmdEntry = &g_psCmdTable[0];
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <CmdLineProcess+0xb0>)
 8001052:	60bb      	str	r3, [r7, #8]

    /**
     * Search through the command table until a null command string is
     * found, which marks the end of the table.
     */
    while (psCmdEntry->pcCmd)
 8001054:	e016      	b.n	8001084 <CmdLineProcess+0x98>
      /**
       * If this command entry command string matches argv[0], then call
       * the function for this command, passing the command line
       * arguments.
       */
      if (!strcmp(g_ppcArgv[0], psCmdEntry->pcCmd))
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <CmdLineProcess+0xac>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f7ff f875 	bl	8000150 <strcmp>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d108      	bne.n	800107e <CmdLineProcess+0x92>
      {
        return (psCmdEntry->pfnCmd(ui8Argc, g_ppcArgv));
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4909      	ldr	r1, [pc, #36]	@ (8001098 <CmdLineProcess+0xac>)
 8001074:	4610      	mov	r0, r2
 8001076:	4798      	blx	r3
 8001078:	4603      	mov	r3, r0
 800107a:	b2db      	uxtb	r3, r3
 800107c:	e007      	b.n	800108e <CmdLineProcess+0xa2>
      }
      /**
       * Not found, so advance to the next entry.
       */
      psCmdEntry++;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	330c      	adds	r3, #12
 8001082:	60bb      	str	r3, [r7, #8]
    while (psCmdEntry->pcCmd)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e4      	bne.n	8001056 <CmdLineProcess+0x6a>

  /**
   * Fall through to here means that no matching command was found, so return
   * an error.
   */
  return (CMDLINE_BAD_CMD);
 800108c:	2301      	movs	r3, #1
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002b4 	.word	0x200002b4
 800109c:	20000028 	.word	0x20000028

080010a0 <APP_COMMAND_Init>:
 * The function `APP_COMMAND_Init` initializes UART configuration and sends a
 * string message for LLC control firmware.
 */
void
APP_COMMAND_Init (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  uart_cfg_cml = (uart_cfg_t *)&s_data_system.s_uart_cmd;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <APP_COMMAND_Init+0x30>)
 80010a6:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <APP_COMMAND_Init+0x34>)
 80010a8:	601a      	str	r2, [r3, #0]
  BSP_UART_Config(uart_cfg_cml, USART3, USART3_IRQn);
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <APP_COMMAND_Init+0x30>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2227      	movs	r2, #39	@ 0x27
 80010b0:	4909      	ldr	r1, [pc, #36]	@ (80010d8 <APP_COMMAND_Init+0x38>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 ff89 	bl	8002fca <BSP_UART_Config>
  BSP_UART_SendString(uart_cfg_cml, "> LLC CONTROL FIRMWARE\r\n");
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <APP_COMMAND_Init+0x30>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4907      	ldr	r1, [pc, #28]	@ (80010dc <APP_COMMAND_Init+0x3c>)
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 ffed 	bl	800309e <BSP_UART_SendString>

  // Reset Data
  s_commandBufferIndex = 0;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <APP_COMMAND_Init+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200003d8 	.word	0x200003d8
 80010d4:	2000073c 	.word	0x2000073c
 80010d8:	40004800 	.word	0x40004800
 80010dc:	080082a4 	.word	0x080082a4
 80010e0:	200003d7 	.word	0x200003d7

080010e4 <APP_COMMAND_CreateTask>:

void
APP_COMMAND_CreateTask (void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_CommandTaskContext.taskHandle,
 80010e8:	4902      	ldr	r1, [pc, #8]	@ (80010f4 <APP_COMMAND_CreateTask+0x10>)
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <APP_COMMAND_CreateTask+0x14>)
 80010ec:	f004 f81c 	bl	8005128 <SCH_TASK_CreateTask>
                      &s_CommandTaskContext.taskProperty);
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	2000001c 	.word	0x2000001c
 80010f8:	20000018 	.word	0x20000018

080010fc <APP_COMMAND_Help>:
 * @param argv The argument list.
 * @return CMDLINE_OK on success.
 */
int
APP_COMMAND_Help (int argc, char *argv[])
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  tCmdLineEntry *pEntry;

  BSP_UART_SendString(uart_cfg_cml, "\nAvailable commands\r\n");
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <APP_COMMAND_Help+0x6c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4918      	ldr	r1, [pc, #96]	@ (800116c <APP_COMMAND_Help+0x70>)
 800110c:	4618      	mov	r0, r3
 800110e:	f001 ffc6 	bl	800309e <BSP_UART_SendString>
  BSP_UART_SendString(uart_cfg_cml, "------------------\r\n");
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <APP_COMMAND_Help+0x6c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4916      	ldr	r1, [pc, #88]	@ (8001170 <APP_COMMAND_Help+0x74>)
 8001118:	4618      	mov	r0, r3
 800111a:	f001 ffc0 	bl	800309e <BSP_UART_SendString>

  // Point at the beginning of the command table.
  pEntry = &g_psCmdTable[0];
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <APP_COMMAND_Help+0x78>)
 8001120:	60fb      	str	r3, [r7, #12]

  while (pEntry->pcCmd)
 8001122:	e018      	b.n	8001156 <APP_COMMAND_Help+0x5a>
  {
    // Print the command name and the brief description.
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcCmd);
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <APP_COMMAND_Help+0x6c>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f001 ffb5 	bl	800309e <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, pEntry->pcHelp);
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <APP_COMMAND_Help+0x6c>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	4619      	mov	r1, r3
 800113e:	4610      	mov	r0, r2
 8001140:	f001 ffad 	bl	800309e <BSP_UART_SendString>
    BSP_UART_SendString(uart_cfg_cml, "\r\n");
 8001144:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <APP_COMMAND_Help+0x6c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	490b      	ldr	r1, [pc, #44]	@ (8001178 <APP_COMMAND_Help+0x7c>)
 800114a:	4618      	mov	r0, r3
 800114c:	f001 ffa7 	bl	800309e <BSP_UART_SendString>

    // Advance to the next entry in the table.
    pEntry++;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	330c      	adds	r3, #12
 8001154:	60fb      	str	r3, [r7, #12]
  while (pEntry->pcCmd)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1e2      	bne.n	8001124 <APP_COMMAND_Help+0x28>
  }

  return (CMDLINE_OK);
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200003d8 	.word	0x200003d8
 800116c:	080082c0 	.word	0x080082c0
 8001170:	080082d8 	.word	0x080082d8
 8001174:	20000028 	.word	0x20000028
 8001178:	080082f0 	.word	0x080082f0

0800117c <APP_COMMAND_ReadVoltage>:

int
APP_COMMAND_ReadVoltage (int argc, char *argv[])
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dc01      	bgt.n	8001190 <APP_COMMAND_ReadVoltage+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 800118c:	2303      	movs	r3, #3
 800118e:	e01a      	b.n	80011c6 <APP_COMMAND_ReadVoltage+0x4a>
  }
  if (argc > 1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	dd01      	ble.n	800119a <APP_COMMAND_ReadVoltage+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001196:	2302      	movs	r3, #2
 8001198:	e015      	b.n	80011c6 <APP_COMMAND_ReadVoltage+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "\n\rVoltage: %.2f\n\r", s_data_system.f_voltage);
 800119a:	4b0d      	ldr	r3, [pc, #52]	@ (80011d0 <APP_COMMAND_ReadVoltage+0x54>)
 800119c:	f8d3 3470 	ldr.w	r3, [r3, #1136]	@ 0x470
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9ff 	bl	80005a4 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	f107 0008 	add.w	r0, r7, #8
 80011ae:	4909      	ldr	r1, [pc, #36]	@ (80011d4 <APP_COMMAND_ReadVoltage+0x58>)
 80011b0:	f004 fe92 	bl	8005ed8 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <APP_COMMAND_ReadVoltage+0x5c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	4611      	mov	r1, r2
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 ff6d 	bl	800309e <BSP_UART_SendString>

  return (CMDLINE_OK);
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200003ec 	.word	0x200003ec
 80011d4:	080082f4 	.word	0x080082f4
 80011d8:	200003d8 	.word	0x200003d8

080011dc <APP_COMMAND_ReadCurrent>:

int
APP_COMMAND_ReadCurrent (int argc, char *argv[])
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	@ 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dc01      	bgt.n	80011f0 <APP_COMMAND_ReadCurrent+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e01a      	b.n	8001226 <APP_COMMAND_ReadCurrent+0x4a>
  }
  if (argc > 1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	dd01      	ble.n	80011fa <APP_COMMAND_ReadCurrent+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 80011f6:	2302      	movs	r3, #2
 80011f8:	e015      	b.n	8001226 <APP_COMMAND_ReadCurrent+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "\n\rCurrent: %.2f\n\r", s_data_system.f_current);
 80011fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001230 <APP_COMMAND_ReadCurrent+0x54>)
 80011fc:	f8d3 3474 	ldr.w	r3, [r3, #1140]	@ 0x474
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9cf 	bl	80005a4 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	f107 0008 	add.w	r0, r7, #8
 800120e:	4909      	ldr	r1, [pc, #36]	@ (8001234 <APP_COMMAND_ReadCurrent+0x58>)
 8001210:	f004 fe62 	bl	8005ed8 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 8001214:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <APP_COMMAND_ReadCurrent+0x5c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f107 0208 	add.w	r2, r7, #8
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ff3d 	bl	800309e <BSP_UART_SendString>

  return (CMDLINE_OK);
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3728      	adds	r7, #40	@ 0x28
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200003ec 	.word	0x200003ec
 8001234:	08008308 	.word	0x08008308
 8001238:	200003d8 	.word	0x200003d8

0800123c <APP_COMMAND_ReadPF>:

int
APP_COMMAND_ReadPF (int argc, char *argv[])
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  if (argc < 1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	dc01      	bgt.n	8001250 <APP_COMMAND_ReadPF+0x14>
  {
    return CMDLINE_TOO_FEW_ARGS;
 800124c:	2303      	movs	r3, #3
 800124e:	e01a      	b.n	8001286 <APP_COMMAND_ReadPF+0x4a>
  }
  if (argc > 1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b01      	cmp	r3, #1
 8001254:	dd01      	ble.n	800125a <APP_COMMAND_ReadPF+0x1e>
  {
    return CMDLINE_TOO_MANY_ARGS;
 8001256:	2302      	movs	r3, #2
 8001258:	e015      	b.n	8001286 <APP_COMMAND_ReadPF+0x4a>
  }

  char c_msg[30];
  sprintf(c_msg, "\n\rPOWER FACTOR: %.2f\n\r", s_data_system.f_delta_T_PF);
 800125a:	4b0d      	ldr	r3, [pc, #52]	@ (8001290 <APP_COMMAND_ReadPF+0x54>)
 800125c:	f8d3 3478 	ldr.w	r3, [r3, #1144]	@ 0x478
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f99f 	bl	80005a4 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	f107 0008 	add.w	r0, r7, #8
 800126e:	4909      	ldr	r1, [pc, #36]	@ (8001294 <APP_COMMAND_ReadPF+0x58>)
 8001270:	f004 fe32 	bl	8005ed8 <siprintf>

  BSP_UART_SendString(uart_cfg_cml, c_msg);
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <APP_COMMAND_ReadPF+0x5c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f107 0208 	add.w	r2, r7, #8
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f001 ff0d 	bl	800309e <BSP_UART_SendString>

  return (CMDLINE_OK);
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3728      	adds	r7, #40	@ 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200003ec 	.word	0x200003ec
 8001294:	0800831c 	.word	0x0800831c
 8001298:	200003d8 	.word	0x200003d8

0800129c <APP_COMMAND_TaskUpdate>:
 * processes commands based on the received data, and sends responses back
 * through UART.
 */
static void
APP_COMMAND_TaskUpdate (void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  char   rxData;
  int8_t retVal;

  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 80012a2:	e061      	b.n	8001368 <APP_COMMAND_TaskUpdate+0xcc>
  {
    rxData = BSP_UART_ReadChar(uart_cfg_cml);
 80012a4:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <APP_COMMAND_TaskUpdate+0xe8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 ff0f 	bl	80030cc <BSP_UART_ReadChar>
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
    BSP_UART_SendChar(uart_cfg_cml, rxData);
 80012b2:	4b34      	ldr	r3, [pc, #208]	@ (8001384 <APP_COMMAND_TaskUpdate+0xe8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 feb9 	bl	8003032 <BSP_UART_SendChar>
    // Check rxData is ESC key.
    if (rxData == 27)
    {
    }

    if ((rxData == '\r') || (rxData == '\n'))
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	2b0d      	cmp	r3, #13
 80012c4:	d002      	beq.n	80012cc <APP_COMMAND_TaskUpdate+0x30>
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b0a      	cmp	r3, #10
 80012ca:	d130      	bne.n	800132e <APP_COMMAND_TaskUpdate+0x92>
    {
      if (s_commandBufferIndex > 0)
 80012cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d025      	beq.n	8001320 <APP_COMMAND_TaskUpdate+0x84>
      {
        // Processing command form terminal.
        s_commandBuffer[s_commandBufferIndex] = 0;
 80012d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b2c      	ldr	r3, [pc, #176]	@ (800138c <APP_COMMAND_TaskUpdate+0xf0>)
 80012dc:	2100      	movs	r1, #0
 80012de:	5499      	strb	r1, [r3, r2]
        retVal               = CmdLineProcess(s_commandBuffer);
 80012e0:	482a      	ldr	r0, [pc, #168]	@ (800138c <APP_COMMAND_TaskUpdate+0xf0>)
 80012e2:	f7ff fe83 	bl	8000fec <CmdLineProcess>
 80012e6:	4603      	mov	r3, r0
 80012e8:	71bb      	strb	r3, [r7, #6]
        s_commandBufferIndex = 0;
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

        // Send status command in terminal.
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 80012f0:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <APP_COMMAND_TaskUpdate+0xe8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4926      	ldr	r1, [pc, #152]	@ (8001390 <APP_COMMAND_TaskUpdate+0xf4>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fed1 	bl	800309e <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, ErrorCode[retVal]);
 80012fc:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <APP_COMMAND_TaskUpdate+0xe8>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001304:	4923      	ldr	r1, [pc, #140]	@ (8001394 <APP_COMMAND_TaskUpdate+0xf8>)
 8001306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f001 fec6 	bl	800309e <BSP_UART_SendString>
        BSP_UART_SendString(uart_cfg_cml, "> ");
 8001312:	4b1c      	ldr	r3, [pc, #112]	@ (8001384 <APP_COMMAND_TaskUpdate+0xe8>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4920      	ldr	r1, [pc, #128]	@ (8001398 <APP_COMMAND_TaskUpdate+0xfc>)
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fec0 	bl	800309e <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 800131e:	e023      	b.n	8001368 <APP_COMMAND_TaskUpdate+0xcc>
      }
      else
      {
        BSP_UART_SendString(uart_cfg_cml, "\r\n> ");
 8001320:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <APP_COMMAND_TaskUpdate+0xe8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	491a      	ldr	r1, [pc, #104]	@ (8001390 <APP_COMMAND_TaskUpdate+0xf4>)
 8001326:	4618      	mov	r0, r3
 8001328:	f001 feb9 	bl	800309e <BSP_UART_SendString>
      if (s_commandBufferIndex > 0)
 800132c:	e01c      	b.n	8001368 <APP_COMMAND_TaskUpdate+0xcc>
      }
    }
    else if ((rxData == 8)
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b08      	cmp	r3, #8
 8001332:	d002      	beq.n	800133a <APP_COMMAND_TaskUpdate+0x9e>
             || (rxData == 127)) // ASCII code for key Delete, Backspace.
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2b7f      	cmp	r3, #127	@ 0x7f
 8001338:	d10a      	bne.n	8001350 <APP_COMMAND_TaskUpdate+0xb4>
    {
      if (s_commandBufferIndex > 0)
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d012      	beq.n	8001368 <APP_COMMAND_TaskUpdate+0xcc>
      {
        s_commandBufferIndex--;
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	3b01      	subs	r3, #1
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 800134c:	701a      	strb	r2, [r3, #0]
      if (s_commandBufferIndex > 0)
 800134e:	e00b      	b.n	8001368 <APP_COMMAND_TaskUpdate+0xcc>
      }
    }
    else
    {
      s_commandBuffer[s_commandBufferIndex] = rxData;
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4619      	mov	r1, r3
 8001356:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <APP_COMMAND_TaskUpdate+0xf0>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	5453      	strb	r3, [r2, r1]
      s_commandBufferIndex++;
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <APP_COMMAND_TaskUpdate+0xec>)
 8001366:	701a      	strb	r2, [r3, #0]
  while (BSP_UART_IsAvailableDataReceive(uart_cfg_cml))
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <APP_COMMAND_TaskUpdate+0xe8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fe4e 	bl	800300e <BSP_UART_IsAvailableDataReceive>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d195      	bne.n	80012a4 <APP_COMMAND_TaskUpdate+0x8>
      {
        s_commandBufferIndex = 0;
      }
    }
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200003d8 	.word	0x200003d8
 8001388:	200003d7 	.word	0x200003d7
 800138c:	200002d8 	.word	0x200002d8
 8001390:	08008334 	.word	0x08008334
 8001394:	20000000 	.word	0x20000000
 8001398:	0800833c 	.word	0x0800833c

0800139c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80013a4:	4b07      	ldr	r3, [pc, #28]	@ (80013c4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4013      	ands	r3, r2
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40010400 	.word	0x40010400

080013c8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80013d0:	4a03      	ldr	r2, [pc, #12]	@ (80013e0 <LL_EXTI_ClearFlag_0_31+0x18>)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6153      	str	r3, [r2, #20]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	40010400 	.word	0x40010400

080013e4 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0201 	bic.w	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <LL_TIM_IsEnabledCounter+0x18>
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <LL_TIM_IsEnabledCounter+0x1a>
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <APP_CALCULATOR_PF_CreateTask>:
 * The function APP_CALCULATOR_PF_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_CALCULATOR_PF_CreateTask (void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001478:	4902      	ldr	r1, [pc, #8]	@ (8001484 <APP_CALCULATOR_PF_CreateTask+0x10>)
 800147a:	4803      	ldr	r0, [pc, #12]	@ (8001488 <APP_CALCULATOR_PF_CreateTask+0x14>)
 800147c:	f003 fe54 	bl	8005128 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000005c 	.word	0x2000005c
 8001488:	20000058 	.word	0x20000058

0800148c <APP_CALCULATOR_PF_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_CALCULATOR_PF_Init (void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_calculator_pf.p_PF_buffer     = &s_data_system.s_PF_buffer;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <APP_CALCULATOR_PF_Init+0x30>)
 8001492:	4a0b      	ldr	r2, [pc, #44]	@ (80014c0 <APP_CALCULATOR_PF_Init+0x34>)
 8001494:	605a      	str	r2, [r3, #4]
  s_calculator_pf.p_PF_buffer_irq = &s_data_system.s_PF_buffer_irq;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <APP_CALCULATOR_PF_Init+0x30>)
 8001498:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <APP_CALCULATOR_PF_Init+0x38>)
 800149a:	601a      	str	r2, [r3, #0]
  s_calculator_pf.p_delta_T       = &s_data_system.f_delta_T_PF;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <APP_CALCULATOR_PF_Init+0x30>)
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <APP_CALCULATOR_PF_Init+0x3c>)
 80014a0:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer);
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <APP_CALCULATOR_PF_Init+0x30>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f003 fd76 	bl	8004f98 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 80014ac:	4b03      	ldr	r3, [pc, #12]	@ (80014bc <APP_CALCULATOR_PF_Init+0x30>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f003 fd71 	bl	8004f98 <RING_BUFFER_Init>
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003dc 	.word	0x200003dc
 80014c0:	20000478 	.word	0x20000478
 80014c4:	200003ec 	.word	0x200003ec
 80014c8:	20000864 	.word	0x20000864

080014cc <APP_CALCULATOR_PF_EXTI_IRQHandler>:
 * The function `APP_CALCULATOR_PF_EXTI_IRQHandler` handles EXTI interrupts for
 * lines 5 and 6, updating a buffer with timer values.
 */
void
APP_CALCULATOR_PF_EXTI_IRQHandler (void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 80014d0:	2020      	movs	r0, #32
 80014d2:	f7ff ff63 	bl	800139c <LL_EXTI_IsActiveFlag_0_31>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d03b      	beq.n	8001554 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x88>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 80014dc:	2020      	movs	r0, #32
 80014de:	f7ff ff73 	bl	80013c8 <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 80014e2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014e6:	f7ff ff9b 	bl	8001420 <LL_TIM_IsEnabledCounter>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d028      	beq.n	8001542 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x76>
    {
      LL_TIM_DisableCounter(TIM2);
 80014f0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80014f4:	f7ff ff85 	bl	8001402 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)(LL_TIM_GetCounter(TIM2 - 18) >> 8);
 80014f8:	4839      	ldr	r0, [pc, #228]	@ (80015e0 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x114>)
 80014fa:	f7ff ffb0 	bl	800145e <LL_TIM_GetCounter>
 80014fe:	4603      	mov	r3, r0
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b37      	ldr	r3, [pc, #220]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 8001506:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)(LL_TIM_GetCounter(TIM2) - 18);
 8001508:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800150c:	f7ff ffa7 	bl	800145e <LL_TIM_GetCounter>
 8001510:	4603      	mov	r3, r0
 8001512:	b2db      	uxtb	r3, r3
 8001514:	3b12      	subs	r3, #18
 8001516:	b2da      	uxtb	r2, r3
 8001518:	4b32      	ldr	r3, [pc, #200]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 800151a:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800151c:	4b31      	ldr	r3, [pc, #196]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 800151e:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 8001520:	4a30      	ldr	r2, [pc, #192]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 8001522:	7a12      	ldrb	r2, [r2, #8]
 8001524:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fd81 	bl	8005030 <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 8001530:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 8001532:	4a2c      	ldr	r2, [pc, #176]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 8001534:	7a52      	ldrb	r2, [r2, #9]
 8001536:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fd78 	bl	8005030 <RING_BUFFER_Push_Data>
 8001540:	e008      	b.n	8001554 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x88>
    }
    else
    {
      START_COUNTER(TIM2)
 8001542:	2100      	movs	r1, #0
 8001544:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001548:	f7ff ff7c 	bl	8001444 <LL_TIM_SetCounter>
 800154c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001550:	f7ff ff48 	bl	80013e4 <LL_TIM_EnableCounter>
    }
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001554:	2040      	movs	r0, #64	@ 0x40
 8001556:	f7ff ff21 	bl	800139c <LL_EXTI_IsActiveFlag_0_31>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03d      	beq.n	80015dc <APP_CALCULATOR_PF_EXTI_IRQHandler+0x110>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001560:	2040      	movs	r0, #64	@ 0x40
 8001562:	f7ff ff31 	bl	80013c8 <LL_EXTI_ClearFlag_0_31>
    if (LL_TIM_IsEnabledCounter(TIM2))
 8001566:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800156a:	f7ff ff59 	bl	8001420 <LL_TIM_IsEnabledCounter>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d02a      	beq.n	80015ca <APP_CALCULATOR_PF_EXTI_IRQHandler+0xfe>
    {
      LL_TIM_DisableCounter(TIM2);
 8001574:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001578:	f7ff ff43 	bl	8001402 <LL_TIM_DisableCounter>
      s_calculator_pf.value_temp_irq[0]
          = (uint8_t)((LL_TIM_GetCounter(TIM2) - 18) >> 8);
 800157c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001580:	f7ff ff6d 	bl	800145e <LL_TIM_GetCounter>
 8001584:	4603      	mov	r3, r0
 8001586:	3b12      	subs	r3, #18
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 800158e:	721a      	strb	r2, [r3, #8]
      s_calculator_pf.value_temp_irq[1] = (uint8_t)(LL_TIM_GetCounter(TIM2) - 18);
 8001590:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8001594:	f7ff ff63 	bl	800145e <LL_TIM_GetCounter>
 8001598:	4603      	mov	r3, r0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3b12      	subs	r3, #18
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 80015a2:	725a      	strb	r2, [r3, #9]

      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80015a4:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 80015a6:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[0]);
 80015a8:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 80015aa:	7a12      	ldrb	r2, [r2, #8]
 80015ac:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fd3d 	bl	8005030 <RING_BUFFER_Push_Data>
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 80015b8:	681b      	ldr	r3, [r3, #0]
                            s_calculator_pf.value_temp_irq[1]);
 80015ba:	4a0a      	ldr	r2, [pc, #40]	@ (80015e4 <APP_CALCULATOR_PF_EXTI_IRQHandler+0x118>)
 80015bc:	7a52      	ldrb	r2, [r2, #9]
 80015be:	b2d2      	uxtb	r2, r2
      RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq,
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f003 fd34 	bl	8005030 <RING_BUFFER_Push_Data>
    else
    {
      START_COUNTER(TIM2)
    }
  }
}
 80015c8:	e008      	b.n	80015dc <APP_CALCULATOR_PF_EXTI_IRQHandler+0x110>
      START_COUNTER(TIM2)
 80015ca:	2100      	movs	r1, #0
 80015cc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80015d0:	f7ff ff38 	bl	8001444 <LL_TIM_SetCounter>
 80015d4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80015d8:	f7ff ff04 	bl	80013e4 <LL_TIM_EnableCounter>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	3ffffa18 	.word	0x3ffffa18
 80015e4:	200003dc 	.word	0x200003dc

080015e8 <APP_CALCULATOR_PF_TaskUpdate>:
 * APP_CALCULATOR_PF_TaskUpdate will return without performing any further
 * operations.
 */
static void
APP_CALCULATOR_PF_TaskUpdate (void)
{
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq))
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fcfa 	bl	8004fec <RING_BUFFER_Is_Empty>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d15f      	bne.n	80016be <APP_CALCULATOR_PF_TaskUpdate+0xd6>
  uint16_t  u16_value_temp;
  uint8_t   u8_value[2];

  // u8_value[0] 8 bit high of delta_T
  u8_value[0]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 80015fe:	4b34      	ldr	r3, [pc, #208]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fd3e 	bl	8005084 <RING_BUFFER_Pull_Data>
 8001608:	4603      	mov	r3, r0
 800160a:	713b      	strb	r3, [r7, #4]

  // u8_value[1] 8 bit low of delta_T
  u8_value[1]
      = RING_BUFFER_Pull_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer_irq);
 800160c:	4b30      	ldr	r3, [pc, #192]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fd37 	bl	8005084 <RING_BUFFER_Pull_Data>
 8001616:	4603      	mov	r3, r0
 8001618:	717b      	strb	r3, [r7, #5]

  u16_value_temp = (uint16_t)((u8_value[0] << 8) | (u8_value[1]));
 800161a:	793b      	ldrb	r3, [r7, #4]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	b21a      	sxth	r2, r3
 8001620:	797b      	ldrb	r3, [r7, #5]
 8001622:	b21b      	sxth	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b21b      	sxth	r3, r3
 8001628:	81fb      	strh	r3, [r7, #14]

  *s_calculator_pf.p_delta_T = (float)u16_value_temp / FREQUENCY_TIMER;
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fbef 	bl	8000e10 <__aeabi_ui2f>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ffb5 	bl	80005a4 <__aeabi_f2d>
 800163a:	a323      	add	r3, pc, #140	@ (adr r3, 80016c8 <APP_CALCULATOR_PF_TaskUpdate+0xe0>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff f932 	bl	80008a8 <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4921      	ldr	r1, [pc, #132]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 800164a:	68cc      	ldr	r4, [r1, #12]
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fad8 	bl	8000c04 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	6023      	str	r3, [r4, #0]

  // Transmission Data to app_data_transmission
  p_value_temp = (uint32_t *)s_calculator_pf.p_delta_T;
 8001658:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	0e1b      	lsrs	r3, r3, #24
 8001664:	b2db      	uxtb	r3, r3
 8001666:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	0c1b      	lsrs	r3, r3, #16
 800166e:	b2db      	uxtb	r3, r3
 8001670:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b2db      	uxtb	r3, r3
 800167a:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001686:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 8001688:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fccf 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001692:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 8001694:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 8001696:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fcc8 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80016a0:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 80016a2:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 80016a4:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f003 fcc1 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <APP_CALCULATOR_PF_TaskUpdate+0xe8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 80016b2:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_calculator_pf.p_PF_buffer,
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 fcba 	bl	8005030 <RING_BUFFER_Push_Data>
 80016bc:	e000      	b.n	80016c0 <APP_CALCULATOR_PF_TaskUpdate+0xd8>
    return;
 80016be:	bf00      	nop
}
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	bf00      	nop
 80016c8:	38e38e39 	.word	0x38e38e39
 80016cc:	4018e38e 	.word	0x4018e38e
 80016d0:	200003dc 	.word	0x200003dc

080016d4 <APP_DATA_TRANS_REC_CreateTask>:
 * The function APP_DATA_TRANS_REC_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_DATA_TRANS_REC_CreateTask (void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 80016d8:	4902      	ldr	r1, [pc, #8]	@ (80016e4 <APP_DATA_TRANS_REC_CreateTask+0x10>)
 80016da:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <APP_DATA_TRANS_REC_CreateTask+0x14>)
 80016dc:	f003 fd24 	bl	8005128 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	2000006c 	.word	0x2000006c
 80016e8:	20000068 	.word	0x20000068

080016ec <APP_DATA_TRANS_REC_Init>:

void
APP_DATA_TRANS_REC_Init (void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_data_trans_rec.p_PF_buffer           = &s_data_system.s_PF_buffer;
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <APP_DATA_TRANS_REC_Init+0x68>)
 80016f2:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <APP_DATA_TRANS_REC_Init+0x6c>)
 80016f4:	601a      	str	r2, [r3, #0]
  s_data_trans_rec.p_vol_cur_buffer      = &s_data_system.s_vol_cur_buffer;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <APP_DATA_TRANS_REC_Init+0x68>)
 80016f8:	4a18      	ldr	r2, [pc, #96]	@ (800175c <APP_DATA_TRANS_REC_Init+0x70>)
 80016fa:	605a      	str	r2, [r3, #4]
  s_data_trans_rec.p_uart_data_trans_rec = &s_data_system.s_uart_data_trans_rec;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <APP_DATA_TRANS_REC_Init+0x68>)
 80016fe:	4a18      	ldr	r2, [pc, #96]	@ (8001760 <APP_DATA_TRANS_REC_Init+0x74>)
 8001700:	609a      	str	r2, [r3, #8]

  // Reset data filed of variable s_data_trans_rec
  s_data_trans_rec.flag_update_PF      = FLAG_NOT_UPDATED;
 8001702:	4a14      	ldr	r2, [pc, #80]	@ (8001754 <APP_DATA_TRANS_REC_Init+0x68>)
 8001704:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001708:	f36f 1304 	bfc	r3, #4, #1
 800170c:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  s_data_trans_rec.flag_update_vol_cur = FLAG_NOT_UPDATED;
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <APP_DATA_TRANS_REC_Init+0x68>)
 8001712:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001716:	f36f 1345 	bfc	r3, #5, #1
 800171a:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  s_data_trans_rec.u8_index_data_rec   = 0;
 800171e:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <APP_DATA_TRANS_REC_Init+0x68>)
 8001720:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001724:	f36f 0303 	bfc	r3, #0, #4
 8001728:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  memset((uint8_t *)s_data_trans_rec.u8_data_transmission,
 800172c:	2210      	movs	r2, #16
 800172e:	2100      	movs	r1, #0
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <APP_DATA_TRANS_REC_Init+0x78>)
 8001732:	f004 fc34 	bl	8005f9e <memset>
         0,
         sizeof(s_data_trans_rec.u8_data_transmission));
  memset((uint8_t *)s_data_trans_rec.u8_data_rec,
 8001736:	2210      	movs	r2, #16
 8001738:	2100      	movs	r1, #0
 800173a:	480b      	ldr	r0, [pc, #44]	@ (8001768 <APP_DATA_TRANS_REC_Init+0x7c>)
 800173c:	f004 fc2f 	bl	8005f9e <memset>
         0,
         sizeof(s_data_trans_rec.u8_data_rec));

  // Config UART
  BSP_UART_Config((uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec,
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <APP_DATA_TRANS_REC_Init+0x68>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	2225      	movs	r2, #37	@ 0x25
 8001746:	4909      	ldr	r1, [pc, #36]	@ (800176c <APP_DATA_TRANS_REC_Init+0x80>)
 8001748:	4618      	mov	r0, r3
 800174a:	f001 fc3e 	bl	8002fca <BSP_UART_Config>
                  USART1,
                  USART1_IRQn);
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000870 	.word	0x20000870
 8001758:	20000478 	.word	0x20000478
 800175c:	20000590 	.word	0x20000590
 8001760:	2000061c 	.word	0x2000061c
 8001764:	2000087c 	.word	0x2000087c
 8001768:	2000088c 	.word	0x2000088c
 800176c:	40013800 	.word	0x40013800

08001770 <APP_DATA_TRANS_REC_TaskUpdate>:
 * 2. Receives data from UART, processes the received packet, and updates the
 * system's power value.
 */
static void
APP_DATA_TRANS_REC_TaskUpdate (void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
   * @details
   * - Check if the voltage and current buffer is not empty.
   * - Read 4 bytes of voltage data and append '\r'.
   * - Read 4 bytes of current data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer))
 8001776:	4b8b      	ldr	r3, [pc, #556]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f003 fc36 	bl	8004fec <RING_BUFFER_Is_Empty>
 8001780:	4603      	mov	r3, r0
 8001782:	f083 0301 	eor.w	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d054      	beq.n	8001836 <APP_DATA_TRANS_REC_TaskUpdate+0xc6>
  {
    // Read voltage
    s_data_trans_rec.u8_data_transmission[0] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800178c:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800178e:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[0] = RING_BUFFER_Pull_Data(
 8001790:	4618      	mov	r0, r3
 8001792:	f003 fc77 	bl	8005084 <RING_BUFFER_Pull_Data>
 8001796:	4603      	mov	r3, r0
 8001798:	461a      	mov	r2, r3
 800179a:	4b82      	ldr	r3, [pc, #520]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800179c:	731a      	strb	r2, [r3, #12]
    s_data_trans_rec.u8_data_transmission[1] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800179e:	4b81      	ldr	r3, [pc, #516]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017a0:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[1] = RING_BUFFER_Pull_Data(
 80017a2:	4618      	mov	r0, r3
 80017a4:	f003 fc6e 	bl	8005084 <RING_BUFFER_Pull_Data>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b7d      	ldr	r3, [pc, #500]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017ae:	735a      	strb	r2, [r3, #13]
    s_data_trans_rec.u8_data_transmission[2] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80017b0:	4b7c      	ldr	r3, [pc, #496]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017b2:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[2] = RING_BUFFER_Pull_Data(
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fc65 	bl	8005084 <RING_BUFFER_Pull_Data>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b79      	ldr	r3, [pc, #484]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017c0:	739a      	strb	r2, [r3, #14]
    s_data_trans_rec.u8_data_transmission[3] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80017c2:	4b78      	ldr	r3, [pc, #480]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017c4:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[3] = RING_BUFFER_Pull_Data(
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fc5c 	bl	8005084 <RING_BUFFER_Pull_Data>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b74      	ldr	r3, [pc, #464]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017d2:	73da      	strb	r2, [r3, #15]
    s_data_trans_rec.u8_data_transmission[4] = '\r';
 80017d4:	4b73      	ldr	r3, [pc, #460]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017d6:	220d      	movs	r2, #13
 80017d8:	741a      	strb	r2, [r3, #16]

    // Read current
    s_data_trans_rec.u8_data_transmission[5] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80017da:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017dc:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[5] = RING_BUFFER_Pull_Data(
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 fc50 	bl	8005084 <RING_BUFFER_Pull_Data>
 80017e4:	4603      	mov	r3, r0
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b6e      	ldr	r3, [pc, #440]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017ea:	745a      	strb	r2, [r3, #17]
    s_data_trans_rec.u8_data_transmission[6] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80017ec:	4b6d      	ldr	r3, [pc, #436]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017ee:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[6] = RING_BUFFER_Pull_Data(
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fc47 	bl	8005084 <RING_BUFFER_Pull_Data>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b6a      	ldr	r3, [pc, #424]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80017fc:	749a      	strb	r2, [r3, #18]
    s_data_trans_rec.u8_data_transmission[7] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 80017fe:	4b69      	ldr	r3, [pc, #420]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001800:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[7] = RING_BUFFER_Pull_Data(
 8001802:	4618      	mov	r0, r3
 8001804:	f003 fc3e 	bl	8005084 <RING_BUFFER_Pull_Data>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b65      	ldr	r3, [pc, #404]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800180e:	74da      	strb	r2, [r3, #19]
    s_data_trans_rec.u8_data_transmission[8] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001810:	4b64      	ldr	r3, [pc, #400]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001812:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[8] = RING_BUFFER_Pull_Data(
 8001814:	4618      	mov	r0, r3
 8001816:	f003 fc35 	bl	8005084 <RING_BUFFER_Pull_Data>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	4b61      	ldr	r3, [pc, #388]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001820:	751a      	strb	r2, [r3, #20]
    s_data_trans_rec.u8_data_transmission[9] = '\r';
 8001822:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001824:	220d      	movs	r2, #13
 8001826:	755a      	strb	r2, [r3, #21]
    s_data_trans_rec.flag_update_vol_cur     = FLAG_UPDATED;
 8001828:	4a5e      	ldr	r2, [pc, #376]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800182a:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800182e:	f043 0320 	orr.w	r3, r3, #32
 8001832:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
  /**
   * @details
   * - Check if the power factor (PF) buffer is not empty.
   * - Read 4 bytes of PF data and append '\r'.
   */
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)s_data_trans_rec.p_PF_buffer))
 8001836:	4b5b      	ldr	r3, [pc, #364]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fbd6 	bl	8004fec <RING_BUFFER_Is_Empty>
 8001840:	4603      	mov	r3, r0
 8001842:	f083 0301 	eor.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d02d      	beq.n	80018a8 <APP_DATA_TRANS_REC_TaskUpdate+0x138>
  {
    // Read PF
    s_data_trans_rec.u8_data_transmission[10] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800184c:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800184e:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[10] = RING_BUFFER_Pull_Data(
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fc17 	bl	8005084 <RING_BUFFER_Pull_Data>
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	4b52      	ldr	r3, [pc, #328]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800185c:	759a      	strb	r2, [r3, #22]
    s_data_trans_rec.u8_data_transmission[11] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 800185e:	4b51      	ldr	r3, [pc, #324]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001860:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[11] = RING_BUFFER_Pull_Data(
 8001862:	4618      	mov	r0, r3
 8001864:	f003 fc0e 	bl	8005084 <RING_BUFFER_Pull_Data>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	4b4d      	ldr	r3, [pc, #308]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800186e:	75da      	strb	r2, [r3, #23]
    s_data_trans_rec.u8_data_transmission[12] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001870:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001872:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[12] = RING_BUFFER_Pull_Data(
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fc05 	bl	8005084 <RING_BUFFER_Pull_Data>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	4b49      	ldr	r3, [pc, #292]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001880:	761a      	strb	r2, [r3, #24]
    s_data_trans_rec.u8_data_transmission[13] = RING_BUFFER_Pull_Data(
        (ring_buffer_t *)s_data_trans_rec.p_vol_cur_buffer);
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001884:	685b      	ldr	r3, [r3, #4]
    s_data_trans_rec.u8_data_transmission[13] = RING_BUFFER_Pull_Data(
 8001886:	4618      	mov	r0, r3
 8001888:	f003 fbfc 	bl	8005084 <RING_BUFFER_Pull_Data>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	4b44      	ldr	r3, [pc, #272]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001892:	765a      	strb	r2, [r3, #25]
    s_data_trans_rec.u8_data_transmission[14] = '\r';
 8001894:	4b43      	ldr	r3, [pc, #268]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001896:	220d      	movs	r2, #13
 8001898:	769a      	strb	r2, [r3, #26]
    s_data_trans_rec.flag_update_PF           = FLAG_UPDATED;
 800189a:	4a42      	ldr	r2, [pc, #264]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800189c:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
   * @details
   * - If both voltage/current and PF data have been updated,
   *   transmit the combined data packet via UART.
   * - Reset the update flags after transmission.
   */
  if ((s_data_trans_rec.flag_update_PF == FLAG_UPDATED)
 80018a8:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d11b      	bne.n	80018f0 <APP_DATA_TRANS_REC_TaskUpdate+0x180>
      && (s_data_trans_rec.flag_update_vol_cur == FLAG_UPDATED))
 80018b8:	4b3a      	ldr	r3, [pc, #232]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d113      	bne.n	80018f0 <APP_DATA_TRANS_REC_TaskUpdate+0x180>
  {
    BSP_UART_SendString((uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec,
 80018c8:	4b36      	ldr	r3, [pc, #216]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4936      	ldr	r1, [pc, #216]	@ (80019a8 <APP_DATA_TRANS_REC_TaskUpdate+0x238>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fbe5 	bl	800309e <BSP_UART_SendString>
                        (char *)s_data_trans_rec.u8_data_transmission);
    s_data_trans_rec.flag_update_PF      = FLAG_NOT_UPDATED;
 80018d4:	4a33      	ldr	r2, [pc, #204]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018d6:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80018da:	f36f 1304 	bfc	r3, #4, #1
 80018de:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
    s_data_trans_rec.flag_update_vol_cur = FLAG_NOT_UPDATED;
 80018e2:	4a30      	ldr	r2, [pc, #192]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018e4:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 80018e8:	f36f 1345 	bfc	r3, #5, #1
 80018ec:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
   * - Store received data in a buffer.
   * - If a complete data packet (terminated by '\r') is received,
   *   process the packet and update the power value in the system structure.
   */
  if (BSP_UART_IsAvailableDataReceive(
          (uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec))
 80018f0:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 80018f2:	689b      	ldr	r3, [r3, #8]
  if (BSP_UART_IsAvailableDataReceive(
 80018f4:	4618      	mov	r0, r3
 80018f6:	f001 fb8a 	bl	800300e <BSP_UART_IsAvailableDataReceive>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d04c      	beq.n	800199a <APP_DATA_TRANS_REC_TaskUpdate+0x22a>
  {
    s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec]
        = BSP_UART_ReadChar(
            (uart_cfg_t *)s_data_trans_rec.p_uart_data_trans_rec);
 8001900:	4b28      	ldr	r3, [pc, #160]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001902:	689a      	ldr	r2, [r3, #8]
    s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec]
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001906:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800190a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461c      	mov	r4, r3
        = BSP_UART_ReadChar(
 8001912:	4610      	mov	r0, r2
 8001914:	f001 fbda 	bl	80030cc <BSP_UART_ReadChar>
 8001918:	4603      	mov	r3, r0
 800191a:	461a      	mov	r2, r3
 800191c:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800191e:	4423      	add	r3, r4
 8001920:	771a      	strb	r2, [r3, #28]

    s_data_trans_rec.u8_index_data_rec++;
 8001922:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001924:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001928:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3301      	adds	r3, #1
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	b2d9      	uxtb	r1, r3
 8001936:	4a1b      	ldr	r2, [pc, #108]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001938:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 800193c:	f361 0303 	bfi	r3, r1, #0, #4
 8001940:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c

    if (s_data_trans_rec.u8_data_rec[s_data_trans_rec.u8_index_data_rec - 1]
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001946:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800194a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800194e:	b2db      	uxtb	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001954:	4413      	add	r3, r2
 8001956:	7f1b      	ldrb	r3, [r3, #28]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b0d      	cmp	r3, #13
 800195c:	d11d      	bne.n	800199a <APP_DATA_TRANS_REC_TaskUpdate+0x22a>
        == '\r')
    {
      // Convert the received 4 bytes to a float power value
      uint32_t *p_val;
      p_val  = (uint32_t *)&s_data_system.f_power;
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <APP_DATA_TRANS_REC_TaskUpdate+0x23c>)
 8001960:	607b      	str	r3, [r7, #4]
      *p_val = (uint32_t)((s_data_trans_rec.u8_data_rec[0] << 24)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001964:	7f1b      	ldrb	r3, [r3, #28]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	061a      	lsls	r2, r3, #24
                          | (s_data_trans_rec.u8_data_rec[1] << 16)
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800196c:	7f5b      	ldrb	r3, [r3, #29]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	431a      	orrs	r2, r3
                          | (s_data_trans_rec.u8_data_rec[2] << 8)
 8001974:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001976:	7f9b      	ldrb	r3, [r3, #30]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	4313      	orrs	r3, r2
                          | (s_data_trans_rec.u8_data_rec[3] << 0));
 800197e:	4a09      	ldr	r2, [pc, #36]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 8001980:	7fd2      	ldrb	r2, [r2, #31]
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	4313      	orrs	r3, r2
      *p_val = (uint32_t)((s_data_trans_rec.u8_data_rec[0] << 24)
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	601a      	str	r2, [r3, #0]
      s_data_trans_rec.u8_index_data_rec = 0; // Reset index after processing
 800198c:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <APP_DATA_TRANS_REC_TaskUpdate+0x234>)
 800198e:	f892 302c 	ldrb.w	r3, [r2, #44]	@ 0x2c
 8001992:	f36f 0303 	bfc	r3, #0, #4
 8001996:	f882 302c 	strb.w	r3, [r2, #44]	@ 0x2c
    }
  }
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000870 	.word	0x20000870
 80019a8:	2000087c 	.word	0x2000087c
 80019ac:	20000868 	.word	0x20000868

080019b0 <BSP_GPIO_SetState>:
   * should be set to a low state (`GPIO_LOW`) or a high state (`GPIO_HIGH`).
   */
  static inline void BSP_GPIO_SetState (GPIO_TypeDef *gpio_port,
                                        uint32_t      gpio_pin,
                                        gpio_state_t  state)
  {
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	4613      	mov	r3, r2
 80019bc:	71fb      	strb	r3, [r7, #7]
    if (state == GPIO_LOW)
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d103      	bne.n	80019cc <BSP_GPIO_SetState+0x1c>
    {
      gpio_port->BSRR = gpio_pin;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	611a      	str	r2, [r3, #16]
    }
    else
    {
      gpio_port->BSRR = gpio_pin << 16;
    }
  }
 80019ca:	e003      	b.n	80019d4 <BSP_GPIO_SetState+0x24>
      gpio_port->BSRR = gpio_pin << 16;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  }
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <APP_LED_7_SEG_Init>:
 * The function initializes the LED 7-segment display by assigning port and pin
 * values and linking a pointer to a system power variable.
 */
void
APP_LED_7_SEG_Init (void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_LED_7SEG.p_power = &s_data_system.f_power;
 80019e4:	4b32      	ldr	r3, [pc, #200]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 80019e6:	4a33      	ldr	r2, [pc, #204]	@ (8001ab4 <APP_LED_7_SEG_Init+0xd4>)
 80019e8:	669a      	str	r2, [r3, #104]	@ 0x68

  // Reset data filed of s_LED_7SEG
  s_LED_7SEG.p_port_led[0] = PORT_LED_A;
 80019ea:	4b31      	ldr	r3, [pc, #196]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 80019ec:	4a32      	ldr	r2, [pc, #200]	@ (8001ab8 <APP_LED_7_SEG_Init+0xd8>)
 80019ee:	635a      	str	r2, [r3, #52]	@ 0x34
  s_LED_7SEG.p_port_led[1] = PORT_LED_B;
 80019f0:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 80019f2:	4a31      	ldr	r2, [pc, #196]	@ (8001ab8 <APP_LED_7_SEG_Init+0xd8>)
 80019f4:	639a      	str	r2, [r3, #56]	@ 0x38
  s_LED_7SEG.p_port_led[2] = PORT_LED_C;
 80019f6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 80019f8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ab8 <APP_LED_7_SEG_Init+0xd8>)
 80019fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  s_LED_7SEG.p_port_led[3] = PORT_LED_D;
 80019fc:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 80019fe:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab8 <APP_LED_7_SEG_Init+0xd8>)
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40
  s_LED_7SEG.p_port_led[4] = PORT_LED_E;
 8001a02:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a04:	4a2c      	ldr	r2, [pc, #176]	@ (8001ab8 <APP_LED_7_SEG_Init+0xd8>)
 8001a06:	645a      	str	r2, [r3, #68]	@ 0x44
  s_LED_7SEG.p_port_led[5] = PORT_LED_F;
 8001a08:	4b29      	ldr	r3, [pc, #164]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab8 <APP_LED_7_SEG_Init+0xd8>)
 8001a0c:	649a      	str	r2, [r3, #72]	@ 0x48
  s_LED_7SEG.p_port_led[6] = PORT_LED_G;
 8001a0e:	4b28      	ldr	r3, [pc, #160]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a10:	4a2a      	ldr	r2, [pc, #168]	@ (8001abc <APP_LED_7_SEG_Init+0xdc>)
 8001a12:	64da      	str	r2, [r3, #76]	@ 0x4c
  s_LED_7SEG.p_port_led[7] = PORT_LED_DP;
 8001a14:	4b26      	ldr	r3, [pc, #152]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a16:	4a28      	ldr	r2, [pc, #160]	@ (8001ab8 <APP_LED_7_SEG_Init+0xd8>)
 8001a18:	651a      	str	r2, [r3, #80]	@ 0x50

  s_LED_7SEG.u32_pin_led[0] = PIN_LED_A;
 8001a1a:	4b25      	ldr	r3, [pc, #148]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a1c:	4a28      	ldr	r2, [pc, #160]	@ (8001ac0 <APP_LED_7_SEG_Init+0xe0>)
 8001a1e:	601a      	str	r2, [r3, #0]
  s_LED_7SEG.u32_pin_led[1] = PIN_LED_B;
 8001a20:	4b23      	ldr	r3, [pc, #140]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a22:	f240 1201 	movw	r2, #257	@ 0x101
 8001a26:	605a      	str	r2, [r3, #4]
  s_LED_7SEG.u32_pin_led[2] = PIN_LED_C;
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a2a:	4a26      	ldr	r2, [pc, #152]	@ (8001ac4 <APP_LED_7_SEG_Init+0xe4>)
 8001a2c:	609a      	str	r2, [r3, #8]
  s_LED_7SEG.u32_pin_led[3] = PIN_LED_D;
 8001a2e:	4b20      	ldr	r3, [pc, #128]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a30:	f240 2202 	movw	r2, #514	@ 0x202
 8001a34:	60da      	str	r2, [r3, #12]
  s_LED_7SEG.u32_pin_led[4] = PIN_LED_E;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a38:	f240 4204 	movw	r2, #1028	@ 0x404
 8001a3c:	611a      	str	r2, [r3, #16]
  s_LED_7SEG.u32_pin_led[5] = PIN_LED_F;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a40:	4a21      	ldr	r2, [pc, #132]	@ (8001ac8 <APP_LED_7_SEG_Init+0xe8>)
 8001a42:	615a      	str	r2, [r3, #20]
  s_LED_7SEG.u32_pin_led[6] = PIN_LED_G;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a46:	4a21      	ldr	r2, [pc, #132]	@ (8001acc <APP_LED_7_SEG_Init+0xec>)
 8001a48:	619a      	str	r2, [r3, #24]
  s_LED_7SEG.u32_pin_led[7] = PIN_LED_DP;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a4c:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <APP_LED_7_SEG_Init+0xf0>)
 8001a4e:	61da      	str	r2, [r3, #28]

  s_LED_7SEG.p_port_control[0] = PORT_CONTROL_0;
 8001a50:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a52:	4a1a      	ldr	r2, [pc, #104]	@ (8001abc <APP_LED_7_SEG_Init+0xdc>)
 8001a54:	655a      	str	r2, [r3, #84]	@ 0x54
  s_LED_7SEG.p_port_control[1] = PORT_CONTROL_1;
 8001a56:	4b16      	ldr	r3, [pc, #88]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a58:	4a18      	ldr	r2, [pc, #96]	@ (8001abc <APP_LED_7_SEG_Init+0xdc>)
 8001a5a:	659a      	str	r2, [r3, #88]	@ 0x58
  s_LED_7SEG.p_port_control[2] = PORT_CONTROL_2;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a5e:	4a17      	ldr	r2, [pc, #92]	@ (8001abc <APP_LED_7_SEG_Init+0xdc>)
 8001a60:	65da      	str	r2, [r3, #92]	@ 0x5c
  s_LED_7SEG.p_port_control[3] = PORT_CONTROL_3;
 8001a62:	4b13      	ldr	r3, [pc, #76]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a64:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <APP_LED_7_SEG_Init+0xdc>)
 8001a66:	661a      	str	r2, [r3, #96]	@ 0x60
  s_LED_7SEG.p_port_control[4] = PORT_CONTROL_4;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a6a:	4a14      	ldr	r2, [pc, #80]	@ (8001abc <APP_LED_7_SEG_Init+0xdc>)
 8001a6c:	665a      	str	r2, [r3, #100]	@ 0x64

  s_LED_7SEG.u32_pin_control[0] = PIN_CONTROL_0;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a70:	f248 0280 	movw	r2, #32896	@ 0x8080
 8001a74:	621a      	str	r2, [r3, #32]
  s_LED_7SEG.u32_pin_control[1] = PIN_CONTROL_1;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a78:	f244 0240 	movw	r2, #16448	@ 0x4040
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24
  s_LED_7SEG.u32_pin_control[2] = PIN_CONTROL_2;
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a80:	f242 0220 	movw	r2, #8224	@ 0x2020
 8001a84:	629a      	str	r2, [r3, #40]	@ 0x28
  s_LED_7SEG.u32_pin_control[3] = PIN_CONTROL_3;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a88:	f241 0210 	movw	r2, #4112	@ 0x1010
 8001a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  s_LED_7SEG.u32_pin_control[4] = PIN_CONTROL_4;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a90:	f640 0208 	movw	r2, #2056	@ 0x808
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30

  s_LED_7SEG.u8_position_led = 0;
 8001a96:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  *s_LED_7SEG.p_power = 0;
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <APP_LED_7_SEG_Init+0xd0>)
 8001aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	200008a0 	.word	0x200008a0
 8001ab4:	20000868 	.word	0x20000868
 8001ab8:	40010c00 	.word	0x40010c00
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	04400040 	.word	0x04400040
 8001ac4:	04200020 	.word	0x04200020
 8001ac8:	04800080 	.word	0x04800080
 8001acc:	04010001 	.word	0x04010001
 8001ad0:	04100010 	.word	0x04100010

08001ad4 <APP_LED_7_SEG_CreateTask>:
 * The function `APP_LED_7_SEG_CreateTask` creates a task using the
 * `SCH_TASK_CreateTask` function.
 */
void
APP_LED_7_SEG_CreateTask (void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8001ad8:	4902      	ldr	r1, [pc, #8]	@ (8001ae4 <APP_LED_7_SEG_CreateTask+0x10>)
 8001ada:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <APP_LED_7_SEG_CreateTask+0x14>)
 8001adc:	f003 fb24 	bl	8005128 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000088 	.word	0x20000088
 8001ae8:	20000084 	.word	0x20000084

08001aec <APP_LED_7SEG_TaskUpdate>:
 *  PRIVATE FUNCTION
 *****************************************************************************/

static void
APP_LED_7SEG_TaskUpdate (void)
{
 8001aec:	b590      	push	{r4, r7, lr}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
  if (s_LED_7SEG.u8_position_led >= NUMBER_OF_LED)
 8001af2:	4ba3      	ldr	r3, [pc, #652]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001af4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d903      	bls.n	8001b06 <APP_LED_7SEG_TaskUpdate+0x1a>
  {
    s_LED_7SEG.u8_position_led = 0;
 8001afe:	4ba0      	ldr	r3, [pc, #640]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
  }

  if (*s_LED_7SEG.p_power >= 1000)
 8001b06:	4b9e      	ldr	r3, [pc, #632]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	499d      	ldr	r1, [pc, #628]	@ (8001d84 <APP_LED_7SEG_TaskUpdate+0x298>)
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fa38 	bl	8000f84 <__aeabi_fcmpge>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d06f      	beq.n	8001bfa <APP_LED_7SEG_TaskUpdate+0x10e>
  {
    uint16_t u16_integer = (uint16_t)(*s_LED_7SEG.p_power);
 8001b1a:	4b99      	ldr	r3, [pc, #612]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fa43 	bl	8000fac <__aeabi_f2uiz>
 8001b26:	4603      	mov	r3, r0
 8001b28:	80fb      	strh	r3, [r7, #6]
    uint8_t  u8_decimal  = (uint8_t)((*s_LED_7SEG.p_power - u16_integer) * 100);
 8001b2a:	4b95      	ldr	r3, [pc, #596]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001b2e:	681c      	ldr	r4, [r3, #0]
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f970 	bl	8000e18 <__aeabi_i2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff f8b5 	bl	8000cac <__aeabi_fsub>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4990      	ldr	r1, [pc, #576]	@ (8001d88 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fb14 	bl	8000174 <__aeabi_fmul>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fa2c 	bl	8000fac <__aeabi_f2uiz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	717b      	strb	r3, [r7, #5]
    uint8_t  u8_number   = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	75fb      	strb	r3, [r7, #23]

    if (s_LED_7SEG.u8_position_led < 1)
 8001b5c:	4b88      	ldr	r3, [pc, #544]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b5e:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d117      	bne.n	8001b98 <APP_LED_7SEG_TaskUpdate+0xac>
    {
      u8_number
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001b68:	797c      	ldrb	r4, [r7, #5]
 8001b6a:	4b85      	ldr	r3, [pc, #532]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b6c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	4619      	mov	r1, r3
 8001b74:	200a      	movs	r0, #10
 8001b76:	f000 fa2f 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001b80:	4b82      	ldr	r3, [pc, #520]	@ (8001d8c <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001b82:	fba3 2301 	umull	r2, r3, r3, r1
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	1aca      	subs	r2, r1, r3
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001b92:	4613      	mov	r3, r2
 8001b94:	75fb      	strb	r3, [r7, #23]
 8001b96:	e018      	b.n	8001bca <APP_LED_7SEG_TaskUpdate+0xde>
    }
    else
    {
      u8_number = (u16_integer
                   / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 1))
 8001b98:	88fc      	ldrh	r4, [r7, #6]
 8001b9a:	4b79      	ldr	r3, [pc, #484]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001b9c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	200a      	movs	r0, #10
 8001baa:	f000 fa15 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	fbb4 f1f3 	udiv	r1, r4, r3
                  % 10;
 8001bb4:	4b75      	ldr	r3, [pc, #468]	@ (8001d8c <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8001bba:	08da      	lsrs	r2, r3, #3
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	1aca      	subs	r2, r1, r3
      u8_number = (u16_integer
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f999 	bl	8001f04 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 1)
 8001bd2:	4b6b      	ldr	r3, [pc, #428]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001bd4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	f040 817a 	bne.w	8001ed4 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001be0:	4b67      	ldr	r3, [pc, #412]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001be2:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001be4:	4b66      	ldr	r3, [pc, #408]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001be6:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001be8:	7dfb      	ldrb	r3, [r7, #23]
 8001bea:	4a69      	ldr	r2, [pc, #420]	@ (8001d90 <APP_LED_7SEG_TaskUpdate+0x2a4>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001bee:	09db      	lsrs	r3, r3, #7
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	f7ff fedc 	bl	80019b0 <BSP_GPIO_SetState>
 8001bf8:	e16c      	b.n	8001ed4 <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else if (*s_LED_7SEG.p_power >= 100)
 8001bfa:	4b61      	ldr	r3, [pc, #388]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001bfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4961      	ldr	r1, [pc, #388]	@ (8001d88 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f9be 	bl	8000f84 <__aeabi_fcmpge>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d06f      	beq.n	8001cee <APP_LED_7SEG_TaskUpdate+0x202>
  {
    uint16_t u16_integer = (uint16_t)(*s_LED_7SEG.p_power);
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f9c9 	bl	8000fac <__aeabi_f2uiz>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	817b      	strh	r3, [r7, #10]
    uint8_t  u8_decimal  = (uint8_t)((*s_LED_7SEG.p_power - u16_integer) * 100);
 8001c1e:	4b58      	ldr	r3, [pc, #352]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c22:	681c      	ldr	r4, [r3, #0]
 8001c24:	897b      	ldrh	r3, [r7, #10]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8f6 	bl	8000e18 <__aeabi_i2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff f83b 	bl	8000cac <__aeabi_fsub>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4953      	ldr	r1, [pc, #332]	@ (8001d88 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fa9a 	bl	8000174 <__aeabi_fmul>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f9b2 	bl	8000fac <__aeabi_f2uiz>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	727b      	strb	r3, [r7, #9]
    uint8_t  u8_number   = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	75bb      	strb	r3, [r7, #22]

    if (s_LED_7SEG.u8_position_led < 2)
 8001c50:	4b4b      	ldr	r3, [pc, #300]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c52:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d817      	bhi.n	8001c8c <APP_LED_7SEG_TaskUpdate+0x1a0>
    {
      u8_number
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001c5c:	7a7c      	ldrb	r4, [r7, #9]
 8001c5e:	4b48      	ldr	r3, [pc, #288]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c60:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	4619      	mov	r1, r3
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f000 f9b5 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001c74:	4b45      	ldr	r3, [pc, #276]	@ (8001d8c <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001c76:	fba3 2301 	umull	r2, r3, r3, r1
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	1aca      	subs	r2, r1, r3
          = (u8_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001c86:	4613      	mov	r3, r2
 8001c88:	75bb      	strb	r3, [r7, #22]
 8001c8a:	e018      	b.n	8001cbe <APP_LED_7SEG_TaskUpdate+0x1d2>
    }
    else
    {
      u8_number = (u16_integer
                   / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001c8c:	897c      	ldrh	r4, [r7, #10]
 8001c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001c90:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	3b02      	subs	r3, #2
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f000 f99b 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	fbb4 f1f3 	udiv	r1, r4, r3
                  % 10;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	@ (8001d8c <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001caa:	fba3 2301 	umull	r2, r3, r3, r1
 8001cae:	08da      	lsrs	r2, r3, #3
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	1aca      	subs	r2, r1, r3
      u8_number = (u16_integer
 8001cba:	4613      	mov	r3, r2
 8001cbc:	75bb      	strb	r3, [r7, #22]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001cbe:	7dbb      	ldrb	r3, [r7, #22]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f91f 	bl	8001f04 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 2)
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cc8:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	f040 8100 	bne.w	8001ed4 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cd6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001cd8:	4b29      	ldr	r3, [pc, #164]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cda:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001cdc:	7dbb      	ldrb	r3, [r7, #22]
 8001cde:	4a2c      	ldr	r2, [pc, #176]	@ (8001d90 <APP_LED_7SEG_TaskUpdate+0x2a4>)
 8001ce0:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001ce2:	09db      	lsrs	r3, r3, #7
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f7ff fe62 	bl	80019b0 <BSP_GPIO_SetState>
 8001cec:	e0f2      	b.n	8001ed4 <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else if (*s_LED_7SEG.p_power >= 10)
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4927      	ldr	r1, [pc, #156]	@ (8001d94 <APP_LED_7SEG_TaskUpdate+0x2a8>)
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f944 	bl	8000f84 <__aeabi_fcmpge>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d07a      	beq.n	8001df8 <APP_LED_7SEG_TaskUpdate+0x30c>
  {
    uint8_t  u8_integer  = (uint8_t)(*s_LED_7SEG.p_power);
 8001d02:	4b1f      	ldr	r3, [pc, #124]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff f94f 	bl	8000fac <__aeabi_f2uiz>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	73fb      	strb	r3, [r7, #15]
    uint16_t u16_decimal = (uint16_t)((*s_LED_7SEG.p_power - u8_integer) * 100);
 8001d12:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d16:	681c      	ldr	r4, [r3, #0]
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f87c 	bl	8000e18 <__aeabi_i2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4619      	mov	r1, r3
 8001d24:	4620      	mov	r0, r4
 8001d26:	f7fe ffc1 	bl	8000cac <__aeabi_fsub>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4916      	ldr	r1, [pc, #88]	@ (8001d88 <APP_LED_7SEG_TaskUpdate+0x29c>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fa20 	bl	8000174 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f938 	bl	8000fac <__aeabi_f2uiz>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	81bb      	strh	r3, [r7, #12]
    uint8_t  u8_number   = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	757b      	strb	r3, [r7, #21]

    if (s_LED_7SEG.u8_position_led < 3)
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d46:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d823      	bhi.n	8001d98 <APP_LED_7SEG_TaskUpdate+0x2ac>
    {
      u8_number
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001d50:	89bc      	ldrh	r4, [r7, #12]
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <APP_LED_7SEG_TaskUpdate+0x294>)
 8001d54:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f000 f93b 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001d62:	4603      	mov	r3, r0
 8001d64:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <APP_LED_7SEG_TaskUpdate+0x2a0>)
 8001d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	1aca      	subs	r2, r1, r3
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	757b      	strb	r3, [r7, #21]
 8001d7e:	e024      	b.n	8001dca <APP_LED_7SEG_TaskUpdate+0x2de>
 8001d80:	200008a0 	.word	0x200008a0
 8001d84:	447a0000 	.word	0x447a0000
 8001d88:	42c80000 	.word	0x42c80000
 8001d8c:	cccccccd 	.word	0xcccccccd
 8001d90:	20000078 	.word	0x20000078
 8001d94:	41200000 	.word	0x41200000
    }
    else
    {
      u8_number
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001d98:	7bfc      	ldrb	r4, [r7, #15]
 8001d9a:	4b56      	ldr	r3, [pc, #344]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001d9c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	3b02      	subs	r3, #2
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4619      	mov	r1, r3
 8001da8:	200a      	movs	r0, #10
 8001daa:	f000 f915 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001dae:	4603      	mov	r3, r0
 8001db0:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001db4:	4b50      	ldr	r3, [pc, #320]	@ (8001ef8 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001db6:	fba3 2301 	umull	r2, r3, r3, r1
 8001dba:	08da      	lsrs	r2, r3, #3
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	1aca      	subs	r2, r1, r3
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	757b      	strb	r3, [r7, #21]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001dca:	7d7b      	ldrb	r3, [r7, #21]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f000 f899 	bl	8001f04 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 3)
 8001dd2:	4b48      	ldr	r3, [pc, #288]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001dd4:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d17a      	bne.n	8001ed4 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001dde:	4b45      	ldr	r3, [pc, #276]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001de0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001de2:	4b44      	ldr	r3, [pc, #272]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001de4:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001de6:	7d7b      	ldrb	r3, [r7, #21]
 8001de8:	4a44      	ldr	r2, [pc, #272]	@ (8001efc <APP_LED_7SEG_TaskUpdate+0x410>)
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001dec:	09db      	lsrs	r3, r3, #7
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	f7ff fddd 	bl	80019b0 <BSP_GPIO_SetState>
 8001df6:	e06d      	b.n	8001ed4 <APP_LED_7SEG_TaskUpdate+0x3e8>
    }
  }
  else
  {
    uint8_t  u8_integer  = (uint8_t)(*s_LED_7SEG.p_power);
 8001df8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f8d4 	bl	8000fac <__aeabi_f2uiz>
 8001e04:	4603      	mov	r3, r0
 8001e06:	74fb      	strb	r3, [r7, #19]
    uint16_t u16_decimal = (uint16_t)((*s_LED_7SEG.p_power - u8_integer) * 100);
 8001e08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e0c:	681c      	ldr	r4, [r3, #0]
 8001e0e:	7cfb      	ldrb	r3, [r7, #19]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff f801 	bl	8000e18 <__aeabi_i2f>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f7fe ff46 	bl	8000cac <__aeabi_fsub>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4937      	ldr	r1, [pc, #220]	@ (8001f00 <APP_LED_7SEG_TaskUpdate+0x414>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe f9a5 	bl	8000174 <__aeabi_fmul>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f8bd 	bl	8000fac <__aeabi_f2uiz>
 8001e32:	4603      	mov	r3, r0
 8001e34:	823b      	strh	r3, [r7, #16]
    uint8_t  u8_number   = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	753b      	strb	r3, [r7, #20]

    if (s_LED_7SEG.u8_position_led < 4)
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e3c:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d817      	bhi.n	8001e76 <APP_LED_7SEG_TaskUpdate+0x38a>
    {
      u8_number
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001e46:	8a3c      	ldrh	r4, [r7, #16]
 8001e48:	4b2a      	ldr	r3, [pc, #168]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e4a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4619      	mov	r1, r3
 8001e52:	200a      	movs	r0, #10
 8001e54:	f000 f8c0 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	@ (8001ef8 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001e60:	fba3 2301 	umull	r2, r3, r3, r1
 8001e64:	08da      	lsrs	r2, r3, #3
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	1aca      	subs	r2, r1, r3
          = (u16_decimal / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led))
 8001e70:	4613      	mov	r3, r2
 8001e72:	753b      	strb	r3, [r7, #20]
 8001e74:	e018      	b.n	8001ea8 <APP_LED_7SEG_TaskUpdate+0x3bc>
    }
    else
    {
      u8_number
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001e76:	7cfc      	ldrb	r4, [r7, #19]
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001e7a:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	3b02      	subs	r3, #2
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	4619      	mov	r1, r3
 8001e86:	200a      	movs	r0, #10
 8001e88:	f000 f8a6 	bl	8001fd8 <APP_LED_7_SEG_Pow>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	fbb4 f1f3 	udiv	r1, r4, r3
            % 10;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <APP_LED_7SEG_TaskUpdate+0x40c>)
 8001e94:	fba3 2301 	umull	r2, r3, r3, r1
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	1aca      	subs	r2, r1, r3
          = (u8_integer / APP_LED_7_SEG_Pow(10, s_LED_7SEG.u8_position_led - 2))
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	753b      	strb	r3, [r7, #20]
    }

    APP_LED_7SEG_DisplayLed(u8_number);
 8001ea8:	7d3b      	ldrb	r3, [r7, #20]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f82a 	bl	8001f04 <APP_LED_7SEG_DisplayLed>

    // Turn on DP
    if (s_LED_7SEG.u8_position_led == 4)
 8001eb0:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001eb2:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d10b      	bne.n	8001ed4 <APP_LED_7SEG_TaskUpdate+0x3e8>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001ebe:	6d18      	ldr	r0, [r3, #80]	@ 0x50
                        s_LED_7SEG.u32_pin_led[7],
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001ec2:	69d9      	ldr	r1, [r3, #28]
                        (u8_data_mask_led[u8_number] >> 7) & 0x01);
 8001ec4:	7d3b      	ldrb	r3, [r7, #20]
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <APP_LED_7SEG_TaskUpdate+0x410>)
 8001ec8:	5cd3      	ldrb	r3, [r2, r3]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[7],
 8001eca:	09db      	lsrs	r3, r3, #7
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	f7ff fd6e 	bl	80019b0 <BSP_GPIO_SetState>
    }
  }
  
  APP_LED_7SEG_ScanLed();
 8001ed4:	f000 f846 	bl	8001f64 <APP_LED_7SEG_ScanLed>
  s_LED_7SEG.u8_position_led++;
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001eda:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <APP_LED_7SEG_TaskUpdate+0x408>)
 8001ee6:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200008a0 	.word	0x200008a0
 8001ef8:	cccccccd 	.word	0xcccccccd
 8001efc:	20000078 	.word	0x20000078
 8001f00:	42c80000 	.word	0x42c80000

08001f04 <APP_LED_7SEG_DisplayLed>:

static void
APP_LED_7SEG_DisplayLed (uint8_t u8_number)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < 8; i++)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e01a      	b.n	8001f4a <APP_LED_7SEG_DisplayLed+0x46>
  {
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[i],
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	4a11      	ldr	r2, [pc, #68]	@ (8001f5c <APP_LED_7SEG_DisplayLed+0x58>)
 8001f18:	330c      	adds	r3, #12
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	6858      	ldr	r0, [r3, #4]
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
                      s_LED_7SEG.u32_pin_led[i],
 8001f22:	4a0e      	ldr	r2, [pc, #56]	@ (8001f5c <APP_LED_7SEG_DisplayLed+0x58>)
 8001f24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
                      (u8_data_mask_led[u8_number] >> i) & 0x01);
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <APP_LED_7SEG_DisplayLed+0x5c>)
 8001f2c:	5cd3      	ldrb	r3, [r2, r3]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	fa42 f303 	asr.w	r3, r2, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	b2db      	uxtb	r3, r3
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_led[i],
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f7ff fd36 	bl	80019b0 <BSP_GPIO_SetState>
  for (uint8_t i = 0; i < 8; i++)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	3301      	adds	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2b07      	cmp	r3, #7
 8001f4e:	d9e1      	bls.n	8001f14 <APP_LED_7SEG_DisplayLed+0x10>
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200008a0 	.word	0x200008a0
 8001f60:	20000078 	.word	0x20000078

08001f64 <APP_LED_7SEG_ScanLed>:

static void
APP_LED_7SEG_ScanLed (void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  for (uint8_t i = 0; i < NUMBER_OF_LED; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e028      	b.n	8001fc2 <APP_LED_7SEG_ScanLed+0x5e>
  {
    if (s_LED_7SEG.u8_position_led == i)
 8001f70:	4b18      	ldr	r3, [pc, #96]	@ (8001fd4 <APP_LED_7SEG_ScanLed+0x70>)
 8001f72:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	79fa      	ldrb	r2, [r7, #7]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d10f      	bne.n	8001f9e <APP_LED_7SEG_ScanLed+0x3a>
    {
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	4a14      	ldr	r2, [pc, #80]	@ (8001fd4 <APP_LED_7SEG_ScanLed+0x70>)
 8001f82:	3314      	adds	r3, #20
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	6858      	ldr	r0, [r3, #4]
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
                        s_LED_7SEG.u32_pin_control[i],
 8001f8c:	4a11      	ldr	r2, [pc, #68]	@ (8001fd4 <APP_LED_7SEG_ScanLed+0x70>)
 8001f8e:	3308      	adds	r3, #8
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001f94:	2201      	movs	r2, #1
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7ff fd0a 	bl	80019b0 <BSP_GPIO_SetState>
                        1);
      continue;
 8001f9c:	e00e      	b.n	8001fbc <APP_LED_7SEG_ScanLed+0x58>
    }
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd4 <APP_LED_7SEG_ScanLed+0x70>)
 8001fa2:	3314      	adds	r3, #20
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	6858      	ldr	r0, [r3, #4]
 8001faa:	79fb      	ldrb	r3, [r7, #7]
                      s_LED_7SEG.u32_pin_control[i],
 8001fac:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <APP_LED_7SEG_ScanLed+0x70>)
 8001fae:	3308      	adds	r3, #8
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    BSP_GPIO_SetState((GPIO_TypeDef *)s_LED_7SEG.p_port_control[i],
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7ff fcfa 	bl	80019b0 <BSP_GPIO_SetState>
  for (uint8_t i = 0; i < NUMBER_OF_LED; i++)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d9d3      	bls.n	8001f70 <APP_LED_7SEG_ScanLed+0xc>
                      0);
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200008a0 	.word	0x200008a0

08001fd8 <APP_LED_7_SEG_Pow>:

static uint32_t
APP_LED_7_SEG_Pow (uint8_t u8_x, uint8_t u8_y)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	71fb      	strb	r3, [r7, #7]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71bb      	strb	r3, [r7, #6]
  uint32_t u32_ret = 1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 1; i <= u8_y; i++)
 8001fec:	2301      	movs	r3, #1
 8001fee:	72fb      	strb	r3, [r7, #11]
 8001ff0:	e007      	b.n	8002002 <APP_LED_7_SEG_Pow+0x2a>
  {
    u32_ret *= u8_x;
 8001ff2:	79fa      	ldrb	r2, [r7, #7]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	fb02 f303 	mul.w	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 1; i <= u8_y; i++)
 8001ffc:	7afb      	ldrb	r3, [r7, #11]
 8001ffe:	3301      	adds	r3, #1
 8002000:	72fb      	strb	r3, [r7, #11]
 8002002:	7afa      	ldrb	r2, [r7, #11]
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	429a      	cmp	r2, r3
 8002008:	d9f3      	bls.n	8001ff2 <APP_LED_7_SEG_Pow+0x1a>
  }
  return u32_ret;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
	...

08002018 <ACS712_VoltageConverterCurrent>:
   *   PUBLIC FUNCTIONS
   **********************/

// Unit Voltage mV
  static inline float ACS712_VoltageConverterCurrent(float f_mVoltage)
  {
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
#if  ACS712_0_30A
	  return (f_mVoltage - 30) / 64.37;
 8002020:	490d      	ldr	r1, [pc, #52]	@ (8002058 <ACS712_VoltageConverterCurrent+0x40>)
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fe42 	bl	8000cac <__aeabi_fsub>
 8002028:	4603      	mov	r3, r0
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe faba 	bl	80005a4 <__aeabi_f2d>
 8002030:	a307      	add	r3, pc, #28	@ (adr r3, 8002050 <ACS712_VoltageConverterCurrent+0x38>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	f7fe fc37 	bl	80008a8 <__aeabi_ddiv>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fddf 	bl	8000c04 <__aeabi_d2f>
 8002046:	4603      	mov	r3, r0
	  return f_mVoltage / 100.0;
#endif
#if  ACS712_0_5A
	  return f_mVoltage / 185.0;
#endif
  }
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	147ae148 	.word	0x147ae148
 8002054:	405017ae 	.word	0x405017ae
 8002058:	41f00000 	.word	0x41f00000

0800205c <APP_READ_DATA_CreateTask>:
 * The function APP_READ_DATA_CreateTask creates a task using the
 * SCH_TASK_CreateTask function.
 */
void
APP_READ_DATA_CreateTask (void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_ControlTaskContext.taskHandle,
 8002060:	4902      	ldr	r1, [pc, #8]	@ (800206c <APP_READ_DATA_CreateTask+0x10>)
 8002062:	4803      	ldr	r0, [pc, #12]	@ (8002070 <APP_READ_DATA_CreateTask+0x14>)
 8002064:	f003 f860 	bl	8005128 <SCH_TASK_CreateTask>
                      &s_ControlTaskContext.taskProperty);
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000098 	.word	0x20000098
 8002070:	20000094 	.word	0x20000094

08002074 <APP_READ_DATA_Init>:
/**
 * The function initializes buffers for a calculator application in C.
 */
void
APP_READ_DATA_Init (void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  // Link pointer to variable
  s_read_data.p_vol_cur_buffer     = &s_data_system.s_vol_cur_buffer;
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <APP_READ_DATA_Init+0x34>)
 800207a:	4a0c      	ldr	r2, [pc, #48]	@ (80020ac <APP_READ_DATA_Init+0x38>)
 800207c:	605a      	str	r2, [r3, #4]
  s_read_data.p_vol_cur_buffer_irq = &s_data_system.s_vol_cur_buffer_irq;
 800207e:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <APP_READ_DATA_Init+0x34>)
 8002080:	4a0b      	ldr	r2, [pc, #44]	@ (80020b0 <APP_READ_DATA_Init+0x3c>)
 8002082:	601a      	str	r2, [r3, #0]
  s_read_data.p_voltage            = &s_data_system.f_voltage;
 8002084:	4b08      	ldr	r3, [pc, #32]	@ (80020a8 <APP_READ_DATA_Init+0x34>)
 8002086:	4a0b      	ldr	r2, [pc, #44]	@ (80020b4 <APP_READ_DATA_Init+0x40>)
 8002088:	609a      	str	r2, [r3, #8]
  s_read_data.p_current            = &s_data_system.f_current;
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <APP_READ_DATA_Init+0x34>)
 800208c:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <APP_READ_DATA_Init+0x44>)
 800208e:	60da      	str	r2, [r3, #12]

  // Initialize buffer
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer);
 8002090:	4b05      	ldr	r3, [pc, #20]	@ (80020a8 <APP_READ_DATA_Init+0x34>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f002 ff7f 	bl	8004f98 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 800209a:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <APP_READ_DATA_Init+0x34>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 ff7a 	bl	8004f98 <RING_BUFFER_Init>
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000910 	.word	0x20000910
 80020ac:	20000590 	.word	0x20000590
 80020b0:	20000504 	.word	0x20000504
 80020b4:	2000085c 	.word	0x2000085c
 80020b8:	20000860 	.word	0x20000860

080020bc <APP_READ_DATA_HandleDMA_IRQ>:

void
APP_READ_DATA_HandleDMA_IRQ (flagIRQ_dma_t status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if (status == FLAG_TRANSFER_COMPLETE)
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d143      	bne.n	8002154 <APP_READ_DATA_HandleDMA_IRQ+0x98>
  {
    s_read_data.value_temp_irq[0]
        = (uint8_t)(s_data_system.u16_adc_value[0] >> 8);
 80020cc:	4b23      	ldr	r3, [pc, #140]	@ (800215c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80020ce:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	4b21      	ldr	r3, [pc, #132]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 80020dc:	741a      	strb	r2, [r3, #16]
    s_read_data.value_temp_irq[1] = (uint8_t)(s_data_system.u16_adc_value[0]);
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80020e0:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 80020ea:	745a      	strb	r2, [r3, #17]

    s_read_data.value_temp_irq[2]
        = (uint8_t)(s_data_system.u16_adc_value[1] >> 8);
 80020ec:	4b1b      	ldr	r3, [pc, #108]	@ (800215c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 80020ee:	f8b3 3482 	ldrh.w	r3, [r3, #1154]	@ 0x482
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4b19      	ldr	r3, [pc, #100]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 80020fc:	749a      	strb	r2, [r3, #18]
    s_read_data.value_temp_irq[3] = (uint8_t)(s_data_system.u16_adc_value[0]);
 80020fe:	4b17      	ldr	r3, [pc, #92]	@ (800215c <APP_READ_DATA_HandleDMA_IRQ+0xa0>)
 8002100:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 8002104:	b29b      	uxth	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800210a:	74da      	strb	r2, [r3, #19]

    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800210c:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 800210e:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[0]);
 8002110:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002112:	7c12      	ldrb	r2, [r2, #16]
 8002114:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f002 ff89 	bl	8005030 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800211e:	4b10      	ldr	r3, [pc, #64]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002120:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[1]);
 8002122:	4a0f      	ldr	r2, [pc, #60]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002124:	7c52      	ldrb	r2, [r2, #17]
 8002126:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f002 ff80 	bl	8005030 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002132:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[2]);
 8002134:	4a0a      	ldr	r2, [pc, #40]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002136:	7c92      	ldrb	r2, [r2, #18]
 8002138:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f002 ff77 	bl	8005030 <RING_BUFFER_Push_Data>
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002144:	681b      	ldr	r3, [r3, #0]
                          s_read_data.value_temp_irq[3]);
 8002146:	4a06      	ldr	r2, [pc, #24]	@ (8002160 <APP_READ_DATA_HandleDMA_IRQ+0xa4>)
 8002148:	7cd2      	ldrb	r2, [r2, #19]
 800214a:	b2d2      	uxtb	r2, r2
    RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq,
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f002 ff6e 	bl	8005030 <RING_BUFFER_Push_Data>
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200003ec 	.word	0x200003ec
 8002160:	20000910 	.word	0x20000910

08002164 <APP_READ_DATA_TaskUpdate>:
 * @return If the ring buffer is empty, the function `APP_READ_DATA_TaskUpdate`
 * will return without performing any further operations.
 */
static void
APP_READ_DATA_TaskUpdate (void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq))
 800216a:	4b53      	ldr	r3, [pc, #332]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f002 ff3c 	bl	8004fec <RING_BUFFER_Is_Empty>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 8099 	bne.w	80022ae <APP_READ_DATA_TaskUpdate+0x14a>
  uint16_t  u16_value_temp;
  uint8_t   u8_value[4];

  // u8_value[0] 8 bit high of adc-channel 1
  u8_value[0] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 800217c:	4b4e      	ldr	r3, [pc, #312]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 800217e:	681b      	ldr	r3, [r3, #0]
  u8_value[0] = RING_BUFFER_Pull_Data(
 8002180:	4618      	mov	r0, r3
 8002182:	f002 ff7f 	bl	8005084 <RING_BUFFER_Pull_Data>
 8002186:	4603      	mov	r3, r0
 8002188:	713b      	strb	r3, [r7, #4]

  // u8_value[1] 8 bit low of adc-channel 1
  u8_value[1] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 800218a:	4b4b      	ldr	r3, [pc, #300]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 800218c:	681b      	ldr	r3, [r3, #0]
  u8_value[1] = RING_BUFFER_Pull_Data(
 800218e:	4618      	mov	r0, r3
 8002190:	f002 ff78 	bl	8005084 <RING_BUFFER_Pull_Data>
 8002194:	4603      	mov	r3, r0
 8002196:	717b      	strb	r3, [r7, #5]

  // u8_value[2] 8 bit high of adc-channel 2
  u8_value[2] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 8002198:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 800219a:	681b      	ldr	r3, [r3, #0]
  u8_value[2] = RING_BUFFER_Pull_Data(
 800219c:	4618      	mov	r0, r3
 800219e:	f002 ff71 	bl	8005084 <RING_BUFFER_Pull_Data>
 80021a2:	4603      	mov	r3, r0
 80021a4:	71bb      	strb	r3, [r7, #6]

  // u8_value[3] 8 bit low of adc-channel 2
  u8_value[3] = RING_BUFFER_Pull_Data(
      (ring_buffer_t *)s_read_data.p_vol_cur_buffer_irq);
 80021a6:	4b44      	ldr	r3, [pc, #272]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 80021a8:	681b      	ldr	r3, [r3, #0]
  u8_value[3] = RING_BUFFER_Pull_Data(
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 ff6a 	bl	8005084 <RING_BUFFER_Pull_Data>
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]

  u16_value_temp = (uint16_t)((u8_value[0] << 8) | (u8_value[1]));
 80021b4:	793b      	ldrb	r3, [r7, #4]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	797b      	ldrb	r3, [r7, #5]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	81fb      	strh	r3, [r7, #14]
  APP_READ_DATA_ConvertVoltage(u16_value_temp);
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 f878 	bl	80022bc <APP_READ_DATA_ConvertVoltage>

  u16_value_temp = (uint16_t)((u8_value[2] << 8) | (u8_value[3]));
 80021cc:	79bb      	ldrb	r3, [r7, #6]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	81fb      	strh	r3, [r7, #14]
  APP_READ_DATA_ConvertCurrent(u16_value_temp);
 80021dc:	89fb      	ldrh	r3, [r7, #14]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f8aa 	bl	8002338 <APP_READ_DATA_ConvertCurrent>

  // Transmission Data to app_data_transmission
  p_value_temp = (uint32_t *)s_read_data.p_voltage;
 80021e4:	4b34      	ldr	r3, [pc, #208]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e1b      	lsrs	r3, r3, #24
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	b2db      	uxtb	r3, r3
 8002206:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002210:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 8002212:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 8002214:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002216:	4611      	mov	r1, r2
 8002218:	4618      	mov	r0, r3
 800221a:	f002 ff09 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 8002220:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 8002222:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002224:	4611      	mov	r1, r2
 8002226:	4618      	mov	r0, r3
 8002228:	f002 ff02 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,  
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 800222e:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 8002230:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,  
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f002 fefb 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800223a:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 800223c:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 800223e:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f002 fef4 	bl	8005030 <RING_BUFFER_Push_Data>

  p_value_temp = (uint32_t *)s_read_data.p_current;
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]

  u8_value[0] = (uint8_t)(*p_value_temp >> 24);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e1b      	lsrs	r3, r3, #24
 8002254:	b2db      	uxtb	r3, r3
 8002256:	713b      	strb	r3, [r7, #4]
  u8_value[1] = (uint8_t)(*p_value_temp >> 16);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0c1b      	lsrs	r3, r3, #16
 800225e:	b2db      	uxtb	r3, r3
 8002260:	717b      	strb	r3, [r7, #5]
  u8_value[2] = (uint8_t)(*p_value_temp >> 8);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	b2db      	uxtb	r3, r3
 800226a:	71bb      	strb	r3, [r7, #6]
  u8_value[3] = (uint8_t)(*p_value_temp >> 0);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	71fb      	strb	r3, [r7, #7]

  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002274:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 8002276:	685b      	ldr	r3, [r3, #4]
                        u8_value[0]);
 8002278:	793a      	ldrb	r2, [r7, #4]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f002 fed7 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002282:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 8002284:	685b      	ldr	r3, [r3, #4]
                        u8_value[1]);
 8002286:	797a      	ldrb	r2, [r7, #5]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f002 fed0 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002290:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 8002292:	685b      	ldr	r3, [r3, #4]
                        u8_value[2]);
 8002294:	79ba      	ldrb	r2, [r7, #6]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 8002296:	4611      	mov	r1, r2
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fec9 	bl	8005030 <RING_BUFFER_Push_Data>
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <APP_READ_DATA_TaskUpdate+0x154>)
 80022a0:	685b      	ldr	r3, [r3, #4]
                        u8_value[3]);
 80022a2:	79fa      	ldrb	r2, [r7, #7]
  RING_BUFFER_Push_Data((ring_buffer_t *)s_read_data.p_vol_cur_buffer,
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 fec2 	bl	8005030 <RING_BUFFER_Push_Data>
 80022ac:	e000      	b.n	80022b0 <APP_READ_DATA_TaskUpdate+0x14c>
    return;
 80022ae:	bf00      	nop
}
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000910 	.word	0x20000910

080022bc <APP_READ_DATA_ConvertVoltage>:
 * @param u16_adc_value_voltage The parameter `u16_adc_value_voltage` is a
 * 16-bit unsigned integer representing the ADC value of the voltage being read.
 */
static void
APP_READ_DATA_ConvertVoltage (uint16_t u16_adc_value_voltage)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <APP_READ_DATA_ConvertVoltage+0x6c>)
 80022d4:	fba3 1302 	umull	r1, r3, r3, r2
 80022d8:	1ad2      	subs	r2, r2, r3
 80022da:	0852      	lsrs	r2, r2, #1
 80022dc:	4413      	add	r3, r2
 80022de:	0adb      	lsrs	r3, r3, #11
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe fd95 	bl	8000e10 <__aeabi_ui2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_voltage, LL_ADC_RESOLUTION_12B);

  *s_read_data.p_voltage = f_mVolt * 11.0 / 100.0;
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7fe f95a 	bl	80005a4 <__aeabi_f2d>
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	4b0d      	ldr	r3, [pc, #52]	@ (800232c <APP_READ_DATA_ConvertVoltage+0x70>)
 80022f6:	f7fe f9ad 	bl	8000654 <__aeabi_dmul>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <APP_READ_DATA_ConvertVoltage+0x74>)
 8002308:	f7fe face 	bl	80008a8 <__aeabi_ddiv>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4908      	ldr	r1, [pc, #32]	@ (8002334 <APP_READ_DATA_ConvertVoltage+0x78>)
 8002312:	688c      	ldr	r4, [r1, #8]
 8002314:	4610      	mov	r0, r2
 8002316:	4619      	mov	r1, r3
 8002318:	f7fe fc74 	bl	8000c04 <__aeabi_d2f>
 800231c:	4603      	mov	r3, r0
 800231e:	6023      	str	r3, [r4, #0]
}
 8002320:	bf00      	nop
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	bd90      	pop	{r4, r7, pc}
 8002328:	00100101 	.word	0x00100101
 800232c:	40260000 	.word	0x40260000
 8002330:	40590000 	.word	0x40590000
 8002334:	20000910 	.word	0x20000910

08002338 <APP_READ_DATA_ConvertCurrent>:

static void
APP_READ_DATA_ConvertCurrent (uint16_t u16_adc_value_current)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	80fb      	strh	r3, [r7, #6]
  float f_mVolt;
  f_mVolt = __LL_ADC_CALC_DATA_TO_VOLTAGE(
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002348:	fb02 f303 	mul.w	r3, r2, r3
 800234c:	461a      	mov	r2, r3
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <APP_READ_DATA_ConvertCurrent+0x70>)
 8002350:	fba3 1302 	umull	r1, r3, r3, r2
 8002354:	1ad2      	subs	r2, r2, r3
 8002356:	0852      	lsrs	r2, r2, #1
 8002358:	4413      	add	r3, r2
 800235a:	0adb      	lsrs	r3, r3, #11
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fd57 	bl	8000e10 <__aeabi_ui2f>
 8002362:	4603      	mov	r3, r0
 8002364:	60fb      	str	r3, [r7, #12]
      3300, u16_adc_value_current, LL_ADC_RESOLUTION_12B);

  f_mVolt = f_mVolt / 1.6;
 8002366:	68f8      	ldr	r0, [r7, #12]
 8002368:	f7fe f91c 	bl	80005a4 <__aeabi_f2d>
 800236c:	a30c      	add	r3, pc, #48	@ (adr r3, 80023a0 <APP_READ_DATA_ConvertCurrent+0x68>)
 800236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002372:	f7fe fa99 	bl	80008a8 <__aeabi_ddiv>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fc41 	bl	8000c04 <__aeabi_d2f>
 8002382:	4603      	mov	r3, r0
 8002384:	60fb      	str	r3, [r7, #12]

  *s_read_data.p_current = ACS712_VoltageConverterCurrent(f_mVolt);
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <APP_READ_DATA_ConvertCurrent+0x74>)
 8002388:	68dc      	ldr	r4, [r3, #12]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7ff fe44 	bl	8002018 <ACS712_VoltageConverterCurrent>
 8002390:	4603      	mov	r3, r0
 8002392:	6023      	str	r3, [r4, #0]
}
 8002394:	bf00      	nop
 8002396:	3714      	adds	r7, #20
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}
 800239c:	f3af 8000 	nop.w
 80023a0:	9999999a 	.word	0x9999999a
 80023a4:	3ff99999 	.word	0x3ff99999
 80023a8:	00100101 	.word	0x00100101
 80023ac:	20000910 	.word	0x20000910

080023b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	b29a      	uxth	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	615a      	str	r2, [r3, #20]
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <BSP_GPIO_Toggle>:

  static inline void BSP_GPIO_Toggle (GPIO_TypeDef *gpio_port,
                                      uint32_t      gpio_pin)
  {
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
    uint32_t odr     = gpio_port->ODR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	60fb      	str	r3, [r7, #12]
    uint32_t pinmask = ((gpio_pin >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	60bb      	str	r3, [r7, #8]
    gpio_port->BSRR  = ((odr & pinmask) << 16u) | (~odr & pinmask);
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4013      	ands	r3, r2
 80023ec:	041a      	lsls	r2, r3, #16
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43d9      	mvns	r1, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	400b      	ands	r3, r1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	611a      	str	r2, [r3, #16]
  }
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
	...

08002408 <APP_STATUS_LED_Init>:
 * The function initializes status LEDs by resetting GPIO pins, linking a
 * pointer to a variable, and resetting fields in a structure.
 */
void
APP_STATUS_LED_Init (void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  // Reset GPIO
  LL_GPIO_ResetOutputPin(PORT_LED_STATUS, PIN_LED_STATUS);
 800240c:	f241 0110 	movw	r1, #4112	@ 0x1010
 8002410:	4807      	ldr	r0, [pc, #28]	@ (8002430 <APP_STATUS_LED_Init+0x28>)
 8002412:	f7ff ffcd 	bl	80023b0 <LL_GPIO_ResetOutputPin>

  // Reset field of s_status_led
  s_status_led.u8_flag_enable_timer_100ms = 0;
 8002416:	4a07      	ldr	r2, [pc, #28]	@ (8002434 <APP_STATUS_LED_Init+0x2c>)
 8002418:	7813      	ldrb	r3, [r2, #0]
 800241a:	f36f 0300 	bfc	r3, #0, #1
 800241e:	7013      	strb	r3, [r2, #0]
  s_status_led.u8_flag_enable_timer_500ms = 0;
 8002420:	4a04      	ldr	r2, [pc, #16]	@ (8002434 <APP_STATUS_LED_Init+0x2c>)
 8002422:	7813      	ldrb	r3, [r2, #0]
 8002424:	f36f 0341 	bfc	r3, #1, #1
 8002428:	7013      	strb	r3, [r2, #0]
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40010c00 	.word	0x40010c00
 8002434:	20000924 	.word	0x20000924

08002438 <APP_STATUS_LED_CreateTimer>:
 * The function `APP_STATUS_LED_CreateTimer` creates timers for status LED
 * handling.
 */
void
APP_STATUS_LED_CreateTimer (void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[0].timerHandle,
 800243c:	4904      	ldr	r1, [pc, #16]	@ (8002450 <APP_STATUS_LED_CreateTimer+0x18>)
 800243e:	4805      	ldr	r0, [pc, #20]	@ (8002454 <APP_STATUS_LED_CreateTimer+0x1c>)
 8002440:	f002 feb0 	bl	80051a4 <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[0].timerProperty);
  SCH_TIM_CreateTimer(&s_StatusLedTimerContext[1].timerHandle,
 8002444:	4904      	ldr	r1, [pc, #16]	@ (8002458 <APP_STATUS_LED_CreateTimer+0x20>)
 8002446:	4805      	ldr	r0, [pc, #20]	@ (800245c <APP_STATUS_LED_CreateTimer+0x24>)
 8002448:	f002 feac 	bl	80051a4 <SCH_TIM_CreateTimer>
                      &s_StatusLedTimerContext[1].timerProperty);
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200000b8 	.word	0x200000b8
 8002454:	200000b4 	.word	0x200000b4
 8002458:	200000c4 	.word	0x200000c4
 800245c:	200000c0 	.word	0x200000c0

08002460 <APP_STATUS_LED_CreateTask>:
/**
 * The function APP_STATUS_LED_CreateTask creates a task for the status LED.
 */
void
APP_STATUS_LED_CreateTask (void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  SCH_TASK_CreateTask(&s_StatusLedTaskContext.taskHandle,
 8002464:	4902      	ldr	r1, [pc, #8]	@ (8002470 <APP_STATUS_LED_CreateTask+0x10>)
 8002466:	4803      	ldr	r0, [pc, #12]	@ (8002474 <APP_STATUS_LED_CreateTask+0x14>)
 8002468:	f002 fe5e 	bl	8005128 <SCH_TASK_CreateTask>
                      &s_StatusLedTaskContext.taskProperty);
}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	200000a8 	.word	0x200000a8
 8002474:	200000a4 	.word	0x200000a4

08002478 <APP_STATUS_LED_TaskUpdate>:
 *  PRIVATE FUNCTION
 *****************************************************************************/

static void
APP_STATUS_LED_TaskUpdate (void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  if (s_data_system.f_current < THRESHOLD_CURRENT)
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <APP_STATUS_LED_TaskUpdate+0x58>)
 800247e:	f8d3 3474 	ldr.w	r3, [r3, #1140]	@ 0x474
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe f88e 	bl	80005a4 <__aeabi_f2d>
 8002488:	a30f      	add	r3, pc, #60	@ (adr r3, 80024c8 <APP_STATUS_LED_TaskUpdate+0x50>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe fb53 	bl	8000b38 <__aeabi_dcmplt>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <APP_STATUS_LED_TaskUpdate+0x36>
  {
    SCH_TIM_StopTimer(s_StatusLedTimerContext[0].timerHandle);
 8002498:	4b0e      	ldr	r3, [pc, #56]	@ (80024d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f002 fee5 	bl	800526c <SCH_TIM_StopTimer>
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[1].timerHandle);
 80024a2:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 80024a4:	7b1b      	ldrb	r3, [r3, #12]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f002 feba 	bl	8005220 <SCH_TIM_RestartTimer>
  else
  {
    SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
  }
}
 80024ac:	e009      	b.n	80024c2 <APP_STATUS_LED_TaskUpdate+0x4a>
    SCH_TIM_StopTimer(s_StatusLedTimerContext[1].timerHandle);
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 80024b0:	7b1b      	ldrb	r3, [r3, #12]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f002 feda 	bl	800526c <SCH_TIM_StopTimer>
    SCH_TIM_RestartTimer(s_StatusLedTimerContext[0].timerHandle);
 80024b8:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <APP_STATUS_LED_TaskUpdate+0x5c>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 feaf 	bl	8005220 <SCH_TIM_RestartTimer>
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	9999999a 	.word	0x9999999a
 80024cc:	3fb99999 	.word	0x3fb99999
 80024d0:	200003ec 	.word	0x200003ec
 80024d4:	200000b4 	.word	0x200000b4

080024d8 <APP_STATUS_LED_100MS_TimerUpdate>:

static void
APP_STATUS_LED_100MS_TimerUpdate (void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  BSP_GPIO_Toggle(PORT_LED_STATUS, PIN_LED_STATUS);
 80024dc:	f241 0110 	movw	r1, #4112	@ 0x1010
 80024e0:	4802      	ldr	r0, [pc, #8]	@ (80024ec <APP_STATUS_LED_100MS_TimerUpdate+0x14>)
 80024e2:	f7ff ff74 	bl	80023ce <BSP_GPIO_Toggle>
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40010c00 	.word	0x40010c00

080024f0 <APP_STATUS_LED_500MS_TimerUpdate>:

static void
APP_STATUS_LED_500MS_TimerUpdate (void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  BSP_GPIO_Toggle(PORT_LED_STATUS, PIN_LED_STATUS);
 80024f4:	f241 0110 	movw	r1, #4112	@ 0x1010
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <APP_STATUS_LED_500MS_TimerUpdate+0x14>)
 80024fa:	f7ff ff68 	bl	80023ce <BSP_GPIO_Toggle>
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40010c00 	.word	0x40010c00

08002508 <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr = 0U;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]
  
  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <LL_ADC_DMA_GetRegAddr+0x1c>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t)&(ADCx->DR);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	334c      	adds	r3, #76	@ 0x4c
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	e001      	b.n	8002528 <LL_ADC_DMA_GetRegAddr+0x20>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register of multimode data */
    data_reg_addr = (uint32_t)&(ADC12_COMMON->DR);
 8002524:	4b03      	ldr	r3, [pc, #12]	@ (8002534 <LL_ADC_DMA_GetRegAddr+0x2c>)
 8002526:	60fb      	str	r3, [r7, #12]
  }
  
  return data_reg_addr;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	4001244c 	.word	0x4001244c

08002538 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_EXTSEL) == (LL_ADC_REG_TRIG_SOFTWARE));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002548:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800254c:	bf0c      	ite	eq
 800254e:	2301      	moveq	r3, #1
 8002550:	2300      	movne	r3, #0
 8002552:	b2db      	uxtb	r3, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr

08002582 <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_Disable>:
  * @rmtoll CR2      ADON           LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_ADON);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 0201 	bic.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <LL_ADC_IsEnabled>:
  * @rmtoll CR2      ADON           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <LL_ADC_StartCalibration>:
  * @rmtoll CR2      CAL            LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f043 0204 	orr.w	r2, r3, #4
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	609a      	str	r2, [r3, #8]
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f443 02a0 	orr.w	r2, r3, #5242880	@ 0x500000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <LL_ADC_REG_StartConversionExtTrig>:
  *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionExtTrig(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	609a      	str	r2, [r3, #8]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <LL_ADC_ClearFlag_EOS>:
  * @rmtoll SR       EOC            LL_ADC_ClearFlag_EOS
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Note: on this STM32 series, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f06f 0202 	mvn.w	r2, #2
 800264c:	601a      	str	r2, [r3, #0]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <BSP_ADC_ConversionStop_Disable>:
 *   INLINE PRIVATE FUNCTION
 *****************************************************************************/

static inline void
BSP_ADC_ConversionStop_Disable (ADC_TypeDef *p_ADC)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  // Disable the ADC peripheral
  LL_ADC_Disable(p_ADC);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff9d 	bl	80025a0 <LL_ADC_Disable>

  // Wait for ADC effectively disabled
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002666:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <BSP_ADC_ConversionStop_Disable+0x38>)
 8002668:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800266c:	601a      	str	r2, [r3, #0]
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 800266e:	e003      	b.n	8002678 <BSP_ADC_ConversionStop_Disable+0x20>
  {
    if (u32_adc_timeout == 0)
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <BSP_ADC_ConversionStop_Disable+0x38>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <BSP_ADC_ConversionStop_Disable+0x2e>
  while (LL_ADC_IsEnabled(p_ADC) != 0)
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffa0 	bl	80025be <LL_ADC_IsEnabled>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f5      	bne.n	8002670 <BSP_ADC_ConversionStop_Disable+0x18>
 8002684:	e000      	b.n	8002688 <BSP_ADC_ConversionStop_Disable+0x30>
    {
      return;
 8002686:	bf00      	nop
    }
  }
}
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000928 	.word	0x20000928

08002694 <BSP_ADC_Enable>:

static inline void
BSP_ADC_Enable (ADC_TypeDef *p_ADC)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if (LL_ADC_IsEnabled(p_ADC) == RESET)
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff8e 	bl	80025be <LL_ADC_IsEnabled>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d113      	bne.n	80026d0 <BSP_ADC_Enable+0x3c>
  {
    LL_ADC_Enable(p_ADC);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff ff6a 	bl	8002582 <LL_ADC_Enable>
    // Wait for ADC effectively enabled
    u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <BSP_ADC_Enable+0x44>)
 80026b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026b4:	601a      	str	r2, [r3, #0]
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 80026b6:	e003      	b.n	80026c0 <BSP_ADC_Enable+0x2c>
    {
      if (u32_adc_timeout == 0)
 80026b8:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <BSP_ADC_Enable+0x44>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <BSP_ADC_Enable+0x3a>
    while (LL_ADC_IsEnabled(p_ADC) == RESET)
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff7c 	bl	80025be <LL_ADC_IsEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f5      	beq.n	80026b8 <BSP_ADC_Enable+0x24>
 80026cc:	e000      	b.n	80026d0 <BSP_ADC_Enable+0x3c>
      {
        return;
 80026ce:	bf00      	nop
      }
    }
  }
}
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000928 	.word	0x20000928

080026dc <BSP_ADC_Start_Calibration>:
 *   PUBLIC FUNCTION
 *****************************************************************************/

void
BSP_ADC_Start_Calibration (ADC_TypeDef *p_ADC)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  // 1. Disable ADC peripheral
  BSP_ADC_ConversionStop_Disable(p_ADC);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ffb7 	bl	8002658 <BSP_ADC_ConversionStop_Disable>

  // 2. Calibration prerequisite delay before starting the calibration.
  // - ADC must be enabled for at least two ADC clock cycles
  BSP_ADC_Enable(p_ADC);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffd2 	bl	8002694 <BSP_ADC_Enable>

  // Hardware prerequisite: delay before starting the calibration.
  //  - Computation of CPU clock cycles corresponding to ADC clock cycles.
  //  - Wait for the expected ADC clock cycles delay
  LL_mDelay(10);
 80026f0:	200a      	movs	r0, #10
 80026f2:	f002 fc1f 	bl	8004f34 <LL_mDelay>

  // 3. Resets ADC calibration registers
  p_ADC->CR2 |= ADC_CR2_RSTCAL;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f043 0208 	orr.w	r2, r3, #8
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <BSP_ADC_Start_Calibration+0x78>)
 8002704:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002708:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 800270a:	e003      	b.n	8002714 <BSP_ADC_Start_Calibration+0x38>
  {
    if (u32_adc_timeout == 0)
 800270c:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <BSP_ADC_Start_Calibration+0x78>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d018      	beq.n	8002746 <BSP_ADC_Start_Calibration+0x6a>
  while ((p_ADC->CR2 & ADC_CR2_RSTCAL) != 0)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f5      	bne.n	800270c <BSP_ADC_Start_Calibration+0x30>
      return;
    }
  }

  // 4. Start ADC calibration
  LL_ADC_StartCalibration(p_ADC);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff ff5e 	bl	80025e2 <LL_ADC_StartCalibration>

  // Wait for calibration reset completion
  u32_adc_timeout = LIMIT_WAIT_ADC_OPERATION;
 8002726:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <BSP_ADC_Start_Calibration+0x78>)
 8002728:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800272c:	601a      	str	r2, [r3, #0]
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 800272e:	e003      	b.n	8002738 <BSP_ADC_Start_Calibration+0x5c>
  {
    if (u32_adc_timeout == 0)
 8002730:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <BSP_ADC_Start_Calibration+0x78>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <BSP_ADC_Start_Calibration+0x6e>
  while ((p_ADC->CR2 & ADC_CR2_CAL) != 0)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f5      	bne.n	8002730 <BSP_ADC_Start_Calibration+0x54>
 8002744:	e002      	b.n	800274c <BSP_ADC_Start_Calibration+0x70>
      return;
 8002746:	bf00      	nop
 8002748:	e000      	b.n	800274c <BSP_ADC_Start_Calibration+0x70>
    {
      return;
 800274a:	bf00      	nop
    }
  }
}
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000928 	.word	0x20000928

08002758 <BSP_ADC_Start_DMA>:

// Using with >= 2 Channel in ADC
void
BSP_ADC_Start_DMA (ADC_TypeDef *p_ADC, uint16_t *pData, uint32_t Length)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  // Enable the ADC peripheral
  BSP_ADC_Enable(p_ADC);
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff ff95 	bl	8002694 <BSP_ADC_Enable>

  // Clear previous flags (EOC)
  LL_ADC_ClearFlag_EOS(p_ADC);
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f7ff ff67 	bl	800263e <LL_ADC_ClearFlag_EOS>

  LL_ADC_REG_SetDMATransfer(p_ADC, LL_ADC_REG_DMA_TRANSFER_UNLIMITED);
 8002770:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f7ff fef2 	bl	800255e <LL_ADC_REG_SetDMATransfer>

  BSP_DMA_Start_IT(DMA1,
 800277a:	2100      	movs	r1, #0
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff fec3 	bl	8002508 <LL_ADC_DMA_GetRegAddr>
 8002782:	4601      	mov	r1, r0
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4613      	mov	r3, r2
 800278c:	460a      	mov	r2, r1
 800278e:	2101      	movs	r1, #1
 8002790:	480a      	ldr	r0, [pc, #40]	@ (80027bc <BSP_ADC_Start_DMA+0x64>)
 8002792:	f000 f9c5 	bl	8002b20 <BSP_DMA_Start_IT>
                   LL_ADC_DMA_GetRegAddr(p_ADC, LL_ADC_DMA_REG_REGULAR_DATA),
                   (uint32_t)pData,
                   Length);

  // Start ADC conversion
  if (LL_ADC_REG_IsTriggerSourceSWStart(p_ADC))
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fece 	bl	8002538 <LL_ADC_REG_IsTriggerSourceSWStart>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <BSP_ADC_Start_DMA+0x52>
  {
    // If software start is selected
    LL_ADC_REG_StartConversionSWStart(p_ADC);
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f7ff ff2c 	bl	8002600 <LL_ADC_REG_StartConversionSWStart>
  else
  {
    // If external trigger is selected
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
  }
}
 80027a8:	e004      	b.n	80027b4 <BSP_ADC_Start_DMA+0x5c>
    LL_ADC_REG_StartConversionExtTrig(p_ADC, LL_ADC_REG_TRIG_EXT_RISING);
 80027aa:	f44f 1180 	mov.w	r1, #1048576	@ 0x100000
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f7ff ff35 	bl	800261e <LL_ADC_REG_StartConversionExtTrig>
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40020000 	.word	0x40020000

080027c0 <BSP_ADC_TimeOut>:

void
BSP_ADC_TimeOut (void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  if (u32_adc_timeout != 0)
 80027c4:	4b06      	ldr	r3, [pc, #24]	@ (80027e0 <BSP_ADC_TimeOut+0x20>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <BSP_ADC_TimeOut+0x16>
  {
    u32_adc_timeout--;
 80027cc:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <BSP_ADC_TimeOut+0x20>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	4a03      	ldr	r2, [pc, #12]	@ (80027e0 <BSP_ADC_TimeOut+0x20>)
 80027d4:	6013      	str	r3, [r2, #0]
  }
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	20000928 	.word	0x20000928

080027e4 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <LL_DMA_EnableChannel+0x38>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	3a01      	subs	r2, #1
 8002802:	4906      	ldr	r1, [pc, #24]	@ (800281c <LL_DMA_EnableChannel+0x38>)
 8002804:	5c8a      	ldrb	r2, [r1, r2]
 8002806:	4611      	mov	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	440a      	add	r2, r1
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6013      	str	r3, [r2, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	08008340 	.word	0x08008340

08002820 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3b01      	subs	r3, #1
 800282e:	4a0a      	ldr	r2, [pc, #40]	@ (8002858 <LL_DMA_DisableChannel+0x38>)
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	3a01      	subs	r2, #1
 800283e:	4906      	ldr	r1, [pc, #24]	@ (8002858 <LL_DMA_DisableChannel+0x38>)
 8002840:	5c8a      	ldrb	r2, [r1, r2]
 8002842:	4611      	mov	r1, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	440a      	add	r2, r1
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	6013      	str	r3, [r2, #0]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	08008340 	.word	0x08008340

0800285c <LL_DMA_GetMode>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  */
__STATIC_INLINE uint32_t LL_DMA_GetMode(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	4a06      	ldr	r2, [pc, #24]	@ (8002884 <LL_DMA_GetMode+0x28>)
 800286c:	5cd3      	ldrb	r3, [r2, r3]
 800286e:	461a      	mov	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4413      	add	r3, r2
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0320 	and.w	r3, r3, #32
                   DMA_CCR_CIRC));
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	08008340 	.word	0x08008340

08002888 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	3b01      	subs	r3, #1
 8002898:	4a0b      	ldr	r2, [pc, #44]	@ (80028c8 <LL_DMA_SetDataLength+0x40>)
 800289a:	5cd3      	ldrb	r3, [r2, r3]
 800289c:	461a      	mov	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4413      	add	r3, r2
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0c1b      	lsrs	r3, r3, #16
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	3a01      	subs	r2, #1
 80028ac:	4906      	ldr	r1, [pc, #24]	@ (80028c8 <LL_DMA_SetDataLength+0x40>)
 80028ae:	5c8a      	ldrb	r2, [r1, r2]
 80028b0:	4611      	mov	r1, r2
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	440a      	add	r2, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	08008340 	.word	0x08008340

080028cc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d114      	bne.n	800290a <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	4a15      	ldr	r2, [pc, #84]	@ (800293c <LL_DMA_ConfigAddresses+0x70>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	461a      	mov	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	4a10      	ldr	r2, [pc, #64]	@ (800293c <LL_DMA_ConfigAddresses+0x70>)
 80028fa:	5cd3      	ldrb	r3, [r2, r3]
 80028fc:	461a      	mov	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4413      	add	r3, r2
 8002902:	461a      	mov	r2, r3
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 8002908:	e013      	b.n	8002932 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3b01      	subs	r3, #1
 800290e:	4a0b      	ldr	r2, [pc, #44]	@ (800293c <LL_DMA_ConfigAddresses+0x70>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	461a      	mov	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	4a06      	ldr	r2, [pc, #24]	@ (800293c <LL_DMA_ConfigAddresses+0x70>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	461a      	mov	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	4413      	add	r3, r2
 800292c:	461a      	mov	r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	60d3      	str	r3, [r2, #12]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	08008340 	.word	0x08008340

08002940 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b02      	cmp	r3, #2
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <LL_DMA_IsActiveFlag_HT1>:
  * @rmtoll ISR          HTIF1         LL_DMA_IsActiveFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT1(DMA_TypeDef *DMAx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF1) == (DMA_ISR_HTIF1));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b04      	cmp	r3, #4
 8002976:	bf0c      	ite	eq
 8002978:	2301      	moveq	r3, #1
 800297a:	2300      	movne	r3, #0
 800297c:	b2db      	uxtb	r3, r3
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <LL_DMA_IsActiveFlag_TE1>:
  * @rmtoll ISR          TEIF1         LL_DMA_IsActiveFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b08      	cmp	r3, #8
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	605a      	str	r2, [r3, #4]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <LL_DMA_ClearFlag_HT1>:
  * @rmtoll IFCR         CHTIF1        LL_DMA_ClearFlag_HT1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2204      	movs	r2, #4
 80029d0:	605a      	str	r2, [r3, #4]
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <LL_DMA_ClearFlag_TE1>:
  * @rmtoll IFCR         CTEIF1        LL_DMA_ClearFlag_TE1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2208      	movs	r2, #8
 80029e8:	605a      	str	r2, [r3, #4]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	4a0a      	ldr	r2, [pc, #40]	@ (8002a2c <LL_DMA_EnableIT_TC+0x38>)
 8002a04:	5cd3      	ldrb	r3, [r2, r3]
 8002a06:	461a      	mov	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	3a01      	subs	r2, #1
 8002a12:	4906      	ldr	r1, [pc, #24]	@ (8002a2c <LL_DMA_EnableIT_TC+0x38>)
 8002a14:	5c8a      	ldrb	r2, [r1, r2]
 8002a16:	4611      	mov	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	440a      	add	r2, r1
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	6013      	str	r3, [r2, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	08008340 	.word	0x08008340

08002a30 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a68 <LL_DMA_EnableIT_TE+0x38>)
 8002a40:	5cd3      	ldrb	r3, [r2, r3]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	3a01      	subs	r2, #1
 8002a4e:	4906      	ldr	r1, [pc, #24]	@ (8002a68 <LL_DMA_EnableIT_TE+0x38>)
 8002a50:	5c8a      	ldrb	r2, [r1, r2]
 8002a52:	4611      	mov	r1, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	440a      	add	r2, r1
 8002a58:	f043 0308 	orr.w	r3, r3, #8
 8002a5c:	6013      	str	r3, [r2, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	08008340 	.word	0x08008340

08002a6c <LL_DMA_DisableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa4 <LL_DMA_DisableIT_TC+0x38>)
 8002a7c:	5cd3      	ldrb	r3, [r2, r3]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	3a01      	subs	r2, #1
 8002a8a:	4906      	ldr	r1, [pc, #24]	@ (8002aa4 <LL_DMA_DisableIT_TC+0x38>)
 8002a8c:	5c8a      	ldrb	r2, [r1, r2]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	440a      	add	r2, r1
 8002a94:	f023 0302 	bic.w	r3, r3, #2
 8002a98:	6013      	str	r3, [r2, #0]
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	08008340 	.word	0x08008340

08002aa8 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <LL_DMA_DisableIT_HT+0x38>)
 8002ab8:	5cd3      	ldrb	r3, [r2, r3]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	3a01      	subs	r2, #1
 8002ac6:	4906      	ldr	r1, [pc, #24]	@ (8002ae0 <LL_DMA_DisableIT_HT+0x38>)
 8002ac8:	5c8a      	ldrb	r2, [r1, r2]
 8002aca:	4611      	mov	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	440a      	add	r2, r1
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	6013      	str	r3, [r2, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	08008340 	.word	0x08008340

08002ae4 <LL_DMA_DisableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <LL_DMA_DisableIT_TE+0x38>)
 8002af4:	5cd3      	ldrb	r3, [r2, r3]
 8002af6:	461a      	mov	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4413      	add	r3, r2
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	3a01      	subs	r2, #1
 8002b02:	4906      	ldr	r1, [pc, #24]	@ (8002b1c <LL_DMA_DisableIT_TE+0x38>)
 8002b04:	5c8a      	ldrb	r2, [r1, r2]
 8002b06:	4611      	mov	r1, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	440a      	add	r2, r1
 8002b0c:	f023 0308 	bic.w	r3, r3, #8
 8002b10:	6013      	str	r3, [r2, #0]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	08008340 	.word	0x08008340

08002b20 <BSP_DMA_Start_IT>:
BSP_DMA_Start_IT (DMA_TypeDef *p_DMA,
                  uint32_t     Channel,
                  uint32_t     SrcAddress,
                  uint32_t     DstAddress,
                  uint32_t     DataLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  LL_DMA_DisableChannel(p_DMA, Channel);
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7ff fe75 	bl	8002820 <LL_DMA_DisableChannel>

  LL_DMA_ConfigAddresses(p_DMA,
 8002b36:	2300      	movs	r3, #0
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff fec3 	bl	80028cc <LL_DMA_ConfigAddresses>
                         Channel,
                         SrcAddress,
                         (uint32_t)DstAddress,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  LL_DMA_SetDataLength(p_DMA, Channel, DataLength);
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff fe9c 	bl	8002888 <LL_DMA_SetDataLength>

//  LL_DMA_EnableIT_HT(p_DMA, Channel);
  LL_DMA_EnableIT_TC(p_DMA, Channel);
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f7ff ff4e 	bl	80029f4 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(p_DMA, Channel);
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f7ff ff68 	bl	8002a30 <LL_DMA_EnableIT_TE>

  LL_DMA_EnableChannel(p_DMA, Channel);
 8002b60:	68b9      	ldr	r1, [r7, #8]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f7ff fe3e 	bl	80027e4 <LL_DMA_EnableChannel>
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <BSP_DMA_IRQ_Channel1_Handler>:
 * `DMA_TypeDef`, which is likely a data structure representing a Direct Memory
 * Access (DMA) controller in a micro-controller or embedded system.
 */
flagIRQ_dma_t
BSP_DMA_IRQ_Channel1_Handler (DMA_TypeDef *p_DMA)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Half Transfer Complete Interrupt management ******************************/
  if (LL_DMA_IsActiveFlag_HT1(p_DMA))
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff fef3 	bl	8002964 <LL_DMA_IsActiveFlag_HT1>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00f      	beq.n	8002ba4 <BSP_DMA_IRQ_Channel1_Handler+0x34>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002b84:	2101      	movs	r1, #1
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff fe68 	bl	800285c <LL_DMA_GetMode>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <BSP_DMA_IRQ_Channel1_Handler+0x2a>
    {
      LL_DMA_DisableIT_HT(p_DMA, LL_DMA_CHANNEL_1);
 8002b92:	2101      	movs	r1, #1
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff87 	bl	8002aa8 <LL_DMA_DisableIT_HT>
    }
    LL_DMA_ClearFlag_HT1(p_DMA);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ff12 	bl	80029c4 <LL_DMA_ClearFlag_HT1>
    return FLAG_HALF_TRANSFER_COMPLETE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e02c      	b.n	8002bfe <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if (LL_DMA_IsActiveFlag_TC1(p_DMA))
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff fecb 	bl	8002940 <LL_DMA_IsActiveFlag_TC1>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00f      	beq.n	8002bd0 <BSP_DMA_IRQ_Channel1_Handler+0x60>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fe52 	bl	800285c <LL_DMA_GetMode>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <BSP_DMA_IRQ_Channel1_Handler+0x56>
    {
      LL_DMA_DisableIT_TC(p_DMA, LL_DMA_CHANNEL_1);
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff53 	bl	8002a6c <LL_DMA_DisableIT_TC>
    }
    LL_DMA_ClearFlag_TC1(p_DMA);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fef0 	bl	80029ac <LL_DMA_ClearFlag_TC1>
    return FLAG_TRANSFER_COMPLETE;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e016      	b.n	8002bfe <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  /* Transfer Error Interrupt management **************************************/
  else if (LL_DMA_IsActiveFlag_TE1(p_DMA))
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fed9 	bl	8002988 <LL_DMA_IsActiveFlag_TE1>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00f      	beq.n	8002bfc <BSP_DMA_IRQ_Channel1_Handler+0x8c>
  {
    // Disable the half transfer interrupt if the DMA mode is not CIRCULAR
    if (LL_DMA_GetMode(p_DMA, LL_DMA_CHANNEL_1) == LL_DMA_MODE_NORMAL)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fe3c 	bl	800285c <LL_DMA_GetMode>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <BSP_DMA_IRQ_Channel1_Handler+0x82>
    {
      LL_DMA_DisableIT_TE(p_DMA, LL_DMA_CHANNEL_1);
 8002bea:	2101      	movs	r1, #1
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff79 	bl	8002ae4 <LL_DMA_DisableIT_TE>
    }
    LL_DMA_ClearFlag_TE1(p_DMA);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff fef2 	bl	80029dc <LL_DMA_ClearFlag_TE1>
    return FLAG_TRANSFER_ERROR;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <BSP_DMA_IRQ_Channel1_Handler+0x8e>
  }
  return FLAG_NONE;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db0a      	blt.n	8002c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	490c      	ldr	r1, [pc, #48]	@ (8002c54 <__NVIC_SetPriority+0x4c>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c30:	e00a      	b.n	8002c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4908      	ldr	r1, [pc, #32]	@ (8002c58 <__NVIC_SetPriority+0x50>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	440b      	add	r3, r1
 8002c46:	761a      	strb	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	@ (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f7ff ffc2 	bl	8002c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	@ (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <BSP_SYSTICK_TimerStart>:
 *
 * This function enables the SysTick timer.
 */
void
BSP_SYSTICK_TimerStart (void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0

  SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk);
 8002ca4:	4b04      	ldr	r3, [pc, #16]	@ (8002cb8 <BSP_SYSTICK_TimerStart+0x18>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a03      	ldr	r2, [pc, #12]	@ (8002cb8 <BSP_SYSTICK_TimerStart+0x18>)
 8002caa:	f043 0303 	orr.w	r3, r3, #3
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e010 	.word	0xe000e010

08002cbc <BSP_SYSTICK_TimerInit>:
 * This function configures the SysTick timer to generate interrupts at a rate
 * of 1 millisecond, based on the system core clock.
 */
void
BSP_SYSTICK_TimerInit (void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  SysTick_Config(SystemCoreClock / 1000);
 8002cc0:	4b05      	ldr	r3, [pc, #20]	@ (8002cd8 <BSP_SYSTICK_TimerInit+0x1c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a05      	ldr	r2, [pc, #20]	@ (8002cdc <BSP_SYSTICK_TimerInit+0x20>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ffc5 	bl	8002c5c <SysTick_Config>
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200000cc 	.word	0x200000cc
 8002cdc:	10624dd3 	.word	0x10624dd3

08002ce0 <LL_USART_IsActiveFlag_FE>:
  * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <LL_USART_IsActiveFlag_NE>:
  * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr

08002d4c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0320 	and.w	r3, r3, #32
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	bf0c      	ite	eq
 8002d60:	2301      	moveq	r3, #1
 8002d62:	2300      	movne	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d80:	2b80      	cmp	r3, #128	@ 0x80
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           FE            LL_USART_ClearFlag_FE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002da2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	bf00      	nop
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <LL_USART_ClearFlag_NE>:
  * @rmtoll SR           NF            LL_USART_ClearFlag_NE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b085      	sub	sp, #20
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <LL_USART_ClearFlag_ORE>:
  * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002de6:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b089      	sub	sp, #36	@ 0x24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	330c      	adds	r3, #12
 8002e06:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	e853 3f00 	ldrex	r3, [r3]
 8002e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f043 0320 	orr.w	r3, r3, #32
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	61ba      	str	r2, [r7, #24]
 8002e20:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e7      	bne.n	8002e02 <LL_USART_EnableIT_RXNE+0x8>
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	3724      	adds	r7, #36	@ 0x24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b089      	sub	sp, #36	@ 0x24
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	330c      	adds	r3, #12
 8002e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	e853 3f00 	ldrex	r3, [r3]
 8002e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	69fa      	ldr	r2, [r7, #28]
 8002e62:	61ba      	str	r2, [r7, #24]
 8002e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	6979      	ldr	r1, [r7, #20]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e7      	bne.n	8002e46 <LL_USART_EnableIT_TXE+0x8>
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	3724      	adds	r7, #36	@ 0x24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <LL_USART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b089      	sub	sp, #36	@ 0x24
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	e853 3f00 	ldrex	r3, [r3]
 8002e96:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f043 0301 	orr.w	r3, r3, #1
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	69fa      	ldr	r2, [r7, #28]
 8002ea6:	61ba      	str	r2, [r7, #24]
 8002ea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6979      	ldr	r1, [r7, #20]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e7      	bne.n	8002e8a <LL_USART_EnableIT_ERROR+0x8>
}
 8002eba:	bf00      	nop
 8002ebc:	bf00      	nop
 8002ebe:	3724      	adds	r7, #36	@ 0x24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <LL_USART_DisableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b089      	sub	sp, #36	@ 0x24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	330c      	adds	r3, #12
 8002ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	e853 3f00 	ldrex	r3, [r3]
 8002eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f023 0320 	bic.w	r3, r3, #32
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	61ba      	str	r2, [r7, #24]
 8002eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6979      	ldr	r1, [r7, #20]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e7      	bne.n	8002ece <LL_USART_DisableIT_RXNE+0x8>
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	3724      	adds	r7, #36	@ 0x24
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b089      	sub	sp, #36	@ 0x24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	330c      	adds	r3, #12
 8002f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f26:	61fb      	str	r3, [r7, #28]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	69fa      	ldr	r2, [r7, #28]
 8002f2e:	61ba      	str	r2, [r7, #24]
 8002f30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	6979      	ldr	r1, [r7, #20]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	e841 2300 	strex	r3, r2, [r1]
 8002f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1e7      	bne.n	8002f12 <LL_USART_DisableIT_TXE+0x8>
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3724      	adds	r7, #36	@ 0x24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b20      	cmp	r3, #32
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bc80      	pop	{r7}
 8002f70:	4770      	bx	lr

08002f72 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f82:	2b80      	cmp	r3, #128	@ 0x80
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr

08002f96 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	b2db      	uxtb	r3, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <BSP_UART_Config>:
 */
void
BSP_UART_Config (uart_cfg_t    *uartstdio_device,
                 USART_TypeDef *uart,
                 IRQn_Type      uart_irqn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	71fb      	strb	r3, [r7, #7]
  uartstdio_device->p_uart      = uart;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  uartstdio_device->e_uart_irqn = uart_irqn;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	79fa      	ldrb	r2, [r7, #7]
 8002fe4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	338c      	adds	r3, #140	@ 0x8c
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 ffd3 	bl	8004f98 <RING_BUFFER_Init>
  RING_BUFFER_Init((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 ffcf 	bl	8004f98 <RING_BUFFER_Init>

  /**
   * Enable the UART Error Interrupt:
   * (Frame error, noise error, overrun error)
   */
  LL_USART_EnableIT_ERROR(uart);
 8002ffa:	68b8      	ldr	r0, [r7, #8]
 8002ffc:	f7ff ff41 	bl	8002e82 <LL_USART_EnableIT_ERROR>

  /* Enable the UART Data Register not empty Interrupt */
  LL_USART_EnableIT_RXNE(uart);
 8003000:	68b8      	ldr	r0, [r7, #8]
 8003002:	f7ff fefa 	bl	8002dfa <LL_USART_EnableIT_RXNE>
}
 8003006:	bf00      	nop
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <BSP_UART_IsAvailableDataReceive>:

uint8_t
BSP_UART_IsAvailableDataReceive (uart_cfg_t *uartstdio_device)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4618      	mov	r0, r3
 800301a:	f001 ffe7 	bl	8004fec <RING_BUFFER_Is_Empty>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <BSP_UART_IsAvailableDataReceive+0x1a>
  {
    return 0;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <BSP_UART_IsAvailableDataReceive+0x1c>
  }
  return 1;
 8003028:	2301      	movs	r3, #1
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <BSP_UART_SendChar>:
 * @return If the u32_uart_timeout reaches 0, the function will return without
 * sending the character.
 */
void
BSP_UART_SendChar (uart_cfg_t *uartstdio_device, char c)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  uint32_t u32_uart_timeout = LIMIT_WAIT_BUFFER;
 800303e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003042:	60fb      	str	r3, [r7, #12]

  // Wait until there is space in the transmit buffer or u32_uart_timeout occurs
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8003044:	e005      	b.n	8003052 <BSP_UART_SendChar+0x20>
  {
    if (u32_uart_timeout == 0)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d024      	beq.n	8003096 <BSP_UART_SendChar+0x64>
    {
      return;
    }
    u32_uart_timeout--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3b01      	subs	r3, #1
 8003050:	60fb      	str	r3, [r7, #12]
  while (RING_BUFFER_Is_Full((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	338c      	adds	r3, #140	@ 0x8c
 8003056:	4618      	mov	r0, r3
 8003058:	f001 ffd9 	bl	800500e <RING_BUFFER_Is_Full>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f1      	bne.n	8003046 <BSP_UART_SendChar+0x14>
  }

  // Critical section to ensure atomic access to the buffer
  ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff2c 	bl	8002ec6 <LL_USART_DisableIT_RXNE>
  RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer, c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	338c      	adds	r3, #140	@ 0x8c
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f001 ffda 	bl	8005030 <RING_BUFFER_Push_Data>
  ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff feb9 	bl	8002dfa <LL_USART_EnableIT_RXNE>

  // Enable Transmit Data Register Empty interrupt
  LL_USART_EnableIT_TXE(uartstdio_device->p_uart);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff fed5 	bl	8002e3e <LL_USART_EnableIT_TXE>
 8003094:	e000      	b.n	8003098 <BSP_UART_SendChar+0x66>
      return;
 8003096:	bf00      	nop
}
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <BSP_UART_SendString>:
 * @param s Pointer to the constant character array (string) to be sent via
 * UART.
 */
void
BSP_UART_SendString (uart_cfg_t *uartstdio_device, const char *s)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  while (*s)
 80030a8:	e007      	b.n	80030ba <BSP_UART_SendString+0x1c>
  {
    BSP_UART_SendChar(uartstdio_device, *s++);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	603a      	str	r2, [r7, #0]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ffbc 	bl	8003032 <BSP_UART_SendChar>
  while (*s)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f3      	bne.n	80030aa <BSP_UART_SendString+0xc>
  }
}
 80030c2:	bf00      	nop
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <BSP_UART_ReadChar>:
 * from the buffer and returns it. If the buffer is empty, it returns the null
 * character '\0'.
 */
char
BSP_UART_ReadChar (uart_cfg_t *uartstdio_device)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  register char c = '\0';
 80030d4:	2400      	movs	r4, #0
  if (!RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_rx_buffer))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4618      	mov	r0, r3
 80030da:	f001 ff87 	bl	8004fec <RING_BUFFER_Is_Empty>
 80030de:	4603      	mov	r3, r0
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <BSP_UART_ReadChar+0x46>
  {
    ATOMIC_BLOCK_START(uartstdio_device->p_uart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff fee8 	bl	8002ec6 <LL_USART_DisableIT_RXNE>
    c = (char)RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f001 ffc3 	bl	8005084 <RING_BUFFER_Pull_Data>
 80030fe:	4603      	mov	r3, r0
 8003100:	461c      	mov	r4, r3
    ATOMIC_BLOCK_END(uartstdio_device->p_uart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff fe76 	bl	8002dfa <LL_USART_EnableIT_RXNE>
    return c;
 800310e:	4623      	mov	r3, r4
 8003110:	e000      	b.n	8003114 <BSP_UART_ReadChar+0x48>
  }
  return c;
 8003112:	4623      	mov	r3, r4
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	bd90      	pop	{r4, r7, pc}

0800311c <BSP_UART_TimeOut>:
 * The function `UART_u32_uart_TimeOut` decrements the variable
 * `u32_uart_timeout` if it is not equal to 0.
 */
void
BSP_UART_TimeOut (void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  if (u32_uart_timeout != 0)
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <BSP_UART_TimeOut+0x20>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <BSP_UART_TimeOut+0x16>
  {
    u32_uart_timeout--;
 8003128:	4b04      	ldr	r3, [pc, #16]	@ (800313c <BSP_UART_TimeOut+0x20>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3b01      	subs	r3, #1
 800312e:	4a03      	ldr	r2, [pc, #12]	@ (800313c <BSP_UART_TimeOut+0x20>)
 8003130:	6013      	str	r3, [r2, #0]
  }
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000092c 	.word	0x2000092c

08003140 <BSP_UART_ISR>:
 *
 * @param uartstdio_device Pointer to the UART configuration data structure.
 */
void
BSP_UART_ISR (uart_cfg_t *uartstdio_device)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  // If DR is not empty and the Rx Int is enabled
  if ((LL_USART_IsActiveFlag_RXNE(uartstdio_device->p_uart) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fdfc 	bl	8002d4c <LL_USART_IsActiveFlag_RXNE>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d045      	beq.n	80031e6 <BSP_UART_ISR+0xa6>
      && (LL_USART_IsEnabledIT_RXNE(uartstdio_device->p_uart) != RESET))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fef4 	bl	8002f4e <LL_USART_IsEnabledIT_RXNE>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d03c      	beq.n	80031e6 <BSP_UART_ISR+0xa6>
  {
    uint8_t c = LL_USART_ReceiveData8(uartstdio_device->p_uart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff ff0f 	bl	8002f96 <LL_USART_ReceiveData8>
 8003178:	4603      	mov	r3, r0
 800317a:	73fb      	strb	r3, [r7, #15]

    // If there are errors, clear the flags
    if ((LL_USART_IsActiveFlag_ORE(uartstdio_device->p_uart) != RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fdd0 	bl	8002d28 <LL_USART_IsActiveFlag_ORE>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d111      	bne.n	80031b2 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_FE(uartstdio_device->p_uart) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fda3 	bl	8002ce0 <LL_USART_IsActiveFlag_FE>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d108      	bne.n	80031b2 <BSP_UART_ISR+0x72>
        || (LL_USART_IsActiveFlag_NE(uartstdio_device->p_uart) != RESET))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff fdac 	bl	8002d04 <LL_USART_IsActiveFlag_NE>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <BSP_UART_ISR+0x98>
    {
      LL_USART_ClearFlag_ORE(uartstdio_device->p_uart);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff fe0d 	bl	8002dd8 <LL_USART_ClearFlag_ORE>
      LL_USART_ClearFlag_FE(uartstdio_device->p_uart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff fde5 	bl	8002d94 <LL_USART_ClearFlag_FE>
      LL_USART_ClearFlag_NE(uartstdio_device->p_uart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fdf0 	bl	8002db6 <LL_USART_ClearFlag_NE>
    }
    else
    {
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
    }
    return;
 80031d6:	e037      	b.n	8003248 <BSP_UART_ISR+0x108>
      RING_BUFFER_Push_Data((ring_buffer_t *)&uartstdio_device->s_rx_buffer, c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7bfa      	ldrb	r2, [r7, #15]
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 ff26 	bl	8005030 <RING_BUFFER_Push_Data>
    return;
 80031e4:	e030      	b.n	8003248 <BSP_UART_ISR+0x108>
  }

  // If interrupt is caused due to Transmit Data Register Empty
  if ((LL_USART_IsActiveFlag_TXE(uartstdio_device->p_uart) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fdbf 	bl	8002d70 <LL_USART_IsActiveFlag_TXE>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d027      	beq.n	8003248 <BSP_UART_ISR+0x108>
      && (LL_USART_IsEnabledIT_TXE(uartstdio_device->p_uart) != RESET))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff feb7 	bl	8002f72 <LL_USART_IsEnabledIT_TXE>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01e      	beq.n	8003248 <BSP_UART_ISR+0x108>
  {
    if (RING_BUFFER_Is_Empty((ring_buffer_t *)&uartstdio_device->s_tx_buffer))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	338c      	adds	r3, #140	@ 0x8c
 800320e:	4618      	mov	r0, r3
 8003210:	f001 feec 	bl	8004fec <RING_BUFFER_Is_Empty>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d006      	beq.n	8003228 <BSP_UART_ISR+0xe8>
    {
      LL_USART_DisableIT_TXE(uartstdio_device->p_uart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fe72 	bl	8002f0a <LL_USART_DisableIT_TXE>
    {
      uint8_t c
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
    }
    return;
 8003226:	e00e      	b.n	8003246 <BSP_UART_ISR+0x106>
          = RING_BUFFER_Pull_Data((ring_buffer_t *)&uartstdio_device->s_tx_buffer);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	338c      	adds	r3, #140	@ 0x8c
 800322c:	4618      	mov	r0, r3
 800322e:	f001 ff29 	bl	8005084 <RING_BUFFER_Pull_Data>
 8003232:	4603      	mov	r3, r0
 8003234:	73bb      	strb	r3, [r7, #14]
      LL_USART_TransmitData8(uartstdio_device->p_uart, c);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800323c:	7bba      	ldrb	r2, [r7, #14]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff feb4 	bl	8002fae <LL_USART_TransmitData8>
    return;
 8003246:	bf00      	nop
  }
}
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <__NVIC_SetPriorityGrouping>:
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	@ (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4906      	ldr	r1, [pc, #24]	@ (80032e8 <__NVIC_EnableIRQ+0x34>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	@ (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	@ (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	@ 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <LL_ADC_REG_SetSequencerRanks>:
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	@ 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	332c      	adds	r3, #44	@ 0x2c
 80033b4:	4619      	mov	r1, r3
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033bc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80033c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	fa92 f2a2 	rbit	r2, r2
 80033c8:	617a      	str	r2, [r7, #20]
  return result;
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	fab2 f282 	clz	r2, r2
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	40d3      	lsrs	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(*preg,
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	211f      	movs	r1, #31
 80033e6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	401a      	ands	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f003 011f 	and.w	r1, r3, #31
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	431a      	orrs	r2, r3
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	bf00      	nop
 8003406:	3724      	adds	r7, #36	@ 0x24
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <LL_ADC_SetChannelSamplingTime>:
{
 800340e:	b480      	push	{r7}
 8003410:	b08d      	sub	sp, #52	@ 0x34
 8003412:	af00      	add	r7, sp, #0
 8003414:	60f8      	str	r0, [r7, #12]
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	330c      	adds	r3, #12
 800341e:	4619      	mov	r1, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003426:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800342a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	fa92 f2a2 	rbit	r2, r2
 8003432:	617a      	str	r2, [r7, #20]
  return result;
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	fab2 f282 	clz	r2, r2
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	40d3      	lsrs	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(*preg,
 8003444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 800344e:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 8003452:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6a39      	ldr	r1, [r7, #32]
 8003456:	fa91 f1a1 	rbit	r1, r1
 800345a:	61f9      	str	r1, [r7, #28]
  return result;
 800345c:	69f9      	ldr	r1, [r7, #28]
 800345e:	fab1 f181 	clz	r1, r1
 8003462:	b2c9      	uxtb	r1, r1
 8003464:	40cb      	lsrs	r3, r1
 8003466:	2107      	movs	r1, #7
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	401a      	ands	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
 8003476:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800347a:	62b9      	str	r1, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800347e:	fa91 f1a1 	rbit	r1, r1
 8003482:	6279      	str	r1, [r7, #36]	@ 0x24
  return result;
 8003484:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003486:	fab1 f181 	clz	r1, r1
 800348a:	b2c9      	uxtb	r1, r1
 800348c:	40cb      	lsrs	r3, r1
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	fa01 f303 	lsl.w	r3, r1, r3
 8003494:	431a      	orrs	r2, r3
 8003496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003498:	601a      	str	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	3734      	adds	r7, #52	@ 0x34
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <LL_DMA_SetDataTransferDirection>:
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	4a0c      	ldr	r2, [pc, #48]	@ (80034e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	461a      	mov	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4413      	add	r3, r2
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034c4:	f023 0310 	bic.w	r3, r3, #16
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	3a01      	subs	r2, #1
 80034cc:	4906      	ldr	r1, [pc, #24]	@ (80034e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80034ce:	5c8a      	ldrb	r2, [r1, r2]
 80034d0:	4611      	mov	r1, r2
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	440a      	add	r2, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	08008348 	.word	0x08008348

080034ec <LL_DMA_SetMode>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <LL_DMA_SetMode+0x40>)
 80034fe:	5cd3      	ldrb	r3, [r2, r3]
 8003500:	461a      	mov	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 0220 	bic.w	r2, r3, #32
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3b01      	subs	r3, #1
 8003510:	4906      	ldr	r1, [pc, #24]	@ (800352c <LL_DMA_SetMode+0x40>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	4619      	mov	r1, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	440b      	add	r3, r1
 800351a:	4619      	mov	r1, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
}
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	08008348 	.word	0x08008348

08003530 <LL_DMA_SetPeriphIncMode>:
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3b01      	subs	r3, #1
 8003540:	4a0b      	ldr	r2, [pc, #44]	@ (8003570 <LL_DMA_SetPeriphIncMode+0x40>)
 8003542:	5cd3      	ldrb	r3, [r2, r3]
 8003544:	461a      	mov	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	3b01      	subs	r3, #1
 8003554:	4906      	ldr	r1, [pc, #24]	@ (8003570 <LL_DMA_SetPeriphIncMode+0x40>)
 8003556:	5ccb      	ldrb	r3, [r1, r3]
 8003558:	4619      	mov	r1, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	440b      	add	r3, r1
 800355e:	4619      	mov	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	08008348 	.word	0x08008348

08003574 <LL_DMA_SetMemoryIncMode>:
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	3b01      	subs	r3, #1
 8003584:	4a0b      	ldr	r2, [pc, #44]	@ (80035b4 <LL_DMA_SetMemoryIncMode+0x40>)
 8003586:	5cd3      	ldrb	r3, [r2, r3]
 8003588:	461a      	mov	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	3b01      	subs	r3, #1
 8003598:	4906      	ldr	r1, [pc, #24]	@ (80035b4 <LL_DMA_SetMemoryIncMode+0x40>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	4619      	mov	r1, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	440b      	add	r3, r1
 80035a2:	4619      	mov	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	600b      	str	r3, [r1, #0]
}
 80035aa:	bf00      	nop
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr
 80035b4:	08008348 	.word	0x08008348

080035b8 <LL_DMA_SetPeriphSize>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	4a0b      	ldr	r2, [pc, #44]	@ (80035f8 <LL_DMA_SetPeriphSize+0x40>)
 80035ca:	5cd3      	ldrb	r3, [r2, r3]
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	3b01      	subs	r3, #1
 80035dc:	4906      	ldr	r1, [pc, #24]	@ (80035f8 <LL_DMA_SetPeriphSize+0x40>)
 80035de:	5ccb      	ldrb	r3, [r1, r3]
 80035e0:	4619      	mov	r1, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	440b      	add	r3, r1
 80035e6:	4619      	mov	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
}
 80035ee:	bf00      	nop
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr
 80035f8:	08008348 	.word	0x08008348

080035fc <LL_DMA_SetMemorySize>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3b01      	subs	r3, #1
 800360c:	4a0b      	ldr	r2, [pc, #44]	@ (800363c <LL_DMA_SetMemorySize+0x40>)
 800360e:	5cd3      	ldrb	r3, [r2, r3]
 8003610:	461a      	mov	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4413      	add	r3, r2
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	3b01      	subs	r3, #1
 8003620:	4906      	ldr	r1, [pc, #24]	@ (800363c <LL_DMA_SetMemorySize+0x40>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	4619      	mov	r1, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	440b      	add	r3, r1
 800362a:	4619      	mov	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	08008348 	.word	0x08008348

08003640 <LL_DMA_SetChannelPriorityLevel>:
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	3b01      	subs	r3, #1
 8003650:	4a0b      	ldr	r2, [pc, #44]	@ (8003680 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	461a      	mov	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	4413      	add	r3, r2
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	3b01      	subs	r3, #1
 8003664:	4906      	ldr	r1, [pc, #24]	@ (8003680 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	4619      	mov	r1, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	440b      	add	r3, r1
 800366e:	4619      	mov	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	08008348 	.word	0x08008348

08003684 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003684:	b480      	push	{r7}
 8003686:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003688:	4b04      	ldr	r3, [pc, #16]	@ (800369c <LL_RCC_HSE_Enable+0x18>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a03      	ldr	r2, [pc, #12]	@ (800369c <LL_RCC_HSE_Enable+0x18>)
 800368e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr
 800369c:	40021000 	.word	0x40021000

080036a0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80036a4:	4b06      	ldr	r3, [pc, #24]	@ (80036c0 <LL_RCC_HSE_IsReady+0x20>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40021000 	.word	0x40021000

080036c4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80036cc:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <LL_RCC_SetSysClkSource+0x24>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 0203 	bic.w	r2, r3, #3
 80036d4:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <LL_RCC_SetSysClkSource+0x24>)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <LL_RCC_GetSysClkSource+0x14>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 030c 	and.w	r3, r3, #12
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr
 8003700:	40021000 	.word	0x40021000

08003704 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800370c:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <LL_RCC_SetAHBPrescaler+0x24>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003714:	4904      	ldr	r1, [pc, #16]	@ (8003728 <LL_RCC_SetAHBPrescaler+0x24>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4313      	orrs	r3, r2
 800371a:	604b      	str	r3, [r1, #4]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	bc80      	pop	{r7}
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000

0800372c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003734:	4b06      	ldr	r3, [pc, #24]	@ (8003750 <LL_RCC_SetAPB1Prescaler+0x24>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800373c:	4904      	ldr	r1, [pc, #16]	@ (8003750 <LL_RCC_SetAPB1Prescaler+0x24>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000

08003754 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800375c:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <LL_RCC_SetAPB2Prescaler+0x24>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003764:	4904      	ldr	r1, [pc, #16]	@ (8003778 <LL_RCC_SetAPB2Prescaler+0x24>)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4313      	orrs	r3, r2
 800376a:	604b      	str	r3, [r1, #4]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_6
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 8003784:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <LL_RCC_SetADCClockSource+0x24>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800378c:	4904      	ldr	r1, [pc, #16]	@ (80037a0 <LL_RCC_SetADCClockSource+0x24>)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000

080037a4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <LL_RCC_PLL_Enable+0x18>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a03      	ldr	r2, [pc, #12]	@ (80037bc <LL_RCC_PLL_Enable+0x18>)
 80037ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr
 80037bc:	40021000 	.word	0x40021000

080037c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80037c4:	4b06      	ldr	r3, [pc, #24]	@ (80037e0 <LL_RCC_PLL_IsReady+0x20>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037d0:	bf0c      	ite	eq
 80037d2:	2301      	moveq	r3, #1
 80037d4:	2300      	movne	r3, #0
 80037d6:	b2db      	uxtb	r3, r3
}
 80037d8:	4618      	mov	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	40021000 	.word	0x40021000

080037e4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80037ee:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	430b      	orrs	r3, r1
 8003800:	4903      	ldr	r1, [pc, #12]	@ (8003810 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	bc80      	pop	{r7}
 800380e:	4770      	bx	lr
 8003810:	40021000 	.word	0x40021000

08003814 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800381c:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	4907      	ldr	r1, [pc, #28]	@ (8003840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4313      	orrs	r3, r2
 8003826:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003828:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4013      	ands	r3, r2
 8003830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	bf00      	nop
 8003836:	3714      	adds	r7, #20
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000

08003844 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800384c:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <LL_APB1_GRP1_EnableClock+0x2c>)
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	4907      	ldr	r1, [pc, #28]	@ (8003870 <LL_APB1_GRP1_EnableClock+0x2c>)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4313      	orrs	r3, r2
 8003856:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <LL_APB1_GRP1_EnableClock+0x2c>)
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4013      	ands	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003862:	68fb      	ldr	r3, [r7, #12]
}
 8003864:	bf00      	nop
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40021000 	.word	0x40021000

08003874 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800387c:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	4907      	ldr	r1, [pc, #28]	@ (80038a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4313      	orrs	r3, r2
 8003886:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800388a:	699a      	ldr	r2, [r3, #24]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4013      	ands	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003892:	68fb      	ldr	r3, [r7, #12]
}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000

080038a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <LL_FLASH_SetLatency+0x24>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f023 0207 	bic.w	r2, r3, #7
 80038b4:	4904      	ldr	r1, [pc, #16]	@ (80038c8 <LL_FLASH_SetLatency+0x24>)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40022000 	.word	0x40022000

080038cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80038d0:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <LL_FLASH_GetLatency+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr
 80038e0:	40022000 	.word	0x40022000

080038e4 <LL_TIM_DisableARRPreload>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	601a      	str	r2, [r3, #0]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003914:	f023 0307 	bic.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	605a      	str	r2, [r3, #4]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	bc80      	pop	{r7}
 800394c:	4770      	bx	lr

0800394e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <LL_USART_Enable>:
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <LL_USART_ConfigAsyncMode>:
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <LL_GPIO_SetPinMode>:
{
 80039b4:	b490      	push	{r4, r7}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	0e1b      	lsrs	r3, r3, #24
 80039c8:	4413      	add	r3, r2
 80039ca:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	fa93 f3a3 	rbit	r3, r3
 80039d8:	613b      	str	r3, [r7, #16]
  return result;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	210f      	movs	r1, #15
 80039e6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	401a      	ands	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	fa93 f3a3 	rbit	r3, r3
 80039f8:	61bb      	str	r3, [r7, #24]
  return result;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	6023      	str	r3, [r4, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc90      	pop	{r4, r7}
 8003a16:	4770      	bx	lr

08003a18 <LL_GPIO_SetPinPull>:
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	0a1b      	lsrs	r3, r3, #8
 8003a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	fa93 f3a3 	rbit	r3, r3
 8003a3c:	613b      	str	r3, [r7, #16]
  return result;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	408b      	lsls	r3, r1
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	60da      	str	r2, [r3, #12]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <LL_GPIO_ResetOutputPin>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	615a      	str	r2, [r3, #20]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr
	...

08003a7c <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003a88:	4a03      	ldr	r2, [pc, #12]	@ (8003a98 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8003a8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a8e:	6053      	str	r3, [r2, #4]
}
 8003a90:	bf00      	nop
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	40010000 	.word	0x40010000

08003a9c <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8003aa6:	4a13      	ldr	r2, [pc, #76]	@ (8003af4 <LL_GPIO_AF_SetEXTISource+0x58>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	3302      	adds	r3, #2
 8003aae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	0c1b      	lsrs	r3, r3, #16
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	ea02 0103 	and.w	r1, r2, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	60bb      	str	r3, [r7, #8]
  return result;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	fab3 f383 	clz	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	fa03 f202 	lsl.w	r2, r3, r2
 8003ada:	4806      	ldr	r0, [pc, #24]	@ (8003af4 <LL_GPIO_AF_SetEXTISource+0x58>)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40010000 	.word	0x40010000

08003af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7ff feb9 	bl	8003874 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8003b02:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003b06:	f7ff fe9d 	bl	8003844 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b0a:	2003      	movs	r0, #3
 8003b0c:	f7ff fba0 	bl	8003250 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8003b10:	f7ff fbc2 	bl	8003298 <__NVIC_GetPriorityGrouping>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2200      	movs	r2, #0
 8003b18:	210f      	movs	r1, #15
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff fc10 	bl	8003340 <NVIC_EncodePriority>
 8003b20:	4603      	mov	r3, r0
 8003b22:	4619      	mov	r1, r3
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	f7ff fbe0 	bl	80032ec <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8003b2c:	f7ff ffa6 	bl	8003a7c <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b30:	f000 f844 	bl	8003bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b34:	f000 fa68 	bl	8004008 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b38:	f000 fa4e 	bl	8003fd8 <MX_DMA_Init>
  MX_ADC1_Init();
 8003b3c:	f000 f880 	bl	8003c40 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003b40:	f000 f97a 	bl	8003e38 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8003b44:	f000 f9e0 	bl	8003f08 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003b48:	f000 f914 	bl	8003d74 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003b4c:	f000 f944 	bl	8003dd8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Application Initialize
  APP_READ_DATA_Init();
 8003b50:	f7fe fa90 	bl	8002074 <APP_READ_DATA_Init>
  APP_CALCULATOR_PF_Init();
 8003b54:	f7fd fc9a 	bl	800148c <APP_CALCULATOR_PF_Init>
  APP_DATA_TRANS_REC_Init();
 8003b58:	f7fd fdc8 	bl	80016ec <APP_DATA_TRANS_REC_Init>
  APP_COMMAND_Init();
 8003b5c:	f7fd faa0 	bl	80010a0 <APP_COMMAND_Init>
  APP_STATUS_LED_Init();
 8003b60:	f7fe fc52 	bl	8002408 <APP_STATUS_LED_Init>
  APP_LED_7_SEG_Init();
 8003b64:	f7fd ff3c 	bl	80019e0 <APP_LED_7_SEG_Init>

  // Initialize Scheduler
  SCH_Initialize();
 8003b68:	f001 fab4 	bl	80050d4 <SCH_Initialize>

  // Create Timer
  APP_STATUS_LED_CreateTimer();
 8003b6c:	f7fe fc64 	bl	8002438 <APP_STATUS_LED_CreateTimer>

  // Application Create Task
  APP_READ_DATA_CreateTask();
 8003b70:	f7fe fa74 	bl	800205c <APP_READ_DATA_CreateTask>
  APP_CALCULATOR_PF_CreateTask();
 8003b74:	f7fd fc7e 	bl	8001474 <APP_CALCULATOR_PF_CreateTask>
  APP_DATA_TRANS_REC_CreateTask();
 8003b78:	f7fd fdac 	bl	80016d4 <APP_DATA_TRANS_REC_CreateTask>
  APP_COMMAND_CreateTask();
 8003b7c:	f7fd fab2 	bl	80010e4 <APP_COMMAND_CreateTask>
  APP_LED_7_SEG_CreateTask();
 8003b80:	f7fd ffa8 	bl	8001ad4 <APP_LED_7_SEG_CreateTask>
  APP_STATUS_LED_CreateTask();
 8003b84:	f7fe fc6c 	bl	8002460 <APP_STATUS_LED_CreateTask>

  // Start Scheduler
  SCH_StartScheduler();
 8003b88:	f001 fc28 	bl	80053dc <SCH_StartScheduler>

  // Start ADC - TIM3
  BSP_ADC_Start_Calibration(ADC1);
 8003b8c:	4808      	ldr	r0, [pc, #32]	@ (8003bb0 <main+0xb8>)
 8003b8e:	f7fe fda5 	bl	80026dc <BSP_ADC_Start_Calibration>
  BSP_ADC_Start_DMA(ADC1, (uint16_t *)s_data_system.u16_adc_value, 2);
 8003b92:	2202      	movs	r2, #2
 8003b94:	4907      	ldr	r1, [pc, #28]	@ (8003bb4 <main+0xbc>)
 8003b96:	4806      	ldr	r0, [pc, #24]	@ (8003bb0 <main+0xb8>)
 8003b98:	f7fe fdde 	bl	8002758 <BSP_ADC_Start_DMA>
  TIM3->CR1 |= TIM_CR1_CEN;
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <main+0xc0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a05      	ldr	r2, [pc, #20]	@ (8003bb8 <main+0xc0>)
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SCH_HandleScheduledTask();
 8003ba8:	f001 fc1e 	bl	80053e8 <SCH_HandleScheduledTask>
 8003bac:	e7fc      	b.n	8003ba8 <main+0xb0>
 8003bae:	bf00      	nop
 8003bb0:	40012400 	.word	0x40012400
 8003bb4:	2000086c 	.word	0x2000086c
 8003bb8:	40000400 	.word	0x40000400

08003bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8003bc0:	2002      	movs	r0, #2
 8003bc2:	f7ff fe6f 	bl	80038a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8003bc6:	bf00      	nop
 8003bc8:	f7ff fe80 	bl	80038cc <LL_FLASH_GetLatency>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d1fa      	bne.n	8003bc8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8003bd2:	f7ff fd57 	bl	8003684 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8003bd6:	bf00      	nop
 8003bd8:	f7ff fd62 	bl	80036a0 <LL_RCC_HSE_IsReady>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d1fa      	bne.n	8003bd8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_7);
 8003be2:	f44f 11a0 	mov.w	r1, #1310720	@ 0x140000
 8003be6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003bea:	f7ff fdfb 	bl	80037e4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8003bee:	f7ff fdd9 	bl	80037a4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8003bf2:	bf00      	nop
 8003bf4:	f7ff fde4 	bl	80037c0 <LL_RCC_PLL_IsReady>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d1fa      	bne.n	8003bf4 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f7ff fd80 	bl	8003704 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8003c04:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003c08:	f7ff fd90 	bl	800372c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7ff fda1 	bl	8003754 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8003c12:	2002      	movs	r0, #2
 8003c14:	f7ff fd56 	bl	80036c4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003c18:	bf00      	nop
 8003c1a:	f7ff fd67 	bl	80036ec <LL_RCC_GetSysClkSource>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d1fa      	bne.n	8003c1a <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(56000000);
 8003c24:	4805      	ldr	r0, [pc, #20]	@ (8003c3c <SystemClock_Config+0x80>)
 8003c26:	f001 f977 	bl	8004f18 <LL_Init1msTick>
  LL_SetSystemCoreClock(56000000);
 8003c2a:	4804      	ldr	r0, [pc, #16]	@ (8003c3c <SystemClock_Config+0x80>)
 8003c2c:	f001 f9a6 	bl	8004f7c <LL_SetSystemCoreClock>
  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSRC_PCLK2_DIV_4);
 8003c30:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003c34:	f7ff fda2 	bl	800377c <LL_RCC_SetADCClockSource>
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	03567e00 	.word	0x03567e00

08003c40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08e      	sub	sp, #56	@ 0x38
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8003c46:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8003c50:	2300      	movs	r3, #0
 8003c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8003c54:	f107 0318 	add.w	r3, r7, #24
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	605a      	str	r2, [r3, #4]
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	611a      	str	r2, [r3, #16]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	1d3b      	adds	r3, r7, #4
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	60da      	str	r2, [r3, #12]
 8003c70:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8003c72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003c76:	f7ff fdfd 	bl	8003874 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003c7a:	2004      	movs	r0, #4
 8003c7c:	f7ff fdfa 	bl	8003874 <LL_APB2_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  PA2   ------> ADC1_IN2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_2;
 8003c80:	f240 6306 	movw	r3, #1542	@ 0x606
 8003c84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8003c86:	2300      	movs	r3, #0
 8003c88:	60bb      	str	r3, [r7, #8]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c8a:	1d3b      	adds	r3, r7, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4834      	ldr	r0, [pc, #208]	@ (8003d60 <MX_ADC1_Init+0x120>)
 8003c90:	f000 fe25 	bl	80048de <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8003c94:	2200      	movs	r2, #0
 8003c96:	2101      	movs	r1, #1
 8003c98:	4832      	ldr	r0, [pc, #200]	@ (8003d64 <MX_ADC1_Init+0x124>)
 8003c9a:	f7ff fc03 	bl	80034a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4830      	ldr	r0, [pc, #192]	@ (8003d64 <MX_ADC1_Init+0x124>)
 8003ca4:	f7ff fccc 	bl	8003640 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8003ca8:	2220      	movs	r2, #32
 8003caa:	2101      	movs	r1, #1
 8003cac:	482d      	ldr	r0, [pc, #180]	@ (8003d64 <MX_ADC1_Init+0x124>)
 8003cae:	f7ff fc1d 	bl	80034ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	482b      	ldr	r0, [pc, #172]	@ (8003d64 <MX_ADC1_Init+0x124>)
 8003cb8:	f7ff fc3a 	bl	8003530 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8003cbc:	2280      	movs	r2, #128	@ 0x80
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4828      	ldr	r0, [pc, #160]	@ (8003d64 <MX_ADC1_Init+0x124>)
 8003cc2:	f7ff fc57 	bl	8003574 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8003cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4825      	ldr	r0, [pc, #148]	@ (8003d64 <MX_ADC1_Init+0x124>)
 8003cce:	f7ff fc73 	bl	80035b8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8003cd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	4822      	ldr	r0, [pc, #136]	@ (8003d64 <MX_ADC1_Init+0x124>)
 8003cda:	f7ff fc8f 	bl	80035fc <LL_DMA_SetMemorySize>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 8003ce2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8003ce8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003cec:	4619      	mov	r1, r3
 8003cee:	481e      	ldr	r0, [pc, #120]	@ (8003d68 <MX_ADC1_Init+0x128>)
 8003cf0:	f000 fbc0 	bl	8004474 <LL_ADC_Init>
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8003cf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	481a      	ldr	r0, [pc, #104]	@ (8003d68 <MX_ADC1_Init+0x128>)
 8003d00:	f000 fb86 	bl	8004410 <LL_ADC_CommonInit>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM3_TRGO;
 8003d04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003d08:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8003d0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003d0e:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8003d14:	2300      	movs	r3, #0
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8003d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8003d1e:	f107 0318 	add.w	r3, r7, #24
 8003d22:	4619      	mov	r1, r3
 8003d24:	4810      	ldr	r0, [pc, #64]	@ (8003d68 <MX_ADC1_Init+0x128>)
 8003d26:	f000 fbcc 	bl	80044c2 <LL_ADC_REG_Init>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 8003d2a:	4a10      	ldr	r2, [pc, #64]	@ (8003d6c <MX_ADC1_Init+0x12c>)
 8003d2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003d30:	480d      	ldr	r0, [pc, #52]	@ (8003d68 <MX_ADC1_Init+0x128>)
 8003d32:	f7ff fb37 	bl	80033a4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003d36:	2207      	movs	r2, #7
 8003d38:	490c      	ldr	r1, [pc, #48]	@ (8003d6c <MX_ADC1_Init+0x12c>)
 8003d3a:	480b      	ldr	r0, [pc, #44]	@ (8003d68 <MX_ADC1_Init+0x128>)
 8003d3c:	f7ff fb67 	bl	800340e <LL_ADC_SetChannelSamplingTime>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8003d40:	4a0b      	ldr	r2, [pc, #44]	@ (8003d70 <MX_ADC1_Init+0x130>)
 8003d42:	f240 2105 	movw	r1, #517	@ 0x205
 8003d46:	4808      	ldr	r0, [pc, #32]	@ (8003d68 <MX_ADC1_Init+0x128>)
 8003d48:	f7ff fb2c 	bl	80033a4 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	4908      	ldr	r1, [pc, #32]	@ (8003d70 <MX_ADC1_Init+0x130>)
 8003d50:	4805      	ldr	r0, [pc, #20]	@ (8003d68 <MX_ADC1_Init+0x128>)
 8003d52:	f7ff fb5c 	bl	800340e <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d56:	bf00      	nop
 8003d58:	3738      	adds	r7, #56	@ 0x38
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40010800 	.word	0x40010800
 8003d64:	40020000 	.word	0x40020000
 8003d68:	40012400 	.word	0x40012400
 8003d6c:	02300001 	.word	0x02300001
 8003d70:	02600002 	.word	0x02600002

08003d74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003d88:	2001      	movs	r0, #1
 8003d8a:	f7ff fd5b 	bl	8003844 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 8;
 8003d8e:	2308      	movs	r3, #8
 8003d90:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 8003d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d9a:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003da8:	f000 ff48 	bl	8004c3c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8003dac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003db0:	f7ff fd98 	bl	80038e4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003db4:	2100      	movs	r1, #0
 8003db6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003dba:	f7ff fda2 	bl	8003902 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003dc4:	f7ff fdb1 	bl	800392a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8003dc8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003dcc:	f7ff fdbf 	bl	800394e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003dd0:	bf00      	nop
 8003dd2:	3718      	adds	r7, #24
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003dde:	1d3b      	adds	r3, r7, #4
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	60da      	str	r2, [r3, #12]
 8003dea:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003dec:	2002      	movs	r0, #2
 8003dee:	f7ff fd29 	bl	8003844 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 55999;
 8003df2:	f64d 23bf 	movw	r3, #55999	@ 0xdabf
 8003df6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 19;
 8003dfc:	2313      	movs	r3, #19
 8003dfe:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003e04:	1d3b      	adds	r3, r7, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	480a      	ldr	r0, [pc, #40]	@ (8003e34 <MX_TIM3_Init+0x5c>)
 8003e0a:	f000 ff17 	bl	8004c3c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003e0e:	4809      	ldr	r0, [pc, #36]	@ (8003e34 <MX_TIM3_Init+0x5c>)
 8003e10:	f7ff fd68 	bl	80038e4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003e14:	2100      	movs	r1, #0
 8003e16:	4807      	ldr	r0, [pc, #28]	@ (8003e34 <MX_TIM3_Init+0x5c>)
 8003e18:	f7ff fd73 	bl	8003902 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_UPDATE);
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	4805      	ldr	r0, [pc, #20]	@ (8003e34 <MX_TIM3_Init+0x5c>)
 8003e20:	f7ff fd83 	bl	800392a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003e24:	4803      	ldr	r0, [pc, #12]	@ (8003e34 <MX_TIM3_Init+0x5c>)
 8003e26:	f7ff fd92 	bl	800394e <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40000400 	.word	0x40000400

08003e38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08c      	sub	sp, #48	@ 0x30
 8003e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003e3e:	f107 0314 	add.w	r3, r7, #20
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	611a      	str	r2, [r3, #16]
 8003e4e:	615a      	str	r2, [r3, #20]
 8003e50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e52:	463b      	mov	r3, r7
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8003e60:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e64:	f7ff fd06 	bl	8003874 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8003e68:	2004      	movs	r0, #4
 8003e6a:	f7ff fd03 	bl	8003874 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8003e6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ef8 <MX_USART1_UART_Init+0xc0>)
 8003e70:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e72:	2309      	movs	r3, #9
 8003e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003e76:	2303      	movs	r3, #3
 8003e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e7e:	463b      	mov	r3, r7
 8003e80:	4619      	mov	r1, r3
 8003e82:	481e      	ldr	r0, [pc, #120]	@ (8003efc <MX_USART1_UART_Init+0xc4>)
 8003e84:	f000 fd2b 	bl	80048de <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003e88:	4b1d      	ldr	r3, [pc, #116]	@ (8003f00 <MX_USART1_UART_Init+0xc8>)
 8003e8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e90:	463b      	mov	r3, r7
 8003e92:	4619      	mov	r1, r3
 8003e94:	4819      	ldr	r0, [pc, #100]	@ (8003efc <MX_USART1_UART_Init+0xc4>)
 8003e96:	f000 fd22 	bl	80048de <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8003e9a:	f7ff f9fd 	bl	8003298 <__NVIC_GetPriorityGrouping>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2103      	movs	r1, #3
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fa4b 	bl	8003340 <NVIC_EncodePriority>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4619      	mov	r1, r3
 8003eae:	2025      	movs	r0, #37	@ 0x25
 8003eb0:	f7ff fa1c 	bl	80032ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8003eb4:	2025      	movs	r0, #37	@ 0x25
 8003eb6:	f7ff f9fd 	bl	80032b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003eba:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003ebe:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003ecc:	230c      	movs	r3, #12
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	4619      	mov	r1, r3
 8003ede:	4809      	ldr	r0, [pc, #36]	@ (8003f04 <MX_USART1_UART_Init+0xcc>)
 8003ee0:	f000 ffa0 	bl	8004e24 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8003ee4:	4807      	ldr	r0, [pc, #28]	@ (8003f04 <MX_USART1_UART_Init+0xcc>)
 8003ee6:	f7ff fd50 	bl	800398a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8003eea:	4806      	ldr	r0, [pc, #24]	@ (8003f04 <MX_USART1_UART_Init+0xcc>)
 8003eec:	f7ff fd3e 	bl	800396c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ef0:	bf00      	nop
 8003ef2:	3730      	adds	r7, #48	@ 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	04020002 	.word	0x04020002
 8003efc:	40010800 	.word	0x40010800
 8003f00:	04040004 	.word	0x04040004
 8003f04:	40013800 	.word	0x40013800

08003f08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08c      	sub	sp, #48	@ 0x30
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003f0e:	f107 0314 	add.w	r3, r7, #20
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	609a      	str	r2, [r3, #8]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	611a      	str	r2, [r3, #16]
 8003f1e:	615a      	str	r2, [r3, #20]
 8003f20:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f22:	463b      	mov	r3, r7
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8003f30:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003f34:	f7ff fc86 	bl	8003844 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8003f38:	2008      	movs	r0, #8
 8003f3a:	f7ff fc9b 	bl	8003874 <LL_APB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PB10   ------> USART3_TX
  PB11   ------> USART3_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003f3e:	4b22      	ldr	r3, [pc, #136]	@ (8003fc8 <MX_USART3_UART_Init+0xc0>)
 8003f40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003f42:	2309      	movs	r3, #9
 8003f44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003f46:	2303      	movs	r3, #3
 8003f48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4e:	463b      	mov	r3, r7
 8003f50:	4619      	mov	r1, r3
 8003f52:	481e      	ldr	r0, [pc, #120]	@ (8003fcc <MX_USART3_UART_Init+0xc4>)
 8003f54:	f000 fcc3 	bl	80048de <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003f58:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd0 <MX_USART3_UART_Init+0xc8>)
 8003f5a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f60:	463b      	mov	r3, r7
 8003f62:	4619      	mov	r1, r3
 8003f64:	4819      	ldr	r0, [pc, #100]	@ (8003fcc <MX_USART3_UART_Init+0xc4>)
 8003f66:	f000 fcba 	bl	80048de <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),4, 0));
 8003f6a:	f7ff f995 	bl	8003298 <__NVIC_GetPriorityGrouping>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2200      	movs	r2, #0
 8003f72:	2104      	movs	r1, #4
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff f9e3 	bl	8003340 <NVIC_EncodePriority>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	2027      	movs	r0, #39	@ 0x27
 8003f80:	f7ff f9b4 	bl	80032ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 8003f84:	2027      	movs	r0, #39	@ 0x27
 8003f86:	f7ff f995 	bl	80032b4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003f8a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003f8e:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003f9c:	230c      	movs	r3, #12
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART3, &USART_InitStruct);
 8003fa8:	f107 0314 	add.w	r3, r7, #20
 8003fac:	4619      	mov	r1, r3
 8003fae:	4809      	ldr	r0, [pc, #36]	@ (8003fd4 <MX_USART3_UART_Init+0xcc>)
 8003fb0:	f000 ff38 	bl	8004e24 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8003fb4:	4807      	ldr	r0, [pc, #28]	@ (8003fd4 <MX_USART3_UART_Init+0xcc>)
 8003fb6:	f7ff fce8 	bl	800398a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8003fba:	4806      	ldr	r0, [pc, #24]	@ (8003fd4 <MX_USART3_UART_Init+0xcc>)
 8003fbc:	f7ff fcd6 	bl	800396c <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fc0:	bf00      	nop
 8003fc2:	3730      	adds	r7, #48	@ 0x30
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	04040004 	.word	0x04040004
 8003fcc:	40010c00 	.word	0x40010c00
 8003fd0:	04080008 	.word	0x04080008
 8003fd4:	40004800 	.word	0x40004800

08003fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f7ff fc19 	bl	8003814 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),1, 0));
 8003fe2:	f7ff f959 	bl	8003298 <__NVIC_GetPriorityGrouping>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff f9a7 	bl	8003340 <NVIC_EncodePriority>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	200b      	movs	r0, #11
 8003ff8:	f7ff f978 	bl	80032ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ffc:	200b      	movs	r0, #11
 8003ffe:	f7ff f959 	bl	80032b4 <__NVIC_EnableIRQ>

}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800400e:	f107 0318 	add.w	r3, r7, #24
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004018:	1d3b      	adds	r3, r7, #4
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	605a      	str	r2, [r3, #4]
 8004020:	609a      	str	r2, [r3, #8]
 8004022:	60da      	str	r2, [r3, #12]
 8004024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8004026:	2020      	movs	r0, #32
 8004028:	f7ff fc24 	bl	8003874 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800402c:	2004      	movs	r0, #4
 800402e:	f7ff fc21 	bl	8003874 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8004032:	2008      	movs	r0, #8
 8004034:	f7ff fc1e 	bl	8003874 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8004038:	4937      	ldr	r1, [pc, #220]	@ (8004118 <MX_GPIO_Init+0x110>)
 800403a:	4838      	ldr	r0, [pc, #224]	@ (800411c <MX_GPIO_Init+0x114>)
 800403c:	f7ff fd0e 	bl	8003a5c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8004040:	4937      	ldr	r1, [pc, #220]	@ (8004120 <MX_GPIO_Init+0x118>)
 8004042:	4838      	ldr	r0, [pc, #224]	@ (8004124 <MX_GPIO_Init+0x11c>)
 8004044:	f7ff fd0a 	bl	8003a5c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6
 8004048:	4b33      	ldr	r3, [pc, #204]	@ (8004118 <MX_GPIO_Init+0x110>)
 800404a:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_7|LL_GPIO_PIN_8;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800404c:	2301      	movs	r3, #1
 800404e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004050:	2302      	movs	r3, #2
 8004052:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	4619      	mov	r1, r3
 800405c:	482f      	ldr	r0, [pc, #188]	@ (800411c <MX_GPIO_Init+0x114>)
 800405e:	f000 fc3e 	bl	80048de <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_12
 8004062:	4b2f      	ldr	r3, [pc, #188]	@ (8004120 <MX_GPIO_Init+0x118>)
 8004064:	607b      	str	r3, [r7, #4]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_3
                          |LL_GPIO_PIN_4;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004066:	2301      	movs	r3, #1
 8004068:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800406a:	2302      	movs	r3, #2
 800406c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	4619      	mov	r1, r3
 8004076:	482b      	ldr	r0, [pc, #172]	@ (8004124 <MX_GPIO_Init+0x11c>)
 8004078:	f000 fc31 	bl	80048de <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE5);
 800407c:	492a      	ldr	r1, [pc, #168]	@ (8004128 <MX_GPIO_Init+0x120>)
 800407e:	2001      	movs	r0, #1
 8004080:	f7ff fd0c 	bl	8003a9c <LL_GPIO_AF_SetEXTISource>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTB, LL_GPIO_AF_EXTI_LINE6);
 8004084:	4929      	ldr	r1, [pc, #164]	@ (800412c <MX_GPIO_Init+0x124>)
 8004086:	2001      	movs	r0, #1
 8004088:	f7ff fd08 	bl	8003a9c <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 800408c:	2320      	movs	r3, #32
 800408e:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004090:	2301      	movs	r3, #1
 8004092:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004094:	2300      	movs	r3, #0
 8004096:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8004098:	2301      	movs	r3, #1
 800409a:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 800409c:	f107 0318 	add.w	r3, r7, #24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fae5 	bl	8004670 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 80040a6:	2340      	movs	r3, #64	@ 0x40
 80040a8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80040ae:	2300      	movs	r3, #0
 80040b0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80040b2:	2301      	movs	r3, #1
 80040b4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80040b6:	f107 0318 	add.w	r3, r7, #24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fad8 	bl	8004670 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_5, LL_GPIO_PULL_UP);
 80040c0:	2201      	movs	r2, #1
 80040c2:	f242 0120 	movw	r1, #8224	@ 0x2020
 80040c6:	4817      	ldr	r0, [pc, #92]	@ (8004124 <MX_GPIO_Init+0x11c>)
 80040c8:	f7ff fca6 	bl	8003a18 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_UP);
 80040cc:	2201      	movs	r2, #1
 80040ce:	f244 0140 	movw	r1, #16448	@ 0x4040
 80040d2:	4814      	ldr	r0, [pc, #80]	@ (8004124 <MX_GPIO_Init+0x11c>)
 80040d4:	f7ff fca0 	bl	8003a18 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_5, LL_GPIO_MODE_INPUT);
 80040d8:	2208      	movs	r2, #8
 80040da:	f242 0120 	movw	r1, #8224	@ 0x2020
 80040de:	4811      	ldr	r0, [pc, #68]	@ (8004124 <MX_GPIO_Init+0x11c>)
 80040e0:	f7ff fc68 	bl	80039b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_INPUT);
 80040e4:	2208      	movs	r2, #8
 80040e6:	f244 0140 	movw	r1, #16448	@ 0x4040
 80040ea:	480e      	ldr	r0, [pc, #56]	@ (8004124 <MX_GPIO_Init+0x11c>)
 80040ec:	f7ff fc62 	bl	80039b4 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 0));
 80040f0:	f7ff f8d2 	bl	8003298 <__NVIC_GetPriorityGrouping>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2200      	movs	r2, #0
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff f920 	bl	8003340 <NVIC_EncodePriority>
 8004100:	4603      	mov	r3, r0
 8004102:	4619      	mov	r1, r3
 8004104:	2017      	movs	r0, #23
 8004106:	f7ff f8f1 	bl	80032ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 800410a:	2017      	movs	r0, #23
 800410c:	f7ff f8d2 	bl	80032b4 <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004110:	bf00      	nop
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	0401f8f9 	.word	0x0401f8f9
 800411c:	40010800 	.word	0x40010800
 8004120:	04f01fff 	.word	0x04f01fff
 8004124:	40010c00 	.word	0x40010c00
 8004128:	00f00001 	.word	0x00f00001
 800412c:	0f000001 	.word	0x0f000001

08004130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <NMI_Handler+0x4>

08004138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <HardFault_Handler+0x4>

08004140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <MemManage_Handler+0x4>

08004148 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <BusFault_Handler+0x4>

08004150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <UsageFault_Handler+0x4>

08004158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  BSP_ADC_TimeOut();
 8004180:	f7fe fb1e 	bl	80027c0 <BSP_ADC_TimeOut>
  BSP_UART_TimeOut();
 8004184:	f7fe ffca 	bl	800311c <BSP_UART_TimeOut>
  SCH_RunSystemTickTimer();
 8004188:	f001 f894 	bl	80052b4 <SCH_RunSystemTickTimer>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}

08004190 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  status = BSP_DMA_IRQ_Channel1_Handler(DMA1);
 8004194:	4806      	ldr	r0, [pc, #24]	@ (80041b0 <DMA1_Channel1_IRQHandler+0x20>)
 8004196:	f7fe fceb 	bl	8002b70 <BSP_DMA_IRQ_Channel1_Handler>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	4b05      	ldr	r3, [pc, #20]	@ (80041b4 <DMA1_Channel1_IRQHandler+0x24>)
 80041a0:	701a      	strb	r2, [r3, #0]
  APP_READ_DATA_HandleDMA_IRQ(status);
 80041a2:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <DMA1_Channel1_IRQHandler+0x24>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fd ff88 	bl	80020bc <APP_READ_DATA_HandleDMA_IRQ>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40020000 	.word	0x40020000
 80041b4:	20000930 	.word	0x20000930

080041b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  APP_CALCULATOR_PF_EXTI_IRQHandler();
 80041bc:	f7fd f986 	bl	80014cc <APP_CALCULATOR_PF_EXTI_IRQHandler>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
#endif
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041c0:	bf00      	nop
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)&s_data_system.s_uart_data_trans_rec);
 80041c8:	4802      	ldr	r0, [pc, #8]	@ (80041d4 <USART1_IRQHandler+0x10>)
 80041ca:	f7fe ffb9 	bl	8003140 <BSP_UART_ISR>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000061c 	.word	0x2000061c

080041d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	BSP_UART_ISR((uart_cfg_t *)&s_data_system.s_uart_cmd);
 80041dc:	4802      	ldr	r0, [pc, #8]	@ (80041e8 <USART3_IRQHandler+0x10>)
 80041de:	f7fe ffaf 	bl	8003140 <BSP_UART_ISR>
  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	2000073c 	.word	0x2000073c

080041ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return 1;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bc80      	pop	{r7}
 80041f8:	4770      	bx	lr

080041fa <_kill>:

int _kill(int pid, int sig)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
 8004202:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004204:	f001 ff1e 	bl	8006044 <__errno>
 8004208:	4603      	mov	r3, r0
 800420a:	2216      	movs	r2, #22
 800420c:	601a      	str	r2, [r3, #0]
  return -1;
 800420e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <_exit>:

void _exit (int status)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004222:	f04f 31ff 	mov.w	r1, #4294967295
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff ffe7 	bl	80041fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <_exit+0x12>

08004230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e00a      	b.n	8004258 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004242:	f3af 8000 	nop.w
 8004246:	4601      	mov	r1, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3301      	adds	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbf0      	blt.n	8004242 <_read+0x12>
  }

  return len;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b086      	sub	sp, #24
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e009      	b.n	8004290 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	60ba      	str	r2, [r7, #8]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	3301      	adds	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	dbf1      	blt.n	800427c <_write+0x12>
  }
  return len;
 8004298:	687b      	ldr	r3, [r7, #4]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <_close>:

int _close(int file)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr

080042b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042c8:	605a      	str	r2, [r3, #4]
  return 0;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr

080042d6 <_isatty>:

int _isatty(int file)
{
 80042d6:	b480      	push	{r7}
 80042d8:	b083      	sub	sp, #12
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042de:	2301      	movs	r3, #1
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bc80      	pop	{r7}
 80042e8:	4770      	bx	lr

080042ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
	...

08004304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800430c:	4a14      	ldr	r2, [pc, #80]	@ (8004360 <_sbrk+0x5c>)
 800430e:	4b15      	ldr	r3, [pc, #84]	@ (8004364 <_sbrk+0x60>)
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004318:	4b13      	ldr	r3, [pc, #76]	@ (8004368 <_sbrk+0x64>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d102      	bne.n	8004326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004320:	4b11      	ldr	r3, [pc, #68]	@ (8004368 <_sbrk+0x64>)
 8004322:	4a12      	ldr	r2, [pc, #72]	@ (800436c <_sbrk+0x68>)
 8004324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004326:	4b10      	ldr	r3, [pc, #64]	@ (8004368 <_sbrk+0x64>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	429a      	cmp	r2, r3
 8004332:	d207      	bcs.n	8004344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004334:	f001 fe86 	bl	8006044 <__errno>
 8004338:	4603      	mov	r3, r0
 800433a:	220c      	movs	r2, #12
 800433c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800433e:	f04f 33ff 	mov.w	r3, #4294967295
 8004342:	e009      	b.n	8004358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004344:	4b08      	ldr	r3, [pc, #32]	@ (8004368 <_sbrk+0x64>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800434a:	4b07      	ldr	r3, [pc, #28]	@ (8004368 <_sbrk+0x64>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	4a05      	ldr	r2, [pc, #20]	@ (8004368 <_sbrk+0x64>)
 8004354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004356:	68fb      	ldr	r3, [r7, #12]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20005000 	.word	0x20005000
 8004364:	00000400 	.word	0x00000400
 8004368:	20000934 	.word	0x20000934
 800436c:	20000af0 	.word	0x20000af0

08004370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004374:	bf00      	nop
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr

0800437c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800437c:	f7ff fff8 	bl	8004370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004380:	480b      	ldr	r0, [pc, #44]	@ (80043b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004382:	490c      	ldr	r1, [pc, #48]	@ (80043b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004384:	4a0c      	ldr	r2, [pc, #48]	@ (80043b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004388:	e002      	b.n	8004390 <LoopCopyDataInit>

0800438a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800438a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800438c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800438e:	3304      	adds	r3, #4

08004390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004394:	d3f9      	bcc.n	800438a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004396:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004398:	4c09      	ldr	r4, [pc, #36]	@ (80043c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800439a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800439c:	e001      	b.n	80043a2 <LoopFillZerobss>

0800439e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800439e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043a0:	3204      	adds	r2, #4

080043a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043a4:	d3fb      	bcc.n	800439e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043a6:	f001 fe53 	bl	8006050 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043aa:	f7ff fba5 	bl	8003af8 <main>
  bx lr
 80043ae:	4770      	bx	lr
  ldr r0, =_sdata
 80043b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043b4:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80043b8:	080086e8 	.word	0x080086e8
  ldr r2, =_sbss
 80043bc:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80043c0:	20000aec 	.word	0x20000aec

080043c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043c4:	e7fe      	b.n	80043c4 <ADC1_2_IRQHandler>

080043c6 <LL_ADC_REG_SetSequencerLength>:
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <LL_ADC_IsEnabled>:
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	bf0c      	ite	eq
 80043fe:	2301      	moveq	r3, #1
 8004400:	2300      	movne	r3, #0
 8004402:	b2db      	uxtb	r3, r3
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
	...

08004410 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800441a:	2300      	movs	r3, #0
 800441c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 800441e:	4813      	ldr	r0, [pc, #76]	@ (800446c <LL_ADC_CommonInit+0x5c>)
 8004420:	f7ff ffe3 	bl	80043ea <LL_ADC_IsEnabled>
 8004424:	4604      	mov	r4, r0
 8004426:	4812      	ldr	r0, [pc, #72]	@ (8004470 <LL_ADC_CommonInit+0x60>)
 8004428:	f7ff ffdf 	bl	80043ea <LL_ADC_IsEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	4323      	orrs	r3, r4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d114      	bne.n	800445e <LL_ADC_CommonInit+0x4e>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <LL_ADC_CommonInit+0x40>
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	e008      	b.n	8004462 <LL_ADC_CommonInit+0x52>
                 ADC_CommonInitStruct->Multimode
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CR1,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	605a      	str	r2, [r3, #4]
 800445c:	e001      	b.n	8004462 <LL_ADC_CommonInit+0x52>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bd90      	pop	{r4, r7, pc}
 800446c:	40012400 	.word	0x40012400
 8004470:	40012800 	.word	0x40012800

08004474 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800447e:	2300      	movs	r3, #0
 8004480:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff ffb1 	bl	80043ea <LL_ADC_IsEnabled>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d112      	bne.n	80044b4 <LL_ADC_Init+0x40>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_SCAN
              ,
                 ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	e001      	b.n	80044b8 <LL_ADC_Init+0x44>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff ff8a 	bl	80043ea <LL_ADC_IsEnabled>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d131      	bne.n	8004540 <LL_ADC_REG_Init+0x7e>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <LL_ADC_REG_Init+0x3c>
    {
      MODIFY_REG(ADCx->CR1,
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	430b      	orrs	r3, r1
 80044f6:	431a      	orrs	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	e008      	b.n	8004510 <LL_ADC_REG_Init+0x4e>
                 | ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f423 4268 	bic.w	r2, r3, #59392	@ 0xe800
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	605a      	str	r2, [r3, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 2360 	bic.w	r3, r3, #917504	@ 0xe0000
 8004518:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	6811      	ldr	r1, [r2, #0]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	68d2      	ldr	r2, [r2, #12]
 8004524:	4311      	orrs	r1, r2
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	6912      	ldr	r2, [r2, #16]
 800452a:	430a      	orrs	r2, r1
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff ff44 	bl	80043c6 <LL_ADC_REG_SetSequencerLength>
 800453e:	e001      	b.n	8004544 <LL_ADC_REG_Init+0x82>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <LL_EXTI_EnableIT_0_31>:
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <LL_EXTI_EnableIT_0_31+0x20>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4904      	ldr	r1, [pc, #16]	@ (8004570 <LL_EXTI_EnableIT_0_31+0x20>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010400 	.word	0x40010400

08004574 <LL_EXTI_DisableIT_0_31>:
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <LL_EXTI_DisableIT_0_31+0x20>)
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	43db      	mvns	r3, r3
 8004584:	4903      	ldr	r1, [pc, #12]	@ (8004594 <LL_EXTI_DisableIT_0_31+0x20>)
 8004586:	4013      	ands	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr
 8004594:	40010400 	.word	0x40010400

08004598 <LL_EXTI_EnableEvent_0_31>:
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80045a0:	4b05      	ldr	r3, [pc, #20]	@ (80045b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	4904      	ldr	r1, [pc, #16]	@ (80045b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	604b      	str	r3, [r1, #4]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40010400 	.word	0x40010400

080045bc <LL_EXTI_DisableEvent_0_31>:
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80045c4:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <LL_EXTI_DisableEvent_0_31+0x20>)
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	4903      	ldr	r1, [pc, #12]	@ (80045dc <LL_EXTI_DisableEvent_0_31+0x20>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	40010400 	.word	0x40010400

080045e0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80045e8:	4b05      	ldr	r3, [pc, #20]	@ (8004600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	4904      	ldr	r1, [pc, #16]	@ (8004600 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010400 	.word	0x40010400

08004604 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800460c:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	43db      	mvns	r3, r3
 8004614:	4903      	ldr	r1, [pc, #12]	@ (8004624 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004616:	4013      	ands	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	40010400 	.word	0x40010400

08004628 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4313      	orrs	r3, r2
 800463a:	60cb      	str	r3, [r1, #12]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	bc80      	pop	{r7}
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010400 	.word	0x40010400

0800464c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8004654:	4b05      	ldr	r3, [pc, #20]	@ (800466c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	43db      	mvns	r3, r3
 800465c:	4903      	ldr	r1, [pc, #12]	@ (800466c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800465e:	4013      	ands	r3, r2
 8004660:	60cb      	str	r3, [r1, #12]
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr
 800466c:	40010400 	.word	0x40010400

08004670 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	791b      	ldrb	r3, [r3, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d065      	beq.n	8004750 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d06b      	beq.n	8004764 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	795b      	ldrb	r3, [r3, #5]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d01c      	beq.n	80046ce <LL_EXTI_Init+0x5e>
 8004694:	2b02      	cmp	r3, #2
 8004696:	dc25      	bgt.n	80046e4 <LL_EXTI_Init+0x74>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <LL_EXTI_Init+0x32>
 800469c:	2b01      	cmp	r3, #1
 800469e:	d00b      	beq.n	80046b8 <LL_EXTI_Init+0x48>
 80046a0:	e020      	b.n	80046e4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7ff ff88 	bl	80045bc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff4d 	bl	8004550 <LL_EXTI_EnableIT_0_31>
          break;
 80046b6:	e018      	b.n	80046ea <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff59 	bl	8004574 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ff66 	bl	8004598 <LL_EXTI_EnableEvent_0_31>
          break;
 80046cc:	e00d      	b.n	80046ea <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff3c 	bl	8004550 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff5b 	bl	8004598 <LL_EXTI_EnableEvent_0_31>
          break;
 80046e2:	e002      	b.n	80046ea <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
          break;
 80046e8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	799b      	ldrb	r3, [r3, #6]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d038      	beq.n	8004764 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	799b      	ldrb	r3, [r3, #6]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d01c      	beq.n	8004734 <LL_EXTI_Init+0xc4>
 80046fa:	2b03      	cmp	r3, #3
 80046fc:	dc25      	bgt.n	800474a <LL_EXTI_Init+0xda>
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d002      	beq.n	8004708 <LL_EXTI_Init+0x98>
 8004702:	2b02      	cmp	r3, #2
 8004704:	d00b      	beq.n	800471e <LL_EXTI_Init+0xae>
 8004706:	e020      	b.n	800474a <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff9d 	bl	800464c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7ff ff62 	bl	80045e0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800471c:	e022      	b.n	8004764 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff6e 	bl	8004604 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ff7b 	bl	8004628 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004732:	e017      	b.n	8004764 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff51 	bl	80045e0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff ff70 	bl	8004628 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004748:	e00c      	b.n	8004764 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
            break;
 800474e:	e009      	b.n	8004764 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ff0d 	bl	8004574 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff ff2c 	bl	80045bc <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8004764:	7bfb      	ldrb	r3, [r7, #15]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <LL_GPIO_SetPinMode>:
{
 800476e:	b490      	push	{r4, r7}
 8004770:	b088      	sub	sp, #32
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	461a      	mov	r2, r3
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	0e1b      	lsrs	r3, r3, #24
 8004782:	4413      	add	r3, r2
 8004784:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	613b      	str	r3, [r7, #16]
  return result;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	210f      	movs	r1, #15
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	401a      	ands	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	61bb      	str	r3, [r7, #24]
  return result;
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	fa01 f303 	lsl.w	r3, r1, r3
 80047c4:	4313      	orrs	r3, r2
 80047c6:	6023      	str	r3, [r4, #0]
}
 80047c8:	bf00      	nop
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bc90      	pop	{r4, r7}
 80047d0:	4770      	bx	lr

080047d2 <LL_GPIO_SetPinSpeed>:
{
 80047d2:	b490      	push	{r4, r7}
 80047d4:	b088      	sub	sp, #32
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	60f8      	str	r0, [r7, #12]
 80047da:	60b9      	str	r1, [r7, #8]
 80047dc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	461a      	mov	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	0e1b      	lsrs	r3, r3, #24
 80047e6:	4413      	add	r3, r2
 80047e8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80047ea:	6822      	ldr	r2, [r4, #0]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	613b      	str	r3, [r7, #16]
  return result;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	fab3 f383 	clz	r3, r3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	2103      	movs	r1, #3
 8004804:	fa01 f303 	lsl.w	r3, r1, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	fa93 f3a3 	rbit	r3, r3
 8004816:	61bb      	str	r3, [r7, #24]
  return result;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	fa01 f303 	lsl.w	r3, r1, r3
 8004828:	4313      	orrs	r3, r2
 800482a:	6023      	str	r3, [r4, #0]
}
 800482c:	bf00      	nop
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bc90      	pop	{r4, r7}
 8004834:	4770      	bx	lr

08004836 <LL_GPIO_SetPinOutputType>:
{
 8004836:	b490      	push	{r4, r7}
 8004838:	b088      	sub	sp, #32
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	461a      	mov	r2, r3
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	4413      	add	r3, r2
 800484c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800484e:	6822      	ldr	r2, [r4, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	fa93 f3a3 	rbit	r3, r3
 800485a:	613b      	str	r3, [r7, #16]
  return result;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	2104      	movs	r1, #4
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	401a      	ands	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	fa93 f3a3 	rbit	r3, r3
 800487a:	61bb      	str	r3, [r7, #24]
  return result;
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	4313      	orrs	r3, r2
 800488e:	6023      	str	r3, [r4, #0]
}
 8004890:	bf00      	nop
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bc90      	pop	{r4, r7}
 8004898:	4770      	bx	lr

0800489a <LL_GPIO_SetPinPull>:
{
 800489a:	b480      	push	{r7}
 800489c:	b087      	sub	sp, #28
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	0a1b      	lsrs	r3, r3, #8
 80048ae:	43db      	mvns	r3, r3
 80048b0:	401a      	ands	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0a1b      	lsrs	r3, r3, #8
 80048b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	fa93 f3a3 	rbit	r3, r3
 80048be:	613b      	str	r3, [r7, #16]
  return result;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	4619      	mov	r1, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	408b      	lsls	r3, r1
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	60da      	str	r2, [r3, #12]
}
 80048d4:	bf00      	nop
 80048d6:	371c      	adds	r7, #28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b088      	sub	sp, #32
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	021b      	lsls	r3, r3, #8
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	617b      	str	r3, [r7, #20]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	fa93 f3a3 	rbit	r3, r3
 80048fc:	60fb      	str	r3, [r7, #12]
  return result;
 80048fe:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8004900:	fab3 f383 	clz	r3, r3
 8004904:	b2db      	uxtb	r3, r3
 8004906:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8004908:	e044      	b.n	8004994 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800490a:	2201      	movs	r2, #1
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	409a      	lsls	r2, r3
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4013      	ands	r3, r2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d03a      	beq.n	800498e <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b07      	cmp	r3, #7
 800491c:	d806      	bhi.n	800492c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800491e:	f240 1201 	movw	r2, #257	@ 0x101
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	61bb      	str	r3, [r7, #24]
 800492a:	e008      	b.n	800493e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	3b08      	subs	r3, #8
 8004930:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800493c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b08      	cmp	r3, #8
 8004944:	d106      	bne.n	8004954 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	461a      	mov	r2, r3
 800494c:	69b9      	ldr	r1, [r7, #24]
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ffa3 	bl	800489a <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	461a      	mov	r2, r3
 800495a:	69b9      	ldr	r1, [r7, #24]
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7ff ff06 	bl	800476e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d003      	beq.n	8004972 <LL_GPIO_Init+0x94>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b09      	cmp	r3, #9
 8004970:	d10d      	bne.n	800498e <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	461a      	mov	r2, r3
 8004978:	69b9      	ldr	r1, [r7, #24]
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff ff29 	bl	80047d2 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	461a      	mov	r2, r3
 8004986:	69b9      	ldr	r1, [r7, #24]
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ff54 	bl	8004836 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	3301      	adds	r3, #1
 8004992:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	fa22 f303 	lsr.w	r3, r2, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1b4      	bne.n	800490a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <LL_RCC_GetSysClkSource>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049b0:	4b03      	ldr	r3, [pc, #12]	@ (80049c0 <LL_RCC_GetSysClkSource+0x14>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 030c 	and.w	r3, r3, #12
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr
 80049c0:	40021000 	.word	0x40021000

080049c4 <LL_RCC_GetAHBPrescaler>:
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049c8:	4b03      	ldr	r3, [pc, #12]	@ (80049d8 <LL_RCC_GetAHBPrescaler+0x14>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr
 80049d8:	40021000 	.word	0x40021000

080049dc <LL_RCC_GetAPB1Prescaler>:
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80049e0:	4b03      	ldr	r3, [pc, #12]	@ (80049f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr
 80049f0:	40021000 	.word	0x40021000

080049f4 <LL_RCC_GetAPB2Prescaler>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049f8:	4b03      	ldr	r3, [pc, #12]	@ (8004a08 <LL_RCC_GetAPB2Prescaler+0x14>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	40021000 	.word	0x40021000

08004a0c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004a10:	4b03      	ldr	r3, [pc, #12]	@ (8004a20 <LL_RCC_PLL_GetMainSource+0x14>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr
 8004a20:	40021000 	.word	0x40021000

08004a24 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8004a28:	4b03      	ldr	r3, [pc, #12]	@ (8004a38 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr
 8004a38:	40021000 	.word	0x40021000

08004a3c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8004a40:	4b04      	ldr	r3, [pc, #16]	@ (8004a54 <LL_RCC_PLL_GetPrediv+0x18>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	0c5b      	lsrs	r3, r3, #17
 8004a46:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bc80      	pop	{r7}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	40021000 	.word	0x40021000

08004a58 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004a60:	f000 f820 	bl	8004aa4 <RCC_GetSystemClockFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f83e 	bl	8004af0 <RCC_GetHCLKClockFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 f84c 	bl	8004b1c <RCC_GetPCLK1ClockFreq>
 8004a84:	4602      	mov	r2, r0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 f858 	bl	8004b44 <RCC_GetPCLK2ClockFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60da      	str	r2, [r3, #12]
}
 8004a9a:	bf00      	nop
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004aae:	f7ff ff7d 	bl	80049ac <LL_RCC_GetSysClkSource>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d00c      	beq.n	8004ad2 <RCC_GetSystemClockFreq+0x2e>
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d80e      	bhi.n	8004ada <RCC_GetSystemClockFreq+0x36>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <RCC_GetSystemClockFreq+0x22>
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d003      	beq.n	8004acc <RCC_GetSystemClockFreq+0x28>
 8004ac4:	e009      	b.n	8004ada <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004ac6:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <RCC_GetSystemClockFreq+0x48>)
 8004ac8:	607b      	str	r3, [r7, #4]
      break;
 8004aca:	e009      	b.n	8004ae0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <RCC_GetSystemClockFreq+0x48>)
 8004ace:	607b      	str	r3, [r7, #4]
      break;
 8004ad0:	e006      	b.n	8004ae0 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004ad2:	f000 f84b 	bl	8004b6c <RCC_PLL_GetFreqDomain_SYS>
 8004ad6:	6078      	str	r0, [r7, #4]
      break;
 8004ad8:	e002      	b.n	8004ae0 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8004ada:	4b04      	ldr	r3, [pc, #16]	@ (8004aec <RCC_GetSystemClockFreq+0x48>)
 8004adc:	607b      	str	r3, [r7, #4]
      break;
 8004ade:	bf00      	nop
  }

  return frequency;
 8004ae0:	687b      	ldr	r3, [r7, #4]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	007a1200 	.word	0x007a1200

08004af0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004af8:	f7ff ff64 	bl	80049c4 <LL_RCC_GetAHBPrescaler>
 8004afc:	4603      	mov	r3, r0
 8004afe:	091b      	lsrs	r3, r3, #4
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	4a04      	ldr	r2, [pc, #16]	@ (8004b18 <RCC_GetHCLKClockFreq+0x28>)
 8004b06:	5cd3      	ldrb	r3, [r2, r3]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	40d3      	lsrs	r3, r2
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	08008350 	.word	0x08008350

08004b1c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004b24:	f7ff ff5a 	bl	80049dc <LL_RCC_GetAPB1Prescaler>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	4a04      	ldr	r2, [pc, #16]	@ (8004b40 <RCC_GetPCLK1ClockFreq+0x24>)
 8004b2e:	5cd3      	ldrb	r3, [r2, r3]
 8004b30:	461a      	mov	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	40d3      	lsrs	r3, r2
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	08008360 	.word	0x08008360

08004b44 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004b4c:	f7ff ff52 	bl	80049f4 <LL_RCC_GetAPB2Prescaler>
 8004b50:	4603      	mov	r3, r0
 8004b52:	0adb      	lsrs	r3, r3, #11
 8004b54:	4a04      	ldr	r2, [pc, #16]	@ (8004b68 <RCC_GetPCLK2ClockFreq+0x24>)
 8004b56:	5cd3      	ldrb	r3, [r2, r3]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	40d3      	lsrs	r3, r2
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	08008360 	.word	0x08008360

08004b6c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	2300      	movs	r3, #0
 8004b78:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004b7a:	f7ff ff47 	bl	8004a0c <LL_RCC_PLL_GetMainSource>
 8004b7e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b8c:	d003      	beq.n	8004b96 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004b8e:	e00b      	b.n	8004ba8 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8004b90:	4b0d      	ldr	r3, [pc, #52]	@ (8004bc8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004b92:	607b      	str	r3, [r7, #4]
      break;
 8004b94:	e00b      	b.n	8004bae <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8004b96:	f7ff ff51 	bl	8004a3c <LL_RCC_PLL_GetPrediv>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8004bcc <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8004ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba4:	607b      	str	r3, [r7, #4]
      break;
 8004ba6:	e002      	b.n	8004bae <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8004ba8:	4b07      	ldr	r3, [pc, #28]	@ (8004bc8 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8004baa:	607b      	str	r3, [r7, #4]
      break;
 8004bac:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8004bae:	f7ff ff39 	bl	8004a24 <LL_RCC_PLL_GetMultiplicator>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	0c9b      	lsrs	r3, r3, #18
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	fb02 f303 	mul.w	r3, r2, r3
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	003d0900 	.word	0x003d0900
 8004bcc:	007a1200 	.word	0x007a1200

08004bd0 <LL_TIM_SetPrescaler>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <LL_TIM_SetAutoReload>:
{
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bc80      	pop	{r7}
 8004c02:	4770      	bx	lr

08004c04 <LL_TIM_SetRepetitionCounter>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f043 0201 	orr.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	615a      	str	r2, [r3, #20]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bc80      	pop	{r7}
 8004c3a:	4770      	bx	lr

08004c3c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a27      	ldr	r2, [pc, #156]	@ (8004cec <LL_TIM_Init+0xb0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00b      	beq.n	8004c6c <LL_TIM_Init+0x30>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c5a:	d007      	beq.n	8004c6c <LL_TIM_Init+0x30>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a24      	ldr	r2, [pc, #144]	@ (8004cf0 <LL_TIM_Init+0xb4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <LL_TIM_Init+0x30>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a23      	ldr	r2, [pc, #140]	@ (8004cf4 <LL_TIM_Init+0xb8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d106      	bne.n	8004c7a <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cec <LL_TIM_Init+0xb0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d00b      	beq.n	8004c9a <LL_TIM_Init+0x5e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c88:	d007      	beq.n	8004c9a <LL_TIM_Init+0x5e>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a18      	ldr	r2, [pc, #96]	@ (8004cf0 <LL_TIM_Init+0xb4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d003      	beq.n	8004c9a <LL_TIM_Init+0x5e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a17      	ldr	r2, [pc, #92]	@ (8004cf4 <LL_TIM_Init+0xb8>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d106      	bne.n	8004ca8 <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff ff98 	bl	8004bea <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff ff85 	bl	8004bd0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a08      	ldr	r2, [pc, #32]	@ (8004cec <LL_TIM_Init+0xb0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d105      	bne.n	8004cda <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff95 	bl	8004c04 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ff9f 	bl	8004c1e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40012c00 	.word	0x40012c00
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800

08004cf8 <LL_USART_IsEnabled>:
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0c:	bf0c      	ite	eq
 8004d0e:	2301      	moveq	r3, #1
 8004d10:	2300      	movne	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <LL_USART_SetStopBitsLength>:
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	611a      	str	r2, [r3, #16]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr

08004d42 <LL_USART_SetHWFlowCtrl>:
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	615a      	str	r2, [r3, #20]
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bc80      	pop	{r7}
 8004d64:	4770      	bx	lr
	...

08004d68 <LL_USART_SetBaudRate>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009a      	lsls	r2, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d88:	4a25      	ldr	r2, [pc, #148]	@ (8004e20 <LL_USART_SetBaudRate+0xb8>)
 8004d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	b299      	uxth	r1, r3
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009a      	lsls	r2, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004daa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e20 <LL_USART_SetBaudRate+0xb8>)
 8004dac:	fba3 0302 	umull	r0, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	2064      	movs	r0, #100	@ 0x64
 8004db4:	fb00 f303 	mul.w	r3, r0, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	3332      	adds	r3, #50	@ 0x32
 8004dbe:	4a18      	ldr	r2, [pc, #96]	@ (8004e20 <LL_USART_SetBaudRate+0xb8>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	440b      	add	r3, r1
 8004dd0:	b299      	uxth	r1, r3
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009a      	lsls	r2, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <LL_USART_SetBaudRate+0xb8>)
 8004de8:	fba3 0302 	umull	r0, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	2064      	movs	r0, #100	@ 0x64
 8004df0:	fb00 f303 	mul.w	r3, r0, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	3332      	adds	r3, #50	@ 0x32
 8004dfa:	4a09      	ldr	r2, [pc, #36]	@ (8004e20 <LL_USART_SetBaudRate+0xb8>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	440b      	add	r3, r1
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	609a      	str	r2, [r3, #8]
}
 8004e14:	bf00      	nop
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	51eb851f 	.word	0x51eb851f

08004e24 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7ff ff5e 	bl	8004cf8 <LL_USART_IsEnabled>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d145      	bne.n	8004ece <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004e4a:	f023 030c 	bic.w	r3, r3, #12
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	6851      	ldr	r1, [r2, #4]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	68d2      	ldr	r2, [r2, #12]
 8004e56:	4311      	orrs	r1, r2
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	6912      	ldr	r2, [r2, #16]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff ff57 	bl	8004d1e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	4619      	mov	r1, r3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff63 	bl	8004d42 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004e7c:	f107 0308 	add.w	r3, r7, #8
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7ff fde9 	bl	8004a58 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a13      	ldr	r2, [pc, #76]	@ (8004ed8 <LL_USART_Init+0xb4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d102      	bne.n	8004e94 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	e00c      	b.n	8004eae <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a11      	ldr	r2, [pc, #68]	@ (8004edc <LL_USART_Init+0xb8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d102      	bne.n	8004ea2 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	e005      	b.n	8004eae <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8004ee0 <LL_USART_Init+0xbc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d101      	bne.n	8004eae <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00c      	beq.n	8004ece <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d008      	beq.n	8004ece <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	69b9      	ldr	r1, [r7, #24]
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff ff4d 	bl	8004d68 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3720      	adds	r7, #32
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40013800 	.word	0x40013800
 8004edc:	40004400 	.word	0x40004400
 8004ee0:	40004800 	.word	0x40004800

08004ee4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	4a07      	ldr	r2, [pc, #28]	@ (8004f14 <LL_InitTick+0x30>)
 8004ef8:	3b01      	subs	r3, #1
 8004efa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <LL_InitTick+0x30>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f02:	4b04      	ldr	r3, [pc, #16]	@ (8004f14 <LL_InitTick+0x30>)
 8004f04:	2205      	movs	r2, #5
 8004f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	e000e010 	.word	0xe000e010

08004f18 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004f20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ffdd 	bl	8004ee4 <LL_InitTick>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <LL_mDelay+0x44>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004f42:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4a:	d00c      	beq.n	8004f66 <LL_mDelay+0x32>
  {
    Delay++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8004f52:	e008      	b.n	8004f66 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004f54:	4b08      	ldr	r3, [pc, #32]	@ (8004f78 <LL_mDelay+0x44>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <LL_mDelay+0x32>
    {
      Delay--;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	607b      	str	r3, [r7, #4]
  while (Delay)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f3      	bne.n	8004f54 <LL_mDelay+0x20>
    }
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr
 8004f78:	e000e010 	.word	0xe000e010

08004f7c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004f84:	4a03      	ldr	r2, [pc, #12]	@ (8004f94 <LL_SetSystemCoreClock+0x18>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6013      	str	r3, [r2, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bc80      	pop	{r7}
 8004f92:	4770      	bx	lr
 8004f94:	200000cc 	.word	0x200000cc

08004f98 <RING_BUFFER_Init>:
 * @param rb The parameter `rb` is a pointer to a `ring_buffer_t` structure,
 * which is used to implement a queue data structure.
 */
void
RING_BUFFER_Init (ring_buffer_t *rb)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  rb->u32_out   = 0;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  rb->u32_count = 0;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr

08004fc2 <RING_BUFFER_Reset>:
 *
 * @param rb Pointer to the ring buffer to reset.
 */
void
RING_BUFFER_Reset (ring_buffer_t *rb)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  rb->u32_in    = 0;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  rb->u32_out   = 0;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  rb->u32_count = 0;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <RING_BUFFER_Is_Empty>:
 * the count of elements in the ring buffer is 0, indicating that the buffer is
 * empty, and `false` otherwise.
 */
bool
RING_BUFFER_Is_Empty (ring_buffer_t *rb)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == 0);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bc80      	pop	{r7}
 800500c:	4770      	bx	lr

0800500e <RING_BUFFER_Is_Full>:
 * either `true` or `false`, based on whether the count of elements in the ring
 * buffer `rb` is equal to the predefined size `RING_BUFFER_SIZE`.
 */
bool
RING_BUFFER_Is_Full (ring_buffer_t *rb)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  return (rb->u32_count == (uint32_t)RING_BUFFER_SIZE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501c:	2b80      	cmp	r3, #128	@ 0x80
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr

08005030 <RING_BUFFER_Push_Data>:
 * buffer. It is of type `char`, which means it can store a single character (1
 * byte) of data.
 */
void
RING_BUFFER_Push_Data (ring_buffer_t *rb, char element)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  if (RING_BUFFER_Is_Full(rb))
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ffe6 	bl	800500e <RING_BUFFER_Is_Full>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <RING_BUFFER_Push_Data+0x1e>
  {
    RING_BUFFER_Reset(rb);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff ffba 	bl	8004fc2 <RING_BUFFER_Reset>
  }
  *(rb->u8_buffer + rb->u32_in) = element;
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005056:	4413      	add	r3, r2
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	701a      	strb	r2, [r3, #0]

  rb->u32_in = (rb->u32_in + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005062:	3301      	adds	r3, #1
 8005064:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  rb->u32_count++;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <RING_BUFFER_Pull_Data>:
 * @return The function `RING_BUFFER_Pull_Data` is returning a `uint8_t` data
 * value from the ring buffer pointed to by the `rb` parameter.
 */
uint8_t
RING_BUFFER_Pull_Data (ring_buffer_t *rb)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  if (RING_BUFFER_Is_Empty(rb))
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff ffad 	bl	8004fec <RING_BUFFER_Is_Empty>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <RING_BUFFER_Pull_Data+0x18>
  {
    return 0xFF;
 8005098:	23ff      	movs	r3, #255	@ 0xff
 800509a:	e017      	b.n	80050cc <RING_BUFFER_Pull_Data+0x48>
  }
  register uint8_t data = *(rb->u8_buffer + rb->u32_out);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050a4:	4413      	add	r3, r2
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2dc      	uxtb	r4, r3

  rb->u32_out = (rb->u32_out + 1) & ((uint32_t)RING_BUFFER_SIZE - 1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050b0:	3301      	adds	r3, #1
 80050b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  rb->u32_count--;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	1e5a      	subs	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  return data;
 80050ca:	4623      	mov	r3, r4
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd90      	pop	{r4, r7, pc}

080050d4 <SCH_Initialize>:
 * scheduler context, including task and timer contexts, as well as soft timers.
 * It also initializes the SysTick timer for scheduler operations.
 */
void
SCH_Initialize (void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  s_SystemTick         = RESET; /**< @brief Reset system tick counter. */
 80050d8:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <SCH_Initialize+0x3c>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
  s_NumOfTaskScheduled = RESET; /**< @brief Reset number of scheduled tasks. */
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <SCH_Initialize+0x40>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
  s_NumOfTimers        = RESET; /**< @brief Reset number of timers. */
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <SCH_Initialize+0x44>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]

  /**< @brief Initialize Scheduler Context */

  /**< @brief Clear task context array. */
  memset((uint8_t *)&s_TaskContext[0],
 80050ea:	223c      	movs	r2, #60	@ 0x3c
 80050ec:	2100      	movs	r1, #0
 80050ee:	480b      	ldr	r0, [pc, #44]	@ (800511c <SCH_Initialize+0x48>)
 80050f0:	f000 ff55 	bl	8005f9e <memset>
         RESET,
         (sizeof(SCH_TaskContextTypedef) * MAX_TASK));

  /**< @brief Clear timer context array. */
  memset((uint8_t *)&s_TimerContext[0],
 80050f4:	2218      	movs	r2, #24
 80050f6:	2100      	movs	r1, #0
 80050f8:	4809      	ldr	r0, [pc, #36]	@ (8005120 <SCH_Initialize+0x4c>)
 80050fa:	f000 ff50 	bl	8005f9e <memset>
         RESET,
         (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));

  /**< @brief Clear soft timers array. */
  memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 80050fe:	2208      	movs	r2, #8
 8005100:	2100      	movs	r1, #0
 8005102:	4808      	ldr	r0, [pc, #32]	@ (8005124 <SCH_Initialize+0x50>)
 8005104:	f000 ff4b 	bl	8005f9e <memset>

  /**< @brief Initialize SysTick timer. */
  BSP_SYSTICK_TimerInit();
 8005108:	f7fd fdd8 	bl	8002cbc <BSP_SYSTICK_TimerInit>
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20000994 	.word	0x20000994
 8005114:	20000974 	.word	0x20000974
 8005118:	20000990 	.word	0x20000990
 800511c:	20000938 	.word	0x20000938
 8005120:	20000978 	.word	0x20000978
 8005124:	20000998 	.word	0x20000998

08005128 <SCH_TASK_CreateTask>:
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TASK_CreateTask (SCH_TASK_HANDLE         *pHandle,
                     SCH_TaskPropertyTypedef *pTaskProperty)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  status_t status
 8005132:	2301      	movs	r3, #1
 8005134:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTaskProperty)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d029      	beq.n	8005190 <SCH_TASK_CreateTask+0x68>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d026      	beq.n	8005190 <SCH_TASK_CreateTask+0x68>
  {
    /**< @brief Check if there's room for more tasks */
    if (s_NumOfTaskScheduled < (MAX_TASK - 1))
 8005142:	4b16      	ldr	r3, [pc, #88]	@ (800519c <SCH_TASK_CreateTask+0x74>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b03      	cmp	r3, #3
 8005148:	d822      	bhi.n	8005190 <SCH_TASK_CreateTask+0x68>
    {
      SCH_TaskContextTypedef *pTaskContext
          = &s_TaskContext[s_NumOfTaskScheduled];
 800514a:	4b14      	ldr	r3, [pc, #80]	@ (800519c <SCH_TASK_CreateTask+0x74>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	461a      	mov	r2, r3
      SCH_TaskContextTypedef *pTaskContext
 8005150:	4613      	mov	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4a11      	ldr	r2, [pc, #68]	@ (80051a0 <SCH_TASK_CreateTask+0x78>)
 800515a:	4413      	add	r3, r2
 800515c:	60bb      	str	r3, [r7, #8]

      /**< @brief Set task properties in task context */
      pTaskContext->pTaskProperty = pTaskProperty;
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	609a      	str	r2, [r3, #8]
      pTaskContext->taskFlag      = FALSE;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2200      	movs	r2, #0
 8005168:	805a      	strh	r2, [r3, #2]
      pTaskContext->taskTick      = pTaskProperty->taskTick;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	605a      	str	r2, [r3, #4]
      pTaskContext->taskState     = TASK_StateReady;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]

      /**< @brief Provide task handle to caller */
      *pHandle = s_NumOfTaskScheduled;
 8005178:	4b08      	ldr	r3, [pc, #32]	@ (800519c <SCH_TASK_CreateTask+0x74>)
 800517a:	781a      	ldrb	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment task count */
      s_NumOfTaskScheduled++;
 8005180:	4b06      	ldr	r3, [pc, #24]	@ (800519c <SCH_TASK_CreateTask+0x74>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	b2da      	uxtb	r2, r3
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <SCH_TASK_CreateTask+0x74>)
 800518a:	701a      	strb	r2, [r3, #0]

      /**< @brief Task registered successfully */
      status = STS_DONE;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 8005190:	7bfb      	ldrb	r3, [r7, #15]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr
 800519c:	20000974 	.word	0x20000974
 80051a0:	20000938 	.word	0x20000938

080051a4 <SCH_TIM_CreateTimer>:
 * registered, otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_CreateTimer (SCH_TIMER_HANDLE         *pHandle,
                     SCH_TimerPropertyTypedef *pTimerProperty)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  status_t status
 80051ae:	2301      	movs	r3, #1
 80051b0:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  /**< @brief Ensure valid parameters are provided */
  if (pHandle && pTimerProperty)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d028      	beq.n	800520a <SCH_TIM_CreateTimer+0x66>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d025      	beq.n	800520a <SCH_TIM_CreateTimer+0x66>
  {
    /**< @brief Check if there's room for more timers */
    if (s_NumOfTimers < (MAX_TIMERS - 1))
 80051be:	4b16      	ldr	r3, [pc, #88]	@ (8005218 <SCH_TIM_CreateTimer+0x74>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d121      	bne.n	800520a <SCH_TIM_CreateTimer+0x66>
    {
      SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[s_NumOfTimers];
 80051c6:	4b14      	ldr	r3, [pc, #80]	@ (8005218 <SCH_TIM_CreateTimer+0x74>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4a11      	ldr	r2, [pc, #68]	@ (800521c <SCH_TIM_CreateTimer+0x78>)
 80051d6:	4413      	add	r3, r2
 80051d8:	60bb      	str	r3, [r7, #8]

      /**< @brief Set timer properties in timer context */
      pTimerContext->pTimerProperty = pTimerProperty;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	609a      	str	r2, [r3, #8]
      pTimerContext->timerState     = TIM_StateStop;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
      pTimerContext->timerFlag      = FALSE;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	805a      	strh	r2, [r3, #2]
      pTimerContext->timerTick      = RESET;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2200      	movs	r2, #0
 80051f0:	605a      	str	r2, [r3, #4]

      /**< @brief Provide timer handle to caller */
      *pHandle = s_NumOfTimers;
 80051f2:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <SCH_TIM_CreateTimer+0x74>)
 80051f4:	781a      	ldrb	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	701a      	strb	r2, [r3, #0]

      /**< @brief Increment timer count */
      s_NumOfTimers++;
 80051fa:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <SCH_TIM_CreateTimer+0x74>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	3301      	adds	r3, #1
 8005200:	b2da      	uxtb	r2, r3
 8005202:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <SCH_TIM_CreateTimer+0x74>)
 8005204:	701a      	strb	r2, [r3, #0]

      /**< @brief Timer registered successfully */
      status = STS_DONE;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]
    }
  }

  /**< @brief Return the status of the operation. */
  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	20000990 	.word	0x20000990
 800521c:	20000978 	.word	0x20000978

08005220 <SCH_TIM_RestartTimer>:
 * @return Returns STS_DONE if the timer was successfully restarted,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_RestartTimer (SCH_TIMER_HANDLE timerIndex)
{
 8005220:	b480      	push	{r7}
 8005222:	b085      	sub	sp, #20
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	71fb      	strb	r3, [r7, #7]
  status_t status
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 800522e:	4b0d      	ldr	r3, [pc, #52]	@ (8005264 <SCH_TIM_RestartTimer+0x44>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	79fa      	ldrb	r2, [r7, #7]
 8005234:	429a      	cmp	r2, r3
 8005236:	d20f      	bcs.n	8005258 <SCH_TIM_RestartTimer+0x38>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 8005238:	79fa      	ldrb	r2, [r7, #7]
 800523a:	4613      	mov	r3, r2
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	4413      	add	r3, r2
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	4a09      	ldr	r2, [pc, #36]	@ (8005268 <SCH_TIM_RestartTimer+0x48>)
 8005244:	4413      	add	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerTick               = RESET;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	605a      	str	r2, [r3, #4]
    pTimerContext->timerState              = TIM_StateRun;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 8005254:	2300      	movs	r3, #0
 8005256:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 8005258:	7bfb      	ldrb	r3, [r7, #15]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	20000990 	.word	0x20000990
 8005268:	20000978 	.word	0x20000978

0800526c <SCH_TIM_StopTimer>:
 * @return Returns STS_DONE if the timer was successfully stopped,
 *         otherwise returns STS_ERROR.
 */
status_t
SCH_TIM_StopTimer (SCH_TIMER_HANDLE timerIndex)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
  status_t status
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
      = STS_ERROR; /**< @brief Initialize status to indicate error. */

  if (timerIndex < s_NumOfTimers)
 800527a:	4b0c      	ldr	r3, [pc, #48]	@ (80052ac <SCH_TIM_StopTimer+0x40>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	79fa      	ldrb	r2, [r7, #7]
 8005280:	429a      	cmp	r2, r3
 8005282:	d20c      	bcs.n	800529e <SCH_TIM_StopTimer+0x32>
  {
    /**< @brief Get Timer Context */
    SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 8005284:	79fa      	ldrb	r2, [r7, #7]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4a08      	ldr	r2, [pc, #32]	@ (80052b0 <SCH_TIM_StopTimer+0x44>)
 8005290:	4413      	add	r3, r2
 8005292:	60bb      	str	r3, [r7, #8]
    pTimerContext->timerState              = TIM_StateStop;
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2200      	movs	r2, #0
 8005298:	701a      	strb	r2, [r3, #0]
    status                                 = STS_DONE;
 800529a:	2300      	movs	r3, #0
 800529c:	73fb      	strb	r3, [r7, #15]
  }

  /**< @brief Return the status of the operation. */
  return status;
 800529e:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000990 	.word	0x20000990
 80052b0:	20000978 	.word	0x20000978

080052b4 <SCH_RunSystemTickTimer>:
 * and timer ticks, checks if their periods have elapsed, and updates their
 * flags accordingly. Additionally, it decrements software timers.
 */
void
SCH_RunSystemTickTimer (void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Increment System Tick counter */
  s_SystemTick++;
 80052ba:	4b42      	ldr	r3, [pc, #264]	@ (80053c4 <SCH_RunSystemTickTimer+0x110>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	4a40      	ldr	r2, [pc, #256]	@ (80053c4 <SCH_RunSystemTickTimer+0x110>)
 80052c2:	6013      	str	r3, [r2, #0]

  /**< @brief Check Status of periodic tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	73fb      	strb	r3, [r7, #15]
 80052c8:	e025      	b.n	8005316 <SCH_RunSystemTickTimer+0x62>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 80052ca:	7bfa      	ldrb	r2, [r7, #15]
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4a3c      	ldr	r2, [pc, #240]	@ (80053c8 <SCH_RunSystemTickTimer+0x114>)
 80052d6:	4413      	add	r3, r2
 80052d8:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((SCH_TASK_SYNC == pTaskContext->pTaskProperty->taskType)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d115      	bne.n	8005310 <SCH_RunSystemTickTimer+0x5c>
        && (TASK_StateReady == pTaskContext->taskState))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d111      	bne.n	8005310 <SCH_RunSystemTickTimer+0x5c>
    {
      /**< @brief Increment task tick */
      pTaskContext->taskTick += 1;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached task period */
      if (pTaskContext->taskTick >= pTaskContext->pTaskProperty->taskPeriodInMS)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6892      	ldr	r2, [r2, #8]
 80052fe:	8852      	ldrh	r2, [r2, #2]
 8005300:	4293      	cmp	r3, r2
 8005302:	d305      	bcc.n	8005310 <SCH_RunSystemTickTimer+0x5c>
      {
        /**< @brief Reset Task tick timer */
        pTaskContext->taskTick = RESET;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	605a      	str	r2, [r3, #4]
        /**< @brief Enable Flag */
        pTaskContext->taskFlag = TRUE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	805a      	strh	r2, [r3, #2]
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	3301      	adds	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	4b2d      	ldr	r3, [pc, #180]	@ (80053cc <SCH_RunSystemTickTimer+0x118>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	429a      	cmp	r2, r3
 800531e:	d3d4      	bcc.n	80052ca <SCH_RunSystemTickTimer+0x16>
      }
    }
  }

  /**< @brief Check Status of timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8005320:	2300      	movs	r3, #0
 8005322:	73bb      	strb	r3, [r7, #14]
 8005324:	e02b      	b.n	800537e <SCH_RunSystemTickTimer+0xca>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 8005326:	7bba      	ldrb	r2, [r7, #14]
 8005328:	4613      	mov	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4413      	add	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4a27      	ldr	r2, [pc, #156]	@ (80053d0 <SCH_RunSystemTickTimer+0x11c>)
 8005332:	4413      	add	r3, r2
 8005334:	60bb      	str	r3, [r7, #8]

    /**< @brief Check type and State of the timer */
    if (TIM_StateRun == pTimerContext->timerState)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d11c      	bne.n	8005378 <SCH_RunSystemTickTimer+0xc4>
    {
      /**< @brief Increment timer tick */
      pTimerContext->timerTick += 1;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	605a      	str	r2, [r3, #4]

      /**< @brief Check if we reached timer period */
      if (pTimerContext->timerTick
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	685b      	ldr	r3, [r3, #4]
          >= pTimerContext->pTimerProperty->timerPeriodInMS)
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	6892      	ldr	r2, [r2, #8]
 8005350:	8852      	ldrh	r2, [r2, #2]
      if (pTimerContext->timerTick
 8005352:	4293      	cmp	r3, r2
 8005354:	d310      	bcc.n	8005378 <SCH_RunSystemTickTimer+0xc4>
      {
        /**< @brief Enable Flag */
        pTimerContext->timerFlag = TRUE;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	2201      	movs	r2, #1
 800535a:	805a      	strh	r2, [r3, #2]
        /**< @brief Reset tick timer */
        pTimerContext->timerTick = RESET;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	605a      	str	r2, [r3, #4]
        /**< @brief Check timer type and change the state */
        pTimerContext->timerState
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	781b      	ldrb	r3, [r3, #0]
                  ? TIM_StateRun
                  : TIM_StateStop;
 8005368:	2b02      	cmp	r3, #2
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
            = (SCH_TIMER_PERIODIC == pTimerContext->pTimerProperty->timerType)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	701a      	strb	r2, [r3, #0]
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8005378:	7bbb      	ldrb	r3, [r7, #14]
 800537a:	3301      	adds	r3, #1
 800537c:	73bb      	strb	r3, [r7, #14]
 800537e:	4b15      	ldr	r3, [pc, #84]	@ (80053d4 <SCH_RunSystemTickTimer+0x120>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	7bba      	ldrb	r2, [r7, #14]
 8005384:	429a      	cmp	r2, r3
 8005386:	d3ce      	bcc.n	8005326 <SCH_RunSystemTickTimer+0x72>
      }
    }
  }

  /**< @brief Update software timers */
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8005388:	2300      	movs	r3, #0
 800538a:	73bb      	strb	r3, [r7, #14]
 800538c:	e010      	b.n	80053b0 <SCH_RunSystemTickTimer+0xfc>
  {
    if (s_SoftTimers[timerIndex] > 0)
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <SCH_RunSystemTickTimer+0x124>)
 8005392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <SCH_RunSystemTickTimer+0xf6>
    {
      s_SoftTimers[timerIndex]--;
 800539a:	7bbb      	ldrb	r3, [r7, #14]
 800539c:	4a0e      	ldr	r2, [pc, #56]	@ (80053d8 <SCH_RunSystemTickTimer+0x124>)
 800539e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053a2:	3a01      	subs	r2, #1
 80053a4:	490c      	ldr	r1, [pc, #48]	@ (80053d8 <SCH_RunSystemTickTimer+0x124>)
 80053a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 80053aa:	7bbb      	ldrb	r3, [r7, #14]
 80053ac:	3301      	adds	r3, #1
 80053ae:	73bb      	strb	r3, [r7, #14]
 80053b0:	7bbb      	ldrb	r3, [r7, #14]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d9eb      	bls.n	800538e <SCH_RunSystemTickTimer+0xda>
    }
  }
}
 80053b6:	bf00      	nop
 80053b8:	bf00      	nop
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	20000994 	.word	0x20000994
 80053c8:	20000938 	.word	0x20000938
 80053cc:	20000974 	.word	0x20000974
 80053d0:	20000978 	.word	0x20000978
 80053d4:	20000990 	.word	0x20000990
 80053d8:	20000998 	.word	0x20000998

080053dc <SCH_StartScheduler>:
 * the system tick timer or performs any necessary operations to begin the
 * scheduling of tasks and timers.
 */
void
SCH_StartScheduler (void)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	af00      	add	r7, sp, #0
  /**< @brief Scheduler by initiating the system tick timer */
  SCH_START;
 80053e0:	f7fd fc5e 	bl	8002ca0 <BSP_SYSTICK_TimerStart>
}
 80053e4:	bf00      	nop
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SCH_HandleScheduledTask>:
 * is set and it is in the ready state, its associated function is called.
 * Similarly, if a timer's flag is set, its callback function is invoked.
 */
void
SCH_HandleScheduledTask (void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
  uint8_t                 timerIndex; /**< @brief Index variable for timers. */
  SCH_TimerContextTypedef
      *pTimerContext; /**< @brief Pointer to timer context. */

  /**< @brief Handle scheduled tasks */
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	73fb      	strb	r3, [r7, #15]
 80053f2:	e01e      	b.n	8005432 <SCH_HandleScheduledTask+0x4a>
  {
    /**< @brief Get Task Context */
    pTaskContext = &s_TaskContext[taskIndex];
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a23      	ldr	r2, [pc, #140]	@ (800548c <SCH_HandleScheduledTask+0xa4>)
 8005400:	4413      	add	r3, r2
 8005402:	607b      	str	r3, [r7, #4]

    /**< @brief Check type and State of the task */
    if ((TRUE == pTaskContext->taskFlag)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	885b      	ldrh	r3, [r3, #2]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d10f      	bne.n	800542c <SCH_HandleScheduledTask+0x44>
        && (TASK_StateReady == pTaskContext->taskState))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d10b      	bne.n	800542c <SCH_HandleScheduledTask+0x44>
    {
      pTaskContext->taskFlag = FALSE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	805a      	strh	r2, [r3, #2]
      /**< @brief Call task function if defined */
      if (pTaskContext->pTaskProperty->taskFunction)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <SCH_HandleScheduledTask+0x44>
      {
        pTaskContext->pTaskProperty->taskFunction();
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4798      	blx	r3
  for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 800542c:	7bfb      	ldrb	r3, [r7, #15]
 800542e:	3301      	adds	r3, #1
 8005430:	73fb      	strb	r3, [r7, #15]
 8005432:	4b17      	ldr	r3, [pc, #92]	@ (8005490 <SCH_HandleScheduledTask+0xa8>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	429a      	cmp	r2, r3
 800543a:	d3db      	bcc.n	80053f4 <SCH_HandleScheduledTask+0xc>
      }
    }
  }

  /**< @brief Handle scheduled timers */
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 800543c:	2300      	movs	r3, #0
 800543e:	73bb      	strb	r3, [r7, #14]
 8005440:	e01a      	b.n	8005478 <SCH_HandleScheduledTask+0x90>
  {
    /**< @brief Get Timer Context */
    pTimerContext = &s_TimerContext[timerIndex];
 8005442:	7bba      	ldrb	r2, [r7, #14]
 8005444:	4613      	mov	r3, r2
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4a11      	ldr	r2, [pc, #68]	@ (8005494 <SCH_HandleScheduledTask+0xac>)
 800544e:	4413      	add	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]

    /**< @brief Check timer flag */
    if (TRUE == pTimerContext->timerFlag)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	885b      	ldrh	r3, [r3, #2]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10b      	bne.n	8005472 <SCH_HandleScheduledTask+0x8a>
    {
      pTimerContext->timerFlag = FALSE;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2200      	movs	r2, #0
 800545e:	805a      	strh	r2, [r3, #2]
      /**< @brief Call timer callback function if defined */
      if (pTimerContext->pTimerProperty->timerCallbackFunction)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <SCH_HandleScheduledTask+0x8a>
      {
        pTimerContext->pTimerProperty->timerCallbackFunction();
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4798      	blx	r3
  for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	3301      	adds	r3, #1
 8005476:	73bb      	strb	r3, [r7, #14]
 8005478:	4b07      	ldr	r3, [pc, #28]	@ (8005498 <SCH_HandleScheduledTask+0xb0>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	7bba      	ldrb	r2, [r7, #14]
 800547e:	429a      	cmp	r2, r3
 8005480:	d3df      	bcc.n	8005442 <SCH_HandleScheduledTask+0x5a>
      }
    }
  }
}
 8005482:	bf00      	nop
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	20000938 	.word	0x20000938
 8005490:	20000974 	.word	0x20000974
 8005494:	20000978 	.word	0x20000978
 8005498:	20000990 	.word	0x20000990

0800549c <__cvt>:
 800549c:	2b00      	cmp	r3, #0
 800549e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a2:	461d      	mov	r5, r3
 80054a4:	bfbb      	ittet	lt
 80054a6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80054aa:	461d      	movlt	r5, r3
 80054ac:	2300      	movge	r3, #0
 80054ae:	232d      	movlt	r3, #45	@ 0x2d
 80054b0:	b088      	sub	sp, #32
 80054b2:	4614      	mov	r4, r2
 80054b4:	bfb8      	it	lt
 80054b6:	4614      	movlt	r4, r2
 80054b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80054ba:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80054bc:	7013      	strb	r3, [r2, #0]
 80054be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80054c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80054c4:	f023 0820 	bic.w	r8, r3, #32
 80054c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054cc:	d005      	beq.n	80054da <__cvt+0x3e>
 80054ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054d2:	d100      	bne.n	80054d6 <__cvt+0x3a>
 80054d4:	3601      	adds	r6, #1
 80054d6:	2302      	movs	r3, #2
 80054d8:	e000      	b.n	80054dc <__cvt+0x40>
 80054da:	2303      	movs	r3, #3
 80054dc:	aa07      	add	r2, sp, #28
 80054de:	9204      	str	r2, [sp, #16]
 80054e0:	aa06      	add	r2, sp, #24
 80054e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80054e6:	e9cd 3600 	strd	r3, r6, [sp]
 80054ea:	4622      	mov	r2, r4
 80054ec:	462b      	mov	r3, r5
 80054ee:	f000 fe6f 	bl	80061d0 <_dtoa_r>
 80054f2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054f6:	4607      	mov	r7, r0
 80054f8:	d119      	bne.n	800552e <__cvt+0x92>
 80054fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054fc:	07db      	lsls	r3, r3, #31
 80054fe:	d50e      	bpl.n	800551e <__cvt+0x82>
 8005500:	eb00 0906 	add.w	r9, r0, r6
 8005504:	2200      	movs	r2, #0
 8005506:	2300      	movs	r3, #0
 8005508:	4620      	mov	r0, r4
 800550a:	4629      	mov	r1, r5
 800550c:	f7fb fb0a 	bl	8000b24 <__aeabi_dcmpeq>
 8005510:	b108      	cbz	r0, 8005516 <__cvt+0x7a>
 8005512:	f8cd 901c 	str.w	r9, [sp, #28]
 8005516:	2230      	movs	r2, #48	@ 0x30
 8005518:	9b07      	ldr	r3, [sp, #28]
 800551a:	454b      	cmp	r3, r9
 800551c:	d31e      	bcc.n	800555c <__cvt+0xc0>
 800551e:	4638      	mov	r0, r7
 8005520:	9b07      	ldr	r3, [sp, #28]
 8005522:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005524:	1bdb      	subs	r3, r3, r7
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	b008      	add	sp, #32
 800552a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005532:	eb00 0906 	add.w	r9, r0, r6
 8005536:	d1e5      	bne.n	8005504 <__cvt+0x68>
 8005538:	7803      	ldrb	r3, [r0, #0]
 800553a:	2b30      	cmp	r3, #48	@ 0x30
 800553c:	d10a      	bne.n	8005554 <__cvt+0xb8>
 800553e:	2200      	movs	r2, #0
 8005540:	2300      	movs	r3, #0
 8005542:	4620      	mov	r0, r4
 8005544:	4629      	mov	r1, r5
 8005546:	f7fb faed 	bl	8000b24 <__aeabi_dcmpeq>
 800554a:	b918      	cbnz	r0, 8005554 <__cvt+0xb8>
 800554c:	f1c6 0601 	rsb	r6, r6, #1
 8005550:	f8ca 6000 	str.w	r6, [sl]
 8005554:	f8da 3000 	ldr.w	r3, [sl]
 8005558:	4499      	add	r9, r3
 800555a:	e7d3      	b.n	8005504 <__cvt+0x68>
 800555c:	1c59      	adds	r1, r3, #1
 800555e:	9107      	str	r1, [sp, #28]
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e7d9      	b.n	8005518 <__cvt+0x7c>

08005564 <__exponent>:
 8005564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005566:	2900      	cmp	r1, #0
 8005568:	bfb6      	itet	lt
 800556a:	232d      	movlt	r3, #45	@ 0x2d
 800556c:	232b      	movge	r3, #43	@ 0x2b
 800556e:	4249      	neglt	r1, r1
 8005570:	2909      	cmp	r1, #9
 8005572:	7002      	strb	r2, [r0, #0]
 8005574:	7043      	strb	r3, [r0, #1]
 8005576:	dd29      	ble.n	80055cc <__exponent+0x68>
 8005578:	f10d 0307 	add.w	r3, sp, #7
 800557c:	461d      	mov	r5, r3
 800557e:	270a      	movs	r7, #10
 8005580:	fbb1 f6f7 	udiv	r6, r1, r7
 8005584:	461a      	mov	r2, r3
 8005586:	fb07 1416 	mls	r4, r7, r6, r1
 800558a:	3430      	adds	r4, #48	@ 0x30
 800558c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005590:	460c      	mov	r4, r1
 8005592:	2c63      	cmp	r4, #99	@ 0x63
 8005594:	4631      	mov	r1, r6
 8005596:	f103 33ff 	add.w	r3, r3, #4294967295
 800559a:	dcf1      	bgt.n	8005580 <__exponent+0x1c>
 800559c:	3130      	adds	r1, #48	@ 0x30
 800559e:	1e94      	subs	r4, r2, #2
 80055a0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055a4:	4623      	mov	r3, r4
 80055a6:	1c41      	adds	r1, r0, #1
 80055a8:	42ab      	cmp	r3, r5
 80055aa:	d30a      	bcc.n	80055c2 <__exponent+0x5e>
 80055ac:	f10d 0309 	add.w	r3, sp, #9
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	42ac      	cmp	r4, r5
 80055b4:	bf88      	it	hi
 80055b6:	2300      	movhi	r3, #0
 80055b8:	3302      	adds	r3, #2
 80055ba:	4403      	add	r3, r0
 80055bc:	1a18      	subs	r0, r3, r0
 80055be:	b003      	add	sp, #12
 80055c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055c6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055ca:	e7ed      	b.n	80055a8 <__exponent+0x44>
 80055cc:	2330      	movs	r3, #48	@ 0x30
 80055ce:	3130      	adds	r1, #48	@ 0x30
 80055d0:	7083      	strb	r3, [r0, #2]
 80055d2:	70c1      	strb	r1, [r0, #3]
 80055d4:	1d03      	adds	r3, r0, #4
 80055d6:	e7f1      	b.n	80055bc <__exponent+0x58>

080055d8 <_printf_float>:
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	b091      	sub	sp, #68	@ 0x44
 80055de:	460c      	mov	r4, r1
 80055e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80055e4:	4616      	mov	r6, r2
 80055e6:	461f      	mov	r7, r3
 80055e8:	4605      	mov	r5, r0
 80055ea:	f000 fce1 	bl	8005fb0 <_localeconv_r>
 80055ee:	6803      	ldr	r3, [r0, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	9308      	str	r3, [sp, #32]
 80055f4:	f7fa fdb6 	bl	8000164 <strlen>
 80055f8:	2300      	movs	r3, #0
 80055fa:	930e      	str	r3, [sp, #56]	@ 0x38
 80055fc:	f8d8 3000 	ldr.w	r3, [r8]
 8005600:	9009      	str	r0, [sp, #36]	@ 0x24
 8005602:	3307      	adds	r3, #7
 8005604:	f023 0307 	bic.w	r3, r3, #7
 8005608:	f103 0208 	add.w	r2, r3, #8
 800560c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005610:	f8d4 b000 	ldr.w	fp, [r4]
 8005614:	f8c8 2000 	str.w	r2, [r8]
 8005618:	e9d3 8900 	ldrd	r8, r9, [r3]
 800561c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005622:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005626:	f04f 32ff 	mov.w	r2, #4294967295
 800562a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800562e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005632:	4b9c      	ldr	r3, [pc, #624]	@ (80058a4 <_printf_float+0x2cc>)
 8005634:	f7fb faa8 	bl	8000b88 <__aeabi_dcmpun>
 8005638:	bb70      	cbnz	r0, 8005698 <_printf_float+0xc0>
 800563a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800563e:	f04f 32ff 	mov.w	r2, #4294967295
 8005642:	4b98      	ldr	r3, [pc, #608]	@ (80058a4 <_printf_float+0x2cc>)
 8005644:	f7fb fa82 	bl	8000b4c <__aeabi_dcmple>
 8005648:	bb30      	cbnz	r0, 8005698 <_printf_float+0xc0>
 800564a:	2200      	movs	r2, #0
 800564c:	2300      	movs	r3, #0
 800564e:	4640      	mov	r0, r8
 8005650:	4649      	mov	r1, r9
 8005652:	f7fb fa71 	bl	8000b38 <__aeabi_dcmplt>
 8005656:	b110      	cbz	r0, 800565e <_printf_float+0x86>
 8005658:	232d      	movs	r3, #45	@ 0x2d
 800565a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800565e:	4a92      	ldr	r2, [pc, #584]	@ (80058a8 <_printf_float+0x2d0>)
 8005660:	4b92      	ldr	r3, [pc, #584]	@ (80058ac <_printf_float+0x2d4>)
 8005662:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005666:	bf94      	ite	ls
 8005668:	4690      	movls	r8, r2
 800566a:	4698      	movhi	r8, r3
 800566c:	2303      	movs	r3, #3
 800566e:	f04f 0900 	mov.w	r9, #0
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	f02b 0304 	bic.w	r3, fp, #4
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	4633      	mov	r3, r6
 800567c:	4621      	mov	r1, r4
 800567e:	4628      	mov	r0, r5
 8005680:	9700      	str	r7, [sp, #0]
 8005682:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005684:	f000 f9d4 	bl	8005a30 <_printf_common>
 8005688:	3001      	adds	r0, #1
 800568a:	f040 8090 	bne.w	80057ae <_printf_float+0x1d6>
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	b011      	add	sp, #68	@ 0x44
 8005694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	4640      	mov	r0, r8
 800569e:	4649      	mov	r1, r9
 80056a0:	f7fb fa72 	bl	8000b88 <__aeabi_dcmpun>
 80056a4:	b148      	cbz	r0, 80056ba <_printf_float+0xe2>
 80056a6:	464b      	mov	r3, r9
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bfb8      	it	lt
 80056ac:	232d      	movlt	r3, #45	@ 0x2d
 80056ae:	4a80      	ldr	r2, [pc, #512]	@ (80058b0 <_printf_float+0x2d8>)
 80056b0:	bfb8      	it	lt
 80056b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056b6:	4b7f      	ldr	r3, [pc, #508]	@ (80058b4 <_printf_float+0x2dc>)
 80056b8:	e7d3      	b.n	8005662 <_printf_float+0x8a>
 80056ba:	6863      	ldr	r3, [r4, #4]
 80056bc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	d13f      	bne.n	8005744 <_printf_float+0x16c>
 80056c4:	2306      	movs	r3, #6
 80056c6:	6063      	str	r3, [r4, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80056ce:	6023      	str	r3, [r4, #0]
 80056d0:	9206      	str	r2, [sp, #24]
 80056d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80056d4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80056d8:	aa0d      	add	r2, sp, #52	@ 0x34
 80056da:	9203      	str	r2, [sp, #12]
 80056dc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80056e0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80056e4:	6863      	ldr	r3, [r4, #4]
 80056e6:	4642      	mov	r2, r8
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	4628      	mov	r0, r5
 80056ec:	464b      	mov	r3, r9
 80056ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80056f0:	f7ff fed4 	bl	800549c <__cvt>
 80056f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80056f6:	4680      	mov	r8, r0
 80056f8:	2947      	cmp	r1, #71	@ 0x47
 80056fa:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80056fc:	d128      	bne.n	8005750 <_printf_float+0x178>
 80056fe:	1cc8      	adds	r0, r1, #3
 8005700:	db02      	blt.n	8005708 <_printf_float+0x130>
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	4299      	cmp	r1, r3
 8005706:	dd40      	ble.n	800578a <_printf_float+0x1b2>
 8005708:	f1aa 0a02 	sub.w	sl, sl, #2
 800570c:	fa5f fa8a 	uxtb.w	sl, sl
 8005710:	4652      	mov	r2, sl
 8005712:	3901      	subs	r1, #1
 8005714:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005718:	910d      	str	r1, [sp, #52]	@ 0x34
 800571a:	f7ff ff23 	bl	8005564 <__exponent>
 800571e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005720:	4681      	mov	r9, r0
 8005722:	1813      	adds	r3, r2, r0
 8005724:	2a01      	cmp	r2, #1
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	dc02      	bgt.n	8005730 <_printf_float+0x158>
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	07d2      	lsls	r2, r2, #31
 800572e:	d501      	bpl.n	8005734 <_printf_float+0x15c>
 8005730:	3301      	adds	r3, #1
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005738:	2b00      	cmp	r3, #0
 800573a:	d09e      	beq.n	800567a <_printf_float+0xa2>
 800573c:	232d      	movs	r3, #45	@ 0x2d
 800573e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005742:	e79a      	b.n	800567a <_printf_float+0xa2>
 8005744:	2947      	cmp	r1, #71	@ 0x47
 8005746:	d1bf      	bne.n	80056c8 <_printf_float+0xf0>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1bd      	bne.n	80056c8 <_printf_float+0xf0>
 800574c:	2301      	movs	r3, #1
 800574e:	e7ba      	b.n	80056c6 <_printf_float+0xee>
 8005750:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005754:	d9dc      	bls.n	8005710 <_printf_float+0x138>
 8005756:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800575a:	d118      	bne.n	800578e <_printf_float+0x1b6>
 800575c:	2900      	cmp	r1, #0
 800575e:	6863      	ldr	r3, [r4, #4]
 8005760:	dd0b      	ble.n	800577a <_printf_float+0x1a2>
 8005762:	6121      	str	r1, [r4, #16]
 8005764:	b913      	cbnz	r3, 800576c <_printf_float+0x194>
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	07d0      	lsls	r0, r2, #31
 800576a:	d502      	bpl.n	8005772 <_printf_float+0x19a>
 800576c:	3301      	adds	r3, #1
 800576e:	440b      	add	r3, r1
 8005770:	6123      	str	r3, [r4, #16]
 8005772:	f04f 0900 	mov.w	r9, #0
 8005776:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005778:	e7dc      	b.n	8005734 <_printf_float+0x15c>
 800577a:	b913      	cbnz	r3, 8005782 <_printf_float+0x1aa>
 800577c:	6822      	ldr	r2, [r4, #0]
 800577e:	07d2      	lsls	r2, r2, #31
 8005780:	d501      	bpl.n	8005786 <_printf_float+0x1ae>
 8005782:	3302      	adds	r3, #2
 8005784:	e7f4      	b.n	8005770 <_printf_float+0x198>
 8005786:	2301      	movs	r3, #1
 8005788:	e7f2      	b.n	8005770 <_printf_float+0x198>
 800578a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800578e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005790:	4299      	cmp	r1, r3
 8005792:	db05      	blt.n	80057a0 <_printf_float+0x1c8>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	6121      	str	r1, [r4, #16]
 8005798:	07d8      	lsls	r0, r3, #31
 800579a:	d5ea      	bpl.n	8005772 <_printf_float+0x19a>
 800579c:	1c4b      	adds	r3, r1, #1
 800579e:	e7e7      	b.n	8005770 <_printf_float+0x198>
 80057a0:	2900      	cmp	r1, #0
 80057a2:	bfcc      	ite	gt
 80057a4:	2201      	movgt	r2, #1
 80057a6:	f1c1 0202 	rsble	r2, r1, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	e7e0      	b.n	8005770 <_printf_float+0x198>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	055a      	lsls	r2, r3, #21
 80057b2:	d407      	bmi.n	80057c4 <_printf_float+0x1ec>
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	4642      	mov	r2, r8
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	d12b      	bne.n	800581a <_printf_float+0x242>
 80057c2:	e764      	b.n	800568e <_printf_float+0xb6>
 80057c4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057c8:	f240 80dc 	bls.w	8005984 <_printf_float+0x3ac>
 80057cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057d0:	2200      	movs	r2, #0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f7fb f9a6 	bl	8000b24 <__aeabi_dcmpeq>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d033      	beq.n	8005844 <_printf_float+0x26c>
 80057dc:	2301      	movs	r3, #1
 80057de:	4631      	mov	r1, r6
 80057e0:	4628      	mov	r0, r5
 80057e2:	4a35      	ldr	r2, [pc, #212]	@ (80058b8 <_printf_float+0x2e0>)
 80057e4:	47b8      	blx	r7
 80057e6:	3001      	adds	r0, #1
 80057e8:	f43f af51 	beq.w	800568e <_printf_float+0xb6>
 80057ec:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80057f0:	4543      	cmp	r3, r8
 80057f2:	db02      	blt.n	80057fa <_printf_float+0x222>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07d8      	lsls	r0, r3, #31
 80057f8:	d50f      	bpl.n	800581a <_printf_float+0x242>
 80057fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80057fe:	4631      	mov	r1, r6
 8005800:	4628      	mov	r0, r5
 8005802:	47b8      	blx	r7
 8005804:	3001      	adds	r0, #1
 8005806:	f43f af42 	beq.w	800568e <_printf_float+0xb6>
 800580a:	f04f 0900 	mov.w	r9, #0
 800580e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005812:	f104 0a1a 	add.w	sl, r4, #26
 8005816:	45c8      	cmp	r8, r9
 8005818:	dc09      	bgt.n	800582e <_printf_float+0x256>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	079b      	lsls	r3, r3, #30
 800581e:	f100 8102 	bmi.w	8005a26 <_printf_float+0x44e>
 8005822:	68e0      	ldr	r0, [r4, #12]
 8005824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005826:	4298      	cmp	r0, r3
 8005828:	bfb8      	it	lt
 800582a:	4618      	movlt	r0, r3
 800582c:	e731      	b.n	8005692 <_printf_float+0xba>
 800582e:	2301      	movs	r3, #1
 8005830:	4652      	mov	r2, sl
 8005832:	4631      	mov	r1, r6
 8005834:	4628      	mov	r0, r5
 8005836:	47b8      	blx	r7
 8005838:	3001      	adds	r0, #1
 800583a:	f43f af28 	beq.w	800568e <_printf_float+0xb6>
 800583e:	f109 0901 	add.w	r9, r9, #1
 8005842:	e7e8      	b.n	8005816 <_printf_float+0x23e>
 8005844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005846:	2b00      	cmp	r3, #0
 8005848:	dc38      	bgt.n	80058bc <_printf_float+0x2e4>
 800584a:	2301      	movs	r3, #1
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	4a19      	ldr	r2, [pc, #100]	@ (80058b8 <_printf_float+0x2e0>)
 8005852:	47b8      	blx	r7
 8005854:	3001      	adds	r0, #1
 8005856:	f43f af1a 	beq.w	800568e <_printf_float+0xb6>
 800585a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800585e:	ea59 0303 	orrs.w	r3, r9, r3
 8005862:	d102      	bne.n	800586a <_printf_float+0x292>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07d9      	lsls	r1, r3, #31
 8005868:	d5d7      	bpl.n	800581a <_printf_float+0x242>
 800586a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800586e:	4631      	mov	r1, r6
 8005870:	4628      	mov	r0, r5
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f af0a 	beq.w	800568e <_printf_float+0xb6>
 800587a:	f04f 0a00 	mov.w	sl, #0
 800587e:	f104 0b1a 	add.w	fp, r4, #26
 8005882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005884:	425b      	negs	r3, r3
 8005886:	4553      	cmp	r3, sl
 8005888:	dc01      	bgt.n	800588e <_printf_float+0x2b6>
 800588a:	464b      	mov	r3, r9
 800588c:	e793      	b.n	80057b6 <_printf_float+0x1de>
 800588e:	2301      	movs	r3, #1
 8005890:	465a      	mov	r2, fp
 8005892:	4631      	mov	r1, r6
 8005894:	4628      	mov	r0, r5
 8005896:	47b8      	blx	r7
 8005898:	3001      	adds	r0, #1
 800589a:	f43f aef8 	beq.w	800568e <_printf_float+0xb6>
 800589e:	f10a 0a01 	add.w	sl, sl, #1
 80058a2:	e7ee      	b.n	8005882 <_printf_float+0x2aa>
 80058a4:	7fefffff 	.word	0x7fefffff
 80058a8:	08008368 	.word	0x08008368
 80058ac:	0800836c 	.word	0x0800836c
 80058b0:	08008370 	.word	0x08008370
 80058b4:	08008374 	.word	0x08008374
 80058b8:	08008378 	.word	0x08008378
 80058bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058be:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058c2:	4553      	cmp	r3, sl
 80058c4:	bfa8      	it	ge
 80058c6:	4653      	movge	r3, sl
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	4699      	mov	r9, r3
 80058cc:	dc36      	bgt.n	800593c <_printf_float+0x364>
 80058ce:	f04f 0b00 	mov.w	fp, #0
 80058d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058d6:	f104 021a 	add.w	r2, r4, #26
 80058da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80058de:	eba3 0309 	sub.w	r3, r3, r9
 80058e2:	455b      	cmp	r3, fp
 80058e4:	dc31      	bgt.n	800594a <_printf_float+0x372>
 80058e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058e8:	459a      	cmp	sl, r3
 80058ea:	dc3a      	bgt.n	8005962 <_printf_float+0x38a>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	07da      	lsls	r2, r3, #31
 80058f0:	d437      	bmi.n	8005962 <_printf_float+0x38a>
 80058f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058f4:	ebaa 0903 	sub.w	r9, sl, r3
 80058f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80058fa:	ebaa 0303 	sub.w	r3, sl, r3
 80058fe:	4599      	cmp	r9, r3
 8005900:	bfa8      	it	ge
 8005902:	4699      	movge	r9, r3
 8005904:	f1b9 0f00 	cmp.w	r9, #0
 8005908:	dc33      	bgt.n	8005972 <_printf_float+0x39a>
 800590a:	f04f 0800 	mov.w	r8, #0
 800590e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005912:	f104 0b1a 	add.w	fp, r4, #26
 8005916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005918:	ebaa 0303 	sub.w	r3, sl, r3
 800591c:	eba3 0309 	sub.w	r3, r3, r9
 8005920:	4543      	cmp	r3, r8
 8005922:	f77f af7a 	ble.w	800581a <_printf_float+0x242>
 8005926:	2301      	movs	r3, #1
 8005928:	465a      	mov	r2, fp
 800592a:	4631      	mov	r1, r6
 800592c:	4628      	mov	r0, r5
 800592e:	47b8      	blx	r7
 8005930:	3001      	adds	r0, #1
 8005932:	f43f aeac 	beq.w	800568e <_printf_float+0xb6>
 8005936:	f108 0801 	add.w	r8, r8, #1
 800593a:	e7ec      	b.n	8005916 <_printf_float+0x33e>
 800593c:	4642      	mov	r2, r8
 800593e:	4631      	mov	r1, r6
 8005940:	4628      	mov	r0, r5
 8005942:	47b8      	blx	r7
 8005944:	3001      	adds	r0, #1
 8005946:	d1c2      	bne.n	80058ce <_printf_float+0x2f6>
 8005948:	e6a1      	b.n	800568e <_printf_float+0xb6>
 800594a:	2301      	movs	r3, #1
 800594c:	4631      	mov	r1, r6
 800594e:	4628      	mov	r0, r5
 8005950:	920a      	str	r2, [sp, #40]	@ 0x28
 8005952:	47b8      	blx	r7
 8005954:	3001      	adds	r0, #1
 8005956:	f43f ae9a 	beq.w	800568e <_printf_float+0xb6>
 800595a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800595c:	f10b 0b01 	add.w	fp, fp, #1
 8005960:	e7bb      	b.n	80058da <_printf_float+0x302>
 8005962:	4631      	mov	r1, r6
 8005964:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005968:	4628      	mov	r0, r5
 800596a:	47b8      	blx	r7
 800596c:	3001      	adds	r0, #1
 800596e:	d1c0      	bne.n	80058f2 <_printf_float+0x31a>
 8005970:	e68d      	b.n	800568e <_printf_float+0xb6>
 8005972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005974:	464b      	mov	r3, r9
 8005976:	4631      	mov	r1, r6
 8005978:	4628      	mov	r0, r5
 800597a:	4442      	add	r2, r8
 800597c:	47b8      	blx	r7
 800597e:	3001      	adds	r0, #1
 8005980:	d1c3      	bne.n	800590a <_printf_float+0x332>
 8005982:	e684      	b.n	800568e <_printf_float+0xb6>
 8005984:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005988:	f1ba 0f01 	cmp.w	sl, #1
 800598c:	dc01      	bgt.n	8005992 <_printf_float+0x3ba>
 800598e:	07db      	lsls	r3, r3, #31
 8005990:	d536      	bpl.n	8005a00 <_printf_float+0x428>
 8005992:	2301      	movs	r3, #1
 8005994:	4642      	mov	r2, r8
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	f43f ae76 	beq.w	800568e <_printf_float+0xb6>
 80059a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f ae6e 	beq.w	800568e <_printf_float+0xb6>
 80059b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059b6:	2200      	movs	r2, #0
 80059b8:	2300      	movs	r3, #0
 80059ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059be:	f7fb f8b1 	bl	8000b24 <__aeabi_dcmpeq>
 80059c2:	b9c0      	cbnz	r0, 80059f6 <_printf_float+0x41e>
 80059c4:	4653      	mov	r3, sl
 80059c6:	f108 0201 	add.w	r2, r8, #1
 80059ca:	4631      	mov	r1, r6
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b8      	blx	r7
 80059d0:	3001      	adds	r0, #1
 80059d2:	d10c      	bne.n	80059ee <_printf_float+0x416>
 80059d4:	e65b      	b.n	800568e <_printf_float+0xb6>
 80059d6:	2301      	movs	r3, #1
 80059d8:	465a      	mov	r2, fp
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f ae54 	beq.w	800568e <_printf_float+0xb6>
 80059e6:	f108 0801 	add.w	r8, r8, #1
 80059ea:	45d0      	cmp	r8, sl
 80059ec:	dbf3      	blt.n	80059d6 <_printf_float+0x3fe>
 80059ee:	464b      	mov	r3, r9
 80059f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059f4:	e6e0      	b.n	80057b8 <_printf_float+0x1e0>
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	f104 0b1a 	add.w	fp, r4, #26
 80059fe:	e7f4      	b.n	80059ea <_printf_float+0x412>
 8005a00:	2301      	movs	r3, #1
 8005a02:	4642      	mov	r2, r8
 8005a04:	e7e1      	b.n	80059ca <_printf_float+0x3f2>
 8005a06:	2301      	movs	r3, #1
 8005a08:	464a      	mov	r2, r9
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	f43f ae3c 	beq.w	800568e <_printf_float+0xb6>
 8005a16:	f108 0801 	add.w	r8, r8, #1
 8005a1a:	68e3      	ldr	r3, [r4, #12]
 8005a1c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a1e:	1a5b      	subs	r3, r3, r1
 8005a20:	4543      	cmp	r3, r8
 8005a22:	dcf0      	bgt.n	8005a06 <_printf_float+0x42e>
 8005a24:	e6fd      	b.n	8005822 <_printf_float+0x24a>
 8005a26:	f04f 0800 	mov.w	r8, #0
 8005a2a:	f104 0919 	add.w	r9, r4, #25
 8005a2e:	e7f4      	b.n	8005a1a <_printf_float+0x442>

08005a30 <_printf_common>:
 8005a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a34:	4616      	mov	r6, r2
 8005a36:	4698      	mov	r8, r3
 8005a38:	688a      	ldr	r2, [r1, #8]
 8005a3a:	690b      	ldr	r3, [r1, #16]
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bfb8      	it	lt
 8005a42:	4613      	movlt	r3, r2
 8005a44:	6033      	str	r3, [r6, #0]
 8005a46:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a50:	b10a      	cbz	r2, 8005a56 <_printf_common+0x26>
 8005a52:	3301      	adds	r3, #1
 8005a54:	6033      	str	r3, [r6, #0]
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	0699      	lsls	r1, r3, #26
 8005a5a:	bf42      	ittt	mi
 8005a5c:	6833      	ldrmi	r3, [r6, #0]
 8005a5e:	3302      	addmi	r3, #2
 8005a60:	6033      	strmi	r3, [r6, #0]
 8005a62:	6825      	ldr	r5, [r4, #0]
 8005a64:	f015 0506 	ands.w	r5, r5, #6
 8005a68:	d106      	bne.n	8005a78 <_printf_common+0x48>
 8005a6a:	f104 0a19 	add.w	sl, r4, #25
 8005a6e:	68e3      	ldr	r3, [r4, #12]
 8005a70:	6832      	ldr	r2, [r6, #0]
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	42ab      	cmp	r3, r5
 8005a76:	dc2b      	bgt.n	8005ad0 <_printf_common+0xa0>
 8005a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a7c:	6822      	ldr	r2, [r4, #0]
 8005a7e:	3b00      	subs	r3, #0
 8005a80:	bf18      	it	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	0692      	lsls	r2, r2, #26
 8005a86:	d430      	bmi.n	8005aea <_printf_common+0xba>
 8005a88:	4641      	mov	r1, r8
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a90:	47c8      	blx	r9
 8005a92:	3001      	adds	r0, #1
 8005a94:	d023      	beq.n	8005ade <_printf_common+0xae>
 8005a96:	6823      	ldr	r3, [r4, #0]
 8005a98:	6922      	ldr	r2, [r4, #16]
 8005a9a:	f003 0306 	and.w	r3, r3, #6
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	bf14      	ite	ne
 8005aa2:	2500      	movne	r5, #0
 8005aa4:	6833      	ldreq	r3, [r6, #0]
 8005aa6:	f04f 0600 	mov.w	r6, #0
 8005aaa:	bf08      	it	eq
 8005aac:	68e5      	ldreq	r5, [r4, #12]
 8005aae:	f104 041a 	add.w	r4, r4, #26
 8005ab2:	bf08      	it	eq
 8005ab4:	1aed      	subeq	r5, r5, r3
 8005ab6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005aba:	bf08      	it	eq
 8005abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	bfc4      	itt	gt
 8005ac4:	1a9b      	subgt	r3, r3, r2
 8005ac6:	18ed      	addgt	r5, r5, r3
 8005ac8:	42b5      	cmp	r5, r6
 8005aca:	d11a      	bne.n	8005b02 <_printf_common+0xd2>
 8005acc:	2000      	movs	r0, #0
 8005ace:	e008      	b.n	8005ae2 <_printf_common+0xb2>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	4652      	mov	r2, sl
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c8      	blx	r9
 8005ada:	3001      	adds	r0, #1
 8005adc:	d103      	bne.n	8005ae6 <_printf_common+0xb6>
 8005ade:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae6:	3501      	adds	r5, #1
 8005ae8:	e7c1      	b.n	8005a6e <_printf_common+0x3e>
 8005aea:	2030      	movs	r0, #48	@ 0x30
 8005aec:	18e1      	adds	r1, r4, r3
 8005aee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005af2:	1c5a      	adds	r2, r3, #1
 8005af4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005af8:	4422      	add	r2, r4
 8005afa:	3302      	adds	r3, #2
 8005afc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b00:	e7c2      	b.n	8005a88 <_printf_common+0x58>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4622      	mov	r2, r4
 8005b06:	4641      	mov	r1, r8
 8005b08:	4638      	mov	r0, r7
 8005b0a:	47c8      	blx	r9
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d0e6      	beq.n	8005ade <_printf_common+0xae>
 8005b10:	3601      	adds	r6, #1
 8005b12:	e7d9      	b.n	8005ac8 <_printf_common+0x98>

08005b14 <_printf_i>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	7e0f      	ldrb	r7, [r1, #24]
 8005b1a:	4691      	mov	r9, r2
 8005b1c:	2f78      	cmp	r7, #120	@ 0x78
 8005b1e:	4680      	mov	r8, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	469a      	mov	sl, r3
 8005b24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b2a:	d807      	bhi.n	8005b3c <_printf_i+0x28>
 8005b2c:	2f62      	cmp	r7, #98	@ 0x62
 8005b2e:	d80a      	bhi.n	8005b46 <_printf_i+0x32>
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	f000 80d3 	beq.w	8005cdc <_printf_i+0x1c8>
 8005b36:	2f58      	cmp	r7, #88	@ 0x58
 8005b38:	f000 80ba 	beq.w	8005cb0 <_printf_i+0x19c>
 8005b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b44:	e03a      	b.n	8005bbc <_printf_i+0xa8>
 8005b46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b4a:	2b15      	cmp	r3, #21
 8005b4c:	d8f6      	bhi.n	8005b3c <_printf_i+0x28>
 8005b4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b54 <_printf_i+0x40>)
 8005b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bc1 	.word	0x08005bc1
 8005b5c:	08005b3d 	.word	0x08005b3d
 8005b60:	08005b3d 	.word	0x08005b3d
 8005b64:	08005b3d 	.word	0x08005b3d
 8005b68:	08005b3d 	.word	0x08005b3d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b3d 	.word	0x08005b3d
 8005b74:	08005b3d 	.word	0x08005b3d
 8005b78:	08005b3d 	.word	0x08005b3d
 8005b7c:	08005b3d 	.word	0x08005b3d
 8005b80:	08005cc3 	.word	0x08005cc3
 8005b84:	08005beb 	.word	0x08005beb
 8005b88:	08005c7d 	.word	0x08005c7d
 8005b8c:	08005b3d 	.word	0x08005b3d
 8005b90:	08005b3d 	.word	0x08005b3d
 8005b94:	08005ce5 	.word	0x08005ce5
 8005b98:	08005b3d 	.word	0x08005b3d
 8005b9c:	08005beb 	.word	0x08005beb
 8005ba0:	08005b3d 	.word	0x08005b3d
 8005ba4:	08005b3d 	.word	0x08005b3d
 8005ba8:	08005c85 	.word	0x08005c85
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6032      	str	r2, [r6, #0]
 8005bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e09e      	b.n	8005cfe <_printf_i+0x1ea>
 8005bc0:	6833      	ldr	r3, [r6, #0]
 8005bc2:	6820      	ldr	r0, [r4, #0]
 8005bc4:	1d19      	adds	r1, r3, #4
 8005bc6:	6031      	str	r1, [r6, #0]
 8005bc8:	0606      	lsls	r6, r0, #24
 8005bca:	d501      	bpl.n	8005bd0 <_printf_i+0xbc>
 8005bcc:	681d      	ldr	r5, [r3, #0]
 8005bce:	e003      	b.n	8005bd8 <_printf_i+0xc4>
 8005bd0:	0645      	lsls	r5, r0, #25
 8005bd2:	d5fb      	bpl.n	8005bcc <_printf_i+0xb8>
 8005bd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	da03      	bge.n	8005be4 <_printf_i+0xd0>
 8005bdc:	232d      	movs	r3, #45	@ 0x2d
 8005bde:	426d      	negs	r5, r5
 8005be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be4:	230a      	movs	r3, #10
 8005be6:	4859      	ldr	r0, [pc, #356]	@ (8005d4c <_printf_i+0x238>)
 8005be8:	e011      	b.n	8005c0e <_printf_i+0xfa>
 8005bea:	6821      	ldr	r1, [r4, #0]
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	0608      	lsls	r0, r1, #24
 8005bf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bf4:	d402      	bmi.n	8005bfc <_printf_i+0xe8>
 8005bf6:	0649      	lsls	r1, r1, #25
 8005bf8:	bf48      	it	mi
 8005bfa:	b2ad      	uxthmi	r5, r5
 8005bfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bfe:	6033      	str	r3, [r6, #0]
 8005c00:	bf14      	ite	ne
 8005c02:	230a      	movne	r3, #10
 8005c04:	2308      	moveq	r3, #8
 8005c06:	4851      	ldr	r0, [pc, #324]	@ (8005d4c <_printf_i+0x238>)
 8005c08:	2100      	movs	r1, #0
 8005c0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c0e:	6866      	ldr	r6, [r4, #4]
 8005c10:	2e00      	cmp	r6, #0
 8005c12:	bfa8      	it	ge
 8005c14:	6821      	ldrge	r1, [r4, #0]
 8005c16:	60a6      	str	r6, [r4, #8]
 8005c18:	bfa4      	itt	ge
 8005c1a:	f021 0104 	bicge.w	r1, r1, #4
 8005c1e:	6021      	strge	r1, [r4, #0]
 8005c20:	b90d      	cbnz	r5, 8005c26 <_printf_i+0x112>
 8005c22:	2e00      	cmp	r6, #0
 8005c24:	d04b      	beq.n	8005cbe <_printf_i+0x1aa>
 8005c26:	4616      	mov	r6, r2
 8005c28:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c2c:	fb03 5711 	mls	r7, r3, r1, r5
 8005c30:	5dc7      	ldrb	r7, [r0, r7]
 8005c32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c36:	462f      	mov	r7, r5
 8005c38:	42bb      	cmp	r3, r7
 8005c3a:	460d      	mov	r5, r1
 8005c3c:	d9f4      	bls.n	8005c28 <_printf_i+0x114>
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d10b      	bne.n	8005c5a <_printf_i+0x146>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	07df      	lsls	r7, r3, #31
 8005c46:	d508      	bpl.n	8005c5a <_printf_i+0x146>
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	6861      	ldr	r1, [r4, #4]
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	bfde      	ittt	le
 8005c50:	2330      	movle	r3, #48	@ 0x30
 8005c52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c5a:	1b92      	subs	r2, r2, r6
 8005c5c:	6122      	str	r2, [r4, #16]
 8005c5e:	464b      	mov	r3, r9
 8005c60:	4621      	mov	r1, r4
 8005c62:	4640      	mov	r0, r8
 8005c64:	f8cd a000 	str.w	sl, [sp]
 8005c68:	aa03      	add	r2, sp, #12
 8005c6a:	f7ff fee1 	bl	8005a30 <_printf_common>
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d14a      	bne.n	8005d08 <_printf_i+0x1f4>
 8005c72:	f04f 30ff 	mov.w	r0, #4294967295
 8005c76:	b004      	add	sp, #16
 8005c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	f043 0320 	orr.w	r3, r3, #32
 8005c82:	6023      	str	r3, [r4, #0]
 8005c84:	2778      	movs	r7, #120	@ 0x78
 8005c86:	4832      	ldr	r0, [pc, #200]	@ (8005d50 <_printf_i+0x23c>)
 8005c88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	6831      	ldr	r1, [r6, #0]
 8005c90:	061f      	lsls	r7, r3, #24
 8005c92:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c96:	d402      	bmi.n	8005c9e <_printf_i+0x18a>
 8005c98:	065f      	lsls	r7, r3, #25
 8005c9a:	bf48      	it	mi
 8005c9c:	b2ad      	uxthmi	r5, r5
 8005c9e:	6031      	str	r1, [r6, #0]
 8005ca0:	07d9      	lsls	r1, r3, #31
 8005ca2:	bf44      	itt	mi
 8005ca4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ca8:	6023      	strmi	r3, [r4, #0]
 8005caa:	b11d      	cbz	r5, 8005cb4 <_printf_i+0x1a0>
 8005cac:	2310      	movs	r3, #16
 8005cae:	e7ab      	b.n	8005c08 <_printf_i+0xf4>
 8005cb0:	4826      	ldr	r0, [pc, #152]	@ (8005d4c <_printf_i+0x238>)
 8005cb2:	e7e9      	b.n	8005c88 <_printf_i+0x174>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	f023 0320 	bic.w	r3, r3, #32
 8005cba:	6023      	str	r3, [r4, #0]
 8005cbc:	e7f6      	b.n	8005cac <_printf_i+0x198>
 8005cbe:	4616      	mov	r6, r2
 8005cc0:	e7bd      	b.n	8005c3e <_printf_i+0x12a>
 8005cc2:	6833      	ldr	r3, [r6, #0]
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	1d18      	adds	r0, r3, #4
 8005cc8:	6961      	ldr	r1, [r4, #20]
 8005cca:	6030      	str	r0, [r6, #0]
 8005ccc:	062e      	lsls	r6, r5, #24
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	d501      	bpl.n	8005cd6 <_printf_i+0x1c2>
 8005cd2:	6019      	str	r1, [r3, #0]
 8005cd4:	e002      	b.n	8005cdc <_printf_i+0x1c8>
 8005cd6:	0668      	lsls	r0, r5, #25
 8005cd8:	d5fb      	bpl.n	8005cd2 <_printf_i+0x1be>
 8005cda:	8019      	strh	r1, [r3, #0]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4616      	mov	r6, r2
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	e7bc      	b.n	8005c5e <_printf_i+0x14a>
 8005ce4:	6833      	ldr	r3, [r6, #0]
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	1d1a      	adds	r2, r3, #4
 8005cea:	6032      	str	r2, [r6, #0]
 8005cec:	681e      	ldr	r6, [r3, #0]
 8005cee:	6862      	ldr	r2, [r4, #4]
 8005cf0:	4630      	mov	r0, r6
 8005cf2:	f000 f9d4 	bl	800609e <memchr>
 8005cf6:	b108      	cbz	r0, 8005cfc <_printf_i+0x1e8>
 8005cf8:	1b80      	subs	r0, r0, r6
 8005cfa:	6060      	str	r0, [r4, #4]
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	2300      	movs	r3, #0
 8005d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d06:	e7aa      	b.n	8005c5e <_printf_i+0x14a>
 8005d08:	4632      	mov	r2, r6
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	47d0      	blx	sl
 8005d12:	3001      	adds	r0, #1
 8005d14:	d0ad      	beq.n	8005c72 <_printf_i+0x15e>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	079b      	lsls	r3, r3, #30
 8005d1a:	d413      	bmi.n	8005d44 <_printf_i+0x230>
 8005d1c:	68e0      	ldr	r0, [r4, #12]
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	4298      	cmp	r0, r3
 8005d22:	bfb8      	it	lt
 8005d24:	4618      	movlt	r0, r3
 8005d26:	e7a6      	b.n	8005c76 <_printf_i+0x162>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	4640      	mov	r0, r8
 8005d30:	47d0      	blx	sl
 8005d32:	3001      	adds	r0, #1
 8005d34:	d09d      	beq.n	8005c72 <_printf_i+0x15e>
 8005d36:	3501      	adds	r5, #1
 8005d38:	68e3      	ldr	r3, [r4, #12]
 8005d3a:	9903      	ldr	r1, [sp, #12]
 8005d3c:	1a5b      	subs	r3, r3, r1
 8005d3e:	42ab      	cmp	r3, r5
 8005d40:	dcf2      	bgt.n	8005d28 <_printf_i+0x214>
 8005d42:	e7eb      	b.n	8005d1c <_printf_i+0x208>
 8005d44:	2500      	movs	r5, #0
 8005d46:	f104 0619 	add.w	r6, r4, #25
 8005d4a:	e7f5      	b.n	8005d38 <_printf_i+0x224>
 8005d4c:	0800837a 	.word	0x0800837a
 8005d50:	0800838b 	.word	0x0800838b

08005d54 <std>:
 8005d54:	2300      	movs	r3, #0
 8005d56:	b510      	push	{r4, lr}
 8005d58:	4604      	mov	r4, r0
 8005d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d62:	6083      	str	r3, [r0, #8]
 8005d64:	8181      	strh	r1, [r0, #12]
 8005d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d68:	81c2      	strh	r2, [r0, #14]
 8005d6a:	6183      	str	r3, [r0, #24]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	2208      	movs	r2, #8
 8005d70:	305c      	adds	r0, #92	@ 0x5c
 8005d72:	f000 f914 	bl	8005f9e <memset>
 8005d76:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <std+0x58>)
 8005d78:	6224      	str	r4, [r4, #32]
 8005d7a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005db0 <std+0x5c>)
 8005d7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d80:	4b0c      	ldr	r3, [pc, #48]	@ (8005db4 <std+0x60>)
 8005d82:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d84:	4b0c      	ldr	r3, [pc, #48]	@ (8005db8 <std+0x64>)
 8005d86:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d88:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <std+0x68>)
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	d006      	beq.n	8005d9c <std+0x48>
 8005d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d92:	4294      	cmp	r4, r2
 8005d94:	d002      	beq.n	8005d9c <std+0x48>
 8005d96:	33d0      	adds	r3, #208	@ 0xd0
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	d105      	bne.n	8005da8 <std+0x54>
 8005d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f000 b978 	b.w	8006098 <__retarget_lock_init_recursive>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	08005f19 	.word	0x08005f19
 8005db0:	08005f3b 	.word	0x08005f3b
 8005db4:	08005f73 	.word	0x08005f73
 8005db8:	08005f97 	.word	0x08005f97
 8005dbc:	200009a0 	.word	0x200009a0

08005dc0 <stdio_exit_handler>:
 8005dc0:	4a02      	ldr	r2, [pc, #8]	@ (8005dcc <stdio_exit_handler+0xc>)
 8005dc2:	4903      	ldr	r1, [pc, #12]	@ (8005dd0 <stdio_exit_handler+0x10>)
 8005dc4:	4803      	ldr	r0, [pc, #12]	@ (8005dd4 <stdio_exit_handler+0x14>)
 8005dc6:	f000 b869 	b.w	8005e9c <_fwalk_sglue>
 8005dca:	bf00      	nop
 8005dcc:	200000d0 	.word	0x200000d0
 8005dd0:	08007a0d 	.word	0x08007a0d
 8005dd4:	200000e0 	.word	0x200000e0

08005dd8 <cleanup_stdio>:
 8005dd8:	6841      	ldr	r1, [r0, #4]
 8005dda:	4b0c      	ldr	r3, [pc, #48]	@ (8005e0c <cleanup_stdio+0x34>)
 8005ddc:	b510      	push	{r4, lr}
 8005dde:	4299      	cmp	r1, r3
 8005de0:	4604      	mov	r4, r0
 8005de2:	d001      	beq.n	8005de8 <cleanup_stdio+0x10>
 8005de4:	f001 fe12 	bl	8007a0c <_fflush_r>
 8005de8:	68a1      	ldr	r1, [r4, #8]
 8005dea:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <cleanup_stdio+0x38>)
 8005dec:	4299      	cmp	r1, r3
 8005dee:	d002      	beq.n	8005df6 <cleanup_stdio+0x1e>
 8005df0:	4620      	mov	r0, r4
 8005df2:	f001 fe0b 	bl	8007a0c <_fflush_r>
 8005df6:	68e1      	ldr	r1, [r4, #12]
 8005df8:	4b06      	ldr	r3, [pc, #24]	@ (8005e14 <cleanup_stdio+0x3c>)
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	d004      	beq.n	8005e08 <cleanup_stdio+0x30>
 8005dfe:	4620      	mov	r0, r4
 8005e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e04:	f001 be02 	b.w	8007a0c <_fflush_r>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200009a0 	.word	0x200009a0
 8005e10:	20000a08 	.word	0x20000a08
 8005e14:	20000a70 	.word	0x20000a70

08005e18 <global_stdio_init.part.0>:
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <global_stdio_init.part.0+0x30>)
 8005e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8005e4c <global_stdio_init.part.0+0x34>)
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e50 <global_stdio_init.part.0+0x38>)
 8005e20:	4620      	mov	r0, r4
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	2104      	movs	r1, #4
 8005e26:	2200      	movs	r2, #0
 8005e28:	f7ff ff94 	bl	8005d54 <std>
 8005e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e30:	2201      	movs	r2, #1
 8005e32:	2109      	movs	r1, #9
 8005e34:	f7ff ff8e 	bl	8005d54 <std>
 8005e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e42:	2112      	movs	r1, #18
 8005e44:	f7ff bf86 	b.w	8005d54 <std>
 8005e48:	20000ad8 	.word	0x20000ad8
 8005e4c:	200009a0 	.word	0x200009a0
 8005e50:	08005dc1 	.word	0x08005dc1

08005e54 <__sfp_lock_acquire>:
 8005e54:	4801      	ldr	r0, [pc, #4]	@ (8005e5c <__sfp_lock_acquire+0x8>)
 8005e56:	f000 b920 	b.w	800609a <__retarget_lock_acquire_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	20000ae1 	.word	0x20000ae1

08005e60 <__sfp_lock_release>:
 8005e60:	4801      	ldr	r0, [pc, #4]	@ (8005e68 <__sfp_lock_release+0x8>)
 8005e62:	f000 b91b 	b.w	800609c <__retarget_lock_release_recursive>
 8005e66:	bf00      	nop
 8005e68:	20000ae1 	.word	0x20000ae1

08005e6c <__sinit>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	4604      	mov	r4, r0
 8005e70:	f7ff fff0 	bl	8005e54 <__sfp_lock_acquire>
 8005e74:	6a23      	ldr	r3, [r4, #32]
 8005e76:	b11b      	cbz	r3, 8005e80 <__sinit+0x14>
 8005e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7c:	f7ff bff0 	b.w	8005e60 <__sfp_lock_release>
 8005e80:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <__sinit+0x28>)
 8005e82:	6223      	str	r3, [r4, #32]
 8005e84:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <__sinit+0x2c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f5      	bne.n	8005e78 <__sinit+0xc>
 8005e8c:	f7ff ffc4 	bl	8005e18 <global_stdio_init.part.0>
 8005e90:	e7f2      	b.n	8005e78 <__sinit+0xc>
 8005e92:	bf00      	nop
 8005e94:	08005dd9 	.word	0x08005dd9
 8005e98:	20000ad8 	.word	0x20000ad8

08005e9c <_fwalk_sglue>:
 8005e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	4688      	mov	r8, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eac:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb0:	d505      	bpl.n	8005ebe <_fwalk_sglue+0x22>
 8005eb2:	6824      	ldr	r4, [r4, #0]
 8005eb4:	2c00      	cmp	r4, #0
 8005eb6:	d1f7      	bne.n	8005ea8 <_fwalk_sglue+0xc>
 8005eb8:	4630      	mov	r0, r6
 8005eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebe:	89ab      	ldrh	r3, [r5, #12]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d907      	bls.n	8005ed4 <_fwalk_sglue+0x38>
 8005ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	d003      	beq.n	8005ed4 <_fwalk_sglue+0x38>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4638      	mov	r0, r7
 8005ed0:	47c0      	blx	r8
 8005ed2:	4306      	orrs	r6, r0
 8005ed4:	3568      	adds	r5, #104	@ 0x68
 8005ed6:	e7e9      	b.n	8005eac <_fwalk_sglue+0x10>

08005ed8 <siprintf>:
 8005ed8:	b40e      	push	{r1, r2, r3}
 8005eda:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ede:	b500      	push	{lr}
 8005ee0:	b09c      	sub	sp, #112	@ 0x70
 8005ee2:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ee4:	9002      	str	r0, [sp, #8]
 8005ee6:	9006      	str	r0, [sp, #24]
 8005ee8:	9107      	str	r1, [sp, #28]
 8005eea:	9104      	str	r1, [sp, #16]
 8005eec:	4808      	ldr	r0, [pc, #32]	@ (8005f10 <siprintf+0x38>)
 8005eee:	4909      	ldr	r1, [pc, #36]	@ (8005f14 <siprintf+0x3c>)
 8005ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ef4:	9105      	str	r1, [sp, #20]
 8005ef6:	6800      	ldr	r0, [r0, #0]
 8005ef8:	a902      	add	r1, sp, #8
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	f001 fc0a 	bl	8007714 <_svfiprintf_r>
 8005f00:	2200      	movs	r2, #0
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	b01c      	add	sp, #112	@ 0x70
 8005f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f0c:	b003      	add	sp, #12
 8005f0e:	4770      	bx	lr
 8005f10:	200000dc 	.word	0x200000dc
 8005f14:	ffff0208 	.word	0xffff0208

08005f18 <__sread>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	460c      	mov	r4, r1
 8005f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f20:	f000 f86c 	bl	8005ffc <_read_r>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	bfab      	itete	ge
 8005f28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f2c:	181b      	addge	r3, r3, r0
 8005f2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f32:	bfac      	ite	ge
 8005f34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f36:	81a3      	strhlt	r3, [r4, #12]
 8005f38:	bd10      	pop	{r4, pc}

08005f3a <__swrite>:
 8005f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3e:	461f      	mov	r7, r3
 8005f40:	898b      	ldrh	r3, [r1, #12]
 8005f42:	4605      	mov	r5, r0
 8005f44:	05db      	lsls	r3, r3, #23
 8005f46:	460c      	mov	r4, r1
 8005f48:	4616      	mov	r6, r2
 8005f4a:	d505      	bpl.n	8005f58 <__swrite+0x1e>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f54:	f000 f840 	bl	8005fd8 <_lseek_r>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f60:	81a3      	strh	r3, [r4, #12]
 8005f62:	4628      	mov	r0, r5
 8005f64:	463b      	mov	r3, r7
 8005f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6e:	f000 b857 	b.w	8006020 <_write_r>

08005f72 <__sseek>:
 8005f72:	b510      	push	{r4, lr}
 8005f74:	460c      	mov	r4, r1
 8005f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f7a:	f000 f82d 	bl	8005fd8 <_lseek_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	bf15      	itete	ne
 8005f84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f8e:	81a3      	strheq	r3, [r4, #12]
 8005f90:	bf18      	it	ne
 8005f92:	81a3      	strhne	r3, [r4, #12]
 8005f94:	bd10      	pop	{r4, pc}

08005f96 <__sclose>:
 8005f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9a:	f000 b80d 	b.w	8005fb8 <_close_r>

08005f9e <memset>:
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4402      	add	r2, r0
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d100      	bne.n	8005fa8 <memset+0xa>
 8005fa6:	4770      	bx	lr
 8005fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fac:	e7f9      	b.n	8005fa2 <memset+0x4>
	...

08005fb0 <_localeconv_r>:
 8005fb0:	4800      	ldr	r0, [pc, #0]	@ (8005fb4 <_localeconv_r+0x4>)
 8005fb2:	4770      	bx	lr
 8005fb4:	2000021c 	.word	0x2000021c

08005fb8 <_close_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4d05      	ldr	r5, [pc, #20]	@ (8005fd4 <_close_r+0x1c>)
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	f7fe f96d 	bl	80042a2 <_close>
 8005fc8:	1c43      	adds	r3, r0, #1
 8005fca:	d102      	bne.n	8005fd2 <_close_r+0x1a>
 8005fcc:	682b      	ldr	r3, [r5, #0]
 8005fce:	b103      	cbz	r3, 8005fd2 <_close_r+0x1a>
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	bd38      	pop	{r3, r4, r5, pc}
 8005fd4:	20000adc 	.word	0x20000adc

08005fd8 <_lseek_r>:
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4d05      	ldr	r5, [pc, #20]	@ (8005ff8 <_lseek_r+0x20>)
 8005fe4:	602a      	str	r2, [r5, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f7fe f97f 	bl	80042ea <_lseek>
 8005fec:	1c43      	adds	r3, r0, #1
 8005fee:	d102      	bne.n	8005ff6 <_lseek_r+0x1e>
 8005ff0:	682b      	ldr	r3, [r5, #0]
 8005ff2:	b103      	cbz	r3, 8005ff6 <_lseek_r+0x1e>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	bd38      	pop	{r3, r4, r5, pc}
 8005ff8:	20000adc 	.word	0x20000adc

08005ffc <_read_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	4611      	mov	r1, r2
 8006004:	2200      	movs	r2, #0
 8006006:	4d05      	ldr	r5, [pc, #20]	@ (800601c <_read_r+0x20>)
 8006008:	602a      	str	r2, [r5, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	f7fe f910 	bl	8004230 <_read>
 8006010:	1c43      	adds	r3, r0, #1
 8006012:	d102      	bne.n	800601a <_read_r+0x1e>
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	b103      	cbz	r3, 800601a <_read_r+0x1e>
 8006018:	6023      	str	r3, [r4, #0]
 800601a:	bd38      	pop	{r3, r4, r5, pc}
 800601c:	20000adc 	.word	0x20000adc

08006020 <_write_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4604      	mov	r4, r0
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	2200      	movs	r2, #0
 800602a:	4d05      	ldr	r5, [pc, #20]	@ (8006040 <_write_r+0x20>)
 800602c:	602a      	str	r2, [r5, #0]
 800602e:	461a      	mov	r2, r3
 8006030:	f7fe f91b 	bl	800426a <_write>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d102      	bne.n	800603e <_write_r+0x1e>
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	b103      	cbz	r3, 800603e <_write_r+0x1e>
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	bd38      	pop	{r3, r4, r5, pc}
 8006040:	20000adc 	.word	0x20000adc

08006044 <__errno>:
 8006044:	4b01      	ldr	r3, [pc, #4]	@ (800604c <__errno+0x8>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	200000dc 	.word	0x200000dc

08006050 <__libc_init_array>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	2600      	movs	r6, #0
 8006054:	4d0c      	ldr	r5, [pc, #48]	@ (8006088 <__libc_init_array+0x38>)
 8006056:	4c0d      	ldr	r4, [pc, #52]	@ (800608c <__libc_init_array+0x3c>)
 8006058:	1b64      	subs	r4, r4, r5
 800605a:	10a4      	asrs	r4, r4, #2
 800605c:	42a6      	cmp	r6, r4
 800605e:	d109      	bne.n	8006074 <__libc_init_array+0x24>
 8006060:	f002 f870 	bl	8008144 <_init>
 8006064:	2600      	movs	r6, #0
 8006066:	4d0a      	ldr	r5, [pc, #40]	@ (8006090 <__libc_init_array+0x40>)
 8006068:	4c0a      	ldr	r4, [pc, #40]	@ (8006094 <__libc_init_array+0x44>)
 800606a:	1b64      	subs	r4, r4, r5
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	42a6      	cmp	r6, r4
 8006070:	d105      	bne.n	800607e <__libc_init_array+0x2e>
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	f855 3b04 	ldr.w	r3, [r5], #4
 8006078:	4798      	blx	r3
 800607a:	3601      	adds	r6, #1
 800607c:	e7ee      	b.n	800605c <__libc_init_array+0xc>
 800607e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006082:	4798      	blx	r3
 8006084:	3601      	adds	r6, #1
 8006086:	e7f2      	b.n	800606e <__libc_init_array+0x1e>
 8006088:	080086e0 	.word	0x080086e0
 800608c:	080086e0 	.word	0x080086e0
 8006090:	080086e0 	.word	0x080086e0
 8006094:	080086e4 	.word	0x080086e4

08006098 <__retarget_lock_init_recursive>:
 8006098:	4770      	bx	lr

0800609a <__retarget_lock_acquire_recursive>:
 800609a:	4770      	bx	lr

0800609c <__retarget_lock_release_recursive>:
 800609c:	4770      	bx	lr

0800609e <memchr>:
 800609e:	4603      	mov	r3, r0
 80060a0:	b510      	push	{r4, lr}
 80060a2:	b2c9      	uxtb	r1, r1
 80060a4:	4402      	add	r2, r0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	4618      	mov	r0, r3
 80060aa:	d101      	bne.n	80060b0 <memchr+0x12>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e003      	b.n	80060b8 <memchr+0x1a>
 80060b0:	7804      	ldrb	r4, [r0, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	428c      	cmp	r4, r1
 80060b6:	d1f6      	bne.n	80060a6 <memchr+0x8>
 80060b8:	bd10      	pop	{r4, pc}

080060ba <quorem>:
 80060ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060be:	6903      	ldr	r3, [r0, #16]
 80060c0:	690c      	ldr	r4, [r1, #16]
 80060c2:	4607      	mov	r7, r0
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	db7e      	blt.n	80061c6 <quorem+0x10c>
 80060c8:	3c01      	subs	r4, #1
 80060ca:	00a3      	lsls	r3, r4, #2
 80060cc:	f100 0514 	add.w	r5, r0, #20
 80060d0:	f101 0814 	add.w	r8, r1, #20
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e4:	3301      	adds	r3, #1
 80060e6:	429a      	cmp	r2, r3
 80060e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80060ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060f0:	d32e      	bcc.n	8006150 <quorem+0x96>
 80060f2:	f04f 0a00 	mov.w	sl, #0
 80060f6:	46c4      	mov	ip, r8
 80060f8:	46ae      	mov	lr, r5
 80060fa:	46d3      	mov	fp, sl
 80060fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006100:	b298      	uxth	r0, r3
 8006102:	fb06 a000 	mla	r0, r6, r0, sl
 8006106:	0c1b      	lsrs	r3, r3, #16
 8006108:	0c02      	lsrs	r2, r0, #16
 800610a:	fb06 2303 	mla	r3, r6, r3, r2
 800610e:	f8de 2000 	ldr.w	r2, [lr]
 8006112:	b280      	uxth	r0, r0
 8006114:	b292      	uxth	r2, r2
 8006116:	1a12      	subs	r2, r2, r0
 8006118:	445a      	add	r2, fp
 800611a:	f8de 0000 	ldr.w	r0, [lr]
 800611e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006122:	b29b      	uxth	r3, r3
 8006124:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006128:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800612c:	b292      	uxth	r2, r2
 800612e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006132:	45e1      	cmp	r9, ip
 8006134:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006138:	f84e 2b04 	str.w	r2, [lr], #4
 800613c:	d2de      	bcs.n	80060fc <quorem+0x42>
 800613e:	9b00      	ldr	r3, [sp, #0]
 8006140:	58eb      	ldr	r3, [r5, r3]
 8006142:	b92b      	cbnz	r3, 8006150 <quorem+0x96>
 8006144:	9b01      	ldr	r3, [sp, #4]
 8006146:	3b04      	subs	r3, #4
 8006148:	429d      	cmp	r5, r3
 800614a:	461a      	mov	r2, r3
 800614c:	d32f      	bcc.n	80061ae <quorem+0xf4>
 800614e:	613c      	str	r4, [r7, #16]
 8006150:	4638      	mov	r0, r7
 8006152:	f001 f97b 	bl	800744c <__mcmp>
 8006156:	2800      	cmp	r0, #0
 8006158:	db25      	blt.n	80061a6 <quorem+0xec>
 800615a:	4629      	mov	r1, r5
 800615c:	2000      	movs	r0, #0
 800615e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006162:	f8d1 c000 	ldr.w	ip, [r1]
 8006166:	fa1f fe82 	uxth.w	lr, r2
 800616a:	fa1f f38c 	uxth.w	r3, ip
 800616e:	eba3 030e 	sub.w	r3, r3, lr
 8006172:	4403      	add	r3, r0
 8006174:	0c12      	lsrs	r2, r2, #16
 8006176:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800617a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800617e:	b29b      	uxth	r3, r3
 8006180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006184:	45c1      	cmp	r9, r8
 8006186:	ea4f 4022 	mov.w	r0, r2, asr #16
 800618a:	f841 3b04 	str.w	r3, [r1], #4
 800618e:	d2e6      	bcs.n	800615e <quorem+0xa4>
 8006190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006198:	b922      	cbnz	r2, 80061a4 <quorem+0xea>
 800619a:	3b04      	subs	r3, #4
 800619c:	429d      	cmp	r5, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	d30b      	bcc.n	80061ba <quorem+0x100>
 80061a2:	613c      	str	r4, [r7, #16]
 80061a4:	3601      	adds	r6, #1
 80061a6:	4630      	mov	r0, r6
 80061a8:	b003      	add	sp, #12
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	3b04      	subs	r3, #4
 80061b2:	2a00      	cmp	r2, #0
 80061b4:	d1cb      	bne.n	800614e <quorem+0x94>
 80061b6:	3c01      	subs	r4, #1
 80061b8:	e7c6      	b.n	8006148 <quorem+0x8e>
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	3b04      	subs	r3, #4
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d1ef      	bne.n	80061a2 <quorem+0xe8>
 80061c2:	3c01      	subs	r4, #1
 80061c4:	e7ea      	b.n	800619c <quorem+0xe2>
 80061c6:	2000      	movs	r0, #0
 80061c8:	e7ee      	b.n	80061a8 <quorem+0xee>
 80061ca:	0000      	movs	r0, r0
 80061cc:	0000      	movs	r0, r0
	...

080061d0 <_dtoa_r>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	4614      	mov	r4, r2
 80061d6:	461d      	mov	r5, r3
 80061d8:	69c7      	ldr	r7, [r0, #28]
 80061da:	b097      	sub	sp, #92	@ 0x5c
 80061dc:	4683      	mov	fp, r0
 80061de:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80061e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80061e4:	b97f      	cbnz	r7, 8006206 <_dtoa_r+0x36>
 80061e6:	2010      	movs	r0, #16
 80061e8:	f000 fe02 	bl	8006df0 <malloc>
 80061ec:	4602      	mov	r2, r0
 80061ee:	f8cb 001c 	str.w	r0, [fp, #28]
 80061f2:	b920      	cbnz	r0, 80061fe <_dtoa_r+0x2e>
 80061f4:	21ef      	movs	r1, #239	@ 0xef
 80061f6:	4ba8      	ldr	r3, [pc, #672]	@ (8006498 <_dtoa_r+0x2c8>)
 80061f8:	48a8      	ldr	r0, [pc, #672]	@ (800649c <_dtoa_r+0x2cc>)
 80061fa:	f001 fc67 	bl	8007acc <__assert_func>
 80061fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006202:	6007      	str	r7, [r0, #0]
 8006204:	60c7      	str	r7, [r0, #12]
 8006206:	f8db 301c 	ldr.w	r3, [fp, #28]
 800620a:	6819      	ldr	r1, [r3, #0]
 800620c:	b159      	cbz	r1, 8006226 <_dtoa_r+0x56>
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	2301      	movs	r3, #1
 8006212:	4093      	lsls	r3, r2
 8006214:	604a      	str	r2, [r1, #4]
 8006216:	608b      	str	r3, [r1, #8]
 8006218:	4658      	mov	r0, fp
 800621a:	f000 fedf 	bl	8006fdc <_Bfree>
 800621e:	2200      	movs	r2, #0
 8006220:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	1e2b      	subs	r3, r5, #0
 8006228:	bfaf      	iteee	ge
 800622a:	2300      	movge	r3, #0
 800622c:	2201      	movlt	r2, #1
 800622e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006232:	9303      	strlt	r3, [sp, #12]
 8006234:	bfa8      	it	ge
 8006236:	6033      	strge	r3, [r6, #0]
 8006238:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800623c:	4b98      	ldr	r3, [pc, #608]	@ (80064a0 <_dtoa_r+0x2d0>)
 800623e:	bfb8      	it	lt
 8006240:	6032      	strlt	r2, [r6, #0]
 8006242:	ea33 0308 	bics.w	r3, r3, r8
 8006246:	d112      	bne.n	800626e <_dtoa_r+0x9e>
 8006248:	f242 730f 	movw	r3, #9999	@ 0x270f
 800624c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006254:	4323      	orrs	r3, r4
 8006256:	f000 8550 	beq.w	8006cfa <_dtoa_r+0xb2a>
 800625a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800625c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80064a4 <_dtoa_r+0x2d4>
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 8552 	beq.w	8006d0a <_dtoa_r+0xb3a>
 8006266:	f10a 0303 	add.w	r3, sl, #3
 800626a:	f000 bd4c 	b.w	8006d06 <_dtoa_r+0xb36>
 800626e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006272:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006276:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800627a:	2200      	movs	r2, #0
 800627c:	2300      	movs	r3, #0
 800627e:	f7fa fc51 	bl	8000b24 <__aeabi_dcmpeq>
 8006282:	4607      	mov	r7, r0
 8006284:	b158      	cbz	r0, 800629e <_dtoa_r+0xce>
 8006286:	2301      	movs	r3, #1
 8006288:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800628e:	b113      	cbz	r3, 8006296 <_dtoa_r+0xc6>
 8006290:	4b85      	ldr	r3, [pc, #532]	@ (80064a8 <_dtoa_r+0x2d8>)
 8006292:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80064ac <_dtoa_r+0x2dc>
 800629a:	f000 bd36 	b.w	8006d0a <_dtoa_r+0xb3a>
 800629e:	ab14      	add	r3, sp, #80	@ 0x50
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	ab15      	add	r3, sp, #84	@ 0x54
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	4658      	mov	r0, fp
 80062a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062ac:	f001 f97e 	bl	80075ac <__d2b>
 80062b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80062b4:	4681      	mov	r9, r0
 80062b6:	2e00      	cmp	r6, #0
 80062b8:	d077      	beq.n	80063aa <_dtoa_r+0x1da>
 80062ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80062d2:	4619      	mov	r1, r3
 80062d4:	2200      	movs	r2, #0
 80062d6:	4b76      	ldr	r3, [pc, #472]	@ (80064b0 <_dtoa_r+0x2e0>)
 80062d8:	f7fa f804 	bl	80002e4 <__aeabi_dsub>
 80062dc:	a368      	add	r3, pc, #416	@ (adr r3, 8006480 <_dtoa_r+0x2b0>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7fa f9b7 	bl	8000654 <__aeabi_dmul>
 80062e6:	a368      	add	r3, pc, #416	@ (adr r3, 8006488 <_dtoa_r+0x2b8>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f7f9 fffc 	bl	80002e8 <__adddf3>
 80062f0:	4604      	mov	r4, r0
 80062f2:	4630      	mov	r0, r6
 80062f4:	460d      	mov	r5, r1
 80062f6:	f7fa f943 	bl	8000580 <__aeabi_i2d>
 80062fa:	a365      	add	r3, pc, #404	@ (adr r3, 8006490 <_dtoa_r+0x2c0>)
 80062fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006300:	f7fa f9a8 	bl	8000654 <__aeabi_dmul>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4620      	mov	r0, r4
 800630a:	4629      	mov	r1, r5
 800630c:	f7f9 ffec 	bl	80002e8 <__adddf3>
 8006310:	4604      	mov	r4, r0
 8006312:	460d      	mov	r5, r1
 8006314:	f7fa fc4e 	bl	8000bb4 <__aeabi_d2iz>
 8006318:	2200      	movs	r2, #0
 800631a:	4607      	mov	r7, r0
 800631c:	2300      	movs	r3, #0
 800631e:	4620      	mov	r0, r4
 8006320:	4629      	mov	r1, r5
 8006322:	f7fa fc09 	bl	8000b38 <__aeabi_dcmplt>
 8006326:	b140      	cbz	r0, 800633a <_dtoa_r+0x16a>
 8006328:	4638      	mov	r0, r7
 800632a:	f7fa f929 	bl	8000580 <__aeabi_i2d>
 800632e:	4622      	mov	r2, r4
 8006330:	462b      	mov	r3, r5
 8006332:	f7fa fbf7 	bl	8000b24 <__aeabi_dcmpeq>
 8006336:	b900      	cbnz	r0, 800633a <_dtoa_r+0x16a>
 8006338:	3f01      	subs	r7, #1
 800633a:	2f16      	cmp	r7, #22
 800633c:	d853      	bhi.n	80063e6 <_dtoa_r+0x216>
 800633e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006342:	4b5c      	ldr	r3, [pc, #368]	@ (80064b4 <_dtoa_r+0x2e4>)
 8006344:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f7fa fbf4 	bl	8000b38 <__aeabi_dcmplt>
 8006350:	2800      	cmp	r0, #0
 8006352:	d04a      	beq.n	80063ea <_dtoa_r+0x21a>
 8006354:	2300      	movs	r3, #0
 8006356:	3f01      	subs	r7, #1
 8006358:	930f      	str	r3, [sp, #60]	@ 0x3c
 800635a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800635c:	1b9b      	subs	r3, r3, r6
 800635e:	1e5a      	subs	r2, r3, #1
 8006360:	bf46      	itte	mi
 8006362:	f1c3 0801 	rsbmi	r8, r3, #1
 8006366:	2300      	movmi	r3, #0
 8006368:	f04f 0800 	movpl.w	r8, #0
 800636c:	9209      	str	r2, [sp, #36]	@ 0x24
 800636e:	bf48      	it	mi
 8006370:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006372:	2f00      	cmp	r7, #0
 8006374:	db3b      	blt.n	80063ee <_dtoa_r+0x21e>
 8006376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006378:	970e      	str	r7, [sp, #56]	@ 0x38
 800637a:	443b      	add	r3, r7
 800637c:	9309      	str	r3, [sp, #36]	@ 0x24
 800637e:	2300      	movs	r3, #0
 8006380:	930a      	str	r3, [sp, #40]	@ 0x28
 8006382:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006384:	2b09      	cmp	r3, #9
 8006386:	d866      	bhi.n	8006456 <_dtoa_r+0x286>
 8006388:	2b05      	cmp	r3, #5
 800638a:	bfc4      	itt	gt
 800638c:	3b04      	subgt	r3, #4
 800638e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006390:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006392:	bfc8      	it	gt
 8006394:	2400      	movgt	r4, #0
 8006396:	f1a3 0302 	sub.w	r3, r3, #2
 800639a:	bfd8      	it	le
 800639c:	2401      	movle	r4, #1
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d864      	bhi.n	800646c <_dtoa_r+0x29c>
 80063a2:	e8df f003 	tbb	[pc, r3]
 80063a6:	382b      	.short	0x382b
 80063a8:	5636      	.short	0x5636
 80063aa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80063ae:	441e      	add	r6, r3
 80063b0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	bfc1      	itttt	gt
 80063b8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80063c0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063c4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063c8:	bfd6      	itet	le
 80063ca:	f1c3 0320 	rsble	r3, r3, #32
 80063ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80063d2:	fa04 f003 	lslle.w	r0, r4, r3
 80063d6:	f7fa f8c3 	bl	8000560 <__aeabi_ui2d>
 80063da:	2201      	movs	r2, #1
 80063dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063e0:	3e01      	subs	r6, #1
 80063e2:	9212      	str	r2, [sp, #72]	@ 0x48
 80063e4:	e775      	b.n	80062d2 <_dtoa_r+0x102>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e7b6      	b.n	8006358 <_dtoa_r+0x188>
 80063ea:	900f      	str	r0, [sp, #60]	@ 0x3c
 80063ec:	e7b5      	b.n	800635a <_dtoa_r+0x18a>
 80063ee:	427b      	negs	r3, r7
 80063f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063f2:	2300      	movs	r3, #0
 80063f4:	eba8 0807 	sub.w	r8, r8, r7
 80063f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80063fa:	e7c2      	b.n	8006382 <_dtoa_r+0x1b2>
 80063fc:	2300      	movs	r3, #0
 80063fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006400:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006402:	2b00      	cmp	r3, #0
 8006404:	dc35      	bgt.n	8006472 <_dtoa_r+0x2a2>
 8006406:	2301      	movs	r3, #1
 8006408:	461a      	mov	r2, r3
 800640a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800640e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006410:	e00b      	b.n	800642a <_dtoa_r+0x25a>
 8006412:	2301      	movs	r3, #1
 8006414:	e7f3      	b.n	80063fe <_dtoa_r+0x22e>
 8006416:	2300      	movs	r3, #0
 8006418:	930b      	str	r3, [sp, #44]	@ 0x2c
 800641a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800641c:	18fb      	adds	r3, r7, r3
 800641e:	9308      	str	r3, [sp, #32]
 8006420:	3301      	adds	r3, #1
 8006422:	2b01      	cmp	r3, #1
 8006424:	9307      	str	r3, [sp, #28]
 8006426:	bfb8      	it	lt
 8006428:	2301      	movlt	r3, #1
 800642a:	2100      	movs	r1, #0
 800642c:	2204      	movs	r2, #4
 800642e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006432:	f102 0514 	add.w	r5, r2, #20
 8006436:	429d      	cmp	r5, r3
 8006438:	d91f      	bls.n	800647a <_dtoa_r+0x2aa>
 800643a:	6041      	str	r1, [r0, #4]
 800643c:	4658      	mov	r0, fp
 800643e:	f000 fd8d 	bl	8006f5c <_Balloc>
 8006442:	4682      	mov	sl, r0
 8006444:	2800      	cmp	r0, #0
 8006446:	d139      	bne.n	80064bc <_dtoa_r+0x2ec>
 8006448:	4602      	mov	r2, r0
 800644a:	f240 11af 	movw	r1, #431	@ 0x1af
 800644e:	4b1a      	ldr	r3, [pc, #104]	@ (80064b8 <_dtoa_r+0x2e8>)
 8006450:	e6d2      	b.n	80061f8 <_dtoa_r+0x28>
 8006452:	2301      	movs	r3, #1
 8006454:	e7e0      	b.n	8006418 <_dtoa_r+0x248>
 8006456:	2401      	movs	r4, #1
 8006458:	2300      	movs	r3, #0
 800645a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800645c:	9320      	str	r3, [sp, #128]	@ 0x80
 800645e:	f04f 33ff 	mov.w	r3, #4294967295
 8006462:	2200      	movs	r2, #0
 8006464:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006468:	2312      	movs	r3, #18
 800646a:	e7d0      	b.n	800640e <_dtoa_r+0x23e>
 800646c:	2301      	movs	r3, #1
 800646e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006470:	e7f5      	b.n	800645e <_dtoa_r+0x28e>
 8006472:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006474:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006478:	e7d7      	b.n	800642a <_dtoa_r+0x25a>
 800647a:	3101      	adds	r1, #1
 800647c:	0052      	lsls	r2, r2, #1
 800647e:	e7d8      	b.n	8006432 <_dtoa_r+0x262>
 8006480:	636f4361 	.word	0x636f4361
 8006484:	3fd287a7 	.word	0x3fd287a7
 8006488:	8b60c8b3 	.word	0x8b60c8b3
 800648c:	3fc68a28 	.word	0x3fc68a28
 8006490:	509f79fb 	.word	0x509f79fb
 8006494:	3fd34413 	.word	0x3fd34413
 8006498:	080083a9 	.word	0x080083a9
 800649c:	080083c0 	.word	0x080083c0
 80064a0:	7ff00000 	.word	0x7ff00000
 80064a4:	080083a5 	.word	0x080083a5
 80064a8:	08008379 	.word	0x08008379
 80064ac:	08008378 	.word	0x08008378
 80064b0:	3ff80000 	.word	0x3ff80000
 80064b4:	080084b8 	.word	0x080084b8
 80064b8:	08008418 	.word	0x08008418
 80064bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064c0:	6018      	str	r0, [r3, #0]
 80064c2:	9b07      	ldr	r3, [sp, #28]
 80064c4:	2b0e      	cmp	r3, #14
 80064c6:	f200 80a4 	bhi.w	8006612 <_dtoa_r+0x442>
 80064ca:	2c00      	cmp	r4, #0
 80064cc:	f000 80a1 	beq.w	8006612 <_dtoa_r+0x442>
 80064d0:	2f00      	cmp	r7, #0
 80064d2:	dd33      	ble.n	800653c <_dtoa_r+0x36c>
 80064d4:	4b86      	ldr	r3, [pc, #536]	@ (80066f0 <_dtoa_r+0x520>)
 80064d6:	f007 020f 	and.w	r2, r7, #15
 80064da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064de:	05f8      	lsls	r0, r7, #23
 80064e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80064e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80064e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064ec:	d516      	bpl.n	800651c <_dtoa_r+0x34c>
 80064ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064f2:	4b80      	ldr	r3, [pc, #512]	@ (80066f4 <_dtoa_r+0x524>)
 80064f4:	2603      	movs	r6, #3
 80064f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064fa:	f7fa f9d5 	bl	80008a8 <__aeabi_ddiv>
 80064fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006502:	f004 040f 	and.w	r4, r4, #15
 8006506:	4d7b      	ldr	r5, [pc, #492]	@ (80066f4 <_dtoa_r+0x524>)
 8006508:	b954      	cbnz	r4, 8006520 <_dtoa_r+0x350>
 800650a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800650e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006512:	f7fa f9c9 	bl	80008a8 <__aeabi_ddiv>
 8006516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800651a:	e028      	b.n	800656e <_dtoa_r+0x39e>
 800651c:	2602      	movs	r6, #2
 800651e:	e7f2      	b.n	8006506 <_dtoa_r+0x336>
 8006520:	07e1      	lsls	r1, r4, #31
 8006522:	d508      	bpl.n	8006536 <_dtoa_r+0x366>
 8006524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006528:	e9d5 2300 	ldrd	r2, r3, [r5]
 800652c:	f7fa f892 	bl	8000654 <__aeabi_dmul>
 8006530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006534:	3601      	adds	r6, #1
 8006536:	1064      	asrs	r4, r4, #1
 8006538:	3508      	adds	r5, #8
 800653a:	e7e5      	b.n	8006508 <_dtoa_r+0x338>
 800653c:	f000 80d2 	beq.w	80066e4 <_dtoa_r+0x514>
 8006540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006544:	427c      	negs	r4, r7
 8006546:	4b6a      	ldr	r3, [pc, #424]	@ (80066f0 <_dtoa_r+0x520>)
 8006548:	f004 020f 	and.w	r2, r4, #15
 800654c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006554:	f7fa f87e 	bl	8000654 <__aeabi_dmul>
 8006558:	2602      	movs	r6, #2
 800655a:	2300      	movs	r3, #0
 800655c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006560:	4d64      	ldr	r5, [pc, #400]	@ (80066f4 <_dtoa_r+0x524>)
 8006562:	1124      	asrs	r4, r4, #4
 8006564:	2c00      	cmp	r4, #0
 8006566:	f040 80b2 	bne.w	80066ce <_dtoa_r+0x4fe>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1d3      	bne.n	8006516 <_dtoa_r+0x346>
 800656e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006572:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80b7 	beq.w	80066e8 <_dtoa_r+0x518>
 800657a:	2200      	movs	r2, #0
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	4b5d      	ldr	r3, [pc, #372]	@ (80066f8 <_dtoa_r+0x528>)
 8006582:	f7fa fad9 	bl	8000b38 <__aeabi_dcmplt>
 8006586:	2800      	cmp	r0, #0
 8006588:	f000 80ae 	beq.w	80066e8 <_dtoa_r+0x518>
 800658c:	9b07      	ldr	r3, [sp, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80aa 	beq.w	80066e8 <_dtoa_r+0x518>
 8006594:	9b08      	ldr	r3, [sp, #32]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd37      	ble.n	800660a <_dtoa_r+0x43a>
 800659a:	1e7b      	subs	r3, r7, #1
 800659c:	4620      	mov	r0, r4
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	2200      	movs	r2, #0
 80065a2:	4629      	mov	r1, r5
 80065a4:	4b55      	ldr	r3, [pc, #340]	@ (80066fc <_dtoa_r+0x52c>)
 80065a6:	f7fa f855 	bl	8000654 <__aeabi_dmul>
 80065aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ae:	9c08      	ldr	r4, [sp, #32]
 80065b0:	3601      	adds	r6, #1
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7f9 ffe4 	bl	8000580 <__aeabi_i2d>
 80065b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065bc:	f7fa f84a 	bl	8000654 <__aeabi_dmul>
 80065c0:	2200      	movs	r2, #0
 80065c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006700 <_dtoa_r+0x530>)
 80065c4:	f7f9 fe90 	bl	80002e8 <__adddf3>
 80065c8:	4605      	mov	r5, r0
 80065ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	f040 809a 	bne.w	8006708 <_dtoa_r+0x538>
 80065d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065d8:	2200      	movs	r2, #0
 80065da:	4b4a      	ldr	r3, [pc, #296]	@ (8006704 <_dtoa_r+0x534>)
 80065dc:	f7f9 fe82 	bl	80002e4 <__aeabi_dsub>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065e8:	462a      	mov	r2, r5
 80065ea:	4633      	mov	r3, r6
 80065ec:	f7fa fac2 	bl	8000b74 <__aeabi_dcmpgt>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	f040 828e 	bne.w	8006b12 <_dtoa_r+0x942>
 80065f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065fa:	462a      	mov	r2, r5
 80065fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006600:	f7fa fa9a 	bl	8000b38 <__aeabi_dcmplt>
 8006604:	2800      	cmp	r0, #0
 8006606:	f040 8127 	bne.w	8006858 <_dtoa_r+0x688>
 800660a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800660e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006612:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006614:	2b00      	cmp	r3, #0
 8006616:	f2c0 8163 	blt.w	80068e0 <_dtoa_r+0x710>
 800661a:	2f0e      	cmp	r7, #14
 800661c:	f300 8160 	bgt.w	80068e0 <_dtoa_r+0x710>
 8006620:	4b33      	ldr	r3, [pc, #204]	@ (80066f0 <_dtoa_r+0x520>)
 8006622:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006626:	e9d3 3400 	ldrd	r3, r4, [r3]
 800662a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800662e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006630:	2b00      	cmp	r3, #0
 8006632:	da03      	bge.n	800663c <_dtoa_r+0x46c>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f340 8100 	ble.w	800683c <_dtoa_r+0x66c>
 800663c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006640:	4656      	mov	r6, sl
 8006642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006646:	4620      	mov	r0, r4
 8006648:	4629      	mov	r1, r5
 800664a:	f7fa f92d 	bl	80008a8 <__aeabi_ddiv>
 800664e:	f7fa fab1 	bl	8000bb4 <__aeabi_d2iz>
 8006652:	4680      	mov	r8, r0
 8006654:	f7f9 ff94 	bl	8000580 <__aeabi_i2d>
 8006658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665c:	f7f9 fffa 	bl	8000654 <__aeabi_dmul>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4620      	mov	r0, r4
 8006666:	4629      	mov	r1, r5
 8006668:	f7f9 fe3c 	bl	80002e4 <__aeabi_dsub>
 800666c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006670:	9d07      	ldr	r5, [sp, #28]
 8006672:	f806 4b01 	strb.w	r4, [r6], #1
 8006676:	eba6 040a 	sub.w	r4, r6, sl
 800667a:	42a5      	cmp	r5, r4
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	f040 8116 	bne.w	80068b0 <_dtoa_r+0x6e0>
 8006684:	f7f9 fe30 	bl	80002e8 <__adddf3>
 8006688:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800668c:	4604      	mov	r4, r0
 800668e:	460d      	mov	r5, r1
 8006690:	f7fa fa70 	bl	8000b74 <__aeabi_dcmpgt>
 8006694:	2800      	cmp	r0, #0
 8006696:	f040 80f8 	bne.w	800688a <_dtoa_r+0x6ba>
 800669a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7fa fa3f 	bl	8000b24 <__aeabi_dcmpeq>
 80066a6:	b118      	cbz	r0, 80066b0 <_dtoa_r+0x4e0>
 80066a8:	f018 0f01 	tst.w	r8, #1
 80066ac:	f040 80ed 	bne.w	800688a <_dtoa_r+0x6ba>
 80066b0:	4649      	mov	r1, r9
 80066b2:	4658      	mov	r0, fp
 80066b4:	f000 fc92 	bl	8006fdc <_Bfree>
 80066b8:	2300      	movs	r3, #0
 80066ba:	7033      	strb	r3, [r6, #0]
 80066bc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80066be:	3701      	adds	r7, #1
 80066c0:	601f      	str	r7, [r3, #0]
 80066c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 8320 	beq.w	8006d0a <_dtoa_r+0xb3a>
 80066ca:	601e      	str	r6, [r3, #0]
 80066cc:	e31d      	b.n	8006d0a <_dtoa_r+0xb3a>
 80066ce:	07e2      	lsls	r2, r4, #31
 80066d0:	d505      	bpl.n	80066de <_dtoa_r+0x50e>
 80066d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066d6:	f7f9 ffbd 	bl	8000654 <__aeabi_dmul>
 80066da:	2301      	movs	r3, #1
 80066dc:	3601      	adds	r6, #1
 80066de:	1064      	asrs	r4, r4, #1
 80066e0:	3508      	adds	r5, #8
 80066e2:	e73f      	b.n	8006564 <_dtoa_r+0x394>
 80066e4:	2602      	movs	r6, #2
 80066e6:	e742      	b.n	800656e <_dtoa_r+0x39e>
 80066e8:	9c07      	ldr	r4, [sp, #28]
 80066ea:	9704      	str	r7, [sp, #16]
 80066ec:	e761      	b.n	80065b2 <_dtoa_r+0x3e2>
 80066ee:	bf00      	nop
 80066f0:	080084b8 	.word	0x080084b8
 80066f4:	08008490 	.word	0x08008490
 80066f8:	3ff00000 	.word	0x3ff00000
 80066fc:	40240000 	.word	0x40240000
 8006700:	401c0000 	.word	0x401c0000
 8006704:	40140000 	.word	0x40140000
 8006708:	4b70      	ldr	r3, [pc, #448]	@ (80068cc <_dtoa_r+0x6fc>)
 800670a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800670c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006710:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006714:	4454      	add	r4, sl
 8006716:	2900      	cmp	r1, #0
 8006718:	d045      	beq.n	80067a6 <_dtoa_r+0x5d6>
 800671a:	2000      	movs	r0, #0
 800671c:	496c      	ldr	r1, [pc, #432]	@ (80068d0 <_dtoa_r+0x700>)
 800671e:	f7fa f8c3 	bl	80008a8 <__aeabi_ddiv>
 8006722:	4633      	mov	r3, r6
 8006724:	462a      	mov	r2, r5
 8006726:	f7f9 fddd 	bl	80002e4 <__aeabi_dsub>
 800672a:	4656      	mov	r6, sl
 800672c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006734:	f7fa fa3e 	bl	8000bb4 <__aeabi_d2iz>
 8006738:	4605      	mov	r5, r0
 800673a:	f7f9 ff21 	bl	8000580 <__aeabi_i2d>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006746:	f7f9 fdcd 	bl	80002e4 <__aeabi_dsub>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	3530      	adds	r5, #48	@ 0x30
 8006750:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006754:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006758:	f806 5b01 	strb.w	r5, [r6], #1
 800675c:	f7fa f9ec 	bl	8000b38 <__aeabi_dcmplt>
 8006760:	2800      	cmp	r0, #0
 8006762:	d163      	bne.n	800682c <_dtoa_r+0x65c>
 8006764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006768:	2000      	movs	r0, #0
 800676a:	495a      	ldr	r1, [pc, #360]	@ (80068d4 <_dtoa_r+0x704>)
 800676c:	f7f9 fdba 	bl	80002e4 <__aeabi_dsub>
 8006770:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006774:	f7fa f9e0 	bl	8000b38 <__aeabi_dcmplt>
 8006778:	2800      	cmp	r0, #0
 800677a:	f040 8087 	bne.w	800688c <_dtoa_r+0x6bc>
 800677e:	42a6      	cmp	r6, r4
 8006780:	f43f af43 	beq.w	800660a <_dtoa_r+0x43a>
 8006784:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006788:	2200      	movs	r2, #0
 800678a:	4b53      	ldr	r3, [pc, #332]	@ (80068d8 <_dtoa_r+0x708>)
 800678c:	f7f9 ff62 	bl	8000654 <__aeabi_dmul>
 8006790:	2200      	movs	r2, #0
 8006792:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679a:	4b4f      	ldr	r3, [pc, #316]	@ (80068d8 <_dtoa_r+0x708>)
 800679c:	f7f9 ff5a 	bl	8000654 <__aeabi_dmul>
 80067a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067a4:	e7c4      	b.n	8006730 <_dtoa_r+0x560>
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	f7f9 ff53 	bl	8000654 <__aeabi_dmul>
 80067ae:	4656      	mov	r6, sl
 80067b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067b4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80067b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ba:	f7fa f9fb 	bl	8000bb4 <__aeabi_d2iz>
 80067be:	4605      	mov	r5, r0
 80067c0:	f7f9 fede 	bl	8000580 <__aeabi_i2d>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067cc:	f7f9 fd8a 	bl	80002e4 <__aeabi_dsub>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	3530      	adds	r5, #48	@ 0x30
 80067d6:	f806 5b01 	strb.w	r5, [r6], #1
 80067da:	42a6      	cmp	r6, r4
 80067dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	d124      	bne.n	8006830 <_dtoa_r+0x660>
 80067e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067ea:	4b39      	ldr	r3, [pc, #228]	@ (80068d0 <_dtoa_r+0x700>)
 80067ec:	f7f9 fd7c 	bl	80002e8 <__adddf3>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067f8:	f7fa f9bc 	bl	8000b74 <__aeabi_dcmpgt>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d145      	bne.n	800688c <_dtoa_r+0x6bc>
 8006800:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006804:	2000      	movs	r0, #0
 8006806:	4932      	ldr	r1, [pc, #200]	@ (80068d0 <_dtoa_r+0x700>)
 8006808:	f7f9 fd6c 	bl	80002e4 <__aeabi_dsub>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006814:	f7fa f990 	bl	8000b38 <__aeabi_dcmplt>
 8006818:	2800      	cmp	r0, #0
 800681a:	f43f aef6 	beq.w	800660a <_dtoa_r+0x43a>
 800681e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006820:	1e73      	subs	r3, r6, #1
 8006822:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006824:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006828:	2b30      	cmp	r3, #48	@ 0x30
 800682a:	d0f8      	beq.n	800681e <_dtoa_r+0x64e>
 800682c:	9f04      	ldr	r7, [sp, #16]
 800682e:	e73f      	b.n	80066b0 <_dtoa_r+0x4e0>
 8006830:	4b29      	ldr	r3, [pc, #164]	@ (80068d8 <_dtoa_r+0x708>)
 8006832:	f7f9 ff0f 	bl	8000654 <__aeabi_dmul>
 8006836:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800683a:	e7bc      	b.n	80067b6 <_dtoa_r+0x5e6>
 800683c:	d10c      	bne.n	8006858 <_dtoa_r+0x688>
 800683e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006842:	2200      	movs	r2, #0
 8006844:	4b25      	ldr	r3, [pc, #148]	@ (80068dc <_dtoa_r+0x70c>)
 8006846:	f7f9 ff05 	bl	8000654 <__aeabi_dmul>
 800684a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800684e:	f7fa f987 	bl	8000b60 <__aeabi_dcmpge>
 8006852:	2800      	cmp	r0, #0
 8006854:	f000 815b 	beq.w	8006b0e <_dtoa_r+0x93e>
 8006858:	2400      	movs	r4, #0
 800685a:	4625      	mov	r5, r4
 800685c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800685e:	4656      	mov	r6, sl
 8006860:	43db      	mvns	r3, r3
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	2700      	movs	r7, #0
 8006866:	4621      	mov	r1, r4
 8006868:	4658      	mov	r0, fp
 800686a:	f000 fbb7 	bl	8006fdc <_Bfree>
 800686e:	2d00      	cmp	r5, #0
 8006870:	d0dc      	beq.n	800682c <_dtoa_r+0x65c>
 8006872:	b12f      	cbz	r7, 8006880 <_dtoa_r+0x6b0>
 8006874:	42af      	cmp	r7, r5
 8006876:	d003      	beq.n	8006880 <_dtoa_r+0x6b0>
 8006878:	4639      	mov	r1, r7
 800687a:	4658      	mov	r0, fp
 800687c:	f000 fbae 	bl	8006fdc <_Bfree>
 8006880:	4629      	mov	r1, r5
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fbaa 	bl	8006fdc <_Bfree>
 8006888:	e7d0      	b.n	800682c <_dtoa_r+0x65c>
 800688a:	9704      	str	r7, [sp, #16]
 800688c:	4633      	mov	r3, r6
 800688e:	461e      	mov	r6, r3
 8006890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006894:	2a39      	cmp	r2, #57	@ 0x39
 8006896:	d107      	bne.n	80068a8 <_dtoa_r+0x6d8>
 8006898:	459a      	cmp	sl, r3
 800689a:	d1f8      	bne.n	800688e <_dtoa_r+0x6be>
 800689c:	9a04      	ldr	r2, [sp, #16]
 800689e:	3201      	adds	r2, #1
 80068a0:	9204      	str	r2, [sp, #16]
 80068a2:	2230      	movs	r2, #48	@ 0x30
 80068a4:	f88a 2000 	strb.w	r2, [sl]
 80068a8:	781a      	ldrb	r2, [r3, #0]
 80068aa:	3201      	adds	r2, #1
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e7bd      	b.n	800682c <_dtoa_r+0x65c>
 80068b0:	2200      	movs	r2, #0
 80068b2:	4b09      	ldr	r3, [pc, #36]	@ (80068d8 <_dtoa_r+0x708>)
 80068b4:	f7f9 fece 	bl	8000654 <__aeabi_dmul>
 80068b8:	2200      	movs	r2, #0
 80068ba:	2300      	movs	r3, #0
 80068bc:	4604      	mov	r4, r0
 80068be:	460d      	mov	r5, r1
 80068c0:	f7fa f930 	bl	8000b24 <__aeabi_dcmpeq>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	f43f aebc 	beq.w	8006642 <_dtoa_r+0x472>
 80068ca:	e6f1      	b.n	80066b0 <_dtoa_r+0x4e0>
 80068cc:	080084b8 	.word	0x080084b8
 80068d0:	3fe00000 	.word	0x3fe00000
 80068d4:	3ff00000 	.word	0x3ff00000
 80068d8:	40240000 	.word	0x40240000
 80068dc:	40140000 	.word	0x40140000
 80068e0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	f000 80db 	beq.w	8006a9e <_dtoa_r+0x8ce>
 80068e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068ea:	2a01      	cmp	r2, #1
 80068ec:	f300 80bf 	bgt.w	8006a6e <_dtoa_r+0x89e>
 80068f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068f2:	2a00      	cmp	r2, #0
 80068f4:	f000 80b7 	beq.w	8006a66 <_dtoa_r+0x896>
 80068f8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068fc:	4646      	mov	r6, r8
 80068fe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006900:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006902:	2101      	movs	r1, #1
 8006904:	441a      	add	r2, r3
 8006906:	4658      	mov	r0, fp
 8006908:	4498      	add	r8, r3
 800690a:	9209      	str	r2, [sp, #36]	@ 0x24
 800690c:	f000 fc1a 	bl	8007144 <__i2b>
 8006910:	4605      	mov	r5, r0
 8006912:	b15e      	cbz	r6, 800692c <_dtoa_r+0x75c>
 8006914:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	dd08      	ble.n	800692c <_dtoa_r+0x75c>
 800691a:	42b3      	cmp	r3, r6
 800691c:	bfa8      	it	ge
 800691e:	4633      	movge	r3, r6
 8006920:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006922:	eba8 0803 	sub.w	r8, r8, r3
 8006926:	1af6      	subs	r6, r6, r3
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	9309      	str	r3, [sp, #36]	@ 0x24
 800692c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800692e:	b1f3      	cbz	r3, 800696e <_dtoa_r+0x79e>
 8006930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006932:	2b00      	cmp	r3, #0
 8006934:	f000 80b7 	beq.w	8006aa6 <_dtoa_r+0x8d6>
 8006938:	b18c      	cbz	r4, 800695e <_dtoa_r+0x78e>
 800693a:	4629      	mov	r1, r5
 800693c:	4622      	mov	r2, r4
 800693e:	4658      	mov	r0, fp
 8006940:	f000 fcbe 	bl	80072c0 <__pow5mult>
 8006944:	464a      	mov	r2, r9
 8006946:	4601      	mov	r1, r0
 8006948:	4605      	mov	r5, r0
 800694a:	4658      	mov	r0, fp
 800694c:	f000 fc10 	bl	8007170 <__multiply>
 8006950:	4649      	mov	r1, r9
 8006952:	9004      	str	r0, [sp, #16]
 8006954:	4658      	mov	r0, fp
 8006956:	f000 fb41 	bl	8006fdc <_Bfree>
 800695a:	9b04      	ldr	r3, [sp, #16]
 800695c:	4699      	mov	r9, r3
 800695e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006960:	1b1a      	subs	r2, r3, r4
 8006962:	d004      	beq.n	800696e <_dtoa_r+0x79e>
 8006964:	4649      	mov	r1, r9
 8006966:	4658      	mov	r0, fp
 8006968:	f000 fcaa 	bl	80072c0 <__pow5mult>
 800696c:	4681      	mov	r9, r0
 800696e:	2101      	movs	r1, #1
 8006970:	4658      	mov	r0, fp
 8006972:	f000 fbe7 	bl	8007144 <__i2b>
 8006976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006978:	4604      	mov	r4, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 81c9 	beq.w	8006d12 <_dtoa_r+0xb42>
 8006980:	461a      	mov	r2, r3
 8006982:	4601      	mov	r1, r0
 8006984:	4658      	mov	r0, fp
 8006986:	f000 fc9b 	bl	80072c0 <__pow5mult>
 800698a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800698c:	4604      	mov	r4, r0
 800698e:	2b01      	cmp	r3, #1
 8006990:	f300 808f 	bgt.w	8006ab2 <_dtoa_r+0x8e2>
 8006994:	9b02      	ldr	r3, [sp, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f040 8087 	bne.w	8006aaa <_dtoa_r+0x8da>
 800699c:	9b03      	ldr	r3, [sp, #12]
 800699e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f040 8083 	bne.w	8006aae <_dtoa_r+0x8de>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069ae:	0d1b      	lsrs	r3, r3, #20
 80069b0:	051b      	lsls	r3, r3, #20
 80069b2:	b12b      	cbz	r3, 80069c0 <_dtoa_r+0x7f0>
 80069b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b6:	f108 0801 	add.w	r8, r8, #1
 80069ba:	3301      	adds	r3, #1
 80069bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069be:	2301      	movs	r3, #1
 80069c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80069c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 81aa 	beq.w	8006d1e <_dtoa_r+0xb4e>
 80069ca:	6923      	ldr	r3, [r4, #16]
 80069cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d0:	6918      	ldr	r0, [r3, #16]
 80069d2:	f000 fb6b 	bl	80070ac <__hi0bits>
 80069d6:	f1c0 0020 	rsb	r0, r0, #32
 80069da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069dc:	4418      	add	r0, r3
 80069de:	f010 001f 	ands.w	r0, r0, #31
 80069e2:	d071      	beq.n	8006ac8 <_dtoa_r+0x8f8>
 80069e4:	f1c0 0320 	rsb	r3, r0, #32
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	dd65      	ble.n	8006ab8 <_dtoa_r+0x8e8>
 80069ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ee:	f1c0 001c 	rsb	r0, r0, #28
 80069f2:	4403      	add	r3, r0
 80069f4:	4480      	add	r8, r0
 80069f6:	4406      	add	r6, r0
 80069f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069fa:	f1b8 0f00 	cmp.w	r8, #0
 80069fe:	dd05      	ble.n	8006a0c <_dtoa_r+0x83c>
 8006a00:	4649      	mov	r1, r9
 8006a02:	4642      	mov	r2, r8
 8006a04:	4658      	mov	r0, fp
 8006a06:	f000 fcb5 	bl	8007374 <__lshift>
 8006a0a:	4681      	mov	r9, r0
 8006a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	dd05      	ble.n	8006a1e <_dtoa_r+0x84e>
 8006a12:	4621      	mov	r1, r4
 8006a14:	461a      	mov	r2, r3
 8006a16:	4658      	mov	r0, fp
 8006a18:	f000 fcac 	bl	8007374 <__lshift>
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d053      	beq.n	8006acc <_dtoa_r+0x8fc>
 8006a24:	4621      	mov	r1, r4
 8006a26:	4648      	mov	r0, r9
 8006a28:	f000 fd10 	bl	800744c <__mcmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	da4d      	bge.n	8006acc <_dtoa_r+0x8fc>
 8006a30:	1e7b      	subs	r3, r7, #1
 8006a32:	4649      	mov	r1, r9
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	220a      	movs	r2, #10
 8006a38:	2300      	movs	r3, #0
 8006a3a:	4658      	mov	r0, fp
 8006a3c:	f000 faf0 	bl	8007020 <__multadd>
 8006a40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a42:	4681      	mov	r9, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 816c 	beq.w	8006d22 <_dtoa_r+0xb52>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	220a      	movs	r2, #10
 8006a50:	4658      	mov	r0, fp
 8006a52:	f000 fae5 	bl	8007020 <__multadd>
 8006a56:	9b08      	ldr	r3, [sp, #32]
 8006a58:	4605      	mov	r5, r0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dc61      	bgt.n	8006b22 <_dtoa_r+0x952>
 8006a5e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	dc3b      	bgt.n	8006adc <_dtoa_r+0x90c>
 8006a64:	e05d      	b.n	8006b22 <_dtoa_r+0x952>
 8006a66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a68:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a6c:	e746      	b.n	80068fc <_dtoa_r+0x72c>
 8006a6e:	9b07      	ldr	r3, [sp, #28]
 8006a70:	1e5c      	subs	r4, r3, #1
 8006a72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	bfbf      	itttt	lt
 8006a78:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a7a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006a7c:	1ae3      	sublt	r3, r4, r3
 8006a7e:	18d2      	addlt	r2, r2, r3
 8006a80:	bfa8      	it	ge
 8006a82:	1b1c      	subge	r4, r3, r4
 8006a84:	9b07      	ldr	r3, [sp, #28]
 8006a86:	bfbe      	ittt	lt
 8006a88:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a8a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006a8c:	2400      	movlt	r4, #0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bfb5      	itete	lt
 8006a92:	eba8 0603 	sublt.w	r6, r8, r3
 8006a96:	4646      	movge	r6, r8
 8006a98:	2300      	movlt	r3, #0
 8006a9a:	9b07      	ldrge	r3, [sp, #28]
 8006a9c:	e730      	b.n	8006900 <_dtoa_r+0x730>
 8006a9e:	4646      	mov	r6, r8
 8006aa0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006aa2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006aa4:	e735      	b.n	8006912 <_dtoa_r+0x742>
 8006aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006aa8:	e75c      	b.n	8006964 <_dtoa_r+0x794>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e788      	b.n	80069c0 <_dtoa_r+0x7f0>
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	e786      	b.n	80069c0 <_dtoa_r+0x7f0>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab6:	e788      	b.n	80069ca <_dtoa_r+0x7fa>
 8006ab8:	d09f      	beq.n	80069fa <_dtoa_r+0x82a>
 8006aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006abc:	331c      	adds	r3, #28
 8006abe:	441a      	add	r2, r3
 8006ac0:	4498      	add	r8, r3
 8006ac2:	441e      	add	r6, r3
 8006ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ac6:	e798      	b.n	80069fa <_dtoa_r+0x82a>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	e7f6      	b.n	8006aba <_dtoa_r+0x8ea>
 8006acc:	9b07      	ldr	r3, [sp, #28]
 8006ace:	9704      	str	r7, [sp, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dc20      	bgt.n	8006b16 <_dtoa_r+0x946>
 8006ad4:	9308      	str	r3, [sp, #32]
 8006ad6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	dd1e      	ble.n	8006b1a <_dtoa_r+0x94a>
 8006adc:	9b08      	ldr	r3, [sp, #32]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f47f aebc 	bne.w	800685c <_dtoa_r+0x68c>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	2205      	movs	r2, #5
 8006ae8:	4658      	mov	r0, fp
 8006aea:	f000 fa99 	bl	8007020 <__multadd>
 8006aee:	4601      	mov	r1, r0
 8006af0:	4604      	mov	r4, r0
 8006af2:	4648      	mov	r0, r9
 8006af4:	f000 fcaa 	bl	800744c <__mcmp>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	f77f aeaf 	ble.w	800685c <_dtoa_r+0x68c>
 8006afe:	2331      	movs	r3, #49	@ 0x31
 8006b00:	4656      	mov	r6, sl
 8006b02:	f806 3b01 	strb.w	r3, [r6], #1
 8006b06:	9b04      	ldr	r3, [sp, #16]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	9304      	str	r3, [sp, #16]
 8006b0c:	e6aa      	b.n	8006864 <_dtoa_r+0x694>
 8006b0e:	9c07      	ldr	r4, [sp, #28]
 8006b10:	9704      	str	r7, [sp, #16]
 8006b12:	4625      	mov	r5, r4
 8006b14:	e7f3      	b.n	8006afe <_dtoa_r+0x92e>
 8006b16:	9b07      	ldr	r3, [sp, #28]
 8006b18:	9308      	str	r3, [sp, #32]
 8006b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8104 	beq.w	8006d2a <_dtoa_r+0xb5a>
 8006b22:	2e00      	cmp	r6, #0
 8006b24:	dd05      	ble.n	8006b32 <_dtoa_r+0x962>
 8006b26:	4629      	mov	r1, r5
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4658      	mov	r0, fp
 8006b2c:	f000 fc22 	bl	8007374 <__lshift>
 8006b30:	4605      	mov	r5, r0
 8006b32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d05a      	beq.n	8006bee <_dtoa_r+0xa1e>
 8006b38:	4658      	mov	r0, fp
 8006b3a:	6869      	ldr	r1, [r5, #4]
 8006b3c:	f000 fa0e 	bl	8006f5c <_Balloc>
 8006b40:	4606      	mov	r6, r0
 8006b42:	b928      	cbnz	r0, 8006b50 <_dtoa_r+0x980>
 8006b44:	4602      	mov	r2, r0
 8006b46:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b4a:	4b83      	ldr	r3, [pc, #524]	@ (8006d58 <_dtoa_r+0xb88>)
 8006b4c:	f7ff bb54 	b.w	80061f8 <_dtoa_r+0x28>
 8006b50:	692a      	ldr	r2, [r5, #16]
 8006b52:	f105 010c 	add.w	r1, r5, #12
 8006b56:	3202      	adds	r2, #2
 8006b58:	0092      	lsls	r2, r2, #2
 8006b5a:	300c      	adds	r0, #12
 8006b5c:	f000 ffa8 	bl	8007ab0 <memcpy>
 8006b60:	2201      	movs	r2, #1
 8006b62:	4631      	mov	r1, r6
 8006b64:	4658      	mov	r0, fp
 8006b66:	f000 fc05 	bl	8007374 <__lshift>
 8006b6a:	462f      	mov	r7, r5
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	f10a 0301 	add.w	r3, sl, #1
 8006b72:	9307      	str	r3, [sp, #28]
 8006b74:	9b08      	ldr	r3, [sp, #32]
 8006b76:	4453      	add	r3, sl
 8006b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b7a:	9b02      	ldr	r3, [sp, #8]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b82:	9b07      	ldr	r3, [sp, #28]
 8006b84:	4621      	mov	r1, r4
 8006b86:	3b01      	subs	r3, #1
 8006b88:	4648      	mov	r0, r9
 8006b8a:	9302      	str	r3, [sp, #8]
 8006b8c:	f7ff fa95 	bl	80060ba <quorem>
 8006b90:	4639      	mov	r1, r7
 8006b92:	9008      	str	r0, [sp, #32]
 8006b94:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f000 fc57 	bl	800744c <__mcmp>
 8006b9e:	462a      	mov	r2, r5
 8006ba0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	f000 fc6d 	bl	8007484 <__mdiff>
 8006baa:	68c2      	ldr	r2, [r0, #12]
 8006bac:	4606      	mov	r6, r0
 8006bae:	bb02      	cbnz	r2, 8006bf2 <_dtoa_r+0xa22>
 8006bb0:	4601      	mov	r1, r0
 8006bb2:	4648      	mov	r0, r9
 8006bb4:	f000 fc4a 	bl	800744c <__mcmp>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4658      	mov	r0, fp
 8006bbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bc0:	f000 fa0c 	bl	8006fdc <_Bfree>
 8006bc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006bc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bc8:	9e07      	ldr	r6, [sp, #28]
 8006bca:	ea43 0102 	orr.w	r1, r3, r2
 8006bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd0:	4319      	orrs	r1, r3
 8006bd2:	d110      	bne.n	8006bf6 <_dtoa_r+0xa26>
 8006bd4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bd8:	d029      	beq.n	8006c2e <_dtoa_r+0xa5e>
 8006bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	dd02      	ble.n	8006be6 <_dtoa_r+0xa16>
 8006be0:	9b08      	ldr	r3, [sp, #32]
 8006be2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006be6:	9b02      	ldr	r3, [sp, #8]
 8006be8:	f883 8000 	strb.w	r8, [r3]
 8006bec:	e63b      	b.n	8006866 <_dtoa_r+0x696>
 8006bee:	4628      	mov	r0, r5
 8006bf0:	e7bb      	b.n	8006b6a <_dtoa_r+0x99a>
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	e7e1      	b.n	8006bba <_dtoa_r+0x9ea>
 8006bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	db04      	blt.n	8006c06 <_dtoa_r+0xa36>
 8006bfc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c02:	430b      	orrs	r3, r1
 8006c04:	d120      	bne.n	8006c48 <_dtoa_r+0xa78>
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	dded      	ble.n	8006be6 <_dtoa_r+0xa16>
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	4658      	mov	r0, fp
 8006c10:	f000 fbb0 	bl	8007374 <__lshift>
 8006c14:	4621      	mov	r1, r4
 8006c16:	4681      	mov	r9, r0
 8006c18:	f000 fc18 	bl	800744c <__mcmp>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	dc03      	bgt.n	8006c28 <_dtoa_r+0xa58>
 8006c20:	d1e1      	bne.n	8006be6 <_dtoa_r+0xa16>
 8006c22:	f018 0f01 	tst.w	r8, #1
 8006c26:	d0de      	beq.n	8006be6 <_dtoa_r+0xa16>
 8006c28:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c2c:	d1d8      	bne.n	8006be0 <_dtoa_r+0xa10>
 8006c2e:	2339      	movs	r3, #57	@ 0x39
 8006c30:	9a02      	ldr	r2, [sp, #8]
 8006c32:	7013      	strb	r3, [r2, #0]
 8006c34:	4633      	mov	r3, r6
 8006c36:	461e      	mov	r6, r3
 8006c38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	2a39      	cmp	r2, #57	@ 0x39
 8006c40:	d052      	beq.n	8006ce8 <_dtoa_r+0xb18>
 8006c42:	3201      	adds	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	e60e      	b.n	8006866 <_dtoa_r+0x696>
 8006c48:	2a00      	cmp	r2, #0
 8006c4a:	dd07      	ble.n	8006c5c <_dtoa_r+0xa8c>
 8006c4c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c50:	d0ed      	beq.n	8006c2e <_dtoa_r+0xa5e>
 8006c52:	9a02      	ldr	r2, [sp, #8]
 8006c54:	f108 0301 	add.w	r3, r8, #1
 8006c58:	7013      	strb	r3, [r2, #0]
 8006c5a:	e604      	b.n	8006866 <_dtoa_r+0x696>
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	9a07      	ldr	r2, [sp, #28]
 8006c60:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d028      	beq.n	8006cbc <_dtoa_r+0xaec>
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	220a      	movs	r2, #10
 8006c70:	4658      	mov	r0, fp
 8006c72:	f000 f9d5 	bl	8007020 <__multadd>
 8006c76:	42af      	cmp	r7, r5
 8006c78:	4681      	mov	r9, r0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	f04f 020a 	mov.w	r2, #10
 8006c82:	4639      	mov	r1, r7
 8006c84:	4658      	mov	r0, fp
 8006c86:	d107      	bne.n	8006c98 <_dtoa_r+0xac8>
 8006c88:	f000 f9ca 	bl	8007020 <__multadd>
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	4605      	mov	r5, r0
 8006c90:	9b07      	ldr	r3, [sp, #28]
 8006c92:	3301      	adds	r3, #1
 8006c94:	9307      	str	r3, [sp, #28]
 8006c96:	e774      	b.n	8006b82 <_dtoa_r+0x9b2>
 8006c98:	f000 f9c2 	bl	8007020 <__multadd>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4607      	mov	r7, r0
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	220a      	movs	r2, #10
 8006ca4:	4658      	mov	r0, fp
 8006ca6:	f000 f9bb 	bl	8007020 <__multadd>
 8006caa:	4605      	mov	r5, r0
 8006cac:	e7f0      	b.n	8006c90 <_dtoa_r+0xac0>
 8006cae:	9b08      	ldr	r3, [sp, #32]
 8006cb0:	2700      	movs	r7, #0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfcc      	ite	gt
 8006cb6:	461e      	movgt	r6, r3
 8006cb8:	2601      	movle	r6, #1
 8006cba:	4456      	add	r6, sl
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4658      	mov	r0, fp
 8006cc2:	f000 fb57 	bl	8007374 <__lshift>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4681      	mov	r9, r0
 8006cca:	f000 fbbf 	bl	800744c <__mcmp>
 8006cce:	2800      	cmp	r0, #0
 8006cd0:	dcb0      	bgt.n	8006c34 <_dtoa_r+0xa64>
 8006cd2:	d102      	bne.n	8006cda <_dtoa_r+0xb0a>
 8006cd4:	f018 0f01 	tst.w	r8, #1
 8006cd8:	d1ac      	bne.n	8006c34 <_dtoa_r+0xa64>
 8006cda:	4633      	mov	r3, r6
 8006cdc:	461e      	mov	r6, r3
 8006cde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ce2:	2a30      	cmp	r2, #48	@ 0x30
 8006ce4:	d0fa      	beq.n	8006cdc <_dtoa_r+0xb0c>
 8006ce6:	e5be      	b.n	8006866 <_dtoa_r+0x696>
 8006ce8:	459a      	cmp	sl, r3
 8006cea:	d1a4      	bne.n	8006c36 <_dtoa_r+0xa66>
 8006cec:	9b04      	ldr	r3, [sp, #16]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	2331      	movs	r3, #49	@ 0x31
 8006cf4:	f88a 3000 	strb.w	r3, [sl]
 8006cf8:	e5b5      	b.n	8006866 <_dtoa_r+0x696>
 8006cfa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cfc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d5c <_dtoa_r+0xb8c>
 8006d00:	b11b      	cbz	r3, 8006d0a <_dtoa_r+0xb3a>
 8006d02:	f10a 0308 	add.w	r3, sl, #8
 8006d06:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d08:	6013      	str	r3, [r2, #0]
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	b017      	add	sp, #92	@ 0x5c
 8006d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d12:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f77f ae3d 	ble.w	8006994 <_dtoa_r+0x7c4>
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d1e:	2001      	movs	r0, #1
 8006d20:	e65b      	b.n	80069da <_dtoa_r+0x80a>
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f77f aed6 	ble.w	8006ad6 <_dtoa_r+0x906>
 8006d2a:	4656      	mov	r6, sl
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4648      	mov	r0, r9
 8006d30:	f7ff f9c3 	bl	80060ba <quorem>
 8006d34:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d38:	9b08      	ldr	r3, [sp, #32]
 8006d3a:	f806 8b01 	strb.w	r8, [r6], #1
 8006d3e:	eba6 020a 	sub.w	r2, r6, sl
 8006d42:	4293      	cmp	r3, r2
 8006d44:	ddb3      	ble.n	8006cae <_dtoa_r+0xade>
 8006d46:	4649      	mov	r1, r9
 8006d48:	2300      	movs	r3, #0
 8006d4a:	220a      	movs	r2, #10
 8006d4c:	4658      	mov	r0, fp
 8006d4e:	f000 f967 	bl	8007020 <__multadd>
 8006d52:	4681      	mov	r9, r0
 8006d54:	e7ea      	b.n	8006d2c <_dtoa_r+0xb5c>
 8006d56:	bf00      	nop
 8006d58:	08008418 	.word	0x08008418
 8006d5c:	0800839c 	.word	0x0800839c

08006d60 <_free_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4605      	mov	r5, r0
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d040      	beq.n	8006dea <_free_r+0x8a>
 8006d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d6c:	1f0c      	subs	r4, r1, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bfb8      	it	lt
 8006d72:	18e4      	addlt	r4, r4, r3
 8006d74:	f000 f8e6 	bl	8006f44 <__malloc_lock>
 8006d78:	4a1c      	ldr	r2, [pc, #112]	@ (8006dec <_free_r+0x8c>)
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	b933      	cbnz	r3, 8006d8c <_free_r+0x2c>
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	6014      	str	r4, [r2, #0]
 8006d82:	4628      	mov	r0, r5
 8006d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d88:	f000 b8e2 	b.w	8006f50 <__malloc_unlock>
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d908      	bls.n	8006da2 <_free_r+0x42>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	1821      	adds	r1, r4, r0
 8006d94:	428b      	cmp	r3, r1
 8006d96:	bf01      	itttt	eq
 8006d98:	6819      	ldreq	r1, [r3, #0]
 8006d9a:	685b      	ldreq	r3, [r3, #4]
 8006d9c:	1809      	addeq	r1, r1, r0
 8006d9e:	6021      	streq	r1, [r4, #0]
 8006da0:	e7ed      	b.n	8006d7e <_free_r+0x1e>
 8006da2:	461a      	mov	r2, r3
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	b10b      	cbz	r3, 8006dac <_free_r+0x4c>
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	d9fa      	bls.n	8006da2 <_free_r+0x42>
 8006dac:	6811      	ldr	r1, [r2, #0]
 8006dae:	1850      	adds	r0, r2, r1
 8006db0:	42a0      	cmp	r0, r4
 8006db2:	d10b      	bne.n	8006dcc <_free_r+0x6c>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	4401      	add	r1, r0
 8006db8:	1850      	adds	r0, r2, r1
 8006dba:	4283      	cmp	r3, r0
 8006dbc:	6011      	str	r1, [r2, #0]
 8006dbe:	d1e0      	bne.n	8006d82 <_free_r+0x22>
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4408      	add	r0, r1
 8006dc6:	6010      	str	r0, [r2, #0]
 8006dc8:	6053      	str	r3, [r2, #4]
 8006dca:	e7da      	b.n	8006d82 <_free_r+0x22>
 8006dcc:	d902      	bls.n	8006dd4 <_free_r+0x74>
 8006dce:	230c      	movs	r3, #12
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	e7d6      	b.n	8006d82 <_free_r+0x22>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	1821      	adds	r1, r4, r0
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	bf01      	itttt	eq
 8006ddc:	6819      	ldreq	r1, [r3, #0]
 8006dde:	685b      	ldreq	r3, [r3, #4]
 8006de0:	1809      	addeq	r1, r1, r0
 8006de2:	6021      	streq	r1, [r4, #0]
 8006de4:	6063      	str	r3, [r4, #4]
 8006de6:	6054      	str	r4, [r2, #4]
 8006de8:	e7cb      	b.n	8006d82 <_free_r+0x22>
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20000ae8 	.word	0x20000ae8

08006df0 <malloc>:
 8006df0:	4b02      	ldr	r3, [pc, #8]	@ (8006dfc <malloc+0xc>)
 8006df2:	4601      	mov	r1, r0
 8006df4:	6818      	ldr	r0, [r3, #0]
 8006df6:	f000 b825 	b.w	8006e44 <_malloc_r>
 8006dfa:	bf00      	nop
 8006dfc:	200000dc 	.word	0x200000dc

08006e00 <sbrk_aligned>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	4e0f      	ldr	r6, [pc, #60]	@ (8006e40 <sbrk_aligned+0x40>)
 8006e04:	460c      	mov	r4, r1
 8006e06:	6831      	ldr	r1, [r6, #0]
 8006e08:	4605      	mov	r5, r0
 8006e0a:	b911      	cbnz	r1, 8006e12 <sbrk_aligned+0x12>
 8006e0c:	f000 fe40 	bl	8007a90 <_sbrk_r>
 8006e10:	6030      	str	r0, [r6, #0]
 8006e12:	4621      	mov	r1, r4
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 fe3b 	bl	8007a90 <_sbrk_r>
 8006e1a:	1c43      	adds	r3, r0, #1
 8006e1c:	d103      	bne.n	8006e26 <sbrk_aligned+0x26>
 8006e1e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e22:	4620      	mov	r0, r4
 8006e24:	bd70      	pop	{r4, r5, r6, pc}
 8006e26:	1cc4      	adds	r4, r0, #3
 8006e28:	f024 0403 	bic.w	r4, r4, #3
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d0f8      	beq.n	8006e22 <sbrk_aligned+0x22>
 8006e30:	1a21      	subs	r1, r4, r0
 8006e32:	4628      	mov	r0, r5
 8006e34:	f000 fe2c 	bl	8007a90 <_sbrk_r>
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d1f2      	bne.n	8006e22 <sbrk_aligned+0x22>
 8006e3c:	e7ef      	b.n	8006e1e <sbrk_aligned+0x1e>
 8006e3e:	bf00      	nop
 8006e40:	20000ae4 	.word	0x20000ae4

08006e44 <_malloc_r>:
 8006e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e48:	1ccd      	adds	r5, r1, #3
 8006e4a:	f025 0503 	bic.w	r5, r5, #3
 8006e4e:	3508      	adds	r5, #8
 8006e50:	2d0c      	cmp	r5, #12
 8006e52:	bf38      	it	cc
 8006e54:	250c      	movcc	r5, #12
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	4606      	mov	r6, r0
 8006e5a:	db01      	blt.n	8006e60 <_malloc_r+0x1c>
 8006e5c:	42a9      	cmp	r1, r5
 8006e5e:	d904      	bls.n	8006e6a <_malloc_r+0x26>
 8006e60:	230c      	movs	r3, #12
 8006e62:	6033      	str	r3, [r6, #0]
 8006e64:	2000      	movs	r0, #0
 8006e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f40 <_malloc_r+0xfc>
 8006e6e:	f000 f869 	bl	8006f44 <__malloc_lock>
 8006e72:	f8d8 3000 	ldr.w	r3, [r8]
 8006e76:	461c      	mov	r4, r3
 8006e78:	bb44      	cbnz	r4, 8006ecc <_malloc_r+0x88>
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f7ff ffbf 	bl	8006e00 <sbrk_aligned>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	4604      	mov	r4, r0
 8006e86:	d158      	bne.n	8006f3a <_malloc_r+0xf6>
 8006e88:	f8d8 4000 	ldr.w	r4, [r8]
 8006e8c:	4627      	mov	r7, r4
 8006e8e:	2f00      	cmp	r7, #0
 8006e90:	d143      	bne.n	8006f1a <_malloc_r+0xd6>
 8006e92:	2c00      	cmp	r4, #0
 8006e94:	d04b      	beq.n	8006f2e <_malloc_r+0xea>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	4639      	mov	r1, r7
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	eb04 0903 	add.w	r9, r4, r3
 8006ea0:	f000 fdf6 	bl	8007a90 <_sbrk_r>
 8006ea4:	4581      	cmp	r9, r0
 8006ea6:	d142      	bne.n	8006f2e <_malloc_r+0xea>
 8006ea8:	6821      	ldr	r1, [r4, #0]
 8006eaa:	4630      	mov	r0, r6
 8006eac:	1a6d      	subs	r5, r5, r1
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f7ff ffa6 	bl	8006e00 <sbrk_aligned>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d03a      	beq.n	8006f2e <_malloc_r+0xea>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	442b      	add	r3, r5
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	bb62      	cbnz	r2, 8006f20 <_malloc_r+0xdc>
 8006ec6:	f8c8 7000 	str.w	r7, [r8]
 8006eca:	e00f      	b.n	8006eec <_malloc_r+0xa8>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	1b52      	subs	r2, r2, r5
 8006ed0:	d420      	bmi.n	8006f14 <_malloc_r+0xd0>
 8006ed2:	2a0b      	cmp	r2, #11
 8006ed4:	d917      	bls.n	8006f06 <_malloc_r+0xc2>
 8006ed6:	1961      	adds	r1, r4, r5
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	6025      	str	r5, [r4, #0]
 8006edc:	bf18      	it	ne
 8006ede:	6059      	strne	r1, [r3, #4]
 8006ee0:	6863      	ldr	r3, [r4, #4]
 8006ee2:	bf08      	it	eq
 8006ee4:	f8c8 1000 	streq.w	r1, [r8]
 8006ee8:	5162      	str	r2, [r4, r5]
 8006eea:	604b      	str	r3, [r1, #4]
 8006eec:	4630      	mov	r0, r6
 8006eee:	f000 f82f 	bl	8006f50 <__malloc_unlock>
 8006ef2:	f104 000b 	add.w	r0, r4, #11
 8006ef6:	1d23      	adds	r3, r4, #4
 8006ef8:	f020 0007 	bic.w	r0, r0, #7
 8006efc:	1ac2      	subs	r2, r0, r3
 8006efe:	bf1c      	itt	ne
 8006f00:	1a1b      	subne	r3, r3, r0
 8006f02:	50a3      	strne	r3, [r4, r2]
 8006f04:	e7af      	b.n	8006e66 <_malloc_r+0x22>
 8006f06:	6862      	ldr	r2, [r4, #4]
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	bf0c      	ite	eq
 8006f0c:	f8c8 2000 	streq.w	r2, [r8]
 8006f10:	605a      	strne	r2, [r3, #4]
 8006f12:	e7eb      	b.n	8006eec <_malloc_r+0xa8>
 8006f14:	4623      	mov	r3, r4
 8006f16:	6864      	ldr	r4, [r4, #4]
 8006f18:	e7ae      	b.n	8006e78 <_malloc_r+0x34>
 8006f1a:	463c      	mov	r4, r7
 8006f1c:	687f      	ldr	r7, [r7, #4]
 8006f1e:	e7b6      	b.n	8006e8e <_malloc_r+0x4a>
 8006f20:	461a      	mov	r2, r3
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	42a3      	cmp	r3, r4
 8006f26:	d1fb      	bne.n	8006f20 <_malloc_r+0xdc>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6053      	str	r3, [r2, #4]
 8006f2c:	e7de      	b.n	8006eec <_malloc_r+0xa8>
 8006f2e:	230c      	movs	r3, #12
 8006f30:	4630      	mov	r0, r6
 8006f32:	6033      	str	r3, [r6, #0]
 8006f34:	f000 f80c 	bl	8006f50 <__malloc_unlock>
 8006f38:	e794      	b.n	8006e64 <_malloc_r+0x20>
 8006f3a:	6005      	str	r5, [r0, #0]
 8006f3c:	e7d6      	b.n	8006eec <_malloc_r+0xa8>
 8006f3e:	bf00      	nop
 8006f40:	20000ae8 	.word	0x20000ae8

08006f44 <__malloc_lock>:
 8006f44:	4801      	ldr	r0, [pc, #4]	@ (8006f4c <__malloc_lock+0x8>)
 8006f46:	f7ff b8a8 	b.w	800609a <__retarget_lock_acquire_recursive>
 8006f4a:	bf00      	nop
 8006f4c:	20000ae0 	.word	0x20000ae0

08006f50 <__malloc_unlock>:
 8006f50:	4801      	ldr	r0, [pc, #4]	@ (8006f58 <__malloc_unlock+0x8>)
 8006f52:	f7ff b8a3 	b.w	800609c <__retarget_lock_release_recursive>
 8006f56:	bf00      	nop
 8006f58:	20000ae0 	.word	0x20000ae0

08006f5c <_Balloc>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	69c6      	ldr	r6, [r0, #28]
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	b976      	cbnz	r6, 8006f84 <_Balloc+0x28>
 8006f66:	2010      	movs	r0, #16
 8006f68:	f7ff ff42 	bl	8006df0 <malloc>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	61e0      	str	r0, [r4, #28]
 8006f70:	b920      	cbnz	r0, 8006f7c <_Balloc+0x20>
 8006f72:	216b      	movs	r1, #107	@ 0x6b
 8006f74:	4b17      	ldr	r3, [pc, #92]	@ (8006fd4 <_Balloc+0x78>)
 8006f76:	4818      	ldr	r0, [pc, #96]	@ (8006fd8 <_Balloc+0x7c>)
 8006f78:	f000 fda8 	bl	8007acc <__assert_func>
 8006f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f80:	6006      	str	r6, [r0, #0]
 8006f82:	60c6      	str	r6, [r0, #12]
 8006f84:	69e6      	ldr	r6, [r4, #28]
 8006f86:	68f3      	ldr	r3, [r6, #12]
 8006f88:	b183      	cbz	r3, 8006fac <_Balloc+0x50>
 8006f8a:	69e3      	ldr	r3, [r4, #28]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f92:	b9b8      	cbnz	r0, 8006fc4 <_Balloc+0x68>
 8006f94:	2101      	movs	r1, #1
 8006f96:	fa01 f605 	lsl.w	r6, r1, r5
 8006f9a:	1d72      	adds	r2, r6, #5
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	0092      	lsls	r2, r2, #2
 8006fa0:	f000 fdb2 	bl	8007b08 <_calloc_r>
 8006fa4:	b160      	cbz	r0, 8006fc0 <_Balloc+0x64>
 8006fa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006faa:	e00e      	b.n	8006fca <_Balloc+0x6e>
 8006fac:	2221      	movs	r2, #33	@ 0x21
 8006fae:	2104      	movs	r1, #4
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f000 fda9 	bl	8007b08 <_calloc_r>
 8006fb6:	69e3      	ldr	r3, [r4, #28]
 8006fb8:	60f0      	str	r0, [r6, #12]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e4      	bne.n	8006f8a <_Balloc+0x2e>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}
 8006fc4:	6802      	ldr	r2, [r0, #0]
 8006fc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fd0:	e7f7      	b.n	8006fc2 <_Balloc+0x66>
 8006fd2:	bf00      	nop
 8006fd4:	080083a9 	.word	0x080083a9
 8006fd8:	08008429 	.word	0x08008429

08006fdc <_Bfree>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	69c6      	ldr	r6, [r0, #28]
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	b976      	cbnz	r6, 8007004 <_Bfree+0x28>
 8006fe6:	2010      	movs	r0, #16
 8006fe8:	f7ff ff02 	bl	8006df0 <malloc>
 8006fec:	4602      	mov	r2, r0
 8006fee:	61e8      	str	r0, [r5, #28]
 8006ff0:	b920      	cbnz	r0, 8006ffc <_Bfree+0x20>
 8006ff2:	218f      	movs	r1, #143	@ 0x8f
 8006ff4:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <_Bfree+0x3c>)
 8006ff6:	4809      	ldr	r0, [pc, #36]	@ (800701c <_Bfree+0x40>)
 8006ff8:	f000 fd68 	bl	8007acc <__assert_func>
 8006ffc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007000:	6006      	str	r6, [r0, #0]
 8007002:	60c6      	str	r6, [r0, #12]
 8007004:	b13c      	cbz	r4, 8007016 <_Bfree+0x3a>
 8007006:	69eb      	ldr	r3, [r5, #28]
 8007008:	6862      	ldr	r2, [r4, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007010:	6021      	str	r1, [r4, #0]
 8007012:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	080083a9 	.word	0x080083a9
 800701c:	08008429 	.word	0x08008429

08007020 <__multadd>:
 8007020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	4607      	mov	r7, r0
 8007026:	460c      	mov	r4, r1
 8007028:	461e      	mov	r6, r3
 800702a:	2000      	movs	r0, #0
 800702c:	690d      	ldr	r5, [r1, #16]
 800702e:	f101 0c14 	add.w	ip, r1, #20
 8007032:	f8dc 3000 	ldr.w	r3, [ip]
 8007036:	3001      	adds	r0, #1
 8007038:	b299      	uxth	r1, r3
 800703a:	fb02 6101 	mla	r1, r2, r1, r6
 800703e:	0c1e      	lsrs	r6, r3, #16
 8007040:	0c0b      	lsrs	r3, r1, #16
 8007042:	fb02 3306 	mla	r3, r2, r6, r3
 8007046:	b289      	uxth	r1, r1
 8007048:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800704c:	4285      	cmp	r5, r0
 800704e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007052:	f84c 1b04 	str.w	r1, [ip], #4
 8007056:	dcec      	bgt.n	8007032 <__multadd+0x12>
 8007058:	b30e      	cbz	r6, 800709e <__multadd+0x7e>
 800705a:	68a3      	ldr	r3, [r4, #8]
 800705c:	42ab      	cmp	r3, r5
 800705e:	dc19      	bgt.n	8007094 <__multadd+0x74>
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	4638      	mov	r0, r7
 8007064:	3101      	adds	r1, #1
 8007066:	f7ff ff79 	bl	8006f5c <_Balloc>
 800706a:	4680      	mov	r8, r0
 800706c:	b928      	cbnz	r0, 800707a <__multadd+0x5a>
 800706e:	4602      	mov	r2, r0
 8007070:	21ba      	movs	r1, #186	@ 0xba
 8007072:	4b0c      	ldr	r3, [pc, #48]	@ (80070a4 <__multadd+0x84>)
 8007074:	480c      	ldr	r0, [pc, #48]	@ (80070a8 <__multadd+0x88>)
 8007076:	f000 fd29 	bl	8007acc <__assert_func>
 800707a:	6922      	ldr	r2, [r4, #16]
 800707c:	f104 010c 	add.w	r1, r4, #12
 8007080:	3202      	adds	r2, #2
 8007082:	0092      	lsls	r2, r2, #2
 8007084:	300c      	adds	r0, #12
 8007086:	f000 fd13 	bl	8007ab0 <memcpy>
 800708a:	4621      	mov	r1, r4
 800708c:	4638      	mov	r0, r7
 800708e:	f7ff ffa5 	bl	8006fdc <_Bfree>
 8007092:	4644      	mov	r4, r8
 8007094:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007098:	3501      	adds	r5, #1
 800709a:	615e      	str	r6, [r3, #20]
 800709c:	6125      	str	r5, [r4, #16]
 800709e:	4620      	mov	r0, r4
 80070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a4:	08008418 	.word	0x08008418
 80070a8:	08008429 	.word	0x08008429

080070ac <__hi0bits>:
 80070ac:	4603      	mov	r3, r0
 80070ae:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070b2:	bf3a      	itte	cc
 80070b4:	0403      	lslcc	r3, r0, #16
 80070b6:	2010      	movcc	r0, #16
 80070b8:	2000      	movcs	r0, #0
 80070ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070be:	bf3c      	itt	cc
 80070c0:	021b      	lslcc	r3, r3, #8
 80070c2:	3008      	addcc	r0, #8
 80070c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070c8:	bf3c      	itt	cc
 80070ca:	011b      	lslcc	r3, r3, #4
 80070cc:	3004      	addcc	r0, #4
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d2:	bf3c      	itt	cc
 80070d4:	009b      	lslcc	r3, r3, #2
 80070d6:	3002      	addcc	r0, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db05      	blt.n	80070e8 <__hi0bits+0x3c>
 80070dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070e0:	f100 0001 	add.w	r0, r0, #1
 80070e4:	bf08      	it	eq
 80070e6:	2020      	moveq	r0, #32
 80070e8:	4770      	bx	lr

080070ea <__lo0bits>:
 80070ea:	6803      	ldr	r3, [r0, #0]
 80070ec:	4602      	mov	r2, r0
 80070ee:	f013 0007 	ands.w	r0, r3, #7
 80070f2:	d00b      	beq.n	800710c <__lo0bits+0x22>
 80070f4:	07d9      	lsls	r1, r3, #31
 80070f6:	d421      	bmi.n	800713c <__lo0bits+0x52>
 80070f8:	0798      	lsls	r0, r3, #30
 80070fa:	bf49      	itett	mi
 80070fc:	085b      	lsrmi	r3, r3, #1
 80070fe:	089b      	lsrpl	r3, r3, #2
 8007100:	2001      	movmi	r0, #1
 8007102:	6013      	strmi	r3, [r2, #0]
 8007104:	bf5c      	itt	pl
 8007106:	2002      	movpl	r0, #2
 8007108:	6013      	strpl	r3, [r2, #0]
 800710a:	4770      	bx	lr
 800710c:	b299      	uxth	r1, r3
 800710e:	b909      	cbnz	r1, 8007114 <__lo0bits+0x2a>
 8007110:	2010      	movs	r0, #16
 8007112:	0c1b      	lsrs	r3, r3, #16
 8007114:	b2d9      	uxtb	r1, r3
 8007116:	b909      	cbnz	r1, 800711c <__lo0bits+0x32>
 8007118:	3008      	adds	r0, #8
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	0719      	lsls	r1, r3, #28
 800711e:	bf04      	itt	eq
 8007120:	091b      	lsreq	r3, r3, #4
 8007122:	3004      	addeq	r0, #4
 8007124:	0799      	lsls	r1, r3, #30
 8007126:	bf04      	itt	eq
 8007128:	089b      	lsreq	r3, r3, #2
 800712a:	3002      	addeq	r0, #2
 800712c:	07d9      	lsls	r1, r3, #31
 800712e:	d403      	bmi.n	8007138 <__lo0bits+0x4e>
 8007130:	085b      	lsrs	r3, r3, #1
 8007132:	f100 0001 	add.w	r0, r0, #1
 8007136:	d003      	beq.n	8007140 <__lo0bits+0x56>
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	4770      	bx	lr
 800713c:	2000      	movs	r0, #0
 800713e:	4770      	bx	lr
 8007140:	2020      	movs	r0, #32
 8007142:	4770      	bx	lr

08007144 <__i2b>:
 8007144:	b510      	push	{r4, lr}
 8007146:	460c      	mov	r4, r1
 8007148:	2101      	movs	r1, #1
 800714a:	f7ff ff07 	bl	8006f5c <_Balloc>
 800714e:	4602      	mov	r2, r0
 8007150:	b928      	cbnz	r0, 800715e <__i2b+0x1a>
 8007152:	f240 1145 	movw	r1, #325	@ 0x145
 8007156:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <__i2b+0x24>)
 8007158:	4804      	ldr	r0, [pc, #16]	@ (800716c <__i2b+0x28>)
 800715a:	f000 fcb7 	bl	8007acc <__assert_func>
 800715e:	2301      	movs	r3, #1
 8007160:	6144      	str	r4, [r0, #20]
 8007162:	6103      	str	r3, [r0, #16]
 8007164:	bd10      	pop	{r4, pc}
 8007166:	bf00      	nop
 8007168:	08008418 	.word	0x08008418
 800716c:	08008429 	.word	0x08008429

08007170 <__multiply>:
 8007170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007174:	4614      	mov	r4, r2
 8007176:	690a      	ldr	r2, [r1, #16]
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	460f      	mov	r7, r1
 800717c:	429a      	cmp	r2, r3
 800717e:	bfa2      	ittt	ge
 8007180:	4623      	movge	r3, r4
 8007182:	460c      	movge	r4, r1
 8007184:	461f      	movge	r7, r3
 8007186:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800718a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	6861      	ldr	r1, [r4, #4]
 8007192:	eb0a 0609 	add.w	r6, sl, r9
 8007196:	42b3      	cmp	r3, r6
 8007198:	b085      	sub	sp, #20
 800719a:	bfb8      	it	lt
 800719c:	3101      	addlt	r1, #1
 800719e:	f7ff fedd 	bl	8006f5c <_Balloc>
 80071a2:	b930      	cbnz	r0, 80071b2 <__multiply+0x42>
 80071a4:	4602      	mov	r2, r0
 80071a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071aa:	4b43      	ldr	r3, [pc, #268]	@ (80072b8 <__multiply+0x148>)
 80071ac:	4843      	ldr	r0, [pc, #268]	@ (80072bc <__multiply+0x14c>)
 80071ae:	f000 fc8d 	bl	8007acc <__assert_func>
 80071b2:	f100 0514 	add.w	r5, r0, #20
 80071b6:	462b      	mov	r3, r5
 80071b8:	2200      	movs	r2, #0
 80071ba:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071be:	4543      	cmp	r3, r8
 80071c0:	d321      	bcc.n	8007206 <__multiply+0x96>
 80071c2:	f107 0114 	add.w	r1, r7, #20
 80071c6:	f104 0214 	add.w	r2, r4, #20
 80071ca:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071ce:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071d2:	9302      	str	r3, [sp, #8]
 80071d4:	1b13      	subs	r3, r2, r4
 80071d6:	3b15      	subs	r3, #21
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	3304      	adds	r3, #4
 80071de:	f104 0715 	add.w	r7, r4, #21
 80071e2:	42ba      	cmp	r2, r7
 80071e4:	bf38      	it	cc
 80071e6:	2304      	movcc	r3, #4
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	9103      	str	r1, [sp, #12]
 80071ee:	428b      	cmp	r3, r1
 80071f0:	d80c      	bhi.n	800720c <__multiply+0x9c>
 80071f2:	2e00      	cmp	r6, #0
 80071f4:	dd03      	ble.n	80071fe <__multiply+0x8e>
 80071f6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d05a      	beq.n	80072b4 <__multiply+0x144>
 80071fe:	6106      	str	r6, [r0, #16]
 8007200:	b005      	add	sp, #20
 8007202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007206:	f843 2b04 	str.w	r2, [r3], #4
 800720a:	e7d8      	b.n	80071be <__multiply+0x4e>
 800720c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007210:	f1ba 0f00 	cmp.w	sl, #0
 8007214:	d023      	beq.n	800725e <__multiply+0xee>
 8007216:	46a9      	mov	r9, r5
 8007218:	f04f 0c00 	mov.w	ip, #0
 800721c:	f104 0e14 	add.w	lr, r4, #20
 8007220:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007224:	f8d9 3000 	ldr.w	r3, [r9]
 8007228:	fa1f fb87 	uxth.w	fp, r7
 800722c:	b29b      	uxth	r3, r3
 800722e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007232:	4463      	add	r3, ip
 8007234:	f8d9 c000 	ldr.w	ip, [r9]
 8007238:	0c3f      	lsrs	r7, r7, #16
 800723a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800723e:	fb0a c707 	mla	r7, sl, r7, ip
 8007242:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007246:	b29b      	uxth	r3, r3
 8007248:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800724c:	4572      	cmp	r2, lr
 800724e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007252:	f849 3b04 	str.w	r3, [r9], #4
 8007256:	d8e3      	bhi.n	8007220 <__multiply+0xb0>
 8007258:	9b01      	ldr	r3, [sp, #4]
 800725a:	f845 c003 	str.w	ip, [r5, r3]
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	3104      	adds	r1, #4
 8007262:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007266:	f1b9 0f00 	cmp.w	r9, #0
 800726a:	d021      	beq.n	80072b0 <__multiply+0x140>
 800726c:	46ae      	mov	lr, r5
 800726e:	f04f 0a00 	mov.w	sl, #0
 8007272:	682b      	ldr	r3, [r5, #0]
 8007274:	f104 0c14 	add.w	ip, r4, #20
 8007278:	f8bc b000 	ldrh.w	fp, [ip]
 800727c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007280:	b29b      	uxth	r3, r3
 8007282:	fb09 770b 	mla	r7, r9, fp, r7
 8007286:	4457      	add	r7, sl
 8007288:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800728c:	f84e 3b04 	str.w	r3, [lr], #4
 8007290:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007294:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007298:	f8be 3000 	ldrh.w	r3, [lr]
 800729c:	4562      	cmp	r2, ip
 800729e:	fb09 330a 	mla	r3, r9, sl, r3
 80072a2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072aa:	d8e5      	bhi.n	8007278 <__multiply+0x108>
 80072ac:	9f01      	ldr	r7, [sp, #4]
 80072ae:	51eb      	str	r3, [r5, r7]
 80072b0:	3504      	adds	r5, #4
 80072b2:	e79a      	b.n	80071ea <__multiply+0x7a>
 80072b4:	3e01      	subs	r6, #1
 80072b6:	e79c      	b.n	80071f2 <__multiply+0x82>
 80072b8:	08008418 	.word	0x08008418
 80072bc:	08008429 	.word	0x08008429

080072c0 <__pow5mult>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4615      	mov	r5, r2
 80072c6:	f012 0203 	ands.w	r2, r2, #3
 80072ca:	4607      	mov	r7, r0
 80072cc:	460e      	mov	r6, r1
 80072ce:	d007      	beq.n	80072e0 <__pow5mult+0x20>
 80072d0:	4c25      	ldr	r4, [pc, #148]	@ (8007368 <__pow5mult+0xa8>)
 80072d2:	3a01      	subs	r2, #1
 80072d4:	2300      	movs	r3, #0
 80072d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072da:	f7ff fea1 	bl	8007020 <__multadd>
 80072de:	4606      	mov	r6, r0
 80072e0:	10ad      	asrs	r5, r5, #2
 80072e2:	d03d      	beq.n	8007360 <__pow5mult+0xa0>
 80072e4:	69fc      	ldr	r4, [r7, #28]
 80072e6:	b97c      	cbnz	r4, 8007308 <__pow5mult+0x48>
 80072e8:	2010      	movs	r0, #16
 80072ea:	f7ff fd81 	bl	8006df0 <malloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	61f8      	str	r0, [r7, #28]
 80072f2:	b928      	cbnz	r0, 8007300 <__pow5mult+0x40>
 80072f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072f8:	4b1c      	ldr	r3, [pc, #112]	@ (800736c <__pow5mult+0xac>)
 80072fa:	481d      	ldr	r0, [pc, #116]	@ (8007370 <__pow5mult+0xb0>)
 80072fc:	f000 fbe6 	bl	8007acc <__assert_func>
 8007300:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007304:	6004      	str	r4, [r0, #0]
 8007306:	60c4      	str	r4, [r0, #12]
 8007308:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800730c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007310:	b94c      	cbnz	r4, 8007326 <__pow5mult+0x66>
 8007312:	f240 2171 	movw	r1, #625	@ 0x271
 8007316:	4638      	mov	r0, r7
 8007318:	f7ff ff14 	bl	8007144 <__i2b>
 800731c:	2300      	movs	r3, #0
 800731e:	4604      	mov	r4, r0
 8007320:	f8c8 0008 	str.w	r0, [r8, #8]
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	07eb      	lsls	r3, r5, #31
 800732c:	d50a      	bpl.n	8007344 <__pow5mult+0x84>
 800732e:	4631      	mov	r1, r6
 8007330:	4622      	mov	r2, r4
 8007332:	4638      	mov	r0, r7
 8007334:	f7ff ff1c 	bl	8007170 <__multiply>
 8007338:	4680      	mov	r8, r0
 800733a:	4631      	mov	r1, r6
 800733c:	4638      	mov	r0, r7
 800733e:	f7ff fe4d 	bl	8006fdc <_Bfree>
 8007342:	4646      	mov	r6, r8
 8007344:	106d      	asrs	r5, r5, #1
 8007346:	d00b      	beq.n	8007360 <__pow5mult+0xa0>
 8007348:	6820      	ldr	r0, [r4, #0]
 800734a:	b938      	cbnz	r0, 800735c <__pow5mult+0x9c>
 800734c:	4622      	mov	r2, r4
 800734e:	4621      	mov	r1, r4
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ff0d 	bl	8007170 <__multiply>
 8007356:	6020      	str	r0, [r4, #0]
 8007358:	f8c0 9000 	str.w	r9, [r0]
 800735c:	4604      	mov	r4, r0
 800735e:	e7e4      	b.n	800732a <__pow5mult+0x6a>
 8007360:	4630      	mov	r0, r6
 8007362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007366:	bf00      	nop
 8007368:	08008484 	.word	0x08008484
 800736c:	080083a9 	.word	0x080083a9
 8007370:	08008429 	.word	0x08008429

08007374 <__lshift>:
 8007374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007378:	460c      	mov	r4, r1
 800737a:	4607      	mov	r7, r0
 800737c:	4691      	mov	r9, r2
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	6849      	ldr	r1, [r1, #4]
 8007382:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007386:	68a3      	ldr	r3, [r4, #8]
 8007388:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800738c:	f108 0601 	add.w	r6, r8, #1
 8007390:	42b3      	cmp	r3, r6
 8007392:	db0b      	blt.n	80073ac <__lshift+0x38>
 8007394:	4638      	mov	r0, r7
 8007396:	f7ff fde1 	bl	8006f5c <_Balloc>
 800739a:	4605      	mov	r5, r0
 800739c:	b948      	cbnz	r0, 80073b2 <__lshift+0x3e>
 800739e:	4602      	mov	r2, r0
 80073a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073a4:	4b27      	ldr	r3, [pc, #156]	@ (8007444 <__lshift+0xd0>)
 80073a6:	4828      	ldr	r0, [pc, #160]	@ (8007448 <__lshift+0xd4>)
 80073a8:	f000 fb90 	bl	8007acc <__assert_func>
 80073ac:	3101      	adds	r1, #1
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	e7ee      	b.n	8007390 <__lshift+0x1c>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f100 0114 	add.w	r1, r0, #20
 80073b8:	f100 0210 	add.w	r2, r0, #16
 80073bc:	4618      	mov	r0, r3
 80073be:	4553      	cmp	r3, sl
 80073c0:	db33      	blt.n	800742a <__lshift+0xb6>
 80073c2:	6920      	ldr	r0, [r4, #16]
 80073c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073c8:	f104 0314 	add.w	r3, r4, #20
 80073cc:	f019 091f 	ands.w	r9, r9, #31
 80073d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073d8:	d02b      	beq.n	8007432 <__lshift+0xbe>
 80073da:	468a      	mov	sl, r1
 80073dc:	2200      	movs	r2, #0
 80073de:	f1c9 0e20 	rsb	lr, r9, #32
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	fa00 f009 	lsl.w	r0, r0, r9
 80073e8:	4310      	orrs	r0, r2
 80073ea:	f84a 0b04 	str.w	r0, [sl], #4
 80073ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80073f2:	459c      	cmp	ip, r3
 80073f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073f8:	d8f3      	bhi.n	80073e2 <__lshift+0x6e>
 80073fa:	ebac 0304 	sub.w	r3, ip, r4
 80073fe:	3b15      	subs	r3, #21
 8007400:	f023 0303 	bic.w	r3, r3, #3
 8007404:	3304      	adds	r3, #4
 8007406:	f104 0015 	add.w	r0, r4, #21
 800740a:	4584      	cmp	ip, r0
 800740c:	bf38      	it	cc
 800740e:	2304      	movcc	r3, #4
 8007410:	50ca      	str	r2, [r1, r3]
 8007412:	b10a      	cbz	r2, 8007418 <__lshift+0xa4>
 8007414:	f108 0602 	add.w	r6, r8, #2
 8007418:	3e01      	subs	r6, #1
 800741a:	4638      	mov	r0, r7
 800741c:	4621      	mov	r1, r4
 800741e:	612e      	str	r6, [r5, #16]
 8007420:	f7ff fddc 	bl	8006fdc <_Bfree>
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	f842 0f04 	str.w	r0, [r2, #4]!
 800742e:	3301      	adds	r3, #1
 8007430:	e7c5      	b.n	80073be <__lshift+0x4a>
 8007432:	3904      	subs	r1, #4
 8007434:	f853 2b04 	ldr.w	r2, [r3], #4
 8007438:	459c      	cmp	ip, r3
 800743a:	f841 2f04 	str.w	r2, [r1, #4]!
 800743e:	d8f9      	bhi.n	8007434 <__lshift+0xc0>
 8007440:	e7ea      	b.n	8007418 <__lshift+0xa4>
 8007442:	bf00      	nop
 8007444:	08008418 	.word	0x08008418
 8007448:	08008429 	.word	0x08008429

0800744c <__mcmp>:
 800744c:	4603      	mov	r3, r0
 800744e:	690a      	ldr	r2, [r1, #16]
 8007450:	6900      	ldr	r0, [r0, #16]
 8007452:	b530      	push	{r4, r5, lr}
 8007454:	1a80      	subs	r0, r0, r2
 8007456:	d10e      	bne.n	8007476 <__mcmp+0x2a>
 8007458:	3314      	adds	r3, #20
 800745a:	3114      	adds	r1, #20
 800745c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007460:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007464:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007468:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800746c:	4295      	cmp	r5, r2
 800746e:	d003      	beq.n	8007478 <__mcmp+0x2c>
 8007470:	d205      	bcs.n	800747e <__mcmp+0x32>
 8007472:	f04f 30ff 	mov.w	r0, #4294967295
 8007476:	bd30      	pop	{r4, r5, pc}
 8007478:	42a3      	cmp	r3, r4
 800747a:	d3f3      	bcc.n	8007464 <__mcmp+0x18>
 800747c:	e7fb      	b.n	8007476 <__mcmp+0x2a>
 800747e:	2001      	movs	r0, #1
 8007480:	e7f9      	b.n	8007476 <__mcmp+0x2a>
	...

08007484 <__mdiff>:
 8007484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	4689      	mov	r9, r1
 800748a:	4606      	mov	r6, r0
 800748c:	4611      	mov	r1, r2
 800748e:	4648      	mov	r0, r9
 8007490:	4614      	mov	r4, r2
 8007492:	f7ff ffdb 	bl	800744c <__mcmp>
 8007496:	1e05      	subs	r5, r0, #0
 8007498:	d112      	bne.n	80074c0 <__mdiff+0x3c>
 800749a:	4629      	mov	r1, r5
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff fd5d 	bl	8006f5c <_Balloc>
 80074a2:	4602      	mov	r2, r0
 80074a4:	b928      	cbnz	r0, 80074b2 <__mdiff+0x2e>
 80074a6:	f240 2137 	movw	r1, #567	@ 0x237
 80074aa:	4b3e      	ldr	r3, [pc, #248]	@ (80075a4 <__mdiff+0x120>)
 80074ac:	483e      	ldr	r0, [pc, #248]	@ (80075a8 <__mdiff+0x124>)
 80074ae:	f000 fb0d 	bl	8007acc <__assert_func>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074b8:	4610      	mov	r0, r2
 80074ba:	b003      	add	sp, #12
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	bfbc      	itt	lt
 80074c2:	464b      	movlt	r3, r9
 80074c4:	46a1      	movlt	r9, r4
 80074c6:	4630      	mov	r0, r6
 80074c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074cc:	bfba      	itte	lt
 80074ce:	461c      	movlt	r4, r3
 80074d0:	2501      	movlt	r5, #1
 80074d2:	2500      	movge	r5, #0
 80074d4:	f7ff fd42 	bl	8006f5c <_Balloc>
 80074d8:	4602      	mov	r2, r0
 80074da:	b918      	cbnz	r0, 80074e4 <__mdiff+0x60>
 80074dc:	f240 2145 	movw	r1, #581	@ 0x245
 80074e0:	4b30      	ldr	r3, [pc, #192]	@ (80075a4 <__mdiff+0x120>)
 80074e2:	e7e3      	b.n	80074ac <__mdiff+0x28>
 80074e4:	f100 0b14 	add.w	fp, r0, #20
 80074e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074ec:	f109 0310 	add.w	r3, r9, #16
 80074f0:	60c5      	str	r5, [r0, #12]
 80074f2:	f04f 0c00 	mov.w	ip, #0
 80074f6:	f109 0514 	add.w	r5, r9, #20
 80074fa:	46d9      	mov	r9, fp
 80074fc:	6926      	ldr	r6, [r4, #16]
 80074fe:	f104 0e14 	add.w	lr, r4, #20
 8007502:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007506:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800750a:	9301      	str	r3, [sp, #4]
 800750c:	9b01      	ldr	r3, [sp, #4]
 800750e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007512:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007516:	b281      	uxth	r1, r0
 8007518:	9301      	str	r3, [sp, #4]
 800751a:	fa1f f38a 	uxth.w	r3, sl
 800751e:	1a5b      	subs	r3, r3, r1
 8007520:	0c00      	lsrs	r0, r0, #16
 8007522:	4463      	add	r3, ip
 8007524:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007528:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800752c:	b29b      	uxth	r3, r3
 800752e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007532:	4576      	cmp	r6, lr
 8007534:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007538:	f849 3b04 	str.w	r3, [r9], #4
 800753c:	d8e6      	bhi.n	800750c <__mdiff+0x88>
 800753e:	1b33      	subs	r3, r6, r4
 8007540:	3b15      	subs	r3, #21
 8007542:	f023 0303 	bic.w	r3, r3, #3
 8007546:	3415      	adds	r4, #21
 8007548:	3304      	adds	r3, #4
 800754a:	42a6      	cmp	r6, r4
 800754c:	bf38      	it	cc
 800754e:	2304      	movcc	r3, #4
 8007550:	441d      	add	r5, r3
 8007552:	445b      	add	r3, fp
 8007554:	461e      	mov	r6, r3
 8007556:	462c      	mov	r4, r5
 8007558:	4544      	cmp	r4, r8
 800755a:	d30e      	bcc.n	800757a <__mdiff+0xf6>
 800755c:	f108 0103 	add.w	r1, r8, #3
 8007560:	1b49      	subs	r1, r1, r5
 8007562:	f021 0103 	bic.w	r1, r1, #3
 8007566:	3d03      	subs	r5, #3
 8007568:	45a8      	cmp	r8, r5
 800756a:	bf38      	it	cc
 800756c:	2100      	movcc	r1, #0
 800756e:	440b      	add	r3, r1
 8007570:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007574:	b199      	cbz	r1, 800759e <__mdiff+0x11a>
 8007576:	6117      	str	r7, [r2, #16]
 8007578:	e79e      	b.n	80074b8 <__mdiff+0x34>
 800757a:	46e6      	mov	lr, ip
 800757c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007580:	fa1f fc81 	uxth.w	ip, r1
 8007584:	44f4      	add	ip, lr
 8007586:	0c08      	lsrs	r0, r1, #16
 8007588:	4471      	add	r1, lr
 800758a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800758e:	b289      	uxth	r1, r1
 8007590:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007594:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007598:	f846 1b04 	str.w	r1, [r6], #4
 800759c:	e7dc      	b.n	8007558 <__mdiff+0xd4>
 800759e:	3f01      	subs	r7, #1
 80075a0:	e7e6      	b.n	8007570 <__mdiff+0xec>
 80075a2:	bf00      	nop
 80075a4:	08008418 	.word	0x08008418
 80075a8:	08008429 	.word	0x08008429

080075ac <__d2b>:
 80075ac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80075b0:	2101      	movs	r1, #1
 80075b2:	4690      	mov	r8, r2
 80075b4:	4699      	mov	r9, r3
 80075b6:	9e08      	ldr	r6, [sp, #32]
 80075b8:	f7ff fcd0 	bl	8006f5c <_Balloc>
 80075bc:	4604      	mov	r4, r0
 80075be:	b930      	cbnz	r0, 80075ce <__d2b+0x22>
 80075c0:	4602      	mov	r2, r0
 80075c2:	f240 310f 	movw	r1, #783	@ 0x30f
 80075c6:	4b23      	ldr	r3, [pc, #140]	@ (8007654 <__d2b+0xa8>)
 80075c8:	4823      	ldr	r0, [pc, #140]	@ (8007658 <__d2b+0xac>)
 80075ca:	f000 fa7f 	bl	8007acc <__assert_func>
 80075ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075d6:	b10d      	cbz	r5, 80075dc <__d2b+0x30>
 80075d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075dc:	9301      	str	r3, [sp, #4]
 80075de:	f1b8 0300 	subs.w	r3, r8, #0
 80075e2:	d024      	beq.n	800762e <__d2b+0x82>
 80075e4:	4668      	mov	r0, sp
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	f7ff fd7f 	bl	80070ea <__lo0bits>
 80075ec:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075f0:	b1d8      	cbz	r0, 800762a <__d2b+0x7e>
 80075f2:	f1c0 0320 	rsb	r3, r0, #32
 80075f6:	fa02 f303 	lsl.w	r3, r2, r3
 80075fa:	430b      	orrs	r3, r1
 80075fc:	40c2      	lsrs	r2, r0
 80075fe:	6163      	str	r3, [r4, #20]
 8007600:	9201      	str	r2, [sp, #4]
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	bf0c      	ite	eq
 8007608:	2201      	moveq	r2, #1
 800760a:	2202      	movne	r2, #2
 800760c:	61a3      	str	r3, [r4, #24]
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	b1ad      	cbz	r5, 800763e <__d2b+0x92>
 8007612:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007616:	4405      	add	r5, r0
 8007618:	6035      	str	r5, [r6, #0]
 800761a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800761e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007620:	6018      	str	r0, [r3, #0]
 8007622:	4620      	mov	r0, r4
 8007624:	b002      	add	sp, #8
 8007626:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800762a:	6161      	str	r1, [r4, #20]
 800762c:	e7e9      	b.n	8007602 <__d2b+0x56>
 800762e:	a801      	add	r0, sp, #4
 8007630:	f7ff fd5b 	bl	80070ea <__lo0bits>
 8007634:	9b01      	ldr	r3, [sp, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	6163      	str	r3, [r4, #20]
 800763a:	3020      	adds	r0, #32
 800763c:	e7e7      	b.n	800760e <__d2b+0x62>
 800763e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007642:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007646:	6030      	str	r0, [r6, #0]
 8007648:	6918      	ldr	r0, [r3, #16]
 800764a:	f7ff fd2f 	bl	80070ac <__hi0bits>
 800764e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007652:	e7e4      	b.n	800761e <__d2b+0x72>
 8007654:	08008418 	.word	0x08008418
 8007658:	08008429 	.word	0x08008429

0800765c <__ssputs_r>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	461f      	mov	r7, r3
 8007662:	688e      	ldr	r6, [r1, #8]
 8007664:	4682      	mov	sl, r0
 8007666:	42be      	cmp	r6, r7
 8007668:	460c      	mov	r4, r1
 800766a:	4690      	mov	r8, r2
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	d82d      	bhi.n	80076cc <__ssputs_r+0x70>
 8007670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007674:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007678:	d026      	beq.n	80076c8 <__ssputs_r+0x6c>
 800767a:	6965      	ldr	r5, [r4, #20]
 800767c:	6909      	ldr	r1, [r1, #16]
 800767e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007682:	eba3 0901 	sub.w	r9, r3, r1
 8007686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800768a:	1c7b      	adds	r3, r7, #1
 800768c:	444b      	add	r3, r9
 800768e:	106d      	asrs	r5, r5, #1
 8007690:	429d      	cmp	r5, r3
 8007692:	bf38      	it	cc
 8007694:	461d      	movcc	r5, r3
 8007696:	0553      	lsls	r3, r2, #21
 8007698:	d527      	bpl.n	80076ea <__ssputs_r+0x8e>
 800769a:	4629      	mov	r1, r5
 800769c:	f7ff fbd2 	bl	8006e44 <_malloc_r>
 80076a0:	4606      	mov	r6, r0
 80076a2:	b360      	cbz	r0, 80076fe <__ssputs_r+0xa2>
 80076a4:	464a      	mov	r2, r9
 80076a6:	6921      	ldr	r1, [r4, #16]
 80076a8:	f000 fa02 	bl	8007ab0 <memcpy>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b6:	81a3      	strh	r3, [r4, #12]
 80076b8:	6126      	str	r6, [r4, #16]
 80076ba:	444e      	add	r6, r9
 80076bc:	6026      	str	r6, [r4, #0]
 80076be:	463e      	mov	r6, r7
 80076c0:	6165      	str	r5, [r4, #20]
 80076c2:	eba5 0509 	sub.w	r5, r5, r9
 80076c6:	60a5      	str	r5, [r4, #8]
 80076c8:	42be      	cmp	r6, r7
 80076ca:	d900      	bls.n	80076ce <__ssputs_r+0x72>
 80076cc:	463e      	mov	r6, r7
 80076ce:	4632      	mov	r2, r6
 80076d0:	4641      	mov	r1, r8
 80076d2:	6820      	ldr	r0, [r4, #0]
 80076d4:	f000 f9c2 	bl	8007a5c <memmove>
 80076d8:	2000      	movs	r0, #0
 80076da:	68a3      	ldr	r3, [r4, #8]
 80076dc:	1b9b      	subs	r3, r3, r6
 80076de:	60a3      	str	r3, [r4, #8]
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	4433      	add	r3, r6
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ea:	462a      	mov	r2, r5
 80076ec:	f000 fa32 	bl	8007b54 <_realloc_r>
 80076f0:	4606      	mov	r6, r0
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d1e0      	bne.n	80076b8 <__ssputs_r+0x5c>
 80076f6:	4650      	mov	r0, sl
 80076f8:	6921      	ldr	r1, [r4, #16]
 80076fa:	f7ff fb31 	bl	8006d60 <_free_r>
 80076fe:	230c      	movs	r3, #12
 8007700:	f8ca 3000 	str.w	r3, [sl]
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	f04f 30ff 	mov.w	r0, #4294967295
 800770a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800770e:	81a3      	strh	r3, [r4, #12]
 8007710:	e7e9      	b.n	80076e6 <__ssputs_r+0x8a>
	...

08007714 <_svfiprintf_r>:
 8007714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007718:	4698      	mov	r8, r3
 800771a:	898b      	ldrh	r3, [r1, #12]
 800771c:	4607      	mov	r7, r0
 800771e:	061b      	lsls	r3, r3, #24
 8007720:	460d      	mov	r5, r1
 8007722:	4614      	mov	r4, r2
 8007724:	b09d      	sub	sp, #116	@ 0x74
 8007726:	d510      	bpl.n	800774a <_svfiprintf_r+0x36>
 8007728:	690b      	ldr	r3, [r1, #16]
 800772a:	b973      	cbnz	r3, 800774a <_svfiprintf_r+0x36>
 800772c:	2140      	movs	r1, #64	@ 0x40
 800772e:	f7ff fb89 	bl	8006e44 <_malloc_r>
 8007732:	6028      	str	r0, [r5, #0]
 8007734:	6128      	str	r0, [r5, #16]
 8007736:	b930      	cbnz	r0, 8007746 <_svfiprintf_r+0x32>
 8007738:	230c      	movs	r3, #12
 800773a:	603b      	str	r3, [r7, #0]
 800773c:	f04f 30ff 	mov.w	r0, #4294967295
 8007740:	b01d      	add	sp, #116	@ 0x74
 8007742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007746:	2340      	movs	r3, #64	@ 0x40
 8007748:	616b      	str	r3, [r5, #20]
 800774a:	2300      	movs	r3, #0
 800774c:	9309      	str	r3, [sp, #36]	@ 0x24
 800774e:	2320      	movs	r3, #32
 8007750:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007754:	2330      	movs	r3, #48	@ 0x30
 8007756:	f04f 0901 	mov.w	r9, #1
 800775a:	f8cd 800c 	str.w	r8, [sp, #12]
 800775e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80078f8 <_svfiprintf_r+0x1e4>
 8007762:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007766:	4623      	mov	r3, r4
 8007768:	469a      	mov	sl, r3
 800776a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776e:	b10a      	cbz	r2, 8007774 <_svfiprintf_r+0x60>
 8007770:	2a25      	cmp	r2, #37	@ 0x25
 8007772:	d1f9      	bne.n	8007768 <_svfiprintf_r+0x54>
 8007774:	ebba 0b04 	subs.w	fp, sl, r4
 8007778:	d00b      	beq.n	8007792 <_svfiprintf_r+0x7e>
 800777a:	465b      	mov	r3, fp
 800777c:	4622      	mov	r2, r4
 800777e:	4629      	mov	r1, r5
 8007780:	4638      	mov	r0, r7
 8007782:	f7ff ff6b 	bl	800765c <__ssputs_r>
 8007786:	3001      	adds	r0, #1
 8007788:	f000 80a7 	beq.w	80078da <_svfiprintf_r+0x1c6>
 800778c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800778e:	445a      	add	r2, fp
 8007790:	9209      	str	r2, [sp, #36]	@ 0x24
 8007792:	f89a 3000 	ldrb.w	r3, [sl]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 809f 	beq.w	80078da <_svfiprintf_r+0x1c6>
 800779c:	2300      	movs	r3, #0
 800779e:	f04f 32ff 	mov.w	r2, #4294967295
 80077a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a6:	f10a 0a01 	add.w	sl, sl, #1
 80077aa:	9304      	str	r3, [sp, #16]
 80077ac:	9307      	str	r3, [sp, #28]
 80077ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80077b4:	4654      	mov	r4, sl
 80077b6:	2205      	movs	r2, #5
 80077b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077bc:	484e      	ldr	r0, [pc, #312]	@ (80078f8 <_svfiprintf_r+0x1e4>)
 80077be:	f7fe fc6e 	bl	800609e <memchr>
 80077c2:	9a04      	ldr	r2, [sp, #16]
 80077c4:	b9d8      	cbnz	r0, 80077fe <_svfiprintf_r+0xea>
 80077c6:	06d0      	lsls	r0, r2, #27
 80077c8:	bf44      	itt	mi
 80077ca:	2320      	movmi	r3, #32
 80077cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d0:	0711      	lsls	r1, r2, #28
 80077d2:	bf44      	itt	mi
 80077d4:	232b      	movmi	r3, #43	@ 0x2b
 80077d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077da:	f89a 3000 	ldrb.w	r3, [sl]
 80077de:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e0:	d015      	beq.n	800780e <_svfiprintf_r+0xfa>
 80077e2:	4654      	mov	r4, sl
 80077e4:	2000      	movs	r0, #0
 80077e6:	f04f 0c0a 	mov.w	ip, #10
 80077ea:	9a07      	ldr	r2, [sp, #28]
 80077ec:	4621      	mov	r1, r4
 80077ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f2:	3b30      	subs	r3, #48	@ 0x30
 80077f4:	2b09      	cmp	r3, #9
 80077f6:	d94b      	bls.n	8007890 <_svfiprintf_r+0x17c>
 80077f8:	b1b0      	cbz	r0, 8007828 <_svfiprintf_r+0x114>
 80077fa:	9207      	str	r2, [sp, #28]
 80077fc:	e014      	b.n	8007828 <_svfiprintf_r+0x114>
 80077fe:	eba0 0308 	sub.w	r3, r0, r8
 8007802:	fa09 f303 	lsl.w	r3, r9, r3
 8007806:	4313      	orrs	r3, r2
 8007808:	46a2      	mov	sl, r4
 800780a:	9304      	str	r3, [sp, #16]
 800780c:	e7d2      	b.n	80077b4 <_svfiprintf_r+0xa0>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	1d19      	adds	r1, r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	9103      	str	r1, [sp, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfbb      	ittet	lt
 800781a:	425b      	neglt	r3, r3
 800781c:	f042 0202 	orrlt.w	r2, r2, #2
 8007820:	9307      	strge	r3, [sp, #28]
 8007822:	9307      	strlt	r3, [sp, #28]
 8007824:	bfb8      	it	lt
 8007826:	9204      	strlt	r2, [sp, #16]
 8007828:	7823      	ldrb	r3, [r4, #0]
 800782a:	2b2e      	cmp	r3, #46	@ 0x2e
 800782c:	d10a      	bne.n	8007844 <_svfiprintf_r+0x130>
 800782e:	7863      	ldrb	r3, [r4, #1]
 8007830:	2b2a      	cmp	r3, #42	@ 0x2a
 8007832:	d132      	bne.n	800789a <_svfiprintf_r+0x186>
 8007834:	9b03      	ldr	r3, [sp, #12]
 8007836:	3402      	adds	r4, #2
 8007838:	1d1a      	adds	r2, r3, #4
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	9203      	str	r2, [sp, #12]
 800783e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80078fc <_svfiprintf_r+0x1e8>
 8007848:	2203      	movs	r2, #3
 800784a:	4650      	mov	r0, sl
 800784c:	7821      	ldrb	r1, [r4, #0]
 800784e:	f7fe fc26 	bl	800609e <memchr>
 8007852:	b138      	cbz	r0, 8007864 <_svfiprintf_r+0x150>
 8007854:	2240      	movs	r2, #64	@ 0x40
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	eba0 000a 	sub.w	r0, r0, sl
 800785c:	4082      	lsls	r2, r0
 800785e:	4313      	orrs	r3, r2
 8007860:	3401      	adds	r4, #1
 8007862:	9304      	str	r3, [sp, #16]
 8007864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007868:	2206      	movs	r2, #6
 800786a:	4825      	ldr	r0, [pc, #148]	@ (8007900 <_svfiprintf_r+0x1ec>)
 800786c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007870:	f7fe fc15 	bl	800609e <memchr>
 8007874:	2800      	cmp	r0, #0
 8007876:	d036      	beq.n	80078e6 <_svfiprintf_r+0x1d2>
 8007878:	4b22      	ldr	r3, [pc, #136]	@ (8007904 <_svfiprintf_r+0x1f0>)
 800787a:	bb1b      	cbnz	r3, 80078c4 <_svfiprintf_r+0x1b0>
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	3307      	adds	r3, #7
 8007880:	f023 0307 	bic.w	r3, r3, #7
 8007884:	3308      	adds	r3, #8
 8007886:	9303      	str	r3, [sp, #12]
 8007888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788a:	4433      	add	r3, r6
 800788c:	9309      	str	r3, [sp, #36]	@ 0x24
 800788e:	e76a      	b.n	8007766 <_svfiprintf_r+0x52>
 8007890:	460c      	mov	r4, r1
 8007892:	2001      	movs	r0, #1
 8007894:	fb0c 3202 	mla	r2, ip, r2, r3
 8007898:	e7a8      	b.n	80077ec <_svfiprintf_r+0xd8>
 800789a:	2300      	movs	r3, #0
 800789c:	f04f 0c0a 	mov.w	ip, #10
 80078a0:	4619      	mov	r1, r3
 80078a2:	3401      	adds	r4, #1
 80078a4:	9305      	str	r3, [sp, #20]
 80078a6:	4620      	mov	r0, r4
 80078a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ac:	3a30      	subs	r2, #48	@ 0x30
 80078ae:	2a09      	cmp	r2, #9
 80078b0:	d903      	bls.n	80078ba <_svfiprintf_r+0x1a6>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0c6      	beq.n	8007844 <_svfiprintf_r+0x130>
 80078b6:	9105      	str	r1, [sp, #20]
 80078b8:	e7c4      	b.n	8007844 <_svfiprintf_r+0x130>
 80078ba:	4604      	mov	r4, r0
 80078bc:	2301      	movs	r3, #1
 80078be:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c2:	e7f0      	b.n	80078a6 <_svfiprintf_r+0x192>
 80078c4:	ab03      	add	r3, sp, #12
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	462a      	mov	r2, r5
 80078ca:	4638      	mov	r0, r7
 80078cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007908 <_svfiprintf_r+0x1f4>)
 80078ce:	a904      	add	r1, sp, #16
 80078d0:	f7fd fe82 	bl	80055d8 <_printf_float>
 80078d4:	1c42      	adds	r2, r0, #1
 80078d6:	4606      	mov	r6, r0
 80078d8:	d1d6      	bne.n	8007888 <_svfiprintf_r+0x174>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	065b      	lsls	r3, r3, #25
 80078de:	f53f af2d 	bmi.w	800773c <_svfiprintf_r+0x28>
 80078e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078e4:	e72c      	b.n	8007740 <_svfiprintf_r+0x2c>
 80078e6:	ab03      	add	r3, sp, #12
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	462a      	mov	r2, r5
 80078ec:	4638      	mov	r0, r7
 80078ee:	4b06      	ldr	r3, [pc, #24]	@ (8007908 <_svfiprintf_r+0x1f4>)
 80078f0:	a904      	add	r1, sp, #16
 80078f2:	f7fe f90f 	bl	8005b14 <_printf_i>
 80078f6:	e7ed      	b.n	80078d4 <_svfiprintf_r+0x1c0>
 80078f8:	08008580 	.word	0x08008580
 80078fc:	08008586 	.word	0x08008586
 8007900:	0800858a 	.word	0x0800858a
 8007904:	080055d9 	.word	0x080055d9
 8007908:	0800765d 	.word	0x0800765d

0800790c <__sflush_r>:
 800790c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	0716      	lsls	r6, r2, #28
 8007914:	4605      	mov	r5, r0
 8007916:	460c      	mov	r4, r1
 8007918:	d454      	bmi.n	80079c4 <__sflush_r+0xb8>
 800791a:	684b      	ldr	r3, [r1, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	dc02      	bgt.n	8007926 <__sflush_r+0x1a>
 8007920:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007922:	2b00      	cmp	r3, #0
 8007924:	dd48      	ble.n	80079b8 <__sflush_r+0xac>
 8007926:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007928:	2e00      	cmp	r6, #0
 800792a:	d045      	beq.n	80079b8 <__sflush_r+0xac>
 800792c:	2300      	movs	r3, #0
 800792e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007932:	682f      	ldr	r7, [r5, #0]
 8007934:	6a21      	ldr	r1, [r4, #32]
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	d030      	beq.n	800799c <__sflush_r+0x90>
 800793a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	0759      	lsls	r1, r3, #29
 8007940:	d505      	bpl.n	800794e <__sflush_r+0x42>
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007948:	b10b      	cbz	r3, 800794e <__sflush_r+0x42>
 800794a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800794c:	1ad2      	subs	r2, r2, r3
 800794e:	2300      	movs	r3, #0
 8007950:	4628      	mov	r0, r5
 8007952:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007954:	6a21      	ldr	r1, [r4, #32]
 8007956:	47b0      	blx	r6
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	d106      	bne.n	800796c <__sflush_r+0x60>
 800795e:	6829      	ldr	r1, [r5, #0]
 8007960:	291d      	cmp	r1, #29
 8007962:	d82b      	bhi.n	80079bc <__sflush_r+0xb0>
 8007964:	4a28      	ldr	r2, [pc, #160]	@ (8007a08 <__sflush_r+0xfc>)
 8007966:	410a      	asrs	r2, r1
 8007968:	07d6      	lsls	r6, r2, #31
 800796a:	d427      	bmi.n	80079bc <__sflush_r+0xb0>
 800796c:	2200      	movs	r2, #0
 800796e:	6062      	str	r2, [r4, #4]
 8007970:	6922      	ldr	r2, [r4, #16]
 8007972:	04d9      	lsls	r1, r3, #19
 8007974:	6022      	str	r2, [r4, #0]
 8007976:	d504      	bpl.n	8007982 <__sflush_r+0x76>
 8007978:	1c42      	adds	r2, r0, #1
 800797a:	d101      	bne.n	8007980 <__sflush_r+0x74>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b903      	cbnz	r3, 8007982 <__sflush_r+0x76>
 8007980:	6560      	str	r0, [r4, #84]	@ 0x54
 8007982:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007984:	602f      	str	r7, [r5, #0]
 8007986:	b1b9      	cbz	r1, 80079b8 <__sflush_r+0xac>
 8007988:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800798c:	4299      	cmp	r1, r3
 800798e:	d002      	beq.n	8007996 <__sflush_r+0x8a>
 8007990:	4628      	mov	r0, r5
 8007992:	f7ff f9e5 	bl	8006d60 <_free_r>
 8007996:	2300      	movs	r3, #0
 8007998:	6363      	str	r3, [r4, #52]	@ 0x34
 800799a:	e00d      	b.n	80079b8 <__sflush_r+0xac>
 800799c:	2301      	movs	r3, #1
 800799e:	4628      	mov	r0, r5
 80079a0:	47b0      	blx	r6
 80079a2:	4602      	mov	r2, r0
 80079a4:	1c50      	adds	r0, r2, #1
 80079a6:	d1c9      	bne.n	800793c <__sflush_r+0x30>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0c6      	beq.n	800793c <__sflush_r+0x30>
 80079ae:	2b1d      	cmp	r3, #29
 80079b0:	d001      	beq.n	80079b6 <__sflush_r+0xaa>
 80079b2:	2b16      	cmp	r3, #22
 80079b4:	d11d      	bne.n	80079f2 <__sflush_r+0xe6>
 80079b6:	602f      	str	r7, [r5, #0]
 80079b8:	2000      	movs	r0, #0
 80079ba:	e021      	b.n	8007a00 <__sflush_r+0xf4>
 80079bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c0:	b21b      	sxth	r3, r3
 80079c2:	e01a      	b.n	80079fa <__sflush_r+0xee>
 80079c4:	690f      	ldr	r7, [r1, #16]
 80079c6:	2f00      	cmp	r7, #0
 80079c8:	d0f6      	beq.n	80079b8 <__sflush_r+0xac>
 80079ca:	0793      	lsls	r3, r2, #30
 80079cc:	bf18      	it	ne
 80079ce:	2300      	movne	r3, #0
 80079d0:	680e      	ldr	r6, [r1, #0]
 80079d2:	bf08      	it	eq
 80079d4:	694b      	ldreq	r3, [r1, #20]
 80079d6:	1bf6      	subs	r6, r6, r7
 80079d8:	600f      	str	r7, [r1, #0]
 80079da:	608b      	str	r3, [r1, #8]
 80079dc:	2e00      	cmp	r6, #0
 80079de:	ddeb      	ble.n	80079b8 <__sflush_r+0xac>
 80079e0:	4633      	mov	r3, r6
 80079e2:	463a      	mov	r2, r7
 80079e4:	4628      	mov	r0, r5
 80079e6:	6a21      	ldr	r1, [r4, #32]
 80079e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80079ec:	47e0      	blx	ip
 80079ee:	2800      	cmp	r0, #0
 80079f0:	dc07      	bgt.n	8007a02 <__sflush_r+0xf6>
 80079f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	81a3      	strh	r3, [r4, #12]
 8007a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a02:	4407      	add	r7, r0
 8007a04:	1a36      	subs	r6, r6, r0
 8007a06:	e7e9      	b.n	80079dc <__sflush_r+0xd0>
 8007a08:	dfbffffe 	.word	0xdfbffffe

08007a0c <_fflush_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	690b      	ldr	r3, [r1, #16]
 8007a10:	4605      	mov	r5, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	b913      	cbnz	r3, 8007a1c <_fflush_r+0x10>
 8007a16:	2500      	movs	r5, #0
 8007a18:	4628      	mov	r0, r5
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	b118      	cbz	r0, 8007a26 <_fflush_r+0x1a>
 8007a1e:	6a03      	ldr	r3, [r0, #32]
 8007a20:	b90b      	cbnz	r3, 8007a26 <_fflush_r+0x1a>
 8007a22:	f7fe fa23 	bl	8005e6c <__sinit>
 8007a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d0f3      	beq.n	8007a16 <_fflush_r+0xa>
 8007a2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a30:	07d0      	lsls	r0, r2, #31
 8007a32:	d404      	bmi.n	8007a3e <_fflush_r+0x32>
 8007a34:	0599      	lsls	r1, r3, #22
 8007a36:	d402      	bmi.n	8007a3e <_fflush_r+0x32>
 8007a38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a3a:	f7fe fb2e 	bl	800609a <__retarget_lock_acquire_recursive>
 8007a3e:	4628      	mov	r0, r5
 8007a40:	4621      	mov	r1, r4
 8007a42:	f7ff ff63 	bl	800790c <__sflush_r>
 8007a46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a48:	4605      	mov	r5, r0
 8007a4a:	07da      	lsls	r2, r3, #31
 8007a4c:	d4e4      	bmi.n	8007a18 <_fflush_r+0xc>
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	059b      	lsls	r3, r3, #22
 8007a52:	d4e1      	bmi.n	8007a18 <_fflush_r+0xc>
 8007a54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a56:	f7fe fb21 	bl	800609c <__retarget_lock_release_recursive>
 8007a5a:	e7dd      	b.n	8007a18 <_fflush_r+0xc>

08007a5c <memmove>:
 8007a5c:	4288      	cmp	r0, r1
 8007a5e:	b510      	push	{r4, lr}
 8007a60:	eb01 0402 	add.w	r4, r1, r2
 8007a64:	d902      	bls.n	8007a6c <memmove+0x10>
 8007a66:	4284      	cmp	r4, r0
 8007a68:	4623      	mov	r3, r4
 8007a6a:	d807      	bhi.n	8007a7c <memmove+0x20>
 8007a6c:	1e43      	subs	r3, r0, #1
 8007a6e:	42a1      	cmp	r1, r4
 8007a70:	d008      	beq.n	8007a84 <memmove+0x28>
 8007a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a7a:	e7f8      	b.n	8007a6e <memmove+0x12>
 8007a7c:	4601      	mov	r1, r0
 8007a7e:	4402      	add	r2, r0
 8007a80:	428a      	cmp	r2, r1
 8007a82:	d100      	bne.n	8007a86 <memmove+0x2a>
 8007a84:	bd10      	pop	{r4, pc}
 8007a86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a8e:	e7f7      	b.n	8007a80 <memmove+0x24>

08007a90 <_sbrk_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	2300      	movs	r3, #0
 8007a94:	4d05      	ldr	r5, [pc, #20]	@ (8007aac <_sbrk_r+0x1c>)
 8007a96:	4604      	mov	r4, r0
 8007a98:	4608      	mov	r0, r1
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	f7fc fc32 	bl	8004304 <_sbrk>
 8007aa0:	1c43      	adds	r3, r0, #1
 8007aa2:	d102      	bne.n	8007aaa <_sbrk_r+0x1a>
 8007aa4:	682b      	ldr	r3, [r5, #0]
 8007aa6:	b103      	cbz	r3, 8007aaa <_sbrk_r+0x1a>
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	bd38      	pop	{r3, r4, r5, pc}
 8007aac:	20000adc 	.word	0x20000adc

08007ab0 <memcpy>:
 8007ab0:	440a      	add	r2, r1
 8007ab2:	4291      	cmp	r1, r2
 8007ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ab8:	d100      	bne.n	8007abc <memcpy+0xc>
 8007aba:	4770      	bx	lr
 8007abc:	b510      	push	{r4, lr}
 8007abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ac8:	d1f9      	bne.n	8007abe <memcpy+0xe>
 8007aca:	bd10      	pop	{r4, pc}

08007acc <__assert_func>:
 8007acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ace:	4614      	mov	r4, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	4b09      	ldr	r3, [pc, #36]	@ (8007af8 <__assert_func+0x2c>)
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68d8      	ldr	r0, [r3, #12]
 8007ada:	b954      	cbnz	r4, 8007af2 <__assert_func+0x26>
 8007adc:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <__assert_func+0x30>)
 8007ade:	461c      	mov	r4, r3
 8007ae0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ae4:	9100      	str	r1, [sp, #0]
 8007ae6:	462b      	mov	r3, r5
 8007ae8:	4905      	ldr	r1, [pc, #20]	@ (8007b00 <__assert_func+0x34>)
 8007aea:	f000 f86f 	bl	8007bcc <fiprintf>
 8007aee:	f000 f87f 	bl	8007bf0 <abort>
 8007af2:	4b04      	ldr	r3, [pc, #16]	@ (8007b04 <__assert_func+0x38>)
 8007af4:	e7f4      	b.n	8007ae0 <__assert_func+0x14>
 8007af6:	bf00      	nop
 8007af8:	200000dc 	.word	0x200000dc
 8007afc:	080085d6 	.word	0x080085d6
 8007b00:	080085a8 	.word	0x080085a8
 8007b04:	0800859b 	.word	0x0800859b

08007b08 <_calloc_r>:
 8007b08:	b570      	push	{r4, r5, r6, lr}
 8007b0a:	fba1 5402 	umull	r5, r4, r1, r2
 8007b0e:	b93c      	cbnz	r4, 8007b20 <_calloc_r+0x18>
 8007b10:	4629      	mov	r1, r5
 8007b12:	f7ff f997 	bl	8006e44 <_malloc_r>
 8007b16:	4606      	mov	r6, r0
 8007b18:	b928      	cbnz	r0, 8007b26 <_calloc_r+0x1e>
 8007b1a:	2600      	movs	r6, #0
 8007b1c:	4630      	mov	r0, r6
 8007b1e:	bd70      	pop	{r4, r5, r6, pc}
 8007b20:	220c      	movs	r2, #12
 8007b22:	6002      	str	r2, [r0, #0]
 8007b24:	e7f9      	b.n	8007b1a <_calloc_r+0x12>
 8007b26:	462a      	mov	r2, r5
 8007b28:	4621      	mov	r1, r4
 8007b2a:	f7fe fa38 	bl	8005f9e <memset>
 8007b2e:	e7f5      	b.n	8007b1c <_calloc_r+0x14>

08007b30 <__ascii_mbtowc>:
 8007b30:	b082      	sub	sp, #8
 8007b32:	b901      	cbnz	r1, 8007b36 <__ascii_mbtowc+0x6>
 8007b34:	a901      	add	r1, sp, #4
 8007b36:	b142      	cbz	r2, 8007b4a <__ascii_mbtowc+0x1a>
 8007b38:	b14b      	cbz	r3, 8007b4e <__ascii_mbtowc+0x1e>
 8007b3a:	7813      	ldrb	r3, [r2, #0]
 8007b3c:	600b      	str	r3, [r1, #0]
 8007b3e:	7812      	ldrb	r2, [r2, #0]
 8007b40:	1e10      	subs	r0, r2, #0
 8007b42:	bf18      	it	ne
 8007b44:	2001      	movne	r0, #1
 8007b46:	b002      	add	sp, #8
 8007b48:	4770      	bx	lr
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	e7fb      	b.n	8007b46 <__ascii_mbtowc+0x16>
 8007b4e:	f06f 0001 	mvn.w	r0, #1
 8007b52:	e7f8      	b.n	8007b46 <__ascii_mbtowc+0x16>

08007b54 <_realloc_r>:
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b58:	4680      	mov	r8, r0
 8007b5a:	4615      	mov	r5, r2
 8007b5c:	460c      	mov	r4, r1
 8007b5e:	b921      	cbnz	r1, 8007b6a <_realloc_r+0x16>
 8007b60:	4611      	mov	r1, r2
 8007b62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b66:	f7ff b96d 	b.w	8006e44 <_malloc_r>
 8007b6a:	b92a      	cbnz	r2, 8007b78 <_realloc_r+0x24>
 8007b6c:	f7ff f8f8 	bl	8006d60 <_free_r>
 8007b70:	2400      	movs	r4, #0
 8007b72:	4620      	mov	r0, r4
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b78:	f000 f841 	bl	8007bfe <_malloc_usable_size_r>
 8007b7c:	4285      	cmp	r5, r0
 8007b7e:	4606      	mov	r6, r0
 8007b80:	d802      	bhi.n	8007b88 <_realloc_r+0x34>
 8007b82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b86:	d8f4      	bhi.n	8007b72 <_realloc_r+0x1e>
 8007b88:	4629      	mov	r1, r5
 8007b8a:	4640      	mov	r0, r8
 8007b8c:	f7ff f95a 	bl	8006e44 <_malloc_r>
 8007b90:	4607      	mov	r7, r0
 8007b92:	2800      	cmp	r0, #0
 8007b94:	d0ec      	beq.n	8007b70 <_realloc_r+0x1c>
 8007b96:	42b5      	cmp	r5, r6
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	bf28      	it	cs
 8007b9e:	4632      	movcs	r2, r6
 8007ba0:	f7ff ff86 	bl	8007ab0 <memcpy>
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	4640      	mov	r0, r8
 8007ba8:	f7ff f8da 	bl	8006d60 <_free_r>
 8007bac:	463c      	mov	r4, r7
 8007bae:	e7e0      	b.n	8007b72 <_realloc_r+0x1e>

08007bb0 <__ascii_wctomb>:
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	4608      	mov	r0, r1
 8007bb4:	b141      	cbz	r1, 8007bc8 <__ascii_wctomb+0x18>
 8007bb6:	2aff      	cmp	r2, #255	@ 0xff
 8007bb8:	d904      	bls.n	8007bc4 <__ascii_wctomb+0x14>
 8007bba:	228a      	movs	r2, #138	@ 0x8a
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	4770      	bx	lr
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	700a      	strb	r2, [r1, #0]
 8007bc8:	4770      	bx	lr
	...

08007bcc <fiprintf>:
 8007bcc:	b40e      	push	{r1, r2, r3}
 8007bce:	b503      	push	{r0, r1, lr}
 8007bd0:	4601      	mov	r1, r0
 8007bd2:	ab03      	add	r3, sp, #12
 8007bd4:	4805      	ldr	r0, [pc, #20]	@ (8007bec <fiprintf+0x20>)
 8007bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bda:	6800      	ldr	r0, [r0, #0]
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	f000 f83d 	bl	8007c5c <_vfiprintf_r>
 8007be2:	b002      	add	sp, #8
 8007be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007be8:	b003      	add	sp, #12
 8007bea:	4770      	bx	lr
 8007bec:	200000dc 	.word	0x200000dc

08007bf0 <abort>:
 8007bf0:	2006      	movs	r0, #6
 8007bf2:	b508      	push	{r3, lr}
 8007bf4:	f000 fa06 	bl	8008004 <raise>
 8007bf8:	2001      	movs	r0, #1
 8007bfa:	f7fc fb0e 	bl	800421a <_exit>

08007bfe <_malloc_usable_size_r>:
 8007bfe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c02:	1f18      	subs	r0, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	bfbc      	itt	lt
 8007c08:	580b      	ldrlt	r3, [r1, r0]
 8007c0a:	18c0      	addlt	r0, r0, r3
 8007c0c:	4770      	bx	lr

08007c0e <__sfputc_r>:
 8007c0e:	6893      	ldr	r3, [r2, #8]
 8007c10:	b410      	push	{r4}
 8007c12:	3b01      	subs	r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	6093      	str	r3, [r2, #8]
 8007c18:	da07      	bge.n	8007c2a <__sfputc_r+0x1c>
 8007c1a:	6994      	ldr	r4, [r2, #24]
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	db01      	blt.n	8007c24 <__sfputc_r+0x16>
 8007c20:	290a      	cmp	r1, #10
 8007c22:	d102      	bne.n	8007c2a <__sfputc_r+0x1c>
 8007c24:	bc10      	pop	{r4}
 8007c26:	f000 b931 	b.w	8007e8c <__swbuf_r>
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	1c58      	adds	r0, r3, #1
 8007c2e:	6010      	str	r0, [r2, #0]
 8007c30:	7019      	strb	r1, [r3, #0]
 8007c32:	4608      	mov	r0, r1
 8007c34:	bc10      	pop	{r4}
 8007c36:	4770      	bx	lr

08007c38 <__sfputs_r>:
 8007c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460f      	mov	r7, r1
 8007c3e:	4614      	mov	r4, r2
 8007c40:	18d5      	adds	r5, r2, r3
 8007c42:	42ac      	cmp	r4, r5
 8007c44:	d101      	bne.n	8007c4a <__sfputs_r+0x12>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e007      	b.n	8007c5a <__sfputs_r+0x22>
 8007c4a:	463a      	mov	r2, r7
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c52:	f7ff ffdc 	bl	8007c0e <__sfputc_r>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d1f3      	bne.n	8007c42 <__sfputs_r+0xa>
 8007c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c5c <_vfiprintf_r>:
 8007c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c60:	460d      	mov	r5, r1
 8007c62:	4614      	mov	r4, r2
 8007c64:	4698      	mov	r8, r3
 8007c66:	4606      	mov	r6, r0
 8007c68:	b09d      	sub	sp, #116	@ 0x74
 8007c6a:	b118      	cbz	r0, 8007c74 <_vfiprintf_r+0x18>
 8007c6c:	6a03      	ldr	r3, [r0, #32]
 8007c6e:	b90b      	cbnz	r3, 8007c74 <_vfiprintf_r+0x18>
 8007c70:	f7fe f8fc 	bl	8005e6c <__sinit>
 8007c74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c76:	07d9      	lsls	r1, r3, #31
 8007c78:	d405      	bmi.n	8007c86 <_vfiprintf_r+0x2a>
 8007c7a:	89ab      	ldrh	r3, [r5, #12]
 8007c7c:	059a      	lsls	r2, r3, #22
 8007c7e:	d402      	bmi.n	8007c86 <_vfiprintf_r+0x2a>
 8007c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c82:	f7fe fa0a 	bl	800609a <__retarget_lock_acquire_recursive>
 8007c86:	89ab      	ldrh	r3, [r5, #12]
 8007c88:	071b      	lsls	r3, r3, #28
 8007c8a:	d501      	bpl.n	8007c90 <_vfiprintf_r+0x34>
 8007c8c:	692b      	ldr	r3, [r5, #16]
 8007c8e:	b99b      	cbnz	r3, 8007cb8 <_vfiprintf_r+0x5c>
 8007c90:	4629      	mov	r1, r5
 8007c92:	4630      	mov	r0, r6
 8007c94:	f000 f938 	bl	8007f08 <__swsetup_r>
 8007c98:	b170      	cbz	r0, 8007cb8 <_vfiprintf_r+0x5c>
 8007c9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c9c:	07dc      	lsls	r4, r3, #31
 8007c9e:	d504      	bpl.n	8007caa <_vfiprintf_r+0x4e>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	b01d      	add	sp, #116	@ 0x74
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	89ab      	ldrh	r3, [r5, #12]
 8007cac:	0598      	lsls	r0, r3, #22
 8007cae:	d4f7      	bmi.n	8007ca0 <_vfiprintf_r+0x44>
 8007cb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cb2:	f7fe f9f3 	bl	800609c <__retarget_lock_release_recursive>
 8007cb6:	e7f3      	b.n	8007ca0 <_vfiprintf_r+0x44>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cbc:	2320      	movs	r3, #32
 8007cbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cc2:	2330      	movs	r3, #48	@ 0x30
 8007cc4:	f04f 0901 	mov.w	r9, #1
 8007cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ccc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007e78 <_vfiprintf_r+0x21c>
 8007cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cd4:	4623      	mov	r3, r4
 8007cd6:	469a      	mov	sl, r3
 8007cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cdc:	b10a      	cbz	r2, 8007ce2 <_vfiprintf_r+0x86>
 8007cde:	2a25      	cmp	r2, #37	@ 0x25
 8007ce0:	d1f9      	bne.n	8007cd6 <_vfiprintf_r+0x7a>
 8007ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ce6:	d00b      	beq.n	8007d00 <_vfiprintf_r+0xa4>
 8007ce8:	465b      	mov	r3, fp
 8007cea:	4622      	mov	r2, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	4630      	mov	r0, r6
 8007cf0:	f7ff ffa2 	bl	8007c38 <__sfputs_r>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	f000 80a7 	beq.w	8007e48 <_vfiprintf_r+0x1ec>
 8007cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cfc:	445a      	add	r2, fp
 8007cfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d00:	f89a 3000 	ldrb.w	r3, [sl]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 809f 	beq.w	8007e48 <_vfiprintf_r+0x1ec>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d14:	f10a 0a01 	add.w	sl, sl, #1
 8007d18:	9304      	str	r3, [sp, #16]
 8007d1a:	9307      	str	r3, [sp, #28]
 8007d1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d20:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d22:	4654      	mov	r4, sl
 8007d24:	2205      	movs	r2, #5
 8007d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2a:	4853      	ldr	r0, [pc, #332]	@ (8007e78 <_vfiprintf_r+0x21c>)
 8007d2c:	f7fe f9b7 	bl	800609e <memchr>
 8007d30:	9a04      	ldr	r2, [sp, #16]
 8007d32:	b9d8      	cbnz	r0, 8007d6c <_vfiprintf_r+0x110>
 8007d34:	06d1      	lsls	r1, r2, #27
 8007d36:	bf44      	itt	mi
 8007d38:	2320      	movmi	r3, #32
 8007d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d3e:	0713      	lsls	r3, r2, #28
 8007d40:	bf44      	itt	mi
 8007d42:	232b      	movmi	r3, #43	@ 0x2b
 8007d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d48:	f89a 3000 	ldrb.w	r3, [sl]
 8007d4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d4e:	d015      	beq.n	8007d7c <_vfiprintf_r+0x120>
 8007d50:	4654      	mov	r4, sl
 8007d52:	2000      	movs	r0, #0
 8007d54:	f04f 0c0a 	mov.w	ip, #10
 8007d58:	9a07      	ldr	r2, [sp, #28]
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d60:	3b30      	subs	r3, #48	@ 0x30
 8007d62:	2b09      	cmp	r3, #9
 8007d64:	d94b      	bls.n	8007dfe <_vfiprintf_r+0x1a2>
 8007d66:	b1b0      	cbz	r0, 8007d96 <_vfiprintf_r+0x13a>
 8007d68:	9207      	str	r2, [sp, #28]
 8007d6a:	e014      	b.n	8007d96 <_vfiprintf_r+0x13a>
 8007d6c:	eba0 0308 	sub.w	r3, r0, r8
 8007d70:	fa09 f303 	lsl.w	r3, r9, r3
 8007d74:	4313      	orrs	r3, r2
 8007d76:	46a2      	mov	sl, r4
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	e7d2      	b.n	8007d22 <_vfiprintf_r+0xc6>
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	1d19      	adds	r1, r3, #4
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	9103      	str	r1, [sp, #12]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bfbb      	ittet	lt
 8007d88:	425b      	neglt	r3, r3
 8007d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d8e:	9307      	strge	r3, [sp, #28]
 8007d90:	9307      	strlt	r3, [sp, #28]
 8007d92:	bfb8      	it	lt
 8007d94:	9204      	strlt	r2, [sp, #16]
 8007d96:	7823      	ldrb	r3, [r4, #0]
 8007d98:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d9a:	d10a      	bne.n	8007db2 <_vfiprintf_r+0x156>
 8007d9c:	7863      	ldrb	r3, [r4, #1]
 8007d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da0:	d132      	bne.n	8007e08 <_vfiprintf_r+0x1ac>
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	3402      	adds	r4, #2
 8007da6:	1d1a      	adds	r2, r3, #4
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	9203      	str	r2, [sp, #12]
 8007dac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007db0:	9305      	str	r3, [sp, #20]
 8007db2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007e7c <_vfiprintf_r+0x220>
 8007db6:	2203      	movs	r2, #3
 8007db8:	4650      	mov	r0, sl
 8007dba:	7821      	ldrb	r1, [r4, #0]
 8007dbc:	f7fe f96f 	bl	800609e <memchr>
 8007dc0:	b138      	cbz	r0, 8007dd2 <_vfiprintf_r+0x176>
 8007dc2:	2240      	movs	r2, #64	@ 0x40
 8007dc4:	9b04      	ldr	r3, [sp, #16]
 8007dc6:	eba0 000a 	sub.w	r0, r0, sl
 8007dca:	4082      	lsls	r2, r0
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	3401      	adds	r4, #1
 8007dd0:	9304      	str	r3, [sp, #16]
 8007dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dd6:	2206      	movs	r2, #6
 8007dd8:	4829      	ldr	r0, [pc, #164]	@ (8007e80 <_vfiprintf_r+0x224>)
 8007dda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007dde:	f7fe f95e 	bl	800609e <memchr>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	d03f      	beq.n	8007e66 <_vfiprintf_r+0x20a>
 8007de6:	4b27      	ldr	r3, [pc, #156]	@ (8007e84 <_vfiprintf_r+0x228>)
 8007de8:	bb1b      	cbnz	r3, 8007e32 <_vfiprintf_r+0x1d6>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	f023 0307 	bic.w	r3, r3, #7
 8007df2:	3308      	adds	r3, #8
 8007df4:	9303      	str	r3, [sp, #12]
 8007df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df8:	443b      	add	r3, r7
 8007dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dfc:	e76a      	b.n	8007cd4 <_vfiprintf_r+0x78>
 8007dfe:	460c      	mov	r4, r1
 8007e00:	2001      	movs	r0, #1
 8007e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e06:	e7a8      	b.n	8007d5a <_vfiprintf_r+0xfe>
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f04f 0c0a 	mov.w	ip, #10
 8007e0e:	4619      	mov	r1, r3
 8007e10:	3401      	adds	r4, #1
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	4620      	mov	r0, r4
 8007e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e1a:	3a30      	subs	r2, #48	@ 0x30
 8007e1c:	2a09      	cmp	r2, #9
 8007e1e:	d903      	bls.n	8007e28 <_vfiprintf_r+0x1cc>
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0c6      	beq.n	8007db2 <_vfiprintf_r+0x156>
 8007e24:	9105      	str	r1, [sp, #20]
 8007e26:	e7c4      	b.n	8007db2 <_vfiprintf_r+0x156>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e30:	e7f0      	b.n	8007e14 <_vfiprintf_r+0x1b8>
 8007e32:	ab03      	add	r3, sp, #12
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	462a      	mov	r2, r5
 8007e38:	4630      	mov	r0, r6
 8007e3a:	4b13      	ldr	r3, [pc, #76]	@ (8007e88 <_vfiprintf_r+0x22c>)
 8007e3c:	a904      	add	r1, sp, #16
 8007e3e:	f7fd fbcb 	bl	80055d8 <_printf_float>
 8007e42:	4607      	mov	r7, r0
 8007e44:	1c78      	adds	r0, r7, #1
 8007e46:	d1d6      	bne.n	8007df6 <_vfiprintf_r+0x19a>
 8007e48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e4a:	07d9      	lsls	r1, r3, #31
 8007e4c:	d405      	bmi.n	8007e5a <_vfiprintf_r+0x1fe>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	059a      	lsls	r2, r3, #22
 8007e52:	d402      	bmi.n	8007e5a <_vfiprintf_r+0x1fe>
 8007e54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e56:	f7fe f921 	bl	800609c <__retarget_lock_release_recursive>
 8007e5a:	89ab      	ldrh	r3, [r5, #12]
 8007e5c:	065b      	lsls	r3, r3, #25
 8007e5e:	f53f af1f 	bmi.w	8007ca0 <_vfiprintf_r+0x44>
 8007e62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e64:	e71e      	b.n	8007ca4 <_vfiprintf_r+0x48>
 8007e66:	ab03      	add	r3, sp, #12
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	462a      	mov	r2, r5
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <_vfiprintf_r+0x22c>)
 8007e70:	a904      	add	r1, sp, #16
 8007e72:	f7fd fe4f 	bl	8005b14 <_printf_i>
 8007e76:	e7e4      	b.n	8007e42 <_vfiprintf_r+0x1e6>
 8007e78:	08008580 	.word	0x08008580
 8007e7c:	08008586 	.word	0x08008586
 8007e80:	0800858a 	.word	0x0800858a
 8007e84:	080055d9 	.word	0x080055d9
 8007e88:	08007c39 	.word	0x08007c39

08007e8c <__swbuf_r>:
 8007e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8e:	460e      	mov	r6, r1
 8007e90:	4614      	mov	r4, r2
 8007e92:	4605      	mov	r5, r0
 8007e94:	b118      	cbz	r0, 8007e9e <__swbuf_r+0x12>
 8007e96:	6a03      	ldr	r3, [r0, #32]
 8007e98:	b90b      	cbnz	r3, 8007e9e <__swbuf_r+0x12>
 8007e9a:	f7fd ffe7 	bl	8005e6c <__sinit>
 8007e9e:	69a3      	ldr	r3, [r4, #24]
 8007ea0:	60a3      	str	r3, [r4, #8]
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	071a      	lsls	r2, r3, #28
 8007ea6:	d501      	bpl.n	8007eac <__swbuf_r+0x20>
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	b943      	cbnz	r3, 8007ebe <__swbuf_r+0x32>
 8007eac:	4621      	mov	r1, r4
 8007eae:	4628      	mov	r0, r5
 8007eb0:	f000 f82a 	bl	8007f08 <__swsetup_r>
 8007eb4:	b118      	cbz	r0, 8007ebe <__swbuf_r+0x32>
 8007eb6:	f04f 37ff 	mov.w	r7, #4294967295
 8007eba:	4638      	mov	r0, r7
 8007ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	6922      	ldr	r2, [r4, #16]
 8007ec2:	b2f6      	uxtb	r6, r6
 8007ec4:	1a98      	subs	r0, r3, r2
 8007ec6:	6963      	ldr	r3, [r4, #20]
 8007ec8:	4637      	mov	r7, r6
 8007eca:	4283      	cmp	r3, r0
 8007ecc:	dc05      	bgt.n	8007eda <__swbuf_r+0x4e>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f7ff fd9b 	bl	8007a0c <_fflush_r>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d1ed      	bne.n	8007eb6 <__swbuf_r+0x2a>
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	60a3      	str	r3, [r4, #8]
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	701e      	strb	r6, [r3, #0]
 8007ee8:	6962      	ldr	r2, [r4, #20]
 8007eea:	1c43      	adds	r3, r0, #1
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d004      	beq.n	8007efa <__swbuf_r+0x6e>
 8007ef0:	89a3      	ldrh	r3, [r4, #12]
 8007ef2:	07db      	lsls	r3, r3, #31
 8007ef4:	d5e1      	bpl.n	8007eba <__swbuf_r+0x2e>
 8007ef6:	2e0a      	cmp	r6, #10
 8007ef8:	d1df      	bne.n	8007eba <__swbuf_r+0x2e>
 8007efa:	4621      	mov	r1, r4
 8007efc:	4628      	mov	r0, r5
 8007efe:	f7ff fd85 	bl	8007a0c <_fflush_r>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	d0d9      	beq.n	8007eba <__swbuf_r+0x2e>
 8007f06:	e7d6      	b.n	8007eb6 <__swbuf_r+0x2a>

08007f08 <__swsetup_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4b29      	ldr	r3, [pc, #164]	@ (8007fb0 <__swsetup_r+0xa8>)
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	6818      	ldr	r0, [r3, #0]
 8007f10:	460c      	mov	r4, r1
 8007f12:	b118      	cbz	r0, 8007f1c <__swsetup_r+0x14>
 8007f14:	6a03      	ldr	r3, [r0, #32]
 8007f16:	b90b      	cbnz	r3, 8007f1c <__swsetup_r+0x14>
 8007f18:	f7fd ffa8 	bl	8005e6c <__sinit>
 8007f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f20:	0719      	lsls	r1, r3, #28
 8007f22:	d422      	bmi.n	8007f6a <__swsetup_r+0x62>
 8007f24:	06da      	lsls	r2, r3, #27
 8007f26:	d407      	bmi.n	8007f38 <__swsetup_r+0x30>
 8007f28:	2209      	movs	r2, #9
 8007f2a:	602a      	str	r2, [r5, #0]
 8007f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	e033      	b.n	8007fa0 <__swsetup_r+0x98>
 8007f38:	0758      	lsls	r0, r3, #29
 8007f3a:	d512      	bpl.n	8007f62 <__swsetup_r+0x5a>
 8007f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f3e:	b141      	cbz	r1, 8007f52 <__swsetup_r+0x4a>
 8007f40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f44:	4299      	cmp	r1, r3
 8007f46:	d002      	beq.n	8007f4e <__swsetup_r+0x46>
 8007f48:	4628      	mov	r0, r5
 8007f4a:	f7fe ff09 	bl	8006d60 <_free_r>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f52:	89a3      	ldrh	r3, [r4, #12]
 8007f54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	6063      	str	r3, [r4, #4]
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	6023      	str	r3, [r4, #0]
 8007f62:	89a3      	ldrh	r3, [r4, #12]
 8007f64:	f043 0308 	orr.w	r3, r3, #8
 8007f68:	81a3      	strh	r3, [r4, #12]
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	b94b      	cbnz	r3, 8007f82 <__swsetup_r+0x7a>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f78:	d003      	beq.n	8007f82 <__swsetup_r+0x7a>
 8007f7a:	4621      	mov	r1, r4
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f000 f882 	bl	8008086 <__smakebuf_r>
 8007f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f86:	f013 0201 	ands.w	r2, r3, #1
 8007f8a:	d00a      	beq.n	8007fa2 <__swsetup_r+0x9a>
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	60a2      	str	r2, [r4, #8]
 8007f90:	6962      	ldr	r2, [r4, #20]
 8007f92:	4252      	negs	r2, r2
 8007f94:	61a2      	str	r2, [r4, #24]
 8007f96:	6922      	ldr	r2, [r4, #16]
 8007f98:	b942      	cbnz	r2, 8007fac <__swsetup_r+0xa4>
 8007f9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f9e:	d1c5      	bne.n	8007f2c <__swsetup_r+0x24>
 8007fa0:	bd38      	pop	{r3, r4, r5, pc}
 8007fa2:	0799      	lsls	r1, r3, #30
 8007fa4:	bf58      	it	pl
 8007fa6:	6962      	ldrpl	r2, [r4, #20]
 8007fa8:	60a2      	str	r2, [r4, #8]
 8007faa:	e7f4      	b.n	8007f96 <__swsetup_r+0x8e>
 8007fac:	2000      	movs	r0, #0
 8007fae:	e7f7      	b.n	8007fa0 <__swsetup_r+0x98>
 8007fb0:	200000dc 	.word	0x200000dc

08007fb4 <_raise_r>:
 8007fb4:	291f      	cmp	r1, #31
 8007fb6:	b538      	push	{r3, r4, r5, lr}
 8007fb8:	4605      	mov	r5, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	d904      	bls.n	8007fc8 <_raise_r+0x14>
 8007fbe:	2316      	movs	r3, #22
 8007fc0:	6003      	str	r3, [r0, #0]
 8007fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc6:	bd38      	pop	{r3, r4, r5, pc}
 8007fc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fca:	b112      	cbz	r2, 8007fd2 <_raise_r+0x1e>
 8007fcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fd0:	b94b      	cbnz	r3, 8007fe6 <_raise_r+0x32>
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f830 	bl	8008038 <_getpid_r>
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4601      	mov	r1, r0
 8007fdc:	4628      	mov	r0, r5
 8007fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fe2:	f000 b817 	b.w	8008014 <_kill_r>
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d00a      	beq.n	8008000 <_raise_r+0x4c>
 8007fea:	1c59      	adds	r1, r3, #1
 8007fec:	d103      	bne.n	8007ff6 <_raise_r+0x42>
 8007fee:	2316      	movs	r3, #22
 8007ff0:	6003      	str	r3, [r0, #0]
 8007ff2:	2001      	movs	r0, #1
 8007ff4:	e7e7      	b.n	8007fc6 <_raise_r+0x12>
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ffe:	4798      	blx	r3
 8008000:	2000      	movs	r0, #0
 8008002:	e7e0      	b.n	8007fc6 <_raise_r+0x12>

08008004 <raise>:
 8008004:	4b02      	ldr	r3, [pc, #8]	@ (8008010 <raise+0xc>)
 8008006:	4601      	mov	r1, r0
 8008008:	6818      	ldr	r0, [r3, #0]
 800800a:	f7ff bfd3 	b.w	8007fb4 <_raise_r>
 800800e:	bf00      	nop
 8008010:	200000dc 	.word	0x200000dc

08008014 <_kill_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	2300      	movs	r3, #0
 8008018:	4d06      	ldr	r5, [pc, #24]	@ (8008034 <_kill_r+0x20>)
 800801a:	4604      	mov	r4, r0
 800801c:	4608      	mov	r0, r1
 800801e:	4611      	mov	r1, r2
 8008020:	602b      	str	r3, [r5, #0]
 8008022:	f7fc f8ea 	bl	80041fa <_kill>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	d102      	bne.n	8008030 <_kill_r+0x1c>
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	b103      	cbz	r3, 8008030 <_kill_r+0x1c>
 800802e:	6023      	str	r3, [r4, #0]
 8008030:	bd38      	pop	{r3, r4, r5, pc}
 8008032:	bf00      	nop
 8008034:	20000adc 	.word	0x20000adc

08008038 <_getpid_r>:
 8008038:	f7fc b8d8 	b.w	80041ec <_getpid>

0800803c <__swhatbuf_r>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	460c      	mov	r4, r1
 8008040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008044:	4615      	mov	r5, r2
 8008046:	2900      	cmp	r1, #0
 8008048:	461e      	mov	r6, r3
 800804a:	b096      	sub	sp, #88	@ 0x58
 800804c:	da0c      	bge.n	8008068 <__swhatbuf_r+0x2c>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	2100      	movs	r1, #0
 8008052:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008056:	bf14      	ite	ne
 8008058:	2340      	movne	r3, #64	@ 0x40
 800805a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800805e:	2000      	movs	r0, #0
 8008060:	6031      	str	r1, [r6, #0]
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	b016      	add	sp, #88	@ 0x58
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	466a      	mov	r2, sp
 800806a:	f000 f849 	bl	8008100 <_fstat_r>
 800806e:	2800      	cmp	r0, #0
 8008070:	dbed      	blt.n	800804e <__swhatbuf_r+0x12>
 8008072:	9901      	ldr	r1, [sp, #4]
 8008074:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008078:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800807c:	4259      	negs	r1, r3
 800807e:	4159      	adcs	r1, r3
 8008080:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008084:	e7eb      	b.n	800805e <__swhatbuf_r+0x22>

08008086 <__smakebuf_r>:
 8008086:	898b      	ldrh	r3, [r1, #12]
 8008088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800808a:	079d      	lsls	r5, r3, #30
 800808c:	4606      	mov	r6, r0
 800808e:	460c      	mov	r4, r1
 8008090:	d507      	bpl.n	80080a2 <__smakebuf_r+0x1c>
 8008092:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	2301      	movs	r3, #1
 800809c:	6163      	str	r3, [r4, #20]
 800809e:	b003      	add	sp, #12
 80080a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a2:	466a      	mov	r2, sp
 80080a4:	ab01      	add	r3, sp, #4
 80080a6:	f7ff ffc9 	bl	800803c <__swhatbuf_r>
 80080aa:	9f00      	ldr	r7, [sp, #0]
 80080ac:	4605      	mov	r5, r0
 80080ae:	4639      	mov	r1, r7
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7fe fec7 	bl	8006e44 <_malloc_r>
 80080b6:	b948      	cbnz	r0, 80080cc <__smakebuf_r+0x46>
 80080b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080bc:	059a      	lsls	r2, r3, #22
 80080be:	d4ee      	bmi.n	800809e <__smakebuf_r+0x18>
 80080c0:	f023 0303 	bic.w	r3, r3, #3
 80080c4:	f043 0302 	orr.w	r3, r3, #2
 80080c8:	81a3      	strh	r3, [r4, #12]
 80080ca:	e7e2      	b.n	8008092 <__smakebuf_r+0xc>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	9b01      	ldr	r3, [sp, #4]
 80080da:	6020      	str	r0, [r4, #0]
 80080dc:	b15b      	cbz	r3, 80080f6 <__smakebuf_r+0x70>
 80080de:	4630      	mov	r0, r6
 80080e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080e4:	f000 f81e 	bl	8008124 <_isatty_r>
 80080e8:	b128      	cbz	r0, 80080f6 <__smakebuf_r+0x70>
 80080ea:	89a3      	ldrh	r3, [r4, #12]
 80080ec:	f023 0303 	bic.w	r3, r3, #3
 80080f0:	f043 0301 	orr.w	r3, r3, #1
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	431d      	orrs	r5, r3
 80080fa:	81a5      	strh	r5, [r4, #12]
 80080fc:	e7cf      	b.n	800809e <__smakebuf_r+0x18>
	...

08008100 <_fstat_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	2300      	movs	r3, #0
 8008104:	4d06      	ldr	r5, [pc, #24]	@ (8008120 <_fstat_r+0x20>)
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	602b      	str	r3, [r5, #0]
 800810e:	f7fc f8d3 	bl	80042b8 <_fstat>
 8008112:	1c43      	adds	r3, r0, #1
 8008114:	d102      	bne.n	800811c <_fstat_r+0x1c>
 8008116:	682b      	ldr	r3, [r5, #0]
 8008118:	b103      	cbz	r3, 800811c <_fstat_r+0x1c>
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	bd38      	pop	{r3, r4, r5, pc}
 800811e:	bf00      	nop
 8008120:	20000adc 	.word	0x20000adc

08008124 <_isatty_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	2300      	movs	r3, #0
 8008128:	4d05      	ldr	r5, [pc, #20]	@ (8008140 <_isatty_r+0x1c>)
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	f7fc f8d1 	bl	80042d6 <_isatty>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_isatty_r+0x1a>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_isatty_r+0x1a>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20000adc 	.word	0x20000adc

08008144 <_init>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr

08008150 <_fini>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	bf00      	nop
 8008154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008156:	bc08      	pop	{r3}
 8008158:	469e      	mov	lr, r3
 800815a:	4770      	bx	lr
