
Test_Multi_Channel_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003750  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800385c  0800385c  0000485c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e8  080038e8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  080038e8  080038e8  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e8  080038e8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e8  080038e8  000048e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038ec  080038ec  000048ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  0800394c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800394c  00005338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d518  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002206  00000000  00000000  0001259d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  000147a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab3  00000000  00000000  00015550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018604  00000000  00000000  00016003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001028a  00000000  00000000  0002e607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f676  00000000  00000000  0003e891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdf07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  000cdf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d1d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003844 	.word	0x08003844

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003844 	.word	0x08003844

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb30 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f83c 	bl	80001d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f974 	bl	8000444 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f954 	bl	8000408 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f88c 	bl	800027c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000164:	f000 f8d8 	bl	8000318 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f924 	bl	80003b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800016c:	4812      	ldr	r0, [pc, #72]	@ (80001b8 <main+0x6c>)
 800016e:	f000 ff73 	bl	8001058 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 8000172:	2202      	movs	r2, #2
 8000174:	4911      	ldr	r1, [pc, #68]	@ (80001bc <main+0x70>)
 8000176:	4810      	ldr	r0, [pc, #64]	@ (80001b8 <main+0x6c>)
 8000178:	f000 fc7a 	bl	8000a70 <HAL_ADC_Start_DMA>
  htim3.Instance->CR1|=(TIM_CR1_CEN);
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <main+0x74>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <main+0x74>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f042 0201 	orr.w	r2, r2, #1
 800018a:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(msg, "CH1 = %ld, CH2 = %ld\r\n", adc_value[0], adc_value[1]);
 800018c:	4b0b      	ldr	r3, [pc, #44]	@ (80001bc <main+0x70>)
 800018e:	681a      	ldr	r2, [r3, #0]
 8000190:	4b0a      	ldr	r3, [pc, #40]	@ (80001bc <main+0x70>)
 8000192:	685b      	ldr	r3, [r3, #4]
 8000194:	490b      	ldr	r1, [pc, #44]	@ (80001c4 <main+0x78>)
 8000196:	480c      	ldr	r0, [pc, #48]	@ (80001c8 <main+0x7c>)
 8000198:	f002 fea4 	bl	8002ee4 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, sizeof(msg), 1000);
 800019c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001a0:	2264      	movs	r2, #100	@ 0x64
 80001a2:	4909      	ldr	r1, [pc, #36]	@ (80001c8 <main+0x7c>)
 80001a4:	4809      	ldr	r0, [pc, #36]	@ (80001cc <main+0x80>)
 80001a6:	f002 fcc9 	bl	8002b3c <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80001aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001ae:	f000 fb63 	bl	8000878 <HAL_Delay>
	  sprintf(msg, "CH1 = %ld, CH2 = %ld\r\n", adc_value[0], adc_value[1]);
 80001b2:	bf00      	nop
 80001b4:	e7ea      	b.n	800018c <main+0x40>
 80001b6:	bf00      	nop
 80001b8:	20000078 	.word	0x20000078
 80001bc:	2000017c 	.word	0x2000017c
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	0800385c 	.word	0x0800385c
 80001c8:	20000184 	.word	0x20000184
 80001cc:	20000134 	.word	0x20000134

080001d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b094      	sub	sp, #80	@ 0x50
 80001d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001da:	2228      	movs	r2, #40	@ 0x28
 80001dc:	2100      	movs	r1, #0
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fea0 	bl	8002f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e4:	f107 0314 	add.w	r3, r7, #20
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
 80001ec:	605a      	str	r2, [r3, #4]
 80001ee:	609a      	str	r2, [r3, #8]
 80001f0:	60da      	str	r2, [r3, #12]
 80001f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f4:	1d3b      	adds	r3, r7, #4
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000200:	2302      	movs	r3, #2
 8000202:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000208:	2310      	movs	r3, #16
 800020a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020c:	2302      	movs	r3, #2
 800020e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000210:	2300      	movs	r3, #0
 8000212:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000214:	f44f 13a0 	mov.w	r3, #1310720	@ 0x140000
 8000218:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fc48 	bl	8001ab4 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800022a:	f000 f921 	bl	8000470 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000242:	f107 0314 	add.w	r3, r7, #20
 8000246:	2101      	movs	r1, #1
 8000248:	4618      	mov	r0, r3
 800024a:	f001 feb5 	bl	8001fb8 <HAL_RCC_ClockConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000254:	f000 f90c 	bl	8000470 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000258:	2302      	movs	r3, #2
 800025a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	4618      	mov	r0, r3
 8000264:	f002 f836 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800026e:	f000 f8ff 	bl	8000470 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3750      	adds	r7, #80	@ 0x50
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	2200      	movs	r2, #0
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	605a      	str	r2, [r3, #4]
 800028a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800028c:	4b20      	ldr	r3, [pc, #128]	@ (8000310 <MX_ADC1_Init+0x94>)
 800028e:	4a21      	ldr	r2, [pc, #132]	@ (8000314 <MX_ADC1_Init+0x98>)
 8000290:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000292:	4b1f      	ldr	r3, [pc, #124]	@ (8000310 <MX_ADC1_Init+0x94>)
 8000294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000298:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800029a:	4b1d      	ldr	r3, [pc, #116]	@ (8000310 <MX_ADC1_Init+0x94>)
 800029c:	2200      	movs	r2, #0
 800029e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000310 <MX_ADC1_Init+0x94>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80002a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000310 <MX_ADC1_Init+0x94>)
 80002a8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80002ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ae:	4b18      	ldr	r3, [pc, #96]	@ (8000310 <MX_ADC1_Init+0x94>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80002b4:	4b16      	ldr	r3, [pc, #88]	@ (8000310 <MX_ADC1_Init+0x94>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ba:	4815      	ldr	r0, [pc, #84]	@ (8000310 <MX_ADC1_Init+0x94>)
 80002bc:	f000 fb00 	bl	80008c0 <HAL_ADC_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002c6:	f000 f8d3 	bl	8000470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ca:	2301      	movs	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002d2:	2307      	movs	r3, #7
 80002d4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	4619      	mov	r1, r3
 80002da:	480d      	ldr	r0, [pc, #52]	@ (8000310 <MX_ADC1_Init+0x94>)
 80002dc:	f000 fcc2 	bl	8000c64 <HAL_ADC_ConfigChannel>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002e6:	f000 f8c3 	bl	8000470 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	4619      	mov	r1, r3
 80002f6:	4806      	ldr	r0, [pc, #24]	@ (8000310 <MX_ADC1_Init+0x94>)
 80002f8:	f000 fcb4 	bl	8000c64 <HAL_ADC_ConfigChannel>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000302:	f000 f8b5 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000078 	.word	0x20000078
 8000314:	40012400 	.word	0x40012400

08000318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000334:	4b1d      	ldr	r3, [pc, #116]	@ (80003ac <MX_TIM3_Init+0x94>)
 8000336:	4a1e      	ldr	r2, [pc, #120]	@ (80003b0 <MX_TIM3_Init+0x98>)
 8000338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 27999;
 800033a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ac <MX_TIM3_Init+0x94>)
 800033c:	f646 525f 	movw	r2, #27999	@ 0x6d5f
 8000340:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <MX_TIM3_Init+0x94>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000348:	4b18      	ldr	r3, [pc, #96]	@ (80003ac <MX_TIM3_Init+0x94>)
 800034a:	2209      	movs	r2, #9
 800034c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034e:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <MX_TIM3_Init+0x94>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000354:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <MX_TIM3_Init+0x94>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800035a:	4814      	ldr	r0, [pc, #80]	@ (80003ac <MX_TIM3_Init+0x94>)
 800035c:	f002 f926 	bl	80025ac <HAL_TIM_Base_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000366:	f000 f883 	bl	8000470 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800036e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	4619      	mov	r1, r3
 8000376:	480d      	ldr	r0, [pc, #52]	@ (80003ac <MX_TIM3_Init+0x94>)
 8000378:	f002 f967 	bl	800264a <HAL_TIM_ConfigClockSource>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000382:	f000 f875 	bl	8000470 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000386:	2320      	movs	r3, #32
 8000388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800038e:	463b      	mov	r3, r7
 8000390:	4619      	mov	r1, r3
 8000392:	4806      	ldr	r0, [pc, #24]	@ (80003ac <MX_TIM3_Init+0x94>)
 8000394:	f002 fb24 	bl	80029e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800039e:	f000 f867 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	3718      	adds	r7, #24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	200000ec 	.word	0x200000ec
 80003b0:	40000400 	.word	0x40000400

080003b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	@ (8000404 <MX_USART1_UART_Init+0x50>)
 80003bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003be:	4b10      	ldr	r3, [pc, #64]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d8:	4b09      	ldr	r3, [pc, #36]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003da:	220c      	movs	r2, #12
 80003dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003de:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ea:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_USART1_UART_Init+0x4c>)
 80003ec:	f002 fb56 	bl	8002a9c <HAL_UART_Init>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003f6:	f000 f83b 	bl	8000470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000134 	.word	0x20000134
 8000404:	40013800 	.word	0x40013800

08000408 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_DMA_Init+0x38>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a0b      	ldr	r2, [pc, #44]	@ (8000440 <MX_DMA_Init+0x38>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_DMA_Init+0x38>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000426:	2200      	movs	r2, #0
 8000428:	2100      	movs	r1, #0
 800042a:	200b      	movs	r0, #11
 800042c:	f000 ff99 	bl	8001362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000430:	200b      	movs	r0, #11
 8000432:	f000 ffb2 	bl	800139a <HAL_NVIC_EnableIRQ>

}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <MX_GPIO_Init+0x28>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a07      	ldr	r2, [pc, #28]	@ (800046c <MX_GPIO_Init+0x28>)
 8000450:	f043 0304 	orr.w	r3, r3, #4
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b05      	ldr	r3, [pc, #20]	@ (800046c <MX_GPIO_Init+0x28>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0304 	and.w	r3, r3, #4
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000

08000470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000474:	b672      	cpsid	i
}
 8000476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <Error_Handler+0x8>

0800047c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000482:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <HAL_MspInit+0x5c>)
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <HAL_MspInit+0x5c>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	6193      	str	r3, [r2, #24]
 800048e:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <HAL_MspInit+0x5c>)
 8000490:	699b      	ldr	r3, [r3, #24]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <HAL_MspInit+0x5c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <HAL_MspInit+0x5c>)
 80004a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <HAL_MspInit+0x5c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <HAL_MspInit+0x60>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <HAL_MspInit+0x60>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ce:	bf00      	nop
 80004d0:	3714      	adds	r7, #20
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010000 	.word	0x40010000

080004e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0310 	add.w	r3, r7, #16
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a28      	ldr	r2, [pc, #160]	@ (800059c <HAL_ADC_MspInit+0xbc>)
 80004fc:	4293      	cmp	r3, r2
 80004fe:	d149      	bne.n	8000594 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000500:	4b27      	ldr	r3, [pc, #156]	@ (80005a0 <HAL_ADC_MspInit+0xc0>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a26      	ldr	r2, [pc, #152]	@ (80005a0 <HAL_ADC_MspInit+0xc0>)
 8000506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <HAL_ADC_MspInit+0xc0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	4b21      	ldr	r3, [pc, #132]	@ (80005a0 <HAL_ADC_MspInit+0xc0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a20      	ldr	r2, [pc, #128]	@ (80005a0 <HAL_ADC_MspInit+0xc0>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b1e      	ldr	r3, [pc, #120]	@ (80005a0 <HAL_ADC_MspInit+0xc0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000530:	2306      	movs	r3, #6
 8000532:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000534:	2303      	movs	r3, #3
 8000536:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	4619      	mov	r1, r3
 800053e:	4819      	ldr	r0, [pc, #100]	@ (80005a4 <HAL_ADC_MspInit+0xc4>)
 8000540:	f001 f934 	bl	80017ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000544:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 8000546:	4a19      	ldr	r2, [pc, #100]	@ (80005ac <HAL_ADC_MspInit+0xcc>)
 8000548:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800054a:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000550:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000556:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 800055e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000562:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000564:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 8000566:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800056a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800056c:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 800056e:	2220      	movs	r2, #32
 8000570:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000572:	4b0d      	ldr	r3, [pc, #52]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 8000574:	2200      	movs	r2, #0
 8000576:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000578:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 800057a:	f000 ff29 	bl	80013d0 <HAL_DMA_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000584:	f7ff ff74 	bl	8000470 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 800058c:	621a      	str	r2, [r3, #32]
 800058e:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <HAL_ADC_MspInit+0xc8>)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000594:	bf00      	nop
 8000596:	3720      	adds	r7, #32
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40012400 	.word	0x40012400
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40010800 	.word	0x40010800
 80005a8:	200000a8 	.word	0x200000a8
 80005ac:	40020008 	.word	0x40020008

080005b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <HAL_TIM_Base_MspInit+0x34>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d10b      	bne.n	80005da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <HAL_TIM_Base_MspInit+0x38>)
 80005c4:	69db      	ldr	r3, [r3, #28]
 80005c6:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <HAL_TIM_Base_MspInit+0x38>)
 80005c8:	f043 0302 	orr.w	r3, r3, #2
 80005cc:	61d3      	str	r3, [r2, #28]
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_TIM_Base_MspInit+0x38>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40000400 	.word	0x40000400
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <HAL_UART_MspInit+0x8c>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d131      	bne.n	8000670 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800060c:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <HAL_UART_MspInit+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a1a      	ldr	r2, [pc, #104]	@ (800067c <HAL_UART_MspInit+0x90>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b18      	ldr	r3, [pc, #96]	@ (800067c <HAL_UART_MspInit+0x90>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b15      	ldr	r3, [pc, #84]	@ (800067c <HAL_UART_MspInit+0x90>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	4a14      	ldr	r2, [pc, #80]	@ (800067c <HAL_UART_MspInit+0x90>)
 800062a:	f043 0304 	orr.w	r3, r3, #4
 800062e:	6193      	str	r3, [r2, #24]
 8000630:	4b12      	ldr	r3, [pc, #72]	@ (800067c <HAL_UART_MspInit+0x90>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f003 0304 	and.w	r3, r3, #4
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800063c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000640:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000646:	2303      	movs	r3, #3
 8000648:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	4619      	mov	r1, r3
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <HAL_UART_MspInit+0x94>)
 8000652:	f001 f8ab 	bl	80017ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000656:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800065a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4805      	ldr	r0, [pc, #20]	@ (8000680 <HAL_UART_MspInit+0x94>)
 800066c:	f001 f89e 	bl	80017ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40013800 	.word	0x40013800
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800

08000684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <NMI_Handler+0x4>

0800068c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <HardFault_Handler+0x4>

08000694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <MemManage_Handler+0x4>

0800069c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <BusFault_Handler+0x4>

080006a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <UsageFault_Handler+0x4>

080006ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr

080006b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d4:	f000 f8b4 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}

080006dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006e0:	4802      	ldr	r0, [pc, #8]	@ (80006ec <DMA1_Channel1_IRQHandler+0x10>)
 80006e2:	f000 ff2f 	bl	8001544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000a8 	.word	0x200000a8

080006f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <_sbrk+0x5c>)
 80006fa:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <_sbrk+0x60>)
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d102      	bne.n	8000712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <_sbrk+0x64>)
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <_sbrk+0x68>)
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <_sbrk+0x64>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4413      	add	r3, r2
 800071a:	693a      	ldr	r2, [r7, #16]
 800071c:	429a      	cmp	r2, r3
 800071e:	d207      	bcs.n	8000730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000720:	f002 fc08 	bl	8002f34 <__errno>
 8000724:	4603      	mov	r3, r0
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072a:	f04f 33ff 	mov.w	r3, #4294967295
 800072e:	e009      	b.n	8000744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <_sbrk+0x64>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000736:	4b07      	ldr	r3, [pc, #28]	@ (8000754 <_sbrk+0x64>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <_sbrk+0x64>)
 8000740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000742:	68fb      	ldr	r3, [r7, #12]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3718      	adds	r7, #24
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20005000 	.word	0x20005000
 8000750:	00000400 	.word	0x00000400
 8000754:	200001e8 	.word	0x200001e8
 8000758:	20000338 	.word	0x20000338

0800075c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000768:	f7ff fff8 	bl	800075c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480b      	ldr	r0, [pc, #44]	@ (800079c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800076e:	490c      	ldr	r1, [pc, #48]	@ (80007a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000770:	4a0c      	ldr	r2, [pc, #48]	@ (80007a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a09      	ldr	r2, [pc, #36]	@ (80007a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000784:	4c09      	ldr	r4, [pc, #36]	@ (80007ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000792:	f002 fbd5 	bl	8002f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fcd9 	bl	800014c <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80007a4:	080038f0 	.word	0x080038f0
  ldr r2, =_sbss
 80007a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80007ac:	20000338 	.word	0x20000338

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	@ (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 fdc1 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff fe54 	bl	800047c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 fdd9 	bl	80013b6 <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 fda1 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	@ (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000000 	.word	0x20000000
 8000838:	20000008 	.word	0x20000008
 800083c:	20000004 	.word	0x20000004

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	@ (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000008 	.word	0x20000008
 8000860:	200001ec 	.word	0x200001ec

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	@ (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	200001ec 	.word	0x200001ec

08000878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000890:	d005      	beq.n	800089e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_Delay+0x44>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	4413      	add	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800089e:	bf00      	nop
 80008a0:	f7ff ffe0 	bl	8000864 <HAL_GetTick>
 80008a4:	4602      	mov	r2, r0
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d8f7      	bhi.n	80008a0 <HAL_Delay+0x28>
  {
  }
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000008 	.word	0x20000008

080008c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b086      	sub	sp, #24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008c8:	2300      	movs	r3, #0
 80008ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	e0be      	b.n	8000a60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d109      	bne.n	8000904 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2200      	movs	r2, #0
 80008f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff fdee 	bl	80004e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 faff 	bl	8000f08 <ADC_ConversionStop_Disable>
 800090a:	4603      	mov	r3, r0
 800090c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8099 	bne.w	8000a4e <HAL_ADC_Init+0x18e>
 800091c:	7dfb      	ldrb	r3, [r7, #23]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f040 8095 	bne.w	8000a4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000928:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800092c:	f023 0302 	bic.w	r3, r3, #2
 8000930:	f043 0202 	orr.w	r2, r3, #2
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000940:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	7b1b      	ldrb	r3, [r3, #12]
 8000946:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000948:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	4313      	orrs	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000958:	d003      	beq.n	8000962 <HAL_ADC_Init+0xa2>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d102      	bne.n	8000968 <HAL_ADC_Init+0xa8>
 8000962:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000966:	e000      	b.n	800096a <HAL_ADC_Init+0xaa>
 8000968:	2300      	movs	r3, #0
 800096a:	693a      	ldr	r2, [r7, #16]
 800096c:	4313      	orrs	r3, r2
 800096e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7d1b      	ldrb	r3, [r3, #20]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d119      	bne.n	80009ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	7b1b      	ldrb	r3, [r3, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d109      	bne.n	8000994 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	3b01      	subs	r3, #1
 8000986:	035a      	lsls	r2, r3, #13
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	4313      	orrs	r3, r2
 800098c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	e00b      	b.n	80009ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000998:	f043 0220 	orr.w	r2, r3, #32
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009a4:	f043 0201 	orr.w	r2, r3, #1
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	430a      	orrs	r2, r1
 80009be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689a      	ldr	r2, [r3, #8]
 80009c6:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <HAL_ADC_Init+0x1a8>)
 80009c8:	4013      	ands	r3, r2
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	68b9      	ldr	r1, [r7, #8]
 80009d0:	430b      	orrs	r3, r1
 80009d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	689b      	ldr	r3, [r3, #8]
 80009d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009dc:	d003      	beq.n	80009e6 <HAL_ADC_Init+0x126>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d104      	bne.n	80009f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	691b      	ldr	r3, [r3, #16]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	051b      	lsls	r3, r3, #20
 80009ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	430a      	orrs	r2, r1
 8000a02:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_ADC_Init+0x1ac>)
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d10b      	bne.n	8000a2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a1e:	f023 0303 	bic.w	r3, r3, #3
 8000a22:	f043 0201 	orr.w	r2, r3, #1
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a2a:	e018      	b.n	8000a5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a30:	f023 0312 	bic.w	r3, r3, #18
 8000a34:	f043 0210 	orr.w	r2, r3, #16
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a40:	f043 0201 	orr.w	r2, r3, #1
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a4c:	e007      	b.n	8000a5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a52:	f043 0210 	orr.w	r2, r3, #16
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	ffe1f7fd 	.word	0xffe1f7fd
 8000a6c:	ff1f0efe 	.word	0xff1f0efe

08000a70 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a64      	ldr	r2, [pc, #400]	@ (8000c18 <HAL_ADC_Start_DMA+0x1a8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d004      	beq.n	8000a94 <HAL_ADC_Start_DMA+0x24>
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a63      	ldr	r2, [pc, #396]	@ (8000c1c <HAL_ADC_Start_DMA+0x1ac>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d106      	bne.n	8000aa2 <HAL_ADC_Start_DMA+0x32>
 8000a94:	4b60      	ldr	r3, [pc, #384]	@ (8000c18 <HAL_ADC_Start_DMA+0x1a8>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f040 80b3 	bne.w	8000c08 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d101      	bne.n	8000ab0 <HAL_ADC_Start_DMA+0x40>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e0ae      	b.n	8000c0e <HAL_ADC_Start_DMA+0x19e>
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 f9cb 	bl	8000e54 <ADC_Enable>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ac2:	7dfb      	ldrb	r3, [r7, #23]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 809a 	bne.w	8000bfe <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ace:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000ad2:	f023 0301 	bic.w	r3, r3, #1
 8000ad6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a4e      	ldr	r2, [pc, #312]	@ (8000c1c <HAL_ADC_Start_DMA+0x1ac>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d105      	bne.n	8000af4 <HAL_ADC_Start_DMA+0x84>
 8000ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8000c18 <HAL_ADC_Start_DMA+0x1a8>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d115      	bne.n	8000b20 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d026      	beq.n	8000b5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b1e:	e01d      	b.n	8000b5c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a39      	ldr	r2, [pc, #228]	@ (8000c18 <HAL_ADC_Start_DMA+0x1a8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d004      	beq.n	8000b40 <HAL_ADC_Start_DMA+0xd0>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a38      	ldr	r2, [pc, #224]	@ (8000c1c <HAL_ADC_Start_DMA+0x1ac>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d10d      	bne.n	8000b5c <HAL_ADC_Start_DMA+0xec>
 8000b40:	4b35      	ldr	r3, [pc, #212]	@ (8000c18 <HAL_ADC_Start_DMA+0x1a8>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d007      	beq.n	8000b5c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d006      	beq.n	8000b76 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6c:	f023 0206 	bic.w	r2, r3, #6
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b74:	e002      	b.n	8000b7c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6a1b      	ldr	r3, [r3, #32]
 8000b88:	4a25      	ldr	r2, [pc, #148]	@ (8000c20 <HAL_ADC_Start_DMA+0x1b0>)
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
 8000b90:	4a24      	ldr	r2, [pc, #144]	@ (8000c24 <HAL_ADC_Start_DMA+0x1b4>)
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4a23      	ldr	r2, [pc, #140]	@ (8000c28 <HAL_ADC_Start_DMA+0x1b8>)
 8000b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f06f 0202 	mvn.w	r2, #2
 8000ba4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000bb4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6a18      	ldr	r0, [r3, #32]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	334c      	adds	r3, #76	@ 0x4c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f000 fc5d 	bl	8001484 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000bd4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000bd8:	d108      	bne.n	8000bec <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000be8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000bea:	e00f      	b.n	8000c0c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000bfa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000bfc:	e006      	b.n	8000c0c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000c06:	e001      	b.n	8000c0c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012400 	.word	0x40012400
 8000c1c:	40012800 	.word	0x40012800
 8000c20:	08000f8b 	.word	0x08000f8b
 8000c24:	08001007 	.word	0x08001007
 8000c28:	08001023 	.word	0x08001023

08000c2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
	...

08000c64 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d101      	bne.n	8000c84 <HAL_ADC_ConfigChannel+0x20>
 8000c80:	2302      	movs	r3, #2
 8000c82:	e0dc      	b.n	8000e3e <HAL_ADC_ConfigChannel+0x1da>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2201      	movs	r2, #1
 8000c88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b06      	cmp	r3, #6
 8000c92:	d81c      	bhi.n	8000cce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b05      	subs	r3, #5
 8000ca6:	221f      	movs	r2, #31
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	4019      	ands	r1, r3
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685a      	ldr	r2, [r3, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3b05      	subs	r3, #5
 8000cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ccc:	e03c      	b.n	8000d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	2b0c      	cmp	r3, #12
 8000cd4:	d81c      	bhi.n	8000d10 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	3b23      	subs	r3, #35	@ 0x23
 8000ce8:	221f      	movs	r2, #31
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	4019      	ands	r1, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	6818      	ldr	r0, [r3, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b23      	subs	r3, #35	@ 0x23
 8000d02:	fa00 f203 	lsl.w	r2, r0, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000d0e:	e01b      	b.n	8000d48 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	4413      	add	r3, r2
 8000d20:	3b41      	subs	r3, #65	@ 0x41
 8000d22:	221f      	movs	r2, #31
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	4019      	ands	r1, r3
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	4613      	mov	r3, r2
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4413      	add	r3, r2
 8000d3a:	3b41      	subs	r3, #65	@ 0x41
 8000d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b09      	cmp	r3, #9
 8000d4e:	d91c      	bls.n	8000d8a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68d9      	ldr	r1, [r3, #12]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	4413      	add	r3, r2
 8000d60:	3b1e      	subs	r3, #30
 8000d62:	2207      	movs	r2, #7
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4019      	ands	r1, r3
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	6898      	ldr	r0, [r3, #8]
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	3b1e      	subs	r3, #30
 8000d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	e019      	b.n	8000dbe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6919      	ldr	r1, [r3, #16]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	4019      	ands	r1, r3
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	6898      	ldr	r0, [r3, #8]
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	fa00 f203 	lsl.w	r2, r0, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b10      	cmp	r3, #16
 8000dc4:	d003      	beq.n	8000dce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dca:	2b11      	cmp	r3, #17
 8000dcc:	d132      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e48 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d125      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d126      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000df4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b10      	cmp	r3, #16
 8000dfc:	d11a      	bne.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_ADC_ConfigChannel+0x1e8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a13      	ldr	r2, [pc, #76]	@ (8000e50 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0c9a      	lsrs	r2, r3, #18
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e14:	e002      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f9      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x1b2>
 8000e22:	e007      	b.n	8000e34 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e28:	f043 0220 	orr.w	r2, r3, #32
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	40012400 	.word	0x40012400
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	431bde83 	.word	0x431bde83

08000e54 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d040      	beq.n	8000ef4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0201 	orr.w	r2, r2, #1
 8000e80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <ADC_Enable+0xac>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <ADC_Enable+0xb0>)
 8000e88:	fba2 2303 	umull	r2, r3, r2, r3
 8000e8c:	0c9b      	lsrs	r3, r3, #18
 8000e8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e90:	e002      	b.n	8000e98 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	3b01      	subs	r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f9      	bne.n	8000e92 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e9e:	f7ff fce1 	bl	8000864 <HAL_GetTick>
 8000ea2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ea4:	e01f      	b.n	8000ee6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ea6:	f7ff fcdd 	bl	8000864 <HAL_GetTick>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d918      	bls.n	8000ee6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d011      	beq.n	8000ee6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec6:	f043 0210 	orr.w	r2, r3, #16
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	f043 0201 	orr.w	r2, r3, #1
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e007      	b.n	8000ef6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d1d8      	bne.n	8000ea6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000000 	.word	0x20000000
 8000f04:	431bde83 	.word	0x431bde83

08000f08 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d12e      	bne.n	8000f80 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689a      	ldr	r2, [r3, #8]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f022 0201 	bic.w	r2, r2, #1
 8000f30:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f32:	f7ff fc97 	bl	8000864 <HAL_GetTick>
 8000f36:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f38:	e01b      	b.n	8000f72 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f3a:	f7ff fc93 	bl	8000864 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d914      	bls.n	8000f72 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d10d      	bne.n	8000f72 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5a:	f043 0210 	orr.w	r2, r3, #16
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f66:	f043 0201 	orr.w	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e007      	b.n	8000f82 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d0dc      	beq.n	8000f3a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f96:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d127      	bne.n	8000ff4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fa8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000fba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000fbe:	d115      	bne.n	8000fec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d111      	bne.n	8000fec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d105      	bne.n	8000fec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f7ff fe1d 	bl	8000c2c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000ff2:	e004      	b.n	8000ffe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	4798      	blx	r3
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fe12 	bl	8000c3e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b084      	sub	sp, #16
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800102e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001034:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001040:	f043 0204 	orr.w	r2, r3, #4
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff fe01 	bl	8000c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b087      	sub	sp, #28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_ADCEx_Calibration_Start+0x1e>
 8001072:	2302      	movs	r3, #2
 8001074:	e097      	b.n	80011a6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff42 	bl	8000f08 <ADC_ConversionStop_Disable>
 8001084:	4603      	mov	r3, r0
 8001086:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fee3 	bl	8000e54 <ADC_Enable>
 800108e:	4603      	mov	r3, r0
 8001090:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001092:	7dfb      	ldrb	r3, [r7, #23]
 8001094:	2b00      	cmp	r3, #0
 8001096:	f040 8081 	bne.w	800119c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010a2:	f023 0302 	bic.w	r3, r3, #2
 80010a6:	f043 0202 	orr.w	r2, r3, #2
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80010ae:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <HAL_ADCEx_Calibration_Start+0x158>)
 80010b0:	681c      	ldr	r4, [r3, #0]
 80010b2:	2002      	movs	r0, #2
 80010b4:	f001 f9c4 	bl	8002440 <HAL_RCCEx_GetPeriphCLKFreq>
 80010b8:	4603      	mov	r3, r0
 80010ba:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80010be:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80010c0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80010c2:	e002      	b.n	80010ca <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f9      	bne.n	80010c4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f042 0208 	orr.w	r2, r2, #8
 80010de:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010e0:	f7ff fbc0 	bl	8000864 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010e6:	e01b      	b.n	8001120 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010e8:	f7ff fbbc 	bl	8000864 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d914      	bls.n	8001120 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00d      	beq.n	8001120 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001108:	f023 0312 	bic.w	r3, r3, #18
 800110c:	f043 0210 	orr.w	r2, r3, #16
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e042      	b.n	80011a6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1dc      	bne.n	80010e8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f042 0204 	orr.w	r2, r2, #4
 800113c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800113e:	f7ff fb91 	bl	8000864 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001144:	e01b      	b.n	800117e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001146:	f7ff fb8d 	bl	8000864 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b0a      	cmp	r3, #10
 8001152:	d914      	bls.n	800117e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00d      	beq.n	800117e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001166:	f023 0312 	bic.w	r3, r3, #18
 800116a:	f043 0210 	orr.w	r2, r3, #16
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e013      	b.n	80011a6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1dc      	bne.n	8001146 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001190:	f023 0303 	bic.w	r3, r3, #3
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	@ (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4906      	ldr	r1, [pc, #24]	@ (800124c <__NVIC_EnableIRQ+0x34>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100

08001250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	6039      	str	r1, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db0a      	blt.n	800127a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	490c      	ldr	r1, [pc, #48]	@ (800129c <__NVIC_SetPriority+0x4c>)
 800126a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126e:	0112      	lsls	r2, r2, #4
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	440b      	add	r3, r1
 8001274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001278:	e00a      	b.n	8001290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4908      	ldr	r1, [pc, #32]	@ (80012a0 <__NVIC_SetPriority+0x50>)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	3b04      	subs	r3, #4
 8001288:	0112      	lsls	r2, r2, #4
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	440b      	add	r3, r1
 800128e:	761a      	strb	r2, [r3, #24]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	e000e100 	.word	0xe000e100
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f1c3 0307 	rsb	r3, r3, #7
 80012be:	2b04      	cmp	r3, #4
 80012c0:	bf28      	it	cs
 80012c2:	2304      	movcs	r3, #4
 80012c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3304      	adds	r3, #4
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d902      	bls.n	80012d4 <NVIC_EncodePriority+0x30>
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3b03      	subs	r3, #3
 80012d2:	e000      	b.n	80012d6 <NVIC_EncodePriority+0x32>
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	f04f 32ff 	mov.w	r2, #4294967295
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	401a      	ands	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43d9      	mvns	r1, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	4313      	orrs	r3, r2
         );
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3724      	adds	r7, #36	@ 0x24
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff90 	bl	8001250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff2d 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff42 	bl	80011fc <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff90 	bl	80012a4 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5f 	bl	8001250 <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff35 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e043      	b.n	800146e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <HAL_DMA_Init+0xa8>)
 80013ee:	4413      	add	r3, r2
 80013f0:	4a22      	ldr	r2, [pc, #136]	@ (800147c <HAL_DMA_Init+0xac>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	091b      	lsrs	r3, r3, #4
 80013f8:	009a      	lsls	r2, r3, #2
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a1f      	ldr	r2, [pc, #124]	@ (8001480 <HAL_DMA_Init+0xb0>)
 8001402:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2202      	movs	r2, #2
 8001408:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800141a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800141e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	bffdfff8 	.word	0xbffdfff8
 800147c:	cccccccd 	.word	0xcccccccd
 8001480:	40020000 	.word	0x40020000

08001484 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_DMA_Start_IT+0x20>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e04b      	b.n	800153c <HAL_DMA_Start_IT+0xb8>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d13a      	bne.n	800152e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 f937 	bl	8001750 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d008      	beq.n	80014fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 020e 	orr.w	r2, r2, #14
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	e00f      	b.n	800151c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0204 	bic.w	r2, r2, #4
 800150a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 020a 	orr.w	r2, r2, #10
 800151a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0201 	orr.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e005      	b.n	800153a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001536:	2302      	movs	r3, #2
 8001538:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800153a:	7dfb      	ldrb	r3, [r7, #23]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	2204      	movs	r2, #4
 8001562:	409a      	lsls	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4013      	ands	r3, r2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d04f      	beq.n	800160c <HAL_DMA_IRQHandler+0xc8>
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d04a      	beq.n	800160c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b00      	cmp	r3, #0
 8001582:	d107      	bne.n	8001594 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f022 0204 	bic.w	r2, r2, #4
 8001592:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a66      	ldr	r2, [pc, #408]	@ (8001734 <HAL_DMA_IRQHandler+0x1f0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d029      	beq.n	80015f2 <HAL_DMA_IRQHandler+0xae>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a65      	ldr	r2, [pc, #404]	@ (8001738 <HAL_DMA_IRQHandler+0x1f4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d022      	beq.n	80015ee <HAL_DMA_IRQHandler+0xaa>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a63      	ldr	r2, [pc, #396]	@ (800173c <HAL_DMA_IRQHandler+0x1f8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d01a      	beq.n	80015e8 <HAL_DMA_IRQHandler+0xa4>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a62      	ldr	r2, [pc, #392]	@ (8001740 <HAL_DMA_IRQHandler+0x1fc>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d012      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x9e>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a60      	ldr	r2, [pc, #384]	@ (8001744 <HAL_DMA_IRQHandler+0x200>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d00a      	beq.n	80015dc <HAL_DMA_IRQHandler+0x98>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001748 <HAL_DMA_IRQHandler+0x204>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d102      	bne.n	80015d6 <HAL_DMA_IRQHandler+0x92>
 80015d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015d4:	e00e      	b.n	80015f4 <HAL_DMA_IRQHandler+0xb0>
 80015d6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80015da:	e00b      	b.n	80015f4 <HAL_DMA_IRQHandler+0xb0>
 80015dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80015e0:	e008      	b.n	80015f4 <HAL_DMA_IRQHandler+0xb0>
 80015e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015e6:	e005      	b.n	80015f4 <HAL_DMA_IRQHandler+0xb0>
 80015e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ec:	e002      	b.n	80015f4 <HAL_DMA_IRQHandler+0xb0>
 80015ee:	2340      	movs	r3, #64	@ 0x40
 80015f0:	e000      	b.n	80015f4 <HAL_DMA_IRQHandler+0xb0>
 80015f2:	2304      	movs	r3, #4
 80015f4:	4a55      	ldr	r2, [pc, #340]	@ (800174c <HAL_DMA_IRQHandler+0x208>)
 80015f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8094 	beq.w	800172a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800160a:	e08e      	b.n	800172a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	2202      	movs	r2, #2
 8001612:	409a      	lsls	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d056      	beq.n	80016ca <HAL_DMA_IRQHandler+0x186>
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d051      	beq.n	80016ca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10b      	bne.n	800164c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 020a 	bic.w	r2, r2, #10
 8001642:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a38      	ldr	r2, [pc, #224]	@ (8001734 <HAL_DMA_IRQHandler+0x1f0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d029      	beq.n	80016aa <HAL_DMA_IRQHandler+0x166>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a37      	ldr	r2, [pc, #220]	@ (8001738 <HAL_DMA_IRQHandler+0x1f4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d022      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x162>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a35      	ldr	r2, [pc, #212]	@ (800173c <HAL_DMA_IRQHandler+0x1f8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d01a      	beq.n	80016a0 <HAL_DMA_IRQHandler+0x15c>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a34      	ldr	r2, [pc, #208]	@ (8001740 <HAL_DMA_IRQHandler+0x1fc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d012      	beq.n	800169a <HAL_DMA_IRQHandler+0x156>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a32      	ldr	r2, [pc, #200]	@ (8001744 <HAL_DMA_IRQHandler+0x200>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d00a      	beq.n	8001694 <HAL_DMA_IRQHandler+0x150>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <HAL_DMA_IRQHandler+0x204>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d102      	bne.n	800168e <HAL_DMA_IRQHandler+0x14a>
 8001688:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800168c:	e00e      	b.n	80016ac <HAL_DMA_IRQHandler+0x168>
 800168e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001692:	e00b      	b.n	80016ac <HAL_DMA_IRQHandler+0x168>
 8001694:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001698:	e008      	b.n	80016ac <HAL_DMA_IRQHandler+0x168>
 800169a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800169e:	e005      	b.n	80016ac <HAL_DMA_IRQHandler+0x168>
 80016a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016a4:	e002      	b.n	80016ac <HAL_DMA_IRQHandler+0x168>
 80016a6:	2320      	movs	r3, #32
 80016a8:	e000      	b.n	80016ac <HAL_DMA_IRQHandler+0x168>
 80016aa:	2302      	movs	r3, #2
 80016ac:	4a27      	ldr	r2, [pc, #156]	@ (800174c <HAL_DMA_IRQHandler+0x208>)
 80016ae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d034      	beq.n	800172a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016c8:	e02f      	b.n	800172a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	2208      	movs	r2, #8
 80016d0:	409a      	lsls	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d028      	beq.n	800172c <HAL_DMA_IRQHandler+0x1e8>
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	f003 0308 	and.w	r3, r3, #8
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d023      	beq.n	800172c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 020e 	bic.w	r2, r2, #14
 80016f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001702:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    }
  }
  return;
 800172a:	bf00      	nop
 800172c:	bf00      	nop
}
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40020008 	.word	0x40020008
 8001738:	4002001c 	.word	0x4002001c
 800173c:	40020030 	.word	0x40020030
 8001740:	40020044 	.word	0x40020044
 8001744:	40020058 	.word	0x40020058
 8001748:	4002006c 	.word	0x4002006c
 800174c:	40020000 	.word	0x40020000

08001750 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
 800175c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001766:	2101      	movs	r1, #1
 8001768:	fa01 f202 	lsl.w	r2, r1, r2
 800176c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d108      	bne.n	8001790 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800178e:	e007      	b.n	80017a0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	60da      	str	r2, [r3, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b08b      	sub	sp, #44	@ 0x2c
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017be:	e169      	b.n	8001a94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c0:	2201      	movs	r2, #1
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	429a      	cmp	r2, r3
 80017da:	f040 8158 	bne.w	8001a8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a9a      	ldr	r2, [pc, #616]	@ (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d05e      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017e8:	4a98      	ldr	r2, [pc, #608]	@ (8001a4c <HAL_GPIO_Init+0x2a0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d875      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017ee:	4a98      	ldr	r2, [pc, #608]	@ (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d058      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 80017f4:	4a96      	ldr	r2, [pc, #600]	@ (8001a50 <HAL_GPIO_Init+0x2a4>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d86f      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 80017fa:	4a96      	ldr	r2, [pc, #600]	@ (8001a54 <HAL_GPIO_Init+0x2a8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d052      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001800:	4a94      	ldr	r2, [pc, #592]	@ (8001a54 <HAL_GPIO_Init+0x2a8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d869      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001806:	4a94      	ldr	r2, [pc, #592]	@ (8001a58 <HAL_GPIO_Init+0x2ac>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d04c      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 800180c:	4a92      	ldr	r2, [pc, #584]	@ (8001a58 <HAL_GPIO_Init+0x2ac>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d863      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001812:	4a92      	ldr	r2, [pc, #584]	@ (8001a5c <HAL_GPIO_Init+0x2b0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d046      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
 8001818:	4a90      	ldr	r2, [pc, #576]	@ (8001a5c <HAL_GPIO_Init+0x2b0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d85d      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d82a      	bhi.n	8001878 <HAL_GPIO_Init+0xcc>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d859      	bhi.n	80018da <HAL_GPIO_Init+0x12e>
 8001826:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <HAL_GPIO_Init+0x80>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	080018a7 	.word	0x080018a7
 8001830:	08001881 	.word	0x08001881
 8001834:	08001893 	.word	0x08001893
 8001838:	080018d5 	.word	0x080018d5
 800183c:	080018db 	.word	0x080018db
 8001840:	080018db 	.word	0x080018db
 8001844:	080018db 	.word	0x080018db
 8001848:	080018db 	.word	0x080018db
 800184c:	080018db 	.word	0x080018db
 8001850:	080018db 	.word	0x080018db
 8001854:	080018db 	.word	0x080018db
 8001858:	080018db 	.word	0x080018db
 800185c:	080018db 	.word	0x080018db
 8001860:	080018db 	.word	0x080018db
 8001864:	080018db 	.word	0x080018db
 8001868:	080018db 	.word	0x080018db
 800186c:	080018db 	.word	0x080018db
 8001870:	08001889 	.word	0x08001889
 8001874:	0800189d 	.word	0x0800189d
 8001878:	4a79      	ldr	r2, [pc, #484]	@ (8001a60 <HAL_GPIO_Init+0x2b4>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187e:	e02c      	b.n	80018da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e029      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	3304      	adds	r3, #4
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e024      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	3308      	adds	r3, #8
 8001898:	623b      	str	r3, [r7, #32]
          break;
 800189a:	e01f      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	330c      	adds	r3, #12
 80018a2:	623b      	str	r3, [r7, #32]
          break;
 80018a4:	e01a      	b.n	80018dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ae:	2304      	movs	r3, #4
 80018b0:	623b      	str	r3, [r7, #32]
          break;
 80018b2:	e013      	b.n	80018dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018bc:	2308      	movs	r3, #8
 80018be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69fa      	ldr	r2, [r7, #28]
 80018c4:	611a      	str	r2, [r3, #16]
          break;
 80018c6:	e009      	b.n	80018dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	615a      	str	r2, [r3, #20]
          break;
 80018d2:	e003      	b.n	80018dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d4:	2300      	movs	r3, #0
 80018d6:	623b      	str	r3, [r7, #32]
          break;
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x130>
          break;
 80018da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2bff      	cmp	r3, #255	@ 0xff
 80018e0:	d801      	bhi.n	80018e6 <HAL_GPIO_Init+0x13a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_Init+0x13e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3304      	adds	r3, #4
 80018ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2bff      	cmp	r3, #255	@ 0xff
 80018f0:	d802      	bhi.n	80018f8 <HAL_GPIO_Init+0x14c>
 80018f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x152>
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	3b08      	subs	r3, #8
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	210f      	movs	r1, #15
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	401a      	ands	r2, r3
 8001910:	6a39      	ldr	r1, [r7, #32]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	431a      	orrs	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80b1 	beq.w	8001a8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800192c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a4c      	ldr	r2, [pc, #304]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b4a      	ldr	r3, [pc, #296]	@ (8001a64 <HAL_GPIO_Init+0x2b8>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001944:	4a48      	ldr	r2, [pc, #288]	@ (8001a68 <HAL_GPIO_Init+0x2bc>)
 8001946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a40      	ldr	r2, [pc, #256]	@ (8001a6c <HAL_GPIO_Init+0x2c0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d013      	beq.n	8001998 <HAL_GPIO_Init+0x1ec>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a3f      	ldr	r2, [pc, #252]	@ (8001a70 <HAL_GPIO_Init+0x2c4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d00d      	beq.n	8001994 <HAL_GPIO_Init+0x1e8>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a74 <HAL_GPIO_Init+0x2c8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d007      	beq.n	8001990 <HAL_GPIO_Init+0x1e4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a3d      	ldr	r2, [pc, #244]	@ (8001a78 <HAL_GPIO_Init+0x2cc>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d101      	bne.n	800198c <HAL_GPIO_Init+0x1e0>
 8001988:	2303      	movs	r3, #3
 800198a:	e006      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 800198c:	2304      	movs	r3, #4
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001990:	2302      	movs	r3, #2
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1ee>
 8001998:	2300      	movs	r3, #0
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019aa:	492f      	ldr	r1, [pc, #188]	@ (8001a68 <HAL_GPIO_Init+0x2bc>)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019c4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	492c      	ldr	r1, [pc, #176]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	608b      	str	r3, [r1, #8]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019d2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4928      	ldr	r1, [pc, #160]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019ec:	4b23      	ldr	r3, [pc, #140]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4922      	ldr	r1, [pc, #136]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60cb      	str	r3, [r1, #12]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019fa:	4b20      	ldr	r3, [pc, #128]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	491e      	ldr	r1, [pc, #120]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4918      	ldr	r1, [pc, #96]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a22:	4b16      	ldr	r3, [pc, #88]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4914      	ldr	r1, [pc, #80]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d021      	beq.n	8001a80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e021      	b.n	8001a8e <HAL_GPIO_Init+0x2e2>
 8001a4a:	bf00      	nop
 8001a4c:	10320000 	.word	0x10320000
 8001a50:	10310000 	.word	0x10310000
 8001a54:	10220000 	.word	0x10220000
 8001a58:	10210000 	.word	0x10210000
 8001a5c:	10120000 	.word	0x10120000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40011400 	.word	0x40011400
 8001a7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	4909      	ldr	r1, [pc, #36]	@ (8001ab0 <HAL_GPIO_Init+0x304>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f47f ae8e 	bne.w	80017c0 <HAL_GPIO_Init+0x14>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	372c      	adds	r7, #44	@ 0x2c
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40010400 	.word	0x40010400

08001ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e272      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8087 	beq.w	8001be2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ad4:	4b92      	ldr	r3, [pc, #584]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d00c      	beq.n	8001afa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae0:	4b8f      	ldr	r3, [pc, #572]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d112      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
 8001aec:	4b8c      	ldr	r3, [pc, #560]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001af8:	d10b      	bne.n	8001b12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afa:	4b89      	ldr	r3, [pc, #548]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06c      	beq.n	8001be0 <HAL_RCC_OscConfig+0x12c>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d168      	bne.n	8001be0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e24c      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b1a:	d106      	bne.n	8001b2a <HAL_RCC_OscConfig+0x76>
 8001b1c:	4b80      	ldr	r3, [pc, #512]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a7f      	ldr	r2, [pc, #508]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e02e      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x98>
 8001b32:	4b7b      	ldr	r3, [pc, #492]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a7a      	ldr	r2, [pc, #488]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3c:	6013      	str	r3, [r2, #0]
 8001b3e:	4b78      	ldr	r3, [pc, #480]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a77      	ldr	r2, [pc, #476]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0xbc>
 8001b56:	4b72      	ldr	r3, [pc, #456]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a71      	ldr	r2, [pc, #452]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b6f      	ldr	r3, [pc, #444]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6e      	ldr	r2, [pc, #440]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xd4>
 8001b70:	4b6b      	ldr	r3, [pc, #428]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a6a      	ldr	r2, [pc, #424]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b68      	ldr	r3, [pc, #416]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a67      	ldr	r2, [pc, #412]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7fe fe68 	bl	8000864 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7fe fe64 	bl	8000864 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	@ 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e200      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b5d      	ldr	r3, [pc, #372]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xe4>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7fe fe54 	bl	8000864 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7fe fe50 	bl	8000864 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	@ 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1ec      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x10c>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bee:	4b4c      	ldr	r3, [pc, #304]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bfa:	4b49      	ldr	r3, [pc, #292]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
 8001c06:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b43      	ldr	r3, [pc, #268]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1c0      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4939      	ldr	r1, [pc, #228]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b36      	ldr	r3, [pc, #216]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fe09 	bl	8000864 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7fe fe05 	bl	8000864 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1a1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4927      	ldr	r1, [pc, #156]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b26      	ldr	r3, [pc, #152]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7fe fde8 	bl	8000864 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7fe fde4 	bl	8000864 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e180      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1d      	ldr	r3, [pc, #116]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d03a      	beq.n	8001d38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d019      	beq.n	8001cfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7fe fdc8 	bl	8000864 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe fdc4 	bl	8000864 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e160      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 face 	bl	8002298 <RCC_Delay>
 8001cfc:	e01c      	b.n	8001d38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7fe fdae 	bl	8000864 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0a:	e00f      	b.n	8001d2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7fe fdaa 	bl	8000864 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d908      	bls.n	8001d2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e146      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001d1e:	bf00      	nop
 8001d20:	40021000 	.word	0x40021000
 8001d24:	42420000 	.word	0x42420000
 8001d28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b92      	ldr	r3, [pc, #584]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e9      	bne.n	8001d0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a6 	beq.w	8001e92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10d      	bne.n	8001d72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4b88      	ldr	r3, [pc, #544]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	4a87      	ldr	r2, [pc, #540]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	61d3      	str	r3, [r2, #28]
 8001d62:	4b85      	ldr	r3, [pc, #532]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d72:	4b82      	ldr	r3, [pc, #520]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d118      	bne.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a7e      	ldr	r2, [pc, #504]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8a:	f7fe fd6b 	bl	8000864 <HAL_GetTick>
 8001d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	e008      	b.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d92:	f7fe fd67 	bl	8000864 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b64      	cmp	r3, #100	@ 0x64
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e103      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	4b75      	ldr	r3, [pc, #468]	@ (8001f7c <HAL_RCC_OscConfig+0x4c8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x312>
 8001db8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	4a6e      	ldr	r2, [pc, #440]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6213      	str	r3, [r2, #32]
 8001dc4:	e02d      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0x334>
 8001dce:	4b6a      	ldr	r3, [pc, #424]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a69      	ldr	r2, [pc, #420]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b67      	ldr	r3, [pc, #412]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a66      	ldr	r2, [pc, #408]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	e01c      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d10c      	bne.n	8001e0a <HAL_RCC_OscConfig+0x356>
 8001df0:	4b61      	ldr	r3, [pc, #388]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	4a60      	ldr	r2, [pc, #384]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	6213      	str	r3, [r2, #32]
 8001dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a5d      	ldr	r2, [pc, #372]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x36e>
 8001e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6213      	str	r3, [r2, #32]
 8001e16:	4b58      	ldr	r3, [pc, #352]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a57      	ldr	r2, [pc, #348]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0304 	bic.w	r3, r3, #4
 8001e20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d015      	beq.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e2a:	f7fe fd1b 	bl	8000864 <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e30:	e00a      	b.n	8001e48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fd17 	bl	8000864 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d901      	bls.n	8001e48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e0b1      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e48:	4b4b      	ldr	r3, [pc, #300]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0ee      	beq.n	8001e32 <HAL_RCC_OscConfig+0x37e>
 8001e54:	e014      	b.n	8001e80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7fe fd05 	bl	8000864 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fd01 	bl	8000864 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e09b      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e74:	4b40      	ldr	r3, [pc, #256]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1ee      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e86:	4b3c      	ldr	r3, [pc, #240]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e9c:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d061      	beq.n	8001f6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d146      	bne.n	8001f3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b33      	ldr	r3, [pc, #204]	@ (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fcd5 	bl	8000864 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ebe:	f7fe fcd1 	bl	8000864 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e06d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed0:	4b29      	ldr	r3, [pc, #164]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f0      	bne.n	8001ebe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	4921      	ldr	r1, [pc, #132]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a19      	ldr	r1, [r3, #32]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	491b      	ldr	r1, [pc, #108]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f16:	f7fe fca5 	bl	8000864 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1e:	f7fe fca1 	bl	8000864 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x46a>
 8001f3c:	e035      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_RCC_OscConfig+0x4cc>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7fe fc8e 	bl	8000864 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7fe fc8a 	bl	8000864 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e026      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x498>
 8001f6a:	e01e      	b.n	8001faa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e019      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f84:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <HAL_RCC_OscConfig+0x500>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d106      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0d0      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fda:	4b67      	ldr	r3, [pc, #412]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f023 0207 	bic.w	r2, r3, #7
 8001fe2:	4965      	ldr	r1, [pc, #404]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4a58      	ldr	r2, [pc, #352]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800201e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a52      	ldr	r2, [pc, #328]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002036:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d115      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b41      	ldr	r3, [pc, #260]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d109      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e073      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b3d      	ldr	r3, [pc, #244]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06b      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002096:	4b39      	ldr	r3, [pc, #228]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 0203 	bic.w	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4936      	ldr	r1, [pc, #216]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7fe fbdc 	bl	8000864 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	e00a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b0:	f7fe fbd8 	bl	8000864 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e053      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b2d      	ldr	r3, [pc, #180]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 020c 	and.w	r2, r3, #12
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1eb      	bne.n	80020b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d210      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 0207 	bic.w	r2, r3, #7
 80020ee:	4922      	ldr	r1, [pc, #136]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490a      	ldr	r1, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <HAL_RCC_ClockConfig+0x1cc>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_ClockConfig+0x1d0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fb3a 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
 8002180:	08003874 	.word	0x08003874
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	2300      	movs	r3, #0
 80021a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d002      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x30>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d003      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x36>
 80021ba:	e027      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021be:	613b      	str	r3, [r7, #16]
      break;
 80021c0:	e027      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0c9b      	lsrs	r3, r3, #18
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021cc:	5cd3      	ldrb	r3, [r2, r3]
 80021ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d010      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0c5b      	lsrs	r3, r3, #17
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	4a11      	ldr	r2, [pc, #68]	@ (800222c <HAL_RCC_GetSysClockFreq+0xa0>)
 80021e6:	5cd3      	ldrb	r3, [r2, r3]
 80021e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 80021ee:	fb03 f202 	mul.w	r2, r3, r2
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e004      	b.n	8002206 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002230 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002200:	fb02 f303 	mul.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	613b      	str	r3, [r7, #16]
      break;
 800220a:	e002      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x98>)
 800220e:	613b      	str	r3, [r7, #16]
      break;
 8002210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002212:	693b      	ldr	r3, [r7, #16]
}
 8002214:	4618      	mov	r0, r3
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	007a1200 	.word	0x007a1200
 8002228:	0800388c 	.word	0x0800388c
 800222c:	0800389c 	.word	0x0800389c
 8002230:	003d0900 	.word	0x003d0900

08002234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002238:	4b02      	ldr	r3, [pc, #8]	@ (8002244 <HAL_RCC_GetHCLKFreq+0x10>)
 800223a:	681b      	ldr	r3, [r3, #0]
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr
 8002244:	20000000 	.word	0x20000000

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff2 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	@ (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	08003884 	.word	0x08003884

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffde 	bl	8002234 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	@ (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0adb      	lsrs	r3, r3, #11
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08003884 	.word	0x08003884

08002298 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <RCC_Delay+0x34>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <RCC_Delay+0x38>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a5b      	lsrs	r3, r3, #9
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b4:	bf00      	nop
  }
  while (Delay --);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <RCC_Delay+0x1c>
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000000 	.word	0x20000000
 80022d0:	10624dd3 	.word	0x10624dd3

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d07d      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80022f0:	2300      	movs	r3, #0
 80022f2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10d      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002300:	4b4c      	ldr	r3, [pc, #304]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a4b      	ldr	r2, [pc, #300]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230a:	61d3      	str	r3, [r2, #28]
 800230c:	4b49      	ldr	r3, [pc, #292]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002318:	2301      	movs	r3, #1
 800231a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b46      	ldr	r3, [pc, #280]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d118      	bne.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002328:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a42      	ldr	r2, [pc, #264]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002334:	f7fe fa96 	bl	8000864 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	e008      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233c:	f7fe fa92 	bl	8000864 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b64      	cmp	r3, #100	@ 0x64
 8002348:	d901      	bls.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e06d      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234e:	4b3a      	ldr	r3, [pc, #232]	@ (8002438 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800235a:	4b36      	ldr	r3, [pc, #216]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002362:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d02e      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d027      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002378:	4b2e      	ldr	r3, [pc, #184]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002380:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002382:	4b2e      	ldr	r3, [pc, #184]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002388:	4b2c      	ldr	r3, [pc, #176]	@ (800243c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800238e:	4a29      	ldr	r2, [pc, #164]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d014      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe fa61 	bl	8000864 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7fe fa5d 	bl	8000864 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e036      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ee      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4917      	ldr	r1, [pc, #92]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023da:	7dfb      	ldrb	r3, [r7, #23]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d105      	bne.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a13      	ldr	r2, [pc, #76]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	490b      	ldr	r1, [pc, #44]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002416:	4b07      	ldr	r3, [pc, #28]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	4904      	ldr	r1, [pc, #16]	@ (8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40021000 	.word	0x40021000
 8002438:	40007000 	.word	0x40007000
 800243c:	42420440 	.word	0x42420440

08002440 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b10      	cmp	r3, #16
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b10      	cmp	r3, #16
 8002466:	f200 808a 	bhi.w	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d045      	beq.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d075      	beq.n	8002562 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002476:	e082      	b.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002478:	4b46      	ldr	r3, [pc, #280]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800247e:	4b45      	ldr	r3, [pc, #276]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d07b      	beq.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	0c9b      	lsrs	r3, r3, #18
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	4a41      	ldr	r2, [pc, #260]	@ (8002598 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002494:	5cd3      	ldrb	r3, [r2, r3]
 8002496:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024a2:	4b3c      	ldr	r3, [pc, #240]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	0c5b      	lsrs	r3, r3, #17
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	4a3b      	ldr	r2, [pc, #236]	@ (800259c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00d      	beq.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80024bc:	4a38      	ldr	r2, [pc, #224]	@ (80025a0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	61fb      	str	r3, [r7, #28]
 80024cc:	e004      	b.n	80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4a34      	ldr	r2, [pc, #208]	@ (80025a4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80024d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024e4:	d102      	bne.n	80024ec <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	61bb      	str	r3, [r7, #24]
      break;
 80024ea:	e04a      	b.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4a2d      	ldr	r2, [pc, #180]	@ (80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	61bb      	str	r3, [r7, #24]
      break;
 80024fa:	e042      	b.n	8002582 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80024fc:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800250c:	d108      	bne.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002518:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	e01f      	b.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800252a:	d109      	bne.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002538:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e00f      	b.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002546:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800254a:	d11c      	bne.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800254c:	4b11      	ldr	r3, [pc, #68]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d016      	beq.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002558:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800255c:	61bb      	str	r3, [r7, #24]
      break;
 800255e:	e012      	b.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002560:	e011      	b.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002562:	f7ff fe85 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8002566:	4602      	mov	r2, r0
 8002568:	4b0a      	ldr	r3, [pc, #40]	@ (8002594 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	0b9b      	lsrs	r3, r3, #14
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	61bb      	str	r3, [r7, #24]
      break;
 800257c:	e004      	b.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800257e:	bf00      	nop
 8002580:	e002      	b.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002586:	bf00      	nop
    }
  }
  return (frequency);
 8002588:	69bb      	ldr	r3, [r7, #24]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3720      	adds	r7, #32
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	080038a0 	.word	0x080038a0
 800259c:	080038b0 	.word	0x080038b0
 80025a0:	007a1200 	.word	0x007a1200
 80025a4:	003d0900 	.word	0x003d0900
 80025a8:	aaaaaaab 	.word	0xaaaaaaab

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e041      	b.n	8002642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fd ffec 	bl	80005b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 f8f4 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_TIM_ConfigClockSource+0x1c>
 8002662:	2302      	movs	r3, #2
 8002664:	e0b4      	b.n	80027d0 <HAL_TIM_ConfigClockSource+0x186>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002684:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800268c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800269e:	d03e      	beq.n	800271e <HAL_TIM_ConfigClockSource+0xd4>
 80026a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a4:	f200 8087 	bhi.w	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ac:	f000 8086 	beq.w	80027bc <HAL_TIM_ConfigClockSource+0x172>
 80026b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026b4:	d87f      	bhi.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026b6:	2b70      	cmp	r3, #112	@ 0x70
 80026b8:	d01a      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0xa6>
 80026ba:	2b70      	cmp	r3, #112	@ 0x70
 80026bc:	d87b      	bhi.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026be:	2b60      	cmp	r3, #96	@ 0x60
 80026c0:	d050      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x11a>
 80026c2:	2b60      	cmp	r3, #96	@ 0x60
 80026c4:	d877      	bhi.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026c6:	2b50      	cmp	r3, #80	@ 0x50
 80026c8:	d03c      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0xfa>
 80026ca:	2b50      	cmp	r3, #80	@ 0x50
 80026cc:	d873      	bhi.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026ce:	2b40      	cmp	r3, #64	@ 0x40
 80026d0:	d058      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x13a>
 80026d2:	2b40      	cmp	r3, #64	@ 0x40
 80026d4:	d86f      	bhi.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	2b30      	cmp	r3, #48	@ 0x30
 80026d8:	d064      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0x15a>
 80026da:	2b30      	cmp	r3, #48	@ 0x30
 80026dc:	d86b      	bhi.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d060      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0x15a>
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d867      	bhi.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d05c      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0x15a>
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d05a      	beq.n	80027a4 <HAL_TIM_ConfigClockSource+0x15a>
 80026ee:	e062      	b.n	80027b6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	f000 f94f 	bl	80029a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002712:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	609a      	str	r2, [r3, #8]
      break;
 800271c:	e04f      	b.n	80027be <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800272e:	f000 f938 	bl	80029a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002740:	609a      	str	r2, [r3, #8]
      break;
 8002742:	e03c      	b.n	80027be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002750:	461a      	mov	r2, r3
 8002752:	f000 f8af 	bl	80028b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2150      	movs	r1, #80	@ 0x50
 800275c:	4618      	mov	r0, r3
 800275e:	f000 f906 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002762:	e02c      	b.n	80027be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002770:	461a      	mov	r2, r3
 8002772:	f000 f8cd 	bl	8002910 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2160      	movs	r1, #96	@ 0x60
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f8f6 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 8002782:	e01c      	b.n	80027be <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002790:	461a      	mov	r2, r3
 8002792:	f000 f88f 	bl	80028b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2140      	movs	r1, #64	@ 0x40
 800279c:	4618      	mov	r0, r3
 800279e:	f000 f8e6 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 80027a2:	e00c      	b.n	80027be <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4619      	mov	r1, r3
 80027ae:	4610      	mov	r0, r2
 80027b0:	f000 f8dd 	bl	800296e <TIM_ITRx_SetConfig>
      break;
 80027b4:	e003      	b.n	80027be <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
      break;
 80027ba:	e000      	b.n	80027be <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a2f      	ldr	r2, [pc, #188]	@ (80028a8 <TIM_Base_SetConfig+0xd0>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00b      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f6:	d007      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a2c      	ldr	r2, [pc, #176]	@ (80028ac <TIM_Base_SetConfig+0xd4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a2b      	ldr	r2, [pc, #172]	@ (80028b0 <TIM_Base_SetConfig+0xd8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800280e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a22      	ldr	r2, [pc, #136]	@ (80028a8 <TIM_Base_SetConfig+0xd0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00b      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002828:	d007      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1f      	ldr	r2, [pc, #124]	@ (80028ac <TIM_Base_SetConfig+0xd4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d003      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1e      	ldr	r2, [pc, #120]	@ (80028b0 <TIM_Base_SetConfig+0xd8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a0d      	ldr	r2, [pc, #52]	@ (80028a8 <TIM_Base_SetConfig+0xd0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d005      	beq.n	800289e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f023 0201 	bic.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]
  }
}
 800289e:	bf00      	nop
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40012c00 	.word	0x40012c00
 80028ac:	40000400 	.word	0x40000400
 80028b0:	40000800 	.word	0x40000800

080028b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0201 	bic.w	r2, r3, #1
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	f023 030a 	bic.w	r3, r3, #10
 80028f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002910:	b480      	push	{r7}
 8002912:	b087      	sub	sp, #28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0210 	bic.w	r2, r3, #16
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800293a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	031b      	lsls	r3, r3, #12
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800294c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	621a      	str	r2, [r3, #32]
}
 8002964:	bf00      	nop
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800296e:	b480      	push	{r7}
 8002970:	b085      	sub	sp, #20
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002984:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	f043 0307 	orr.w	r3, r3, #7
 8002990:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b087      	sub	sp, #28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	021a      	lsls	r2, r3, #8
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	609a      	str	r2, [r3, #8]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e046      	b.n	8002a86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a16      	ldr	r2, [pc, #88]	@ (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d00e      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a44:	d009      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a12      	ldr	r2, [pc, #72]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d004      	beq.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a10      	ldr	r2, [pc, #64]	@ (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d10c      	bne.n	8002a74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40000800 	.word	0x40000800

08002a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e042      	b.n	8002b34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d106      	bne.n	8002ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7fd fd92 	bl	80005ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2224      	movs	r2, #36	@ 0x24
 8002acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f971 	bl	8002dc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2220      	movs	r2, #32
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d175      	bne.n	8002c48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_UART_Transmit+0x2c>
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e06e      	b.n	8002c4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2221      	movs	r2, #33	@ 0x21
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7a:	f7fd fe73 	bl	8000864 <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	88fa      	ldrh	r2, [r7, #6]
 8002b84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b94:	d108      	bne.n	8002ba8 <HAL_UART_Transmit+0x6c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d104      	bne.n	8002ba8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	61bb      	str	r3, [r7, #24]
 8002ba6:	e003      	b.n	8002bb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bb0:	e02e      	b.n	8002c10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2180      	movs	r1, #128	@ 0x80
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f848 	bl	8002c52 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e03a      	b.n	8002c4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10b      	bne.n	8002bf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	3302      	adds	r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]
 8002bf0:	e007      	b.n	8002c02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1cb      	bne.n	8002bb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2200      	movs	r2, #0
 8002c22:	2140      	movs	r1, #64	@ 0x40
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f814 	bl	8002c52 <UART_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e006      	b.n	8002c4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3720      	adds	r7, #32
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60f8      	str	r0, [r7, #12]
 8002c5a:	60b9      	str	r1, [r7, #8]
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c62:	e03b      	b.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6a:	d037      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6c:	f7fd fdfa 	bl	8000864 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	6a3a      	ldr	r2, [r7, #32]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d302      	bcc.n	8002c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e03a      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d023      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b80      	cmp	r3, #128	@ 0x80
 8002c98:	d020      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b40      	cmp	r3, #64	@ 0x40
 8002c9e:	d01d      	beq.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0308 	and.w	r3, r3, #8
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d116      	bne.n	8002cdc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f81d 	bl	8002d04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e00f      	b.n	8002cfc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d0b4      	beq.n	8002c64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b095      	sub	sp, #84	@ 0x54
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d16:	e853 3f00 	ldrex	r3, [r3]
 8002d1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d34:	e841 2300 	strex	r3, r2, [r1]
 8002d38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1e5      	bne.n	8002d0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3314      	adds	r3, #20
 8002d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f023 0301 	bic.w	r3, r3, #1
 8002d56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3314      	adds	r3, #20
 8002d5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d68:	e841 2300 	strex	r3, r2, [r1]
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e5      	bne.n	8002d40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d119      	bne.n	8002db0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f023 0310 	bic.w	r3, r3, #16
 8002d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d9c:	61ba      	str	r2, [r7, #24]
 8002d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6979      	ldr	r1, [r7, #20]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	613b      	str	r3, [r7, #16]
   return(result);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e5      	bne.n	8002d7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002dbe:	bf00      	nop
 8002dc0:	3754      	adds	r7, #84	@ 0x54
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e02:	f023 030c 	bic.w	r3, r3, #12
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002edc <UART_SetConfig+0x114>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d103      	bne.n	8002e38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e30:	f7ff fa1e 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	e002      	b.n	8002e3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7ff fa06 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	4a22      	ldr	r2, [pc, #136]	@ (8002ee0 <UART_SetConfig+0x118>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	0119      	lsls	r1, r3, #4
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	009a      	lsls	r2, r3, #2
 8002e68:	441a      	add	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <UART_SetConfig+0x118>)
 8002e76:	fba3 0302 	umull	r0, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2064      	movs	r0, #100	@ 0x64
 8002e7e:	fb00 f303 	mul.w	r3, r0, r3
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	@ 0x32
 8002e88:	4a15      	ldr	r2, [pc, #84]	@ (8002ee0 <UART_SetConfig+0x118>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e94:	4419      	add	r1, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009a      	lsls	r2, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <UART_SetConfig+0x118>)
 8002eae:	fba3 0302 	umull	r0, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	2064      	movs	r0, #100	@ 0x64
 8002eb6:	fb00 f303 	mul.w	r3, r0, r3
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	3332      	adds	r3, #50	@ 0x32
 8002ec0:	4a07      	ldr	r2, [pc, #28]	@ (8002ee0 <UART_SetConfig+0x118>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	f003 020f 	and.w	r2, r3, #15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	51eb851f 	.word	0x51eb851f

08002ee4 <siprintf>:
 8002ee4:	b40e      	push	{r1, r2, r3}
 8002ee6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002eea:	b500      	push	{lr}
 8002eec:	b09c      	sub	sp, #112	@ 0x70
 8002eee:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ef0:	9002      	str	r0, [sp, #8]
 8002ef2:	9006      	str	r0, [sp, #24]
 8002ef4:	9107      	str	r1, [sp, #28]
 8002ef6:	9104      	str	r1, [sp, #16]
 8002ef8:	4808      	ldr	r0, [pc, #32]	@ (8002f1c <siprintf+0x38>)
 8002efa:	4909      	ldr	r1, [pc, #36]	@ (8002f20 <siprintf+0x3c>)
 8002efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f00:	9105      	str	r1, [sp, #20]
 8002f02:	6800      	ldr	r0, [r0, #0]
 8002f04:	a902      	add	r1, sp, #8
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	f000 f992 	bl	8003230 <_svfiprintf_r>
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	9b02      	ldr	r3, [sp, #8]
 8002f10:	701a      	strb	r2, [r3, #0]
 8002f12:	b01c      	add	sp, #112	@ 0x70
 8002f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f18:	b003      	add	sp, #12
 8002f1a:	4770      	bx	lr
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	ffff0208 	.word	0xffff0208

08002f24 <memset>:
 8002f24:	4603      	mov	r3, r0
 8002f26:	4402      	add	r2, r0
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d100      	bne.n	8002f2e <memset+0xa>
 8002f2c:	4770      	bx	lr
 8002f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f32:	e7f9      	b.n	8002f28 <memset+0x4>

08002f34 <__errno>:
 8002f34:	4b01      	ldr	r3, [pc, #4]	@ (8002f3c <__errno+0x8>)
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2000000c 	.word	0x2000000c

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	2600      	movs	r6, #0
 8002f44:	4d0c      	ldr	r5, [pc, #48]	@ (8002f78 <__libc_init_array+0x38>)
 8002f46:	4c0d      	ldr	r4, [pc, #52]	@ (8002f7c <__libc_init_array+0x3c>)
 8002f48:	1b64      	subs	r4, r4, r5
 8002f4a:	10a4      	asrs	r4, r4, #2
 8002f4c:	42a6      	cmp	r6, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	f000 fc78 	bl	8003844 <_init>
 8002f54:	2600      	movs	r6, #0
 8002f56:	4d0a      	ldr	r5, [pc, #40]	@ (8002f80 <__libc_init_array+0x40>)
 8002f58:	4c0a      	ldr	r4, [pc, #40]	@ (8002f84 <__libc_init_array+0x44>)
 8002f5a:	1b64      	subs	r4, r4, r5
 8002f5c:	10a4      	asrs	r4, r4, #2
 8002f5e:	42a6      	cmp	r6, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f68:	4798      	blx	r3
 8002f6a:	3601      	adds	r6, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f72:	4798      	blx	r3
 8002f74:	3601      	adds	r6, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	080038e8 	.word	0x080038e8
 8002f7c:	080038e8 	.word	0x080038e8
 8002f80:	080038e8 	.word	0x080038e8
 8002f84:	080038ec 	.word	0x080038ec

08002f88 <__retarget_lock_acquire_recursive>:
 8002f88:	4770      	bx	lr

08002f8a <__retarget_lock_release_recursive>:
 8002f8a:	4770      	bx	lr

08002f8c <_free_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4605      	mov	r5, r0
 8002f90:	2900      	cmp	r1, #0
 8002f92:	d040      	beq.n	8003016 <_free_r+0x8a>
 8002f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f98:	1f0c      	subs	r4, r1, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bfb8      	it	lt
 8002f9e:	18e4      	addlt	r4, r4, r3
 8002fa0:	f000 f8de 	bl	8003160 <__malloc_lock>
 8002fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003018 <_free_r+0x8c>)
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	b933      	cbnz	r3, 8002fb8 <_free_r+0x2c>
 8002faa:	6063      	str	r3, [r4, #4]
 8002fac:	6014      	str	r4, [r2, #0]
 8002fae:	4628      	mov	r0, r5
 8002fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fb4:	f000 b8da 	b.w	800316c <__malloc_unlock>
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	d908      	bls.n	8002fce <_free_r+0x42>
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	1821      	adds	r1, r4, r0
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	bf01      	itttt	eq
 8002fc4:	6819      	ldreq	r1, [r3, #0]
 8002fc6:	685b      	ldreq	r3, [r3, #4]
 8002fc8:	1809      	addeq	r1, r1, r0
 8002fca:	6021      	streq	r1, [r4, #0]
 8002fcc:	e7ed      	b.n	8002faa <_free_r+0x1e>
 8002fce:	461a      	mov	r2, r3
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b10b      	cbz	r3, 8002fd8 <_free_r+0x4c>
 8002fd4:	42a3      	cmp	r3, r4
 8002fd6:	d9fa      	bls.n	8002fce <_free_r+0x42>
 8002fd8:	6811      	ldr	r1, [r2, #0]
 8002fda:	1850      	adds	r0, r2, r1
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d10b      	bne.n	8002ff8 <_free_r+0x6c>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	4401      	add	r1, r0
 8002fe4:	1850      	adds	r0, r2, r1
 8002fe6:	4283      	cmp	r3, r0
 8002fe8:	6011      	str	r1, [r2, #0]
 8002fea:	d1e0      	bne.n	8002fae <_free_r+0x22>
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4408      	add	r0, r1
 8002ff2:	6010      	str	r0, [r2, #0]
 8002ff4:	6053      	str	r3, [r2, #4]
 8002ff6:	e7da      	b.n	8002fae <_free_r+0x22>
 8002ff8:	d902      	bls.n	8003000 <_free_r+0x74>
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	e7d6      	b.n	8002fae <_free_r+0x22>
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	1821      	adds	r1, r4, r0
 8003004:	428b      	cmp	r3, r1
 8003006:	bf01      	itttt	eq
 8003008:	6819      	ldreq	r1, [r3, #0]
 800300a:	685b      	ldreq	r3, [r3, #4]
 800300c:	1809      	addeq	r1, r1, r0
 800300e:	6021      	streq	r1, [r4, #0]
 8003010:	6063      	str	r3, [r4, #4]
 8003012:	6054      	str	r4, [r2, #4]
 8003014:	e7cb      	b.n	8002fae <_free_r+0x22>
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	20000334 	.word	0x20000334

0800301c <sbrk_aligned>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	4e0f      	ldr	r6, [pc, #60]	@ (800305c <sbrk_aligned+0x40>)
 8003020:	460c      	mov	r4, r1
 8003022:	6831      	ldr	r1, [r6, #0]
 8003024:	4605      	mov	r5, r0
 8003026:	b911      	cbnz	r1, 800302e <sbrk_aligned+0x12>
 8003028:	f000 fbaa 	bl	8003780 <_sbrk_r>
 800302c:	6030      	str	r0, [r6, #0]
 800302e:	4621      	mov	r1, r4
 8003030:	4628      	mov	r0, r5
 8003032:	f000 fba5 	bl	8003780 <_sbrk_r>
 8003036:	1c43      	adds	r3, r0, #1
 8003038:	d103      	bne.n	8003042 <sbrk_aligned+0x26>
 800303a:	f04f 34ff 	mov.w	r4, #4294967295
 800303e:	4620      	mov	r0, r4
 8003040:	bd70      	pop	{r4, r5, r6, pc}
 8003042:	1cc4      	adds	r4, r0, #3
 8003044:	f024 0403 	bic.w	r4, r4, #3
 8003048:	42a0      	cmp	r0, r4
 800304a:	d0f8      	beq.n	800303e <sbrk_aligned+0x22>
 800304c:	1a21      	subs	r1, r4, r0
 800304e:	4628      	mov	r0, r5
 8003050:	f000 fb96 	bl	8003780 <_sbrk_r>
 8003054:	3001      	adds	r0, #1
 8003056:	d1f2      	bne.n	800303e <sbrk_aligned+0x22>
 8003058:	e7ef      	b.n	800303a <sbrk_aligned+0x1e>
 800305a:	bf00      	nop
 800305c:	20000330 	.word	0x20000330

08003060 <_malloc_r>:
 8003060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003064:	1ccd      	adds	r5, r1, #3
 8003066:	f025 0503 	bic.w	r5, r5, #3
 800306a:	3508      	adds	r5, #8
 800306c:	2d0c      	cmp	r5, #12
 800306e:	bf38      	it	cc
 8003070:	250c      	movcc	r5, #12
 8003072:	2d00      	cmp	r5, #0
 8003074:	4606      	mov	r6, r0
 8003076:	db01      	blt.n	800307c <_malloc_r+0x1c>
 8003078:	42a9      	cmp	r1, r5
 800307a:	d904      	bls.n	8003086 <_malloc_r+0x26>
 800307c:	230c      	movs	r3, #12
 800307e:	6033      	str	r3, [r6, #0]
 8003080:	2000      	movs	r0, #0
 8003082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800315c <_malloc_r+0xfc>
 800308a:	f000 f869 	bl	8003160 <__malloc_lock>
 800308e:	f8d8 3000 	ldr.w	r3, [r8]
 8003092:	461c      	mov	r4, r3
 8003094:	bb44      	cbnz	r4, 80030e8 <_malloc_r+0x88>
 8003096:	4629      	mov	r1, r5
 8003098:	4630      	mov	r0, r6
 800309a:	f7ff ffbf 	bl	800301c <sbrk_aligned>
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	4604      	mov	r4, r0
 80030a2:	d158      	bne.n	8003156 <_malloc_r+0xf6>
 80030a4:	f8d8 4000 	ldr.w	r4, [r8]
 80030a8:	4627      	mov	r7, r4
 80030aa:	2f00      	cmp	r7, #0
 80030ac:	d143      	bne.n	8003136 <_malloc_r+0xd6>
 80030ae:	2c00      	cmp	r4, #0
 80030b0:	d04b      	beq.n	800314a <_malloc_r+0xea>
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	4639      	mov	r1, r7
 80030b6:	4630      	mov	r0, r6
 80030b8:	eb04 0903 	add.w	r9, r4, r3
 80030bc:	f000 fb60 	bl	8003780 <_sbrk_r>
 80030c0:	4581      	cmp	r9, r0
 80030c2:	d142      	bne.n	800314a <_malloc_r+0xea>
 80030c4:	6821      	ldr	r1, [r4, #0]
 80030c6:	4630      	mov	r0, r6
 80030c8:	1a6d      	subs	r5, r5, r1
 80030ca:	4629      	mov	r1, r5
 80030cc:	f7ff ffa6 	bl	800301c <sbrk_aligned>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d03a      	beq.n	800314a <_malloc_r+0xea>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	442b      	add	r3, r5
 80030d8:	6023      	str	r3, [r4, #0]
 80030da:	f8d8 3000 	ldr.w	r3, [r8]
 80030de:	685a      	ldr	r2, [r3, #4]
 80030e0:	bb62      	cbnz	r2, 800313c <_malloc_r+0xdc>
 80030e2:	f8c8 7000 	str.w	r7, [r8]
 80030e6:	e00f      	b.n	8003108 <_malloc_r+0xa8>
 80030e8:	6822      	ldr	r2, [r4, #0]
 80030ea:	1b52      	subs	r2, r2, r5
 80030ec:	d420      	bmi.n	8003130 <_malloc_r+0xd0>
 80030ee:	2a0b      	cmp	r2, #11
 80030f0:	d917      	bls.n	8003122 <_malloc_r+0xc2>
 80030f2:	1961      	adds	r1, r4, r5
 80030f4:	42a3      	cmp	r3, r4
 80030f6:	6025      	str	r5, [r4, #0]
 80030f8:	bf18      	it	ne
 80030fa:	6059      	strne	r1, [r3, #4]
 80030fc:	6863      	ldr	r3, [r4, #4]
 80030fe:	bf08      	it	eq
 8003100:	f8c8 1000 	streq.w	r1, [r8]
 8003104:	5162      	str	r2, [r4, r5]
 8003106:	604b      	str	r3, [r1, #4]
 8003108:	4630      	mov	r0, r6
 800310a:	f000 f82f 	bl	800316c <__malloc_unlock>
 800310e:	f104 000b 	add.w	r0, r4, #11
 8003112:	1d23      	adds	r3, r4, #4
 8003114:	f020 0007 	bic.w	r0, r0, #7
 8003118:	1ac2      	subs	r2, r0, r3
 800311a:	bf1c      	itt	ne
 800311c:	1a1b      	subne	r3, r3, r0
 800311e:	50a3      	strne	r3, [r4, r2]
 8003120:	e7af      	b.n	8003082 <_malloc_r+0x22>
 8003122:	6862      	ldr	r2, [r4, #4]
 8003124:	42a3      	cmp	r3, r4
 8003126:	bf0c      	ite	eq
 8003128:	f8c8 2000 	streq.w	r2, [r8]
 800312c:	605a      	strne	r2, [r3, #4]
 800312e:	e7eb      	b.n	8003108 <_malloc_r+0xa8>
 8003130:	4623      	mov	r3, r4
 8003132:	6864      	ldr	r4, [r4, #4]
 8003134:	e7ae      	b.n	8003094 <_malloc_r+0x34>
 8003136:	463c      	mov	r4, r7
 8003138:	687f      	ldr	r7, [r7, #4]
 800313a:	e7b6      	b.n	80030aa <_malloc_r+0x4a>
 800313c:	461a      	mov	r2, r3
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	42a3      	cmp	r3, r4
 8003142:	d1fb      	bne.n	800313c <_malloc_r+0xdc>
 8003144:	2300      	movs	r3, #0
 8003146:	6053      	str	r3, [r2, #4]
 8003148:	e7de      	b.n	8003108 <_malloc_r+0xa8>
 800314a:	230c      	movs	r3, #12
 800314c:	4630      	mov	r0, r6
 800314e:	6033      	str	r3, [r6, #0]
 8003150:	f000 f80c 	bl	800316c <__malloc_unlock>
 8003154:	e794      	b.n	8003080 <_malloc_r+0x20>
 8003156:	6005      	str	r5, [r0, #0]
 8003158:	e7d6      	b.n	8003108 <_malloc_r+0xa8>
 800315a:	bf00      	nop
 800315c:	20000334 	.word	0x20000334

08003160 <__malloc_lock>:
 8003160:	4801      	ldr	r0, [pc, #4]	@ (8003168 <__malloc_lock+0x8>)
 8003162:	f7ff bf11 	b.w	8002f88 <__retarget_lock_acquire_recursive>
 8003166:	bf00      	nop
 8003168:	2000032c 	.word	0x2000032c

0800316c <__malloc_unlock>:
 800316c:	4801      	ldr	r0, [pc, #4]	@ (8003174 <__malloc_unlock+0x8>)
 800316e:	f7ff bf0c 	b.w	8002f8a <__retarget_lock_release_recursive>
 8003172:	bf00      	nop
 8003174:	2000032c 	.word	0x2000032c

08003178 <__ssputs_r>:
 8003178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800317c:	461f      	mov	r7, r3
 800317e:	688e      	ldr	r6, [r1, #8]
 8003180:	4682      	mov	sl, r0
 8003182:	42be      	cmp	r6, r7
 8003184:	460c      	mov	r4, r1
 8003186:	4690      	mov	r8, r2
 8003188:	680b      	ldr	r3, [r1, #0]
 800318a:	d82d      	bhi.n	80031e8 <__ssputs_r+0x70>
 800318c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003190:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003194:	d026      	beq.n	80031e4 <__ssputs_r+0x6c>
 8003196:	6965      	ldr	r5, [r4, #20]
 8003198:	6909      	ldr	r1, [r1, #16]
 800319a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800319e:	eba3 0901 	sub.w	r9, r3, r1
 80031a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031a6:	1c7b      	adds	r3, r7, #1
 80031a8:	444b      	add	r3, r9
 80031aa:	106d      	asrs	r5, r5, #1
 80031ac:	429d      	cmp	r5, r3
 80031ae:	bf38      	it	cc
 80031b0:	461d      	movcc	r5, r3
 80031b2:	0553      	lsls	r3, r2, #21
 80031b4:	d527      	bpl.n	8003206 <__ssputs_r+0x8e>
 80031b6:	4629      	mov	r1, r5
 80031b8:	f7ff ff52 	bl	8003060 <_malloc_r>
 80031bc:	4606      	mov	r6, r0
 80031be:	b360      	cbz	r0, 800321a <__ssputs_r+0xa2>
 80031c0:	464a      	mov	r2, r9
 80031c2:	6921      	ldr	r1, [r4, #16]
 80031c4:	f000 fafa 	bl	80037bc <memcpy>
 80031c8:	89a3      	ldrh	r3, [r4, #12]
 80031ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80031ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031d2:	81a3      	strh	r3, [r4, #12]
 80031d4:	6126      	str	r6, [r4, #16]
 80031d6:	444e      	add	r6, r9
 80031d8:	6026      	str	r6, [r4, #0]
 80031da:	463e      	mov	r6, r7
 80031dc:	6165      	str	r5, [r4, #20]
 80031de:	eba5 0509 	sub.w	r5, r5, r9
 80031e2:	60a5      	str	r5, [r4, #8]
 80031e4:	42be      	cmp	r6, r7
 80031e6:	d900      	bls.n	80031ea <__ssputs_r+0x72>
 80031e8:	463e      	mov	r6, r7
 80031ea:	4632      	mov	r2, r6
 80031ec:	4641      	mov	r1, r8
 80031ee:	6820      	ldr	r0, [r4, #0]
 80031f0:	f000 faac 	bl	800374c <memmove>
 80031f4:	2000      	movs	r0, #0
 80031f6:	68a3      	ldr	r3, [r4, #8]
 80031f8:	1b9b      	subs	r3, r3, r6
 80031fa:	60a3      	str	r3, [r4, #8]
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	4433      	add	r3, r6
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003206:	462a      	mov	r2, r5
 8003208:	f000 fae6 	bl	80037d8 <_realloc_r>
 800320c:	4606      	mov	r6, r0
 800320e:	2800      	cmp	r0, #0
 8003210:	d1e0      	bne.n	80031d4 <__ssputs_r+0x5c>
 8003212:	4650      	mov	r0, sl
 8003214:	6921      	ldr	r1, [r4, #16]
 8003216:	f7ff feb9 	bl	8002f8c <_free_r>
 800321a:	230c      	movs	r3, #12
 800321c:	f8ca 3000 	str.w	r3, [sl]
 8003220:	89a3      	ldrh	r3, [r4, #12]
 8003222:	f04f 30ff 	mov.w	r0, #4294967295
 8003226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800322a:	81a3      	strh	r3, [r4, #12]
 800322c:	e7e9      	b.n	8003202 <__ssputs_r+0x8a>
	...

08003230 <_svfiprintf_r>:
 8003230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003234:	4698      	mov	r8, r3
 8003236:	898b      	ldrh	r3, [r1, #12]
 8003238:	4607      	mov	r7, r0
 800323a:	061b      	lsls	r3, r3, #24
 800323c:	460d      	mov	r5, r1
 800323e:	4614      	mov	r4, r2
 8003240:	b09d      	sub	sp, #116	@ 0x74
 8003242:	d510      	bpl.n	8003266 <_svfiprintf_r+0x36>
 8003244:	690b      	ldr	r3, [r1, #16]
 8003246:	b973      	cbnz	r3, 8003266 <_svfiprintf_r+0x36>
 8003248:	2140      	movs	r1, #64	@ 0x40
 800324a:	f7ff ff09 	bl	8003060 <_malloc_r>
 800324e:	6028      	str	r0, [r5, #0]
 8003250:	6128      	str	r0, [r5, #16]
 8003252:	b930      	cbnz	r0, 8003262 <_svfiprintf_r+0x32>
 8003254:	230c      	movs	r3, #12
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	f04f 30ff 	mov.w	r0, #4294967295
 800325c:	b01d      	add	sp, #116	@ 0x74
 800325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003262:	2340      	movs	r3, #64	@ 0x40
 8003264:	616b      	str	r3, [r5, #20]
 8003266:	2300      	movs	r3, #0
 8003268:	9309      	str	r3, [sp, #36]	@ 0x24
 800326a:	2320      	movs	r3, #32
 800326c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003270:	2330      	movs	r3, #48	@ 0x30
 8003272:	f04f 0901 	mov.w	r9, #1
 8003276:	f8cd 800c 	str.w	r8, [sp, #12]
 800327a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003414 <_svfiprintf_r+0x1e4>
 800327e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003282:	4623      	mov	r3, r4
 8003284:	469a      	mov	sl, r3
 8003286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800328a:	b10a      	cbz	r2, 8003290 <_svfiprintf_r+0x60>
 800328c:	2a25      	cmp	r2, #37	@ 0x25
 800328e:	d1f9      	bne.n	8003284 <_svfiprintf_r+0x54>
 8003290:	ebba 0b04 	subs.w	fp, sl, r4
 8003294:	d00b      	beq.n	80032ae <_svfiprintf_r+0x7e>
 8003296:	465b      	mov	r3, fp
 8003298:	4622      	mov	r2, r4
 800329a:	4629      	mov	r1, r5
 800329c:	4638      	mov	r0, r7
 800329e:	f7ff ff6b 	bl	8003178 <__ssputs_r>
 80032a2:	3001      	adds	r0, #1
 80032a4:	f000 80a7 	beq.w	80033f6 <_svfiprintf_r+0x1c6>
 80032a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032aa:	445a      	add	r2, fp
 80032ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80032ae:	f89a 3000 	ldrb.w	r3, [sl]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 809f 	beq.w	80033f6 <_svfiprintf_r+0x1c6>
 80032b8:	2300      	movs	r3, #0
 80032ba:	f04f 32ff 	mov.w	r2, #4294967295
 80032be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032c2:	f10a 0a01 	add.w	sl, sl, #1
 80032c6:	9304      	str	r3, [sp, #16]
 80032c8:	9307      	str	r3, [sp, #28]
 80032ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80032d0:	4654      	mov	r4, sl
 80032d2:	2205      	movs	r2, #5
 80032d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d8:	484e      	ldr	r0, [pc, #312]	@ (8003414 <_svfiprintf_r+0x1e4>)
 80032da:	f000 fa61 	bl	80037a0 <memchr>
 80032de:	9a04      	ldr	r2, [sp, #16]
 80032e0:	b9d8      	cbnz	r0, 800331a <_svfiprintf_r+0xea>
 80032e2:	06d0      	lsls	r0, r2, #27
 80032e4:	bf44      	itt	mi
 80032e6:	2320      	movmi	r3, #32
 80032e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032ec:	0711      	lsls	r1, r2, #28
 80032ee:	bf44      	itt	mi
 80032f0:	232b      	movmi	r3, #43	@ 0x2b
 80032f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032f6:	f89a 3000 	ldrb.w	r3, [sl]
 80032fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80032fc:	d015      	beq.n	800332a <_svfiprintf_r+0xfa>
 80032fe:	4654      	mov	r4, sl
 8003300:	2000      	movs	r0, #0
 8003302:	f04f 0c0a 	mov.w	ip, #10
 8003306:	9a07      	ldr	r2, [sp, #28]
 8003308:	4621      	mov	r1, r4
 800330a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800330e:	3b30      	subs	r3, #48	@ 0x30
 8003310:	2b09      	cmp	r3, #9
 8003312:	d94b      	bls.n	80033ac <_svfiprintf_r+0x17c>
 8003314:	b1b0      	cbz	r0, 8003344 <_svfiprintf_r+0x114>
 8003316:	9207      	str	r2, [sp, #28]
 8003318:	e014      	b.n	8003344 <_svfiprintf_r+0x114>
 800331a:	eba0 0308 	sub.w	r3, r0, r8
 800331e:	fa09 f303 	lsl.w	r3, r9, r3
 8003322:	4313      	orrs	r3, r2
 8003324:	46a2      	mov	sl, r4
 8003326:	9304      	str	r3, [sp, #16]
 8003328:	e7d2      	b.n	80032d0 <_svfiprintf_r+0xa0>
 800332a:	9b03      	ldr	r3, [sp, #12]
 800332c:	1d19      	adds	r1, r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	9103      	str	r1, [sp, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	bfbb      	ittet	lt
 8003336:	425b      	neglt	r3, r3
 8003338:	f042 0202 	orrlt.w	r2, r2, #2
 800333c:	9307      	strge	r3, [sp, #28]
 800333e:	9307      	strlt	r3, [sp, #28]
 8003340:	bfb8      	it	lt
 8003342:	9204      	strlt	r2, [sp, #16]
 8003344:	7823      	ldrb	r3, [r4, #0]
 8003346:	2b2e      	cmp	r3, #46	@ 0x2e
 8003348:	d10a      	bne.n	8003360 <_svfiprintf_r+0x130>
 800334a:	7863      	ldrb	r3, [r4, #1]
 800334c:	2b2a      	cmp	r3, #42	@ 0x2a
 800334e:	d132      	bne.n	80033b6 <_svfiprintf_r+0x186>
 8003350:	9b03      	ldr	r3, [sp, #12]
 8003352:	3402      	adds	r4, #2
 8003354:	1d1a      	adds	r2, r3, #4
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	9203      	str	r2, [sp, #12]
 800335a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800335e:	9305      	str	r3, [sp, #20]
 8003360:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003418 <_svfiprintf_r+0x1e8>
 8003364:	2203      	movs	r2, #3
 8003366:	4650      	mov	r0, sl
 8003368:	7821      	ldrb	r1, [r4, #0]
 800336a:	f000 fa19 	bl	80037a0 <memchr>
 800336e:	b138      	cbz	r0, 8003380 <_svfiprintf_r+0x150>
 8003370:	2240      	movs	r2, #64	@ 0x40
 8003372:	9b04      	ldr	r3, [sp, #16]
 8003374:	eba0 000a 	sub.w	r0, r0, sl
 8003378:	4082      	lsls	r2, r0
 800337a:	4313      	orrs	r3, r2
 800337c:	3401      	adds	r4, #1
 800337e:	9304      	str	r3, [sp, #16]
 8003380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003384:	2206      	movs	r2, #6
 8003386:	4825      	ldr	r0, [pc, #148]	@ (800341c <_svfiprintf_r+0x1ec>)
 8003388:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800338c:	f000 fa08 	bl	80037a0 <memchr>
 8003390:	2800      	cmp	r0, #0
 8003392:	d036      	beq.n	8003402 <_svfiprintf_r+0x1d2>
 8003394:	4b22      	ldr	r3, [pc, #136]	@ (8003420 <_svfiprintf_r+0x1f0>)
 8003396:	bb1b      	cbnz	r3, 80033e0 <_svfiprintf_r+0x1b0>
 8003398:	9b03      	ldr	r3, [sp, #12]
 800339a:	3307      	adds	r3, #7
 800339c:	f023 0307 	bic.w	r3, r3, #7
 80033a0:	3308      	adds	r3, #8
 80033a2:	9303      	str	r3, [sp, #12]
 80033a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033a6:	4433      	add	r3, r6
 80033a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80033aa:	e76a      	b.n	8003282 <_svfiprintf_r+0x52>
 80033ac:	460c      	mov	r4, r1
 80033ae:	2001      	movs	r0, #1
 80033b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80033b4:	e7a8      	b.n	8003308 <_svfiprintf_r+0xd8>
 80033b6:	2300      	movs	r3, #0
 80033b8:	f04f 0c0a 	mov.w	ip, #10
 80033bc:	4619      	mov	r1, r3
 80033be:	3401      	adds	r4, #1
 80033c0:	9305      	str	r3, [sp, #20]
 80033c2:	4620      	mov	r0, r4
 80033c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033c8:	3a30      	subs	r2, #48	@ 0x30
 80033ca:	2a09      	cmp	r2, #9
 80033cc:	d903      	bls.n	80033d6 <_svfiprintf_r+0x1a6>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c6      	beq.n	8003360 <_svfiprintf_r+0x130>
 80033d2:	9105      	str	r1, [sp, #20]
 80033d4:	e7c4      	b.n	8003360 <_svfiprintf_r+0x130>
 80033d6:	4604      	mov	r4, r0
 80033d8:	2301      	movs	r3, #1
 80033da:	fb0c 2101 	mla	r1, ip, r1, r2
 80033de:	e7f0      	b.n	80033c2 <_svfiprintf_r+0x192>
 80033e0:	ab03      	add	r3, sp, #12
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	462a      	mov	r2, r5
 80033e6:	4638      	mov	r0, r7
 80033e8:	4b0e      	ldr	r3, [pc, #56]	@ (8003424 <_svfiprintf_r+0x1f4>)
 80033ea:	a904      	add	r1, sp, #16
 80033ec:	f3af 8000 	nop.w
 80033f0:	1c42      	adds	r2, r0, #1
 80033f2:	4606      	mov	r6, r0
 80033f4:	d1d6      	bne.n	80033a4 <_svfiprintf_r+0x174>
 80033f6:	89ab      	ldrh	r3, [r5, #12]
 80033f8:	065b      	lsls	r3, r3, #25
 80033fa:	f53f af2d 	bmi.w	8003258 <_svfiprintf_r+0x28>
 80033fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003400:	e72c      	b.n	800325c <_svfiprintf_r+0x2c>
 8003402:	ab03      	add	r3, sp, #12
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	462a      	mov	r2, r5
 8003408:	4638      	mov	r0, r7
 800340a:	4b06      	ldr	r3, [pc, #24]	@ (8003424 <_svfiprintf_r+0x1f4>)
 800340c:	a904      	add	r1, sp, #16
 800340e:	f000 f87d 	bl	800350c <_printf_i>
 8003412:	e7ed      	b.n	80033f0 <_svfiprintf_r+0x1c0>
 8003414:	080038b2 	.word	0x080038b2
 8003418:	080038b8 	.word	0x080038b8
 800341c:	080038bc 	.word	0x080038bc
 8003420:	00000000 	.word	0x00000000
 8003424:	08003179 	.word	0x08003179

08003428 <_printf_common>:
 8003428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800342c:	4616      	mov	r6, r2
 800342e:	4698      	mov	r8, r3
 8003430:	688a      	ldr	r2, [r1, #8]
 8003432:	690b      	ldr	r3, [r1, #16]
 8003434:	4607      	mov	r7, r0
 8003436:	4293      	cmp	r3, r2
 8003438:	bfb8      	it	lt
 800343a:	4613      	movlt	r3, r2
 800343c:	6033      	str	r3, [r6, #0]
 800343e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003442:	460c      	mov	r4, r1
 8003444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003448:	b10a      	cbz	r2, 800344e <_printf_common+0x26>
 800344a:	3301      	adds	r3, #1
 800344c:	6033      	str	r3, [r6, #0]
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	0699      	lsls	r1, r3, #26
 8003452:	bf42      	ittt	mi
 8003454:	6833      	ldrmi	r3, [r6, #0]
 8003456:	3302      	addmi	r3, #2
 8003458:	6033      	strmi	r3, [r6, #0]
 800345a:	6825      	ldr	r5, [r4, #0]
 800345c:	f015 0506 	ands.w	r5, r5, #6
 8003460:	d106      	bne.n	8003470 <_printf_common+0x48>
 8003462:	f104 0a19 	add.w	sl, r4, #25
 8003466:	68e3      	ldr	r3, [r4, #12]
 8003468:	6832      	ldr	r2, [r6, #0]
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	42ab      	cmp	r3, r5
 800346e:	dc2b      	bgt.n	80034c8 <_printf_common+0xa0>
 8003470:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003474:	6822      	ldr	r2, [r4, #0]
 8003476:	3b00      	subs	r3, #0
 8003478:	bf18      	it	ne
 800347a:	2301      	movne	r3, #1
 800347c:	0692      	lsls	r2, r2, #26
 800347e:	d430      	bmi.n	80034e2 <_printf_common+0xba>
 8003480:	4641      	mov	r1, r8
 8003482:	4638      	mov	r0, r7
 8003484:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003488:	47c8      	blx	r9
 800348a:	3001      	adds	r0, #1
 800348c:	d023      	beq.n	80034d6 <_printf_common+0xae>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	6922      	ldr	r2, [r4, #16]
 8003492:	f003 0306 	and.w	r3, r3, #6
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf14      	ite	ne
 800349a:	2500      	movne	r5, #0
 800349c:	6833      	ldreq	r3, [r6, #0]
 800349e:	f04f 0600 	mov.w	r6, #0
 80034a2:	bf08      	it	eq
 80034a4:	68e5      	ldreq	r5, [r4, #12]
 80034a6:	f104 041a 	add.w	r4, r4, #26
 80034aa:	bf08      	it	eq
 80034ac:	1aed      	subeq	r5, r5, r3
 80034ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034b2:	bf08      	it	eq
 80034b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034b8:	4293      	cmp	r3, r2
 80034ba:	bfc4      	itt	gt
 80034bc:	1a9b      	subgt	r3, r3, r2
 80034be:	18ed      	addgt	r5, r5, r3
 80034c0:	42b5      	cmp	r5, r6
 80034c2:	d11a      	bne.n	80034fa <_printf_common+0xd2>
 80034c4:	2000      	movs	r0, #0
 80034c6:	e008      	b.n	80034da <_printf_common+0xb2>
 80034c8:	2301      	movs	r3, #1
 80034ca:	4652      	mov	r2, sl
 80034cc:	4641      	mov	r1, r8
 80034ce:	4638      	mov	r0, r7
 80034d0:	47c8      	blx	r9
 80034d2:	3001      	adds	r0, #1
 80034d4:	d103      	bne.n	80034de <_printf_common+0xb6>
 80034d6:	f04f 30ff 	mov.w	r0, #4294967295
 80034da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034de:	3501      	adds	r5, #1
 80034e0:	e7c1      	b.n	8003466 <_printf_common+0x3e>
 80034e2:	2030      	movs	r0, #48	@ 0x30
 80034e4:	18e1      	adds	r1, r4, r3
 80034e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034f0:	4422      	add	r2, r4
 80034f2:	3302      	adds	r3, #2
 80034f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034f8:	e7c2      	b.n	8003480 <_printf_common+0x58>
 80034fa:	2301      	movs	r3, #1
 80034fc:	4622      	mov	r2, r4
 80034fe:	4641      	mov	r1, r8
 8003500:	4638      	mov	r0, r7
 8003502:	47c8      	blx	r9
 8003504:	3001      	adds	r0, #1
 8003506:	d0e6      	beq.n	80034d6 <_printf_common+0xae>
 8003508:	3601      	adds	r6, #1
 800350a:	e7d9      	b.n	80034c0 <_printf_common+0x98>

0800350c <_printf_i>:
 800350c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003510:	7e0f      	ldrb	r7, [r1, #24]
 8003512:	4691      	mov	r9, r2
 8003514:	2f78      	cmp	r7, #120	@ 0x78
 8003516:	4680      	mov	r8, r0
 8003518:	460c      	mov	r4, r1
 800351a:	469a      	mov	sl, r3
 800351c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800351e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003522:	d807      	bhi.n	8003534 <_printf_i+0x28>
 8003524:	2f62      	cmp	r7, #98	@ 0x62
 8003526:	d80a      	bhi.n	800353e <_printf_i+0x32>
 8003528:	2f00      	cmp	r7, #0
 800352a:	f000 80d3 	beq.w	80036d4 <_printf_i+0x1c8>
 800352e:	2f58      	cmp	r7, #88	@ 0x58
 8003530:	f000 80ba 	beq.w	80036a8 <_printf_i+0x19c>
 8003534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800353c:	e03a      	b.n	80035b4 <_printf_i+0xa8>
 800353e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003542:	2b15      	cmp	r3, #21
 8003544:	d8f6      	bhi.n	8003534 <_printf_i+0x28>
 8003546:	a101      	add	r1, pc, #4	@ (adr r1, 800354c <_printf_i+0x40>)
 8003548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035b9 	.word	0x080035b9
 8003554:	08003535 	.word	0x08003535
 8003558:	08003535 	.word	0x08003535
 800355c:	08003535 	.word	0x08003535
 8003560:	08003535 	.word	0x08003535
 8003564:	080035b9 	.word	0x080035b9
 8003568:	08003535 	.word	0x08003535
 800356c:	08003535 	.word	0x08003535
 8003570:	08003535 	.word	0x08003535
 8003574:	08003535 	.word	0x08003535
 8003578:	080036bb 	.word	0x080036bb
 800357c:	080035e3 	.word	0x080035e3
 8003580:	08003675 	.word	0x08003675
 8003584:	08003535 	.word	0x08003535
 8003588:	08003535 	.word	0x08003535
 800358c:	080036dd 	.word	0x080036dd
 8003590:	08003535 	.word	0x08003535
 8003594:	080035e3 	.word	0x080035e3
 8003598:	08003535 	.word	0x08003535
 800359c:	08003535 	.word	0x08003535
 80035a0:	0800367d 	.word	0x0800367d
 80035a4:	6833      	ldr	r3, [r6, #0]
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6032      	str	r2, [r6, #0]
 80035ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035b4:	2301      	movs	r3, #1
 80035b6:	e09e      	b.n	80036f6 <_printf_i+0x1ea>
 80035b8:	6833      	ldr	r3, [r6, #0]
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	1d19      	adds	r1, r3, #4
 80035be:	6031      	str	r1, [r6, #0]
 80035c0:	0606      	lsls	r6, r0, #24
 80035c2:	d501      	bpl.n	80035c8 <_printf_i+0xbc>
 80035c4:	681d      	ldr	r5, [r3, #0]
 80035c6:	e003      	b.n	80035d0 <_printf_i+0xc4>
 80035c8:	0645      	lsls	r5, r0, #25
 80035ca:	d5fb      	bpl.n	80035c4 <_printf_i+0xb8>
 80035cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035d0:	2d00      	cmp	r5, #0
 80035d2:	da03      	bge.n	80035dc <_printf_i+0xd0>
 80035d4:	232d      	movs	r3, #45	@ 0x2d
 80035d6:	426d      	negs	r5, r5
 80035d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035dc:	230a      	movs	r3, #10
 80035de:	4859      	ldr	r0, [pc, #356]	@ (8003744 <_printf_i+0x238>)
 80035e0:	e011      	b.n	8003606 <_printf_i+0xfa>
 80035e2:	6821      	ldr	r1, [r4, #0]
 80035e4:	6833      	ldr	r3, [r6, #0]
 80035e6:	0608      	lsls	r0, r1, #24
 80035e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035ec:	d402      	bmi.n	80035f4 <_printf_i+0xe8>
 80035ee:	0649      	lsls	r1, r1, #25
 80035f0:	bf48      	it	mi
 80035f2:	b2ad      	uxthmi	r5, r5
 80035f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80035f6:	6033      	str	r3, [r6, #0]
 80035f8:	bf14      	ite	ne
 80035fa:	230a      	movne	r3, #10
 80035fc:	2308      	moveq	r3, #8
 80035fe:	4851      	ldr	r0, [pc, #324]	@ (8003744 <_printf_i+0x238>)
 8003600:	2100      	movs	r1, #0
 8003602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003606:	6866      	ldr	r6, [r4, #4]
 8003608:	2e00      	cmp	r6, #0
 800360a:	bfa8      	it	ge
 800360c:	6821      	ldrge	r1, [r4, #0]
 800360e:	60a6      	str	r6, [r4, #8]
 8003610:	bfa4      	itt	ge
 8003612:	f021 0104 	bicge.w	r1, r1, #4
 8003616:	6021      	strge	r1, [r4, #0]
 8003618:	b90d      	cbnz	r5, 800361e <_printf_i+0x112>
 800361a:	2e00      	cmp	r6, #0
 800361c:	d04b      	beq.n	80036b6 <_printf_i+0x1aa>
 800361e:	4616      	mov	r6, r2
 8003620:	fbb5 f1f3 	udiv	r1, r5, r3
 8003624:	fb03 5711 	mls	r7, r3, r1, r5
 8003628:	5dc7      	ldrb	r7, [r0, r7]
 800362a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800362e:	462f      	mov	r7, r5
 8003630:	42bb      	cmp	r3, r7
 8003632:	460d      	mov	r5, r1
 8003634:	d9f4      	bls.n	8003620 <_printf_i+0x114>
 8003636:	2b08      	cmp	r3, #8
 8003638:	d10b      	bne.n	8003652 <_printf_i+0x146>
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	07df      	lsls	r7, r3, #31
 800363e:	d508      	bpl.n	8003652 <_printf_i+0x146>
 8003640:	6923      	ldr	r3, [r4, #16]
 8003642:	6861      	ldr	r1, [r4, #4]
 8003644:	4299      	cmp	r1, r3
 8003646:	bfde      	ittt	le
 8003648:	2330      	movle	r3, #48	@ 0x30
 800364a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800364e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003652:	1b92      	subs	r2, r2, r6
 8003654:	6122      	str	r2, [r4, #16]
 8003656:	464b      	mov	r3, r9
 8003658:	4621      	mov	r1, r4
 800365a:	4640      	mov	r0, r8
 800365c:	f8cd a000 	str.w	sl, [sp]
 8003660:	aa03      	add	r2, sp, #12
 8003662:	f7ff fee1 	bl	8003428 <_printf_common>
 8003666:	3001      	adds	r0, #1
 8003668:	d14a      	bne.n	8003700 <_printf_i+0x1f4>
 800366a:	f04f 30ff 	mov.w	r0, #4294967295
 800366e:	b004      	add	sp, #16
 8003670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	f043 0320 	orr.w	r3, r3, #32
 800367a:	6023      	str	r3, [r4, #0]
 800367c:	2778      	movs	r7, #120	@ 0x78
 800367e:	4832      	ldr	r0, [pc, #200]	@ (8003748 <_printf_i+0x23c>)
 8003680:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	6831      	ldr	r1, [r6, #0]
 8003688:	061f      	lsls	r7, r3, #24
 800368a:	f851 5b04 	ldr.w	r5, [r1], #4
 800368e:	d402      	bmi.n	8003696 <_printf_i+0x18a>
 8003690:	065f      	lsls	r7, r3, #25
 8003692:	bf48      	it	mi
 8003694:	b2ad      	uxthmi	r5, r5
 8003696:	6031      	str	r1, [r6, #0]
 8003698:	07d9      	lsls	r1, r3, #31
 800369a:	bf44      	itt	mi
 800369c:	f043 0320 	orrmi.w	r3, r3, #32
 80036a0:	6023      	strmi	r3, [r4, #0]
 80036a2:	b11d      	cbz	r5, 80036ac <_printf_i+0x1a0>
 80036a4:	2310      	movs	r3, #16
 80036a6:	e7ab      	b.n	8003600 <_printf_i+0xf4>
 80036a8:	4826      	ldr	r0, [pc, #152]	@ (8003744 <_printf_i+0x238>)
 80036aa:	e7e9      	b.n	8003680 <_printf_i+0x174>
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	6023      	str	r3, [r4, #0]
 80036b4:	e7f6      	b.n	80036a4 <_printf_i+0x198>
 80036b6:	4616      	mov	r6, r2
 80036b8:	e7bd      	b.n	8003636 <_printf_i+0x12a>
 80036ba:	6833      	ldr	r3, [r6, #0]
 80036bc:	6825      	ldr	r5, [r4, #0]
 80036be:	1d18      	adds	r0, r3, #4
 80036c0:	6961      	ldr	r1, [r4, #20]
 80036c2:	6030      	str	r0, [r6, #0]
 80036c4:	062e      	lsls	r6, r5, #24
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	d501      	bpl.n	80036ce <_printf_i+0x1c2>
 80036ca:	6019      	str	r1, [r3, #0]
 80036cc:	e002      	b.n	80036d4 <_printf_i+0x1c8>
 80036ce:	0668      	lsls	r0, r5, #25
 80036d0:	d5fb      	bpl.n	80036ca <_printf_i+0x1be>
 80036d2:	8019      	strh	r1, [r3, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	4616      	mov	r6, r2
 80036d8:	6123      	str	r3, [r4, #16]
 80036da:	e7bc      	b.n	8003656 <_printf_i+0x14a>
 80036dc:	6833      	ldr	r3, [r6, #0]
 80036de:	2100      	movs	r1, #0
 80036e0:	1d1a      	adds	r2, r3, #4
 80036e2:	6032      	str	r2, [r6, #0]
 80036e4:	681e      	ldr	r6, [r3, #0]
 80036e6:	6862      	ldr	r2, [r4, #4]
 80036e8:	4630      	mov	r0, r6
 80036ea:	f000 f859 	bl	80037a0 <memchr>
 80036ee:	b108      	cbz	r0, 80036f4 <_printf_i+0x1e8>
 80036f0:	1b80      	subs	r0, r0, r6
 80036f2:	6060      	str	r0, [r4, #4]
 80036f4:	6863      	ldr	r3, [r4, #4]
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	2300      	movs	r3, #0
 80036fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036fe:	e7aa      	b.n	8003656 <_printf_i+0x14a>
 8003700:	4632      	mov	r2, r6
 8003702:	4649      	mov	r1, r9
 8003704:	4640      	mov	r0, r8
 8003706:	6923      	ldr	r3, [r4, #16]
 8003708:	47d0      	blx	sl
 800370a:	3001      	adds	r0, #1
 800370c:	d0ad      	beq.n	800366a <_printf_i+0x15e>
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	079b      	lsls	r3, r3, #30
 8003712:	d413      	bmi.n	800373c <_printf_i+0x230>
 8003714:	68e0      	ldr	r0, [r4, #12]
 8003716:	9b03      	ldr	r3, [sp, #12]
 8003718:	4298      	cmp	r0, r3
 800371a:	bfb8      	it	lt
 800371c:	4618      	movlt	r0, r3
 800371e:	e7a6      	b.n	800366e <_printf_i+0x162>
 8003720:	2301      	movs	r3, #1
 8003722:	4632      	mov	r2, r6
 8003724:	4649      	mov	r1, r9
 8003726:	4640      	mov	r0, r8
 8003728:	47d0      	blx	sl
 800372a:	3001      	adds	r0, #1
 800372c:	d09d      	beq.n	800366a <_printf_i+0x15e>
 800372e:	3501      	adds	r5, #1
 8003730:	68e3      	ldr	r3, [r4, #12]
 8003732:	9903      	ldr	r1, [sp, #12]
 8003734:	1a5b      	subs	r3, r3, r1
 8003736:	42ab      	cmp	r3, r5
 8003738:	dcf2      	bgt.n	8003720 <_printf_i+0x214>
 800373a:	e7eb      	b.n	8003714 <_printf_i+0x208>
 800373c:	2500      	movs	r5, #0
 800373e:	f104 0619 	add.w	r6, r4, #25
 8003742:	e7f5      	b.n	8003730 <_printf_i+0x224>
 8003744:	080038c3 	.word	0x080038c3
 8003748:	080038d4 	.word	0x080038d4

0800374c <memmove>:
 800374c:	4288      	cmp	r0, r1
 800374e:	b510      	push	{r4, lr}
 8003750:	eb01 0402 	add.w	r4, r1, r2
 8003754:	d902      	bls.n	800375c <memmove+0x10>
 8003756:	4284      	cmp	r4, r0
 8003758:	4623      	mov	r3, r4
 800375a:	d807      	bhi.n	800376c <memmove+0x20>
 800375c:	1e43      	subs	r3, r0, #1
 800375e:	42a1      	cmp	r1, r4
 8003760:	d008      	beq.n	8003774 <memmove+0x28>
 8003762:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003766:	f803 2f01 	strb.w	r2, [r3, #1]!
 800376a:	e7f8      	b.n	800375e <memmove+0x12>
 800376c:	4601      	mov	r1, r0
 800376e:	4402      	add	r2, r0
 8003770:	428a      	cmp	r2, r1
 8003772:	d100      	bne.n	8003776 <memmove+0x2a>
 8003774:	bd10      	pop	{r4, pc}
 8003776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800377a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800377e:	e7f7      	b.n	8003770 <memmove+0x24>

08003780 <_sbrk_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	2300      	movs	r3, #0
 8003784:	4d05      	ldr	r5, [pc, #20]	@ (800379c <_sbrk_r+0x1c>)
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	602b      	str	r3, [r5, #0]
 800378c:	f7fc ffb0 	bl	80006f0 <_sbrk>
 8003790:	1c43      	adds	r3, r0, #1
 8003792:	d102      	bne.n	800379a <_sbrk_r+0x1a>
 8003794:	682b      	ldr	r3, [r5, #0]
 8003796:	b103      	cbz	r3, 800379a <_sbrk_r+0x1a>
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	20000328 	.word	0x20000328

080037a0 <memchr>:
 80037a0:	4603      	mov	r3, r0
 80037a2:	b510      	push	{r4, lr}
 80037a4:	b2c9      	uxtb	r1, r1
 80037a6:	4402      	add	r2, r0
 80037a8:	4293      	cmp	r3, r2
 80037aa:	4618      	mov	r0, r3
 80037ac:	d101      	bne.n	80037b2 <memchr+0x12>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e003      	b.n	80037ba <memchr+0x1a>
 80037b2:	7804      	ldrb	r4, [r0, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	428c      	cmp	r4, r1
 80037b8:	d1f6      	bne.n	80037a8 <memchr+0x8>
 80037ba:	bd10      	pop	{r4, pc}

080037bc <memcpy>:
 80037bc:	440a      	add	r2, r1
 80037be:	4291      	cmp	r1, r2
 80037c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037c4:	d100      	bne.n	80037c8 <memcpy+0xc>
 80037c6:	4770      	bx	lr
 80037c8:	b510      	push	{r4, lr}
 80037ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ce:	4291      	cmp	r1, r2
 80037d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037d4:	d1f9      	bne.n	80037ca <memcpy+0xe>
 80037d6:	bd10      	pop	{r4, pc}

080037d8 <_realloc_r>:
 80037d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037dc:	4680      	mov	r8, r0
 80037de:	4615      	mov	r5, r2
 80037e0:	460c      	mov	r4, r1
 80037e2:	b921      	cbnz	r1, 80037ee <_realloc_r+0x16>
 80037e4:	4611      	mov	r1, r2
 80037e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ea:	f7ff bc39 	b.w	8003060 <_malloc_r>
 80037ee:	b92a      	cbnz	r2, 80037fc <_realloc_r+0x24>
 80037f0:	f7ff fbcc 	bl	8002f8c <_free_r>
 80037f4:	2400      	movs	r4, #0
 80037f6:	4620      	mov	r0, r4
 80037f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037fc:	f000 f81a 	bl	8003834 <_malloc_usable_size_r>
 8003800:	4285      	cmp	r5, r0
 8003802:	4606      	mov	r6, r0
 8003804:	d802      	bhi.n	800380c <_realloc_r+0x34>
 8003806:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800380a:	d8f4      	bhi.n	80037f6 <_realloc_r+0x1e>
 800380c:	4629      	mov	r1, r5
 800380e:	4640      	mov	r0, r8
 8003810:	f7ff fc26 	bl	8003060 <_malloc_r>
 8003814:	4607      	mov	r7, r0
 8003816:	2800      	cmp	r0, #0
 8003818:	d0ec      	beq.n	80037f4 <_realloc_r+0x1c>
 800381a:	42b5      	cmp	r5, r6
 800381c:	462a      	mov	r2, r5
 800381e:	4621      	mov	r1, r4
 8003820:	bf28      	it	cs
 8003822:	4632      	movcs	r2, r6
 8003824:	f7ff ffca 	bl	80037bc <memcpy>
 8003828:	4621      	mov	r1, r4
 800382a:	4640      	mov	r0, r8
 800382c:	f7ff fbae 	bl	8002f8c <_free_r>
 8003830:	463c      	mov	r4, r7
 8003832:	e7e0      	b.n	80037f6 <_realloc_r+0x1e>

08003834 <_malloc_usable_size_r>:
 8003834:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003838:	1f18      	subs	r0, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	bfbc      	itt	lt
 800383e:	580b      	ldrlt	r3, [r1, r0]
 8003840:	18c0      	addlt	r0, r0, r3
 8003842:	4770      	bx	lr

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
